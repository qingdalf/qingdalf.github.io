[{"title":"docker开篇：容器","date":"2021-05-03T03:27:45.000Z","path":"/dockerPre","content":"<h3 id=\"1-1什么是容器？\"><a href=\"#1-1什么是容器？\" class=\"headerlink\" title=\"1.1什么是容器？\"></a>1.1什么是容器？</h3><p>​        容器技术是一种<strong>虚拟化的方案</strong>。容器虚拟化也就是操作系统级别的虚拟化，只能运行相同或相似内核的操作系统(也就是说一个基于ubuntu的容器能够运行在centos之上)。Docker使用的容器技术依赖于Linux内核的<strong>Namespaces</strong>和<strong>Cgroups</strong>，这两个技术就是为了让操作系统<strong>资源被区隔成独立区间</strong>。</p>\n<p>Docker依赖的<strong>Linux内核特性</strong>：</p>\n<ul>\n<li>Namespaces：命名空间</li>\n<li>Controller groups（cgroups）：控制组</li>\n</ul>\n<h4 id=\"1-1-1-NameSpace\"><a href=\"#1-1-1-NameSpace\" class=\"headerlink\" title=\"1.1.1 NameSpace\"></a>1.1.1 <strong>NameSpace</strong></h4><p>​        为确保提供的是<strong>轻量级虚拟化服务</strong>，Docker使用了NameSpace。<strong>命名空间提供了系统资源的隔离，资源包括进程、网络、文件系统等。</strong></p>\n<p>​        在同一个Namespace下的进程可以<strong>感知彼此的变化</strong>，而对其他的Namespace一无所知。让容器置身于独立的系统环境中。</p>\n<p>Namespace的种类 ：</p>\n<ul>\n<li>PID（Process ID） ：进程隔离</li>\n<li>NET（Network） ：管理网络接口</li>\n<li>IPC（InterProcess Communication） ：管理跨进程通信的访问</li>\n<li>MNT（Mount） ：管理挂载点</li>\n<li>UTS（Unix Timesharing System） ：隔离内核和版本标识</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ll  /proc/$$/ns   <span class=\"comment\"># $$表示当前进程的id，即1，systemd进程</span></span></span><br><span class=\"line\">total 0</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 Mar 31 22:48 ipc -&gt; ipc:[4026531839]</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 Mar 31 22:48 mnt -&gt; mnt:[4026531840]</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 Mar 31 22:48 net -&gt; net:[4026531956]</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 Mar 31 22:48 pid -&gt; pid:[4026531836]</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 Mar 31 22:48 user -&gt; user:[4026531837]</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 Mar 31 22:48 uts -&gt; uts:[4026531838]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-1-2-Controller-groups\"><a href=\"#1-1-2-Controller-groups\" class=\"headerlink\" title=\"1.1.2 Controller groups\"></a>1.1.2 <strong>Controller groups</strong></h4><p>​        <strong>cgroups是一种Linux提供用于限制、控制、管理资源的机制</strong>，所有的任务就是运行在系统中的一个进程，而Cgroups以某种标准将一组进程为目标进行资源分配和控制，例如cpu、内存、带宽等，并且可以动态配置。</p>\n<p>cgroups的主要功能：</p>\n<ul>\n<li><strong>资源限制</strong>(Resource limitation)：可以为进程组设定资源使用上限。</li>\n<li><strong>优先级设定</strong>(Prioritization)：哪些进程组使用更多的资源，可以为进程组分配特定的CPU、磁盘IO吞吐量等。</li>\n<li><strong>资源计量</strong>(Accounting)：记录进程组使用资源的数量–统计。</li>\n<li><strong>进程组控制</strong>(Control)：能够将进程组挂起和恢复。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ll  /sys/fs/cgroup/   <span class=\"comment\"># cgroup执行的资源限制</span></span></span><br><span class=\"line\">total 0</span><br><span class=\"line\">drwxr-xr-x 4 root root  0 Apr  1 10:59 blkio     # 对块设备的io进行限制</span><br><span class=\"line\">lrwxrwxrwx 1 root root 11 Apr  1 10:59 cpu -&gt; cpu,cpuacct   # 限制cpu时间片的分配，与cpuacct挂载同一目录</span><br><span class=\"line\">lrwxrwxrwx 1 root root 11 Apr  1 10:59 cpuacct -&gt; cpu,cpuacct   </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 生产cgroup中的任务占用cpu资源的报告，与cpu挂载同一目录</span></span><br><span class=\"line\">drwxr-xr-x 4 root root  0 Apr  1 10:59 cpu,cpuacct   </span><br><span class=\"line\">drwxr-xr-x 2 root root  0 Apr  1 10:59 cpuset    # 给cgroup的任务分配独立的cpu和内存节点</span><br><span class=\"line\">drwxr-xr-x 4 root root  0 Apr  1 10:59 devices   # 允许或者拒绝cgroup中的任务访问设备</span><br><span class=\"line\">drwxr-xr-x 2 root root  0 Apr  1 10:59 freezer   # 暂停/恢复cgroup中的任务</span><br><span class=\"line\">drwxr-xr-x 2 root root  0 Apr  1 10:59 hugetlb   # 限制使用的内存页数量</span><br><span class=\"line\">drwxr-xr-x 4 root root  0 Apr  1 10:59 memory    # 对cgroup中任务的可用内存进行限制，并自动生产资源占用报告</span><br><span class=\"line\">lrwxrwxrwx 1 root root 16 Apr  1 10:59 net_cls -&gt; net_cls,net_prio   # 使用等级识别符(classid)标记网络数据包，这让Linux流量控制程序(tc)可以识别来自特定从cgroup任务的数据包，并进行网络限制</span><br><span class=\"line\">drwxr-xr-x 2 root root  0 Apr  1 10:59 net_cls,net_prio  </span><br><span class=\"line\">lrwxrwxrwx 1 root root 16 Apr  1 10:59 net_prio -&gt; net_cls,net_prio  # 允许基于cgroup设置网络流量的优先级</span><br><span class=\"line\">drwxr-xr-x 2 root root  0 Apr  1 10:59 perf_event   # 运行使用perf工具来监控cgroup</span><br><span class=\"line\">drwxr-xr-x 4 root root  0 Apr  1 10:59 pids    # 限制任务的数量</span><br><span class=\"line\">drwxr-xr-x 4 root root  0 Apr  1 10:59 systemd</span><br></pre></td></tr></table></figure>\n\n<p>​        容器实际资源限制文件路径：/sys/fs/cgroup/&lt;资源名&gt;/docker/&lt;容器id&gt;</p>\n<p>​        cgroup为每个容器都创建了相应的限制目录，<strong>直接修改容器目录中的资源限制类型就能达到限制容器使用资源的目标</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker container ls</span> </span><br><span class=\"line\">CONTAINER ID   IMAGE  COMMAND                  CREATED        STATUS              PORTS     NAMES</span><br><span class=\"line\">dc6d2297d670   nginx  &quot;/docker-entrypoint.…&quot;   15 hours ago   Up About a minute   80/tcp vibrant_hawking</span><br><span class=\"line\">60ffca766bde   f1cb7c7d58b7   &quot;bash&quot;                   6 weeks ago    Up About a minute             c1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cpu目录下的资源限制文件，跟/sys/fs/cgroup/cpu/下的内容大同小异</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls /sys/fs/cgroup/cpu/docker/   <span class=\"comment\"># 下面的dc6d2297d670和60ffca766bde就是正在运行的两个容器</span></span></span><br><span class=\"line\">60ffca766bdea3ba772bc8fff9e15a5b569d213d06980f1cb56b0d50a66315cf  cpuacct.usage_percpu  cpu.stat</span><br><span class=\"line\">cgroup.clone_children                                             cpu.cfs_period_us     dc6d2297d670ff91bc2dc1fe0e1f7c38563d6f0279a26e4664d7c87ec96ea86b</span><br><span class=\"line\">cgroup.event_control                                              cpu.cfs_quota_us      notify_on_release</span><br><span class=\"line\">cgroup.procs                                                      cpu.rt_period_us      tasks</span><br><span class=\"line\">cpuacct.stat                                                      cpu.rt_runtime_us</span><br><span class=\"line\">cpuacct.usage                                                     cpu.shares</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls   /sys/fs/cgroup/cpu/docker/dc6d2297d670ff91bc2dc1fe0e1f7c38563d6f0279a26e4664d7c87ec96ea86b/</span></span><br><span class=\"line\">cgroup.clone_children  cgroup.procs  cpuacct.usage         cpu.cfs_period_us  cpu.rt_period_us   cpu.shares  notify_on_release</span><br><span class=\"line\">cgroup.event_control   cpuacct.stat  cpuacct.usage_percpu  cpu.cfs_quota_us   cpu.rt_runtime_us  cpu.stat    tasks</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cat    /sys/fs/cgroup/cpu/docker/dc6d2297d670ff91bc2dc1fe0e1f7c38563d6f0279a26e4664d7c87ec96ea86b/tasks</span> </span><br><span class=\"line\">19652    # nginx容器的父进程--master进程</span><br><span class=\"line\">19700    # nginx容器的子进程--worker进程</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ps -ef | grep [1]9652</span></span><br><span class=\"line\">root      19652  19623  0 13:46 ?        00:00:00 nginx: master process nginx -g daemon off;</span><br><span class=\"line\">101       19700  19652  0 13:46 ?        00:00:00 nginx: worker process</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> memory下的资源限制目录，跟/sys/fs/cgroup/memory/下的内容大同小异</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls   /sys/fs/cgroup/memory/docker/dc6d2297d670ff91bc2dc1fe0e1f7c38563d6f0279a26e4664d7c87ec96ea86b/</span></span><br><span class=\"line\">cgroup.clone_children       memory.kmem.max_usage_in_bytes      memory.limit_in_bytes            memory.numa_stat            memory.use_hierarchy</span><br><span class=\"line\">cgroup.event_control        memory.kmem.slabinfo                memory.max_usage_in_bytes        memory.oom_control          notify_on_release</span><br><span class=\"line\">cgroup.procs                memory.kmem.tcp.failcnt             memory.memsw.failcnt             memory.pressure_level       tasks</span><br><span class=\"line\">memory.failcnt              memory.kmem.tcp.limit_in_bytes      memory.memsw.limit_in_bytes      memory.soft_limit_in_bytes</span><br><span class=\"line\">memory.force_empty          memory.kmem.tcp.max_usage_in_bytes  memory.memsw.max_usage_in_bytes  memory.stat</span><br><span class=\"line\">memory.kmem.failcnt         memory.kmem.tcp.usage_in_bytes      memory.memsw.usage_in_bytes      memory.swappiness</span><br><span class=\"line\">memory.kmem.limit_in_bytes  memory.kmem.usage_in_bytes          memory.move_charge_at_immigrate  memory.usage_in_bytes</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cat    /sys/fs/cgroup/memory/docker/dc6d2297d670ff91bc2dc1fe0e1f7c38563d6f0279a26e4664d7c87ec96ea86b/tasks</span> </span><br><span class=\"line\">19652    # nginx容器的父进程--master进程</span><br><span class=\"line\">19700    # nginx容器的子进程--worker进程</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ps -ef | grep [1]9652</span></span><br><span class=\"line\">root      19652  19623  0 13:46 ?        00:00:00 nginx: master process nginx -g daemon off;</span><br><span class=\"line\">101       19700  19652  0 13:46 ?        00:00:00 nginx: worker process</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cat    /sys/fs/cgroup/memory/docker/dc6d2297d670ff91bc2dc1fe0e1f7c38563d6f0279a26e4664d7c87ec96ea86b/memory.limit_in_bytes</span> </span><br><span class=\"line\">1073741824     # 显示现在分配的内存是1073741824 / 1024 / 1024 /1024 = 1g  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker stats dc6d2297d670ff91bc2dc1fe0e1f7c38563d6f0279a26e4664d7c87ec96ea86b</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看该容器的资源限制情况，显示内存限制是1G</span></span><br><span class=\"line\">CONTAINER ID   NAME              CPU %     MEM USAGE / LIMIT   MEM %     NET I/O      BLOCK I/O     PIDS</span><br><span class=\"line\">dc6d2297d670   vibrant_hawking   0.00%     2.531MiB / 1GiB     0.25%     1.01kB / 0B  22.3MB / 0B   2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 修改容器内存限制，需要注意的是，修改的内存值大于限制值时将修改失败，可以改小，不能改大</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">echo</span> <span class=\"string\">&quot;200M&quot;</span> &gt;  /sys/fs/cgroup/memory/docker/dc6d2297d670ff91bc2dc1fe0e1f7c38563d6f0279a26e4664d7c87ec96ea86b/memory.limit_in_bytes</span>   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cat    /sys/fs/cgroup/memory/docker/dc6d2297d670ff91bc2dc1fe0e1f7c38563d6f0279a26e4664d7c87ec96ea86b/memory.limit_in_bytes</span> </span><br><span class=\"line\">209715200    # 209715200 / 1024 / 1024 = 200M</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 修改完成后查看容器内存限制，内存值已经变成了200m</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker stats dc6d2297d670ff91bc2dc1fe0e1f7c38563d6f0279a26e4664d7c87ec96ea86b</span></span><br><span class=\"line\">CONTAINER ID   NAME              CPU %     MEM USAGE / LIMIT   MEM %     NET I/O     BLOCK I/O     PIDS</span><br><span class=\"line\">dc6d2297d670   vibrant_hawking   0.00%     2.531MiB / 200MiB   1.27%     1.01kB / 0B 22.3MB / 0B   2</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>​        除了直接修改容器下指定文件来修改限制容器使用资源外，还可以通过下面的命令行命令进行修改。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker update --<span class=\"built_in\">help</span>   <span class=\"comment\"># docker资源限制主要是下面的几个类型</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">Usage:  docker update [OPTIONS] CONTAINER [CONTAINER...]</span><br><span class=\"line\"></span><br><span class=\"line\">Update configuration of one or more containers</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\">      --blkio-weight uint16        Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0)</span><br><span class=\"line\">      --cpu-period int             Limit CPU CFS (Completely Fair Scheduler) period</span><br><span class=\"line\">      --cpu-quota int              Limit CPU CFS (Completely Fair Scheduler) quota</span><br><span class=\"line\">      --cpu-rt-period int          Limit the CPU real-time period in microseconds</span><br><span class=\"line\">      --cpu-rt-runtime int         Limit the CPU real-time runtime in microseconds</span><br><span class=\"line\">  -c, --cpu-shares int             CPU shares (relative weight)</span><br><span class=\"line\">      --cpus decimal               Number of CPUs</span><br><span class=\"line\">      --cpuset-cpus string         CPUs in which to allow execution (0-3, 0,1)</span><br><span class=\"line\">      --cpuset-mems string         MEMs in which to allow execution (0-3, 0,1)</span><br><span class=\"line\">      --kernel-memory bytes        Kernel memory limit</span><br><span class=\"line\">  -m, --memory bytes               Memory limit</span><br><span class=\"line\">      --memory-reservation bytes   Memory soft limit</span><br><span class=\"line\">      --memory-swap bytes          Swap limit equal to memory plus swap: &#x27;-1&#x27; to enable unlimited swap</span><br><span class=\"line\">      --pids-limit int             Tune container pids limit (set -1 for unlimited)</span><br><span class=\"line\">      --restart string             Restart policy to apply when a container exits</span><br></pre></td></tr></table></figure>\n\n<p><strong>1.2 虚拟化技术</strong></p>\n<p>​        虚拟化技术是一种计算机资源管理技术，将内存，网络，CPU等资源进行抽象，让硬件透明，目的是让用户合理地使用操作系统资源。</p>\n<p><strong>容器与虚拟化</strong></p>\n<p><img src=\"image-20200715143707656.png\" alt=\"image-20200715143707656\"></p>\n<p>​        <strong>容器</strong>是应用程序层的抽象，将代码和依赖项打包在一起。<strong>多个容器可以在同一台计算机上运行，并与其他容器共享操作系统内核，每个容器在用户空间中作为隔离的进程运行</strong>。<strong>容器占用的空间少于VM</strong>（容器映像的大小通常为几十MB），可以处理更多的应用程序，并且需要的VM和操作系统更少。</p>\n<p>​        <strong>虚拟机（VM）</strong>是将一台服务器转变为多台服务器的物理硬件的抽象。系统管理程序允许多个VM在单台计算机上运行。每个VM都包含<strong>操作系统，应用程序，必要的二进制文件和库的完整副本</strong></p>\n<p>​       <strong>虚拟机和容器都有优势和劣势</strong>，如何选择取决于具体的需求，但有些规则可以参考。</p>\n<ul>\n<li><p>VM非常适合当应用运行时<strong>需要所有OS资源和功能的场景</strong>，如果需要运行多个这样的应该，可以使用VMs。</p>\n</li>\n<li><p>容器适合在更少的server上运行更多的应用。</p>\n</li>\n</ul>\n<p>​        服务器好比运输码头：拥有场地和各种设备（服务器硬件资源），服务器虚拟化好比作码头上的仓库：拥有独立的空间堆放各种货物或集装箱(仓库之间完全独立，都拥有独立的应用系统和操作系统）。</p>\n<p>​        Docker比作集装箱：各种货物的打包，将各种应用程序和他们所依赖的运行环境打包成标准的容器,容器之间隔离。Docker有着小巧、迁移部署快速、运行高效等特点，但隔离性比服务器虚拟化差：不同的集装箱属于不同的运行单位（Docker上运行不同的应用实例），相互独立（隔离）。但由同一个库管人员管理（主机操作系统内核），因此通过库管人员可以看到所有集装箱的相关信息（因为共享操作系统内核，因此相关信息会共享）。</p>\n<p>​       服务器虚拟化就好比在码头上（物理主机及虚拟化层），建立了多个独立的“小码头”—仓库（虚拟机）。其拥有完全独立（隔离）的空间，属于不同的客户（虚拟机所有者）。每个仓库有各自的库管人员（当前虚拟机的操作系统内核），无法管理其它仓库。不存在信息共享的情况</p>\n<p>​       因此，我们需要根据不同的应用场景和需求采用不同的方式使用Docker技术或使用服务器虚拟化技术。例如一个典型的Docker应用场景是当主机上的Docker实例属于单一用户的情况下，在保证安全的同时可以充分发挥Docker的技术优势。对于隔离要求较高的环境如混合用户环境，就可以使用服务器虚拟化技术。</p>\n","comments":true,"permalink":"https://scaven.site/dockerPre","categories":[{"name":"kubernets","slug":"kubernets","permalink":"https://scaven.site/categories/kubernets/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://scaven.site/tags/docker/"}]},{"title":"PythonVarString","date":"2021-05-02T06:16:03.000Z","path":"2021-05/pVarString/","content":"<h1 id=\"第二章-变量和简单数据类型\"><a href=\"#第二章-变量和简单数据类型\" class=\"headerlink\" title=\"第二章 变量和简单数据类型\"></a>第二章 变量和简单数据类型</h1><p>Q：运行hello_world.py 时发生的情况</p>\n<p>​        现在我们有一个hello_world.py的python文件，文件内容如下，当我们执行这个文件时，发生了什么呢？</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;hello world&quot;</span>)</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p>​        我们在cmd中执行hello_world.py文件</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>phython3 hello_world.py</span><br><span class=\"line\">hello world    <span class=\"comment\"># 输出结果</span></span><br></pre></td></tr></table></figure>\n\n<p>​        运行文件hello_world.py时，末尾的**.py指出这是一个Python程序，因此编辑器将使用Python解释器来运行它<strong>。</strong>Python解释器读取整个程序，确定其中每个单词的含义**。例如，看到单词print时，解释器就会将括号中的内容打印到屏幕，而不会管括号中的内容是什么。</p>\n<h2 id=\"1-变量\"><a href=\"#1-变量\" class=\"headerlink\" title=\"1.变量\"></a>1.变量</h2><h3 id=\"1-1-格式\"><a href=\"#1-1-格式\" class=\"headerlink\" title=\"1.1 格式\"></a>1.1 格式</h3><p><strong><code>变量名=&quot;变量值&quot;</code></strong></p>\n<p>值得注意的几点：</p>\n<ul>\n<li>格式只能是**<code>变量名=&quot;变量值&quot;</code>**，如<code>name=&quot;张三&quot;</code></li>\n<li>格式不能是**<code>变量名=变量值</code><strong>，这种变量赋值的方法初学者很容易犯，在python中，</strong><code>变量名=变量值</code>**这种写法会被python解释等号两边是两个变量，定义变量的时候，等号后面的变量值一定是被引号包围起来的</li>\n<li>等号两边可以有空格，变量值中的引号可以是单引号或多引号，尤其是当变量值中本来就包含引号时，为了避免歧义就会使用多引号或转义符<code>\\</code></li>\n<li>变量一定是先定义，后使用，没有定义的变量，不能被引用，python将抛出错误</li>\n</ul>\n<h3 id=\"1-2-变量的命名和使用\"><a href=\"#1-2-变量的命名和使用\" class=\"headerlink\" title=\"1.2 变量的命名和使用\"></a>1.2 变量的命名和使用</h3><p>​        在Python中使用变量时，需要遵守下面的命名规范。</p>\n<ul>\n<li><p><strong>变量名只能包含字母、数字和下划线，但不能以数字打头</strong>，此处的字母并不局限于 26 个英文字母，可以包含中文字符、日文字符等。例如，可将变量命名为message_1，但不能将其命名为1_message。</p>\n</li>\n<li><p><strong>变量名不能包含空格，但可使用下划线来分隔其中的单词</strong>。例如，变量名greeting_message可行，但变量名greeting message会引发错误。</p>\n</li>\n<li><p><strong>不要将Python关键字和函数名用作变量名</strong>，即不要使用Python保留用于特殊用途的单词，如print（请参见附录A.4）。</p>\n</li>\n<li><p><strong>变量名应既简短又具有描述性</strong>。例如，name比n好，student_name比s_n好，name_length<br>比length_of_persons_name好。</p>\n</li>\n<li><p><strong>慎用容易引起歧义的字母</strong>，如小写字母l和大写字母O，因为它们可能被人错看成数字1和0。</p>\n</li>\n</ul>\n<p>python关键字：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> keyword</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(keyword.kwlist)</span><br><span class=\"line\">[<span class=\"string\">&#x27;False&#x27;</span>, <span class=\"string\">&#x27;None&#x27;</span>, <span class=\"string\">&#x27;True&#x27;</span>, <span class=\"string\">&#x27;and&#x27;</span>, <span class=\"string\">&#x27;as&#x27;</span>, <span class=\"string\">&#x27;assert&#x27;</span>, <span class=\"string\">&#x27;async&#x27;</span>, <span class=\"string\">&#x27;await&#x27;</span>, <span class=\"string\">&#x27;break&#x27;</span>, <span class=\"string\">&#x27;class&#x27;</span>, <span class=\"string\">&#x27;continue&#x27;</span>, <span class=\"string\">&#x27;def&#x27;</span>, <span class=\"string\">&#x27;del&#x27;</span>, <span class=\"string\">&#x27;elif&#x27;</span>, <span class=\"string\">&#x27;else&#x27;</span>, <span class=\"string\">&#x27;except&#x27;</span>, <span class=\"string\">&#x27;finally&#x27;</span>, <span class=\"string\">&#x27;for&#x27;</span>, <span class=\"string\">&#x27;from&#x27;</span>, <span class=\"string\">&#x27;global&#x27;</span>, <span class=\"string\">&#x27;if&#x27;</span>, <span class=\"string\">&#x27;import&#x27;</span>, <span class=\"string\">&#x27;in&#x27;</span>, <span class=\"string\">&#x27;is&#x27;</span>, <span class=\"string\">&#x27;lambda&#x27;</span>, <span class=\"string\">&#x27;nonlocal&#x27;</span>, <span class=\"string\">&#x27;not&#x27;</span>, <span class=\"string\">&#x27;or&#x27;</span>, <span class=\"string\">&#x27;pass&#x27;</span>, <span class=\"string\">&#x27;raise&#x27;</span>, <span class=\"string\">&#x27;return&#x27;</span>, <span class=\"string\">&#x27;try&#x27;</span>, <span class=\"string\">&#x27;while&#x27;</span>, <span class=\"string\">&#x27;with&#x27;</span>, <span class=\"string\">&#x27;yield&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-3-推荐使用的命令方法\"><a href=\"#1-3-推荐使用的命令方法\" class=\"headerlink\" title=\"1.3 推荐使用的命令方法\"></a>1.3 推荐使用的命令方法</h3><ul>\n<li>驼峰命名法：<ul>\n<li>大驼峰命名法：每个单词的首字母都大写，如StudentName</li>\n<li>小驼峰命名法：头一个单词首字母小写，其余单词首字母大写，如studentName</li>\n</ul>\n</li>\n<li>下划线连接符命名法，如student_name</li>\n</ul>\n<h3 id=\"1-4-python赋值的方法\"><a href=\"#1-4-python赋值的方法\" class=\"headerlink\" title=\"1.4 python赋值的方法\"></a>1.4 python赋值的方法</h3><ul>\n<li>常规赋值：<code>a = 100</code></li>\n<li>链式赋值：<code> a = b = 100</code>，表示<code>a=100</code>，<code>b=100</code></li>\n<li>序列解包赋值： <code>a,b = 100,&quot;zhangsan&quot;</code>，等同于<code>a=100</code>，<code>b=&quot;zhangsan&quot;</code>，此种赋值方法中，等号两边的个数必须相等，否则python将抛出错误</li>\n<li>增量赋值： a+=1，等同于<code>a=a+1</code></li>\n</ul>\n<p>案例：</p>\n<p>1.使用汉字作为变量(不推荐)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>名字=<span class=\"string\">&quot;zhangsan&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(名字)</span><br><span class=\"line\">zhangsan</span><br></pre></td></tr></table></figure>\n\n<p>2.变量值包含引号</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>message = <span class=\"string\">&quot;This&#x27;s an apple&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(message)</span><br><span class=\"line\">This<span class=\"string\">&#x27;s an apple</span></span><br></pre></td></tr></table></figure>\n\n<p>案例中This’s an apple中包含单引号，如果再使用单引号，则将引起歧义，python将抛出错误</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>message = <span class=\"string\">&#x27;This&#x27;</span>s an apple<span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&gt;&gt;&gt; print(message)</span></span><br><span class=\"line\"><span class=\"string\">## 执行后结果如下：</span></span><br><span class=\"line\"><span class=\"string\">  File &quot;test.py&quot;, line 4</span></span><br><span class=\"line\"><span class=\"string\">    message = &#x27;</span>This<span class=\"string\">&#x27;s an apple&#x27;</span>  <span class=\"comment\"># python将&#x27;This&#x27;当成了一个整体，&#x27;This&#x27;后面的字符串就搞蒙了python，因此抛出错误</span></span><br><span class=\"line\">                    ^</span><br><span class=\"line\">SyntaxError: invalid syntax   <span class=\"comment\"># 提示语法错误</span></span><br></pre></td></tr></table></figure>\n\n<p>3.定义变量时，等号后边不含引号</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>n = zhangsan</span><br></pre></td></tr></table></figure>\n\n<p>​        这种情况下，python会认为等号两边都是变量，即将变量<code>zhangsan</code>的值赋给变量<code>n</code>，这种情况需要分两种情况说明：</p>\n<ul>\n<li>如果上文中定义了<code>zhangsan</code>的值，即<code>zhangsan</code>是原本就是一个变量名，那么等式成立</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>zhangsan = <span class=\"number\">28</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>n = zhangsan   <span class=\"comment\"># 等同于n = zhangsan = 28，即先定义变量zhangsan，再将变量zhangsan的值赋给了n</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>如果上文没有定义<code>zhangsan</code>，那么python将抛出错误，即<strong>变量一定是先定义，后使用</strong>，此时我们重新打开cmd</li>\n</ul>\n<p><img src=\"image-20210421111639194.png\" alt=\"image-20210421111639194\"></p>\n<h2 id=\"2-注释\"><a href=\"#2-注释\" class=\"headerlink\" title=\"2 注释\"></a>2 注释</h2><p>​        python中使用井号（”#”）进行注释，被注释的行将不会被执行。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 输入用户名</span></span><br><span class=\"line\">name = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;please, enter your name: &quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>关于注释需要注意的几点：</p>\n<ul>\n<li>一定要养成写注释的习惯，认真写注释不仅是对自己也是对阅读代码的人的尊重</li>\n<li>注释一定要简明扼要的阐述代码的目的</li>\n<li>注释一定要规范，此处要求的规范可以是大多数人的习惯，也可以是公司对代码注释的规定</li>\n</ul>\n<h2 id=\"3-字符串\"><a href=\"#3-字符串\" class=\"headerlink\" title=\"3.字符串\"></a>3.字符串</h2><p>字符串常见操作官方文档：<a href=\"https://docs.python.org/zh-cn/3.9/library/string.html?highlight=%E5%AD%97%E7%AC%A6%E4%B8%B2\">https://docs.python.org/zh-cn/3.9/library/string.html?highlight=字符串</a></p>\n<p>​        大多数程序都定义并收集某种数据，然后使用它们来做些有意义的事情。鉴于此，对数据进行分类大有裨益。其中字符串就是一个基础的数据类型。</p>\n<h3 id=\"3-1-字符串的定义\"><a href=\"#3-1-字符串的定义\" class=\"headerlink\" title=\"3.1 字符串的定义\"></a>3.1 字符串的定义</h3><p>​        在 Python 中处理文本数据是使用 <a href=\"https://docs.python.org/zh-cn/3.9/library/stdtypes.html#str\"><code>str</code></a> 对象，也称为 <em>字符串</em>。 字符串是由 Unicode 码位构成的不可变 <a href=\"https://docs.python.org/zh-cn/3.9/library/stdtypes.html#typesseq\">序列</a>。 字符串字面值有多种不同的写法：</p>\n<ul>\n<li><p>单引号: <code>&#39;允许包含有 &quot;双&quot; 引号&#39;</code></p>\n</li>\n<li><p>双引号: <code>&quot;允许包含有 &#39;单&#39; 引号&quot;</code>。</p>\n</li>\n<li><p>三重引号: <code>&#39;&#39;&#39;三重单引号&#39;&#39;&#39;</code>, <code>&quot;&quot;&quot;三重双引号&quot;&quot;&quot;</code></p>\n<p>​    使用三重引号的字符串可以跨越多行 —— 其中所有的空白字符都将包含在该字符串字面值中。</p>\n</li>\n</ul>\n<p><strong>字符串中本身不含引号的情况</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>var1 = <span class=\"string\">&quot;This is a string.&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>var2 = <span class=\"string\">&#x27;This is also a string.&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>字符串中本身含有引号的情况</strong>：如果字符串中包含某种引号(如单引号)，则在定义字符串的时候应该使用另外的两种引号</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>var3 = <span class=\"string\">&#x27;I told my friend, &quot;Python is my favorite language!&quot;&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>var4 = <span class=\"string\">&quot;The language &#x27;Python&#x27; is named after Monty Python, not the snake.&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>var5 = <span class=\"string\">&quot;One of Python&#x27;s strengths is its diverse and supportive community.&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>三字符串</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">str</span> = <span class=\"string\">&quot;&quot;&quot;登鹳雀楼</span></span><br><span class=\"line\"><span class=\"string\">唐 王之涣 </span></span><br><span class=\"line\"><span class=\"string\">白日依山尽，</span></span><br><span class=\"line\"><span class=\"string\">黄河入海流。</span></span><br><span class=\"line\"><span class=\"string\">欲穷千里目，</span></span><br><span class=\"line\"><span class=\"string\">更上一层楼。</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"built_in\">str</span>)</span><br><span class=\"line\">登鹳雀楼</span><br><span class=\"line\">唐 王之涣 </span><br><span class=\"line\">白日依山尽，</span><br><span class=\"line\">黄河入海流。</span><br><span class=\"line\">欲穷千里目，</span><br><span class=\"line\">更上一层楼。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-字符串的转义\"><a href=\"#3-2-字符串的转义\" class=\"headerlink\" title=\"3.2 字符串的转义\"></a>3.2 字符串的转义</h3><p>​        在字符串的定义中，可能会使用到一些特殊字符，如制表符<code>\\t</code>、换行符<code>\\n</code>，这写字符具有特殊含义，将被python识别成指定的格式，如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">str</span> = <span class=\"string\">&quot;&quot;&quot;登鹳雀楼\\n唐 王之涣\\n白日依山尽，\\n黄河入海流。\\n欲穷千里目，\\n更上一层楼。&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"built_in\">str</span>)</span><br><span class=\"line\">登鹳雀楼</span><br><span class=\"line\">唐 王之涣</span><br><span class=\"line\">白日依山尽，</span><br><span class=\"line\">黄河入海流。</span><br><span class=\"line\">欲穷千里目，</span><br><span class=\"line\">更上一层楼。</span><br></pre></td></tr></table></figure>\n\n<p>​        在python中，使用<code>\\</code>对特殊字符进行转义，比如我们想要上面的变量<code>str</code>的值换行输出，但是我们仍然想要输出的结果中包含<code>\\n</code>是，我们可以通过<code>\\</code>对<code>\\n</code>进行转义(即<code>\\\\n</code>)。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">str</span> = <span class=\"string\">&quot;&quot;&quot;登鹳雀楼\\\\n唐 王之涣\\\\n白日依山尽，\\\\n黄河入海流。\\\\n欲穷千里目，\\\\n更上一层楼。&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"built_in\">str</span>)</span><br><span class=\"line\">登鹳雀楼\\n唐 王之涣\\n白日依山尽，\\n黄河入海流。\\n欲穷千里目，\\n更上一层楼。</span><br></pre></td></tr></table></figure>\n\n<p>我们也可以通过在字符串前加一个<code>r</code>进行转义</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">str</span> = <span class=\"string\">r&quot;&quot;&quot;登鹳雀楼\\n唐 王之涣\\n白日依山尽，\\n黄河入海流。\\n欲穷千里目，\\n更上一层楼。&quot;&quot;&quot;</span></span><br><span class=\"line\">上一层楼。<span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\">&gt;&gt;&gt; </span>print(str)</span></span><br><span class=\"line\"><span class=\"string\">登鹳雀楼\\n唐 王之涣\\n白日依山尽，\\n黄河入海流。\\n欲穷千里目，\\n更上一层楼。</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"3-3-字符串的常用方法\"><a href=\"#3-3-字符串的常用方法\" class=\"headerlink\" title=\"3.3 字符串的常用方法\"></a>3.3 字符串的常用方法</h3><p>​        对于字符串的操作，通常有修改字符串的大小写、拼接字符串、切割、等待。</p>\n<h4 id=\"3-3-1-修改字符串的大小写\"><a href=\"#3-3-1-修改字符串的大小写\" class=\"headerlink\" title=\"3.3.1 修改字符串的大小写\"></a>3.3.1 修改字符串的大小写</h4><p>​        我们可以通过字符串的指定方法修改字符串的大小写，如将字母全部为小写的字符串修改成大写字母，反义亦然；将全部为字符的字符串的首字母大写等。</p>\n<p>(1).<strong>首字母大写</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>name = <span class=\"string\">&quot;ada lovelace&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(name.title())</span><br><span class=\"line\">Ada Lovelace</span><br></pre></td></tr></table></figure>\n\n<p>​        在这个示例中，小写的字符串”ada lovelace”存储到了变量name中。在print()语句中，方法title()出现在这个变量的后面。<strong>方法是Python可对数据执行的操作</strong>。<strong>在name.title()中，name后面的句点（.）让Python对变量name执行方法title()指定的操作。每个方法后面都跟着一对括号，这是因为方法通常需要额外的信息来完成其工作。这种信息是在括号内提供的。</strong>函数title()不需要额外的信息，因此它后面的括号是空的。title()以首字母大写的方式显示每个单词，即将每个单词的首字母都改为大写。这很有用，因为你经常需要将名字视为信息。例如，你可能希望程序将值Ada、ADA和ada视为同一个名字，并将它们都显示为Ada。</p>\n<p>(2).<strong>全部大写</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(name.upper())</span><br><span class=\"line\">ADA LOVELACE</span><br></pre></td></tr></table></figure>\n\n<p>(3).<strong>全部小写</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(name.lower())</span><br><span class=\"line\">ada lovelace</span><br></pre></td></tr></table></figure>\n\n<p>​        存储数据时，方法lower()很有用。很多时候，你无法依靠用户来提供正确的大小写，因此需要将字符串先转换为小写，再存储它们。以后需要显示这些信息时，再将其转换为最合适的大小写方式。</p>\n<p>(4).<strong>将大小写转换</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>name = <span class=\"string\">&quot;ZhangSan&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(name.swapcase())</span><br><span class=\"line\">zHANGsAN</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"3-3-2-合并（拼接）字符串\"><a href=\"#3-3-2-合并（拼接）字符串\" class=\"headerlink\" title=\"3.3.2 合并（拼接）字符串\"></a>3.3.2 合并（拼接）字符串</h4><p>​        合并(拼接)字符串是指将两个字符串进行合并(拼接)起来，以便按照我们想要的方式一起输出或存储。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>first_name = <span class=\"string\">&quot;ada&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>last_name = <span class=\"string\">&quot;lovelace&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>full_name = first_name + <span class=\"string\">&quot; &quot;</span> + last_name</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(full_name)</span><br><span class=\"line\">ada lovelace</span><br></pre></td></tr></table></figure>\n\n<p>​        对于上面的案例，我们可以不定义<code>full_name</code>这个变量也能达到合并输出的效果，这两种方式在本质上都是一样的，只不过上面的方法是将合并(拼接)的结果存储在了变量<code>full_name</code>中，下面的方式是直接进行字符串的拼接并通过<code>print()</code>函数输出</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(first_name + <span class=\"string\">&quot; &quot;</span> + last_name)</span><br><span class=\"line\">ada lovelace</span><br></pre></td></tr></table></figure>\n\n<p>​        通过字符串的合并(拼接)功能，我们可以输出一些有意义的表达式，如当用户登陆的时候，我们可以跟用户打招呼。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>name = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;please, input your username: &quot;</span>)</span><br><span class=\"line\">please, <span class=\"built_in\">input</span> your username: zhangsan</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Hello, &quot;</span> + name.title() + <span class=\"string\">&quot;!&quot;</span> + <span class=\"string\">&quot; welcome login.&quot;</span>)</span><br><span class=\"line\">Hello, Zhangsan! welcome login.</span><br></pre></td></tr></table></figure>\n\n<p>​        其实，print()函数本身提供了字符串合并(拼接)的功能，当然这是print()函数的功能，并不是字符串的功能。</p>\n<p><strong>print()函数默认以空格为分隔符将字符串输出</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&quot;apples&quot;</span>, <span class=\"string\">&quot;oranges&quot;</span>, <span class=\"string\">&quot;bananas&quot;</span>)</span><br><span class=\"line\">apples oranges bananas</span><br></pre></td></tr></table></figure>\n\n<p><strong>指定print()函数的分隔符</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 以逗号(&quot;,&quot;)为分隔符输出</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&quot;apples&quot;</span>, <span class=\"string\">&quot;oranges&quot;</span>, <span class=\"string\">&quot;bananas&quot;</span>, sep=<span class=\"string\">&quot;,&quot;</span>)</span><br><span class=\"line\">apples,oranges,bananas</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 以横杠(&quot;-&quot;)为分隔符输出</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&quot;apples&quot;</span>, <span class=\"string\">&quot;oranges&quot;</span>, <span class=\"string\">&quot;bananas&quot;</span>, sep=<span class=\"string\">&quot;-&quot;</span>)</span><br><span class=\"line\">apples-oranges-bananas</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-3-3-使用制表符或换行符来添加空白\"><a href=\"#3-3-3-使用制表符或换行符来添加空白\" class=\"headerlink\" title=\"3.3.3 使用制表符或换行符来添加空白\"></a>3.3.3 使用制表符或换行符来添加空白</h4><p>​        <strong>在编程中，空白泛指任何非打印字符，如空格、制表符和换行符</strong>。你可使用空白来组织输出，以使其更易读。要在字符串中添加制表符，可使用字符组合<code>\\t</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Hello, Python&quot;</span>)</span><br><span class=\"line\">Hello, Python</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\tHello, Python&quot;</span>)</span><br><span class=\"line\">\tHello, Python            <span class=\"comment\"># 此处的输出中Hello, Python前面有四个空格(\\t制表符的输出结果)</span></span><br></pre></td></tr></table></figure>\n\n<p>​        要在字符串中添加换行符，可使用<code>\\n</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Languages:\\nPython\\nC\\nJavaScript&quot;</span>)</span><br><span class=\"line\">Languages:</span><br><span class=\"line\">Python</span><br><span class=\"line\">C</span><br><span class=\"line\">JavaScript</span><br></pre></td></tr></table></figure>\n\n<p>​        为了更加美观和已读，我们可以混用换行符<code>\\n</code>和制表符<code>\\t</code>。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Languages:\\n\\tPython\\n\\tC\\n\\tJavaScript&quot;</span>)</span><br><span class=\"line\">Languages:</span><br><span class=\"line\">\tPython</span><br><span class=\"line\">\tC</span><br><span class=\"line\">\tJavaScript</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-3-4-删除空白\"><a href=\"#3-3-4-删除空白\" class=\"headerlink\" title=\"3.3.4 删除空白\"></a>3.3.4 删除空白</h4><p>​        在程序中，额外的空白可能令人迷惑。对程序员来说，’python’和’python ‘看起来几乎没什么两样，但对程序来说，它们却是两个不同的字符串。Python能够发现’python ‘中额外的空白，并认为它是有意义的——除非你告诉它不是这样的。<br>​        空白很重要，因为你经常需要比较两个字符串是否相同。例如，一个重要的示例是，在用户登录网站时检查其用户名。但在一些简单得多的情形下，额外的空格也可能令人迷惑。所幸在Python中，删除用户输入的数据中的多余的空白易如反掌。</p>\n<p>​        Python能够找出字符串开头和末尾多余的空白。在python中，可以使用rstrip()删除字符串末尾的空白，使用lstrip()删除字符串前方的空白，使用strip()删除字符串前后的空白。</p>\n<p>​        下面的案例中，我在输入用户名的时候，分别在<code>zhangsan</code>前面和后面各加了两个和一个空格</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>name = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;please, input your username: &quot;</span>)</span><br><span class=\"line\">please, <span class=\"built_in\">input</span> your username:   zhangsan    </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(name)   <span class=\"comment\"># 直接输出&quot;zhangsan&quot;我们很难分辨出字符串前后的空格</span></span><br><span class=\"line\">  zhangsan </span><br></pre></td></tr></table></figure>\n\n<p>如何分辨我输出的空格呢？</p>\n<p><strong>方法1：</strong>通过len()函数比较两个字符串的长度</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(<span class=\"string\">&quot;zhangsan&quot;</span>))    <span class=\"comment\"># 字符串&quot;zhangsan&quot;的长度是8</span></span><br><span class=\"line\"><span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(name))     <span class=\"comment\"># 变量name的长度为11，则证明name前后必然有空格，但是前后空格的个数，我们不知道</span></span><br><span class=\"line\"><span class=\"number\">11</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>方法2：</strong>除了比较长度外，我们也可以通过下面的方法比较两个字符串是否是同一个字符串</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(name == <span class=\"string\">&quot;zhangsan&quot;</span>)</span><br><span class=\"line\"><span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>方法3：</strong>通过字符串的替换功能，将空格替换成易识别的其他字符</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>name.replace(<span class=\"string\">&quot; &quot;</span>,<span class=\"string\">&quot;-&quot;</span>)  <span class=\"comment\"># 将空格替换成横杠&quot;-&quot;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;--zhangsan-&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-3-4-1-删除字符串末尾的空白\"><a href=\"#3-3-4-1-删除字符串末尾的空白\" class=\"headerlink\" title=\"3.3.4.1 删除字符串末尾的空白\"></a>3.3.4.1 删除字符串末尾的空白</h5><p>​        为了方便查看删除效果，我们使用字符串的替换功能进行检验</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(name.rstrip())</span><br><span class=\"line\">  zhangsan</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(name.rstrip().replace(<span class=\"string\">&quot; &quot;</span>,<span class=\"string\">&quot;-&quot;</span>))</span><br><span class=\"line\">--zhangsan</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-3-4-2-删除字符串左边的空白\"><a href=\"#3-3-4-2-删除字符串左边的空白\" class=\"headerlink\" title=\"3.3.4.2 删除字符串左边的空白\"></a>3.3.4.2 删除字符串左边的空白</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(name.lstrip())</span><br><span class=\"line\">zhangsan </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(name.lstrip().replace(<span class=\"string\">&quot; &quot;</span>,<span class=\"string\">&quot;-&quot;</span>))</span><br><span class=\"line\">zhangsan-</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-2-4-3-删除字符串首未的空白\"><a href=\"#3-2-4-3-删除字符串首未的空白\" class=\"headerlink\" title=\"3.2.4.3 删除字符串首未的空白\"></a>3.2.4.3 删除字符串首未的空白</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(name.strip())   <span class=\"comment\"># 默认删除空格</span></span><br><span class=\"line\">zhangsan</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(name.strip().replace(<span class=\"string\">&quot; &quot;</span>,<span class=\"string\">&quot;-&quot;</span>))   <span class=\"comment\"># 没有空格，将不能进行替换</span></span><br><span class=\"line\">zhangsan</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(name.strip()))   <span class=\"comment\"># 查看长度，删除字符串首尾的空格后，字符串的长度跟字符串&quot;zhangsan&quot;的长度一样</span></span><br><span class=\"line\"><span class=\"number\">8</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-2-4-4-删除字符串首尾的指定字符串\"><a href=\"#3-2-4-4-删除字符串首尾的指定字符串\" class=\"headerlink\" title=\"3.2.4.4 删除字符串首尾的指定字符串\"></a>3.2.4.4 删除字符串首尾的指定字符串</h5><p>​        strip()方法不仅仅可以删除字符串首尾的空格(默认情况下，strip()是删除字符串首尾的空格)，我们还可以删除指定的字符。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\"># 删除字符串首尾的空格、字母z、字母n、字母b</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(name.strip(<span class=\"string\">&quot; znb&quot;</span>)) </span><br><span class=\"line\">hangsa</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-3-5-替换字符串\"><a href=\"#3-3-5-替换字符串\" class=\"headerlink\" title=\"3.3.5 替换字符串\"></a>3.3.5 替换字符串</h4><p>​        将字符串中的某些字符替换成其他字符，格式：<code>str.replace(old,new[,max])</code>，其中<code>max</code>为可选参数，默认都替换，<code>max</code>可以指定替换此处</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>name = <span class=\"string\">&quot;zhangsan&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(name.replace(<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;A&quot;</span>))   <span class=\"comment\"># 不指定max参数时，默认全部替换</span></span><br><span class=\"line\">zhAngsAn</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>name = <span class=\"string\">&quot;Zhang san&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(name)</span><br><span class=\"line\">Zhang san</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(name.replace(<span class=\"string\">&quot; &quot;</span>,<span class=\"string\">&quot;+++++&quot;</span>))</span><br><span class=\"line\">Zhang+++++san</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>name = <span class=\"string\">&quot;zhangsan&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(name.replace(<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;A&quot;</span>,<span class=\"number\">1</span>))   <span class=\"comment\"># 指定替换次数，此处将只替换第一a,第二个a将保持不变</span></span><br><span class=\"line\">zhAngsan</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-3-6-字符串的截取\"><a href=\"#3-3-6-字符串的截取\" class=\"headerlink\" title=\"3.3.6 字符串的截取\"></a>3.3.6 字符串的截取</h4><p>​        Python 访问子字符串，可以使用方括号<code> []</code> 来截取字符串，字符串的截取的语法格式如下：<code>变量[头下标:尾下标]</code></p>\n<p>​        首先我们了解下索引，索引主要包括以下几点：</p>\n<ul>\n<li><p>索引包括正向索引和反向作用，正向作用从左到右，从0开始计数；反向索引从右到左，从-1开始计数；</p>\n</li>\n<li><p>索引是<code>前包后不包</code>，str[m,n]用数学表示为[m,n)，其中m&lt;n；</p>\n</li>\n<li><p>如果从第一个字符或最后一个字符进行截取，可以使用<code>:</code>，而不用标注<code>0</code>或者<code>-1</code>；</p>\n</li>\n<li><p>可以连续截取，也可以指定步长，如str[m,n,2]表示，从m开始直到n(不包括n)，步长为2进行截取；</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">str</span> = <span class=\"string\">&quot;I love Python&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>​        字符串<code>&quot;I love Python&quot;</code>的正向和反向索引如下：</p>\n<p><img src=\"image-20210425091117807.png\" alt=\"image-20210425091117807\"></p>\n<p>​        通过变量<code>str</code>获取<code>love</code>，通过上面的图片可以知道<code>love</code>的索引是从<code>2-5</code>，共<code>4</code>个字符，但是索引是包含<code>2</code>，不包含<code>5</code>，因此要取到<code>e</code>，末尾的索引值应该是<code>6</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"built_in\">str</span>[<span class=\"number\">2</span>:<span class=\"number\">6</span>])</span><br><span class=\"line\"> love</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(<span class=\"built_in\">str</span>[<span class=\"number\">2</span>:<span class=\"number\">6</span>]))</span><br><span class=\"line\"><span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n\n<p>​        通过变量str获取python</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"built_in\">str</span>[<span class=\"number\">7</span>:<span class=\"number\">13</span>])</span><br><span class=\"line\">Python</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 由于pyhton后面已经没有字符了，因此可以使用str[m:]进行截取</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"built_in\">str</span>[<span class=\"number\">7</span>:])</span><br><span class=\"line\">Python</span><br></pre></td></tr></table></figure>\n\n<p>​        设置步长进行截取，如从头到尾设置步长为2进行截取，即获取所有索引为偶数的字符</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"built_in\">str</span>[::<span class=\"number\">2</span>])</span><br><span class=\"line\">Ilv yhn</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-3-7-对字符串进行切片\"><a href=\"#3-3-7-对字符串进行切片\" class=\"headerlink\" title=\"3.3.7 对字符串进行切片\"></a>3.3.7 对字符串进行切片</h4><p>​        格式：<code>str.split(st=&quot;&quot;,num=string.count(str))</code>,其中st代表分隔符，默认为空格；num表示分割的次数，返回的结果为分割后的新字符串</p>\n<p><strong>(1). 以空格对字符串进行切片</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"built_in\">str</span>.split())     <span class=\"comment\"># 默认以空格做分隔符</span></span><br><span class=\"line\">[<span class=\"string\">&#x27;I&#x27;</span>, <span class=\"string\">&#x27;love&#x27;</span>, <span class=\"string\">&#x27;Python&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"built_in\">str</span>.split(<span class=\"string\">&quot; &quot;</span>))  <span class=\"comment\"># 上面的代码等同于</span></span><br><span class=\"line\">[<span class=\"string\">&#x27;I&#x27;</span>, <span class=\"string\">&#x27;love&#x27;</span>, <span class=\"string\">&#x27;Python&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p>​        通过上面的结果可以看出，得到的结果是一个列表，并别<code>split()</code>方法指定的分隔符(即空格)被丢弃</p>\n<p><strong>(2). 以字母o对字符串进行切片</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"built_in\">str</span>.split(<span class=\"string\">&quot;o&quot;</span>))</span><br><span class=\"line\">[<span class=\"string\">&#x27;I l&#x27;</span>, <span class=\"string\">&#x27;ve Pyth&#x27;</span>, <span class=\"string\">&#x27;n&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p><strong>(3). 以字母o对字符串进行切片1次</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"built_in\">str</span>.split(<span class=\"string\">&quot;o&quot;</span>,<span class=\"number\">1</span>))  <span class=\"comment\"># 指定切割的次数</span></span><br><span class=\"line\">[<span class=\"string\">&#x27;I l&#x27;</span>, <span class=\"string\">&#x27;ve Python&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-3-8-查找字符串中是否存在某字符\"><a href=\"#3-3-8-查找字符串中是否存在某字符\" class=\"headerlink\" title=\"3.3.8 查找字符串中是否存在某字符\"></a>3.3.8 查找字符串中是否存在某字符</h4><p>​        在python中，有时我们需要检查一个字符串中是否包含某个字符(单个或多个字符)，可以使用find()方法，格式：<code>str.find(str,查询开始的索引值,查询结束的索引值)</code>，如果查找的字符存在与字符串中，就返回字符在字符串中的第一个索引的值，否则返回-1</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>name = <span class=\"string\">&quot;zhangsan&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查找a字符在name中的位置，如果有多个，则只返回第一个a的索引</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(name.find(<span class=\"string\">&quot;a&quot;</span>))  </span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查找san字符在name中的位置，返回san第一个字符的索引</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(name.find(<span class=\"string\">&quot;san&quot;</span>))  </span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查找san字符在name中的位置，sn不存在与字符串name中，因此返回-1</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(name.find(<span class=\"string\">&quot;sn&quot;</span>))  </span><br><span class=\"line\">-<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从指定位置开始查找字符串a，索引3-6表示字符串name中的&quot;ngs&quot;，不存在a字符，因此返回-1</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(name.find(<span class=\"string\">&quot;a&quot;</span>,<span class=\"number\">3</span>,<span class=\"number\">6</span>))  </span><br><span class=\"line\">-<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从指定位置开始查找字符串a，索引3-7表示字符串name中的&quot;ngsa&quot;，存在a字符，因此返回a字符在name中此处ngsa中a的索引</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(name.find(<span class=\"string\">&quot;a&quot;</span>,<span class=\"number\">3</span>,<span class=\"number\">7</span>))</span><br><span class=\"line\"><span class=\"number\">6</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-3-9-连接字符串\"><a href=\"#3-3-9-连接字符串\" class=\"headerlink\" title=\"3.3.9 连接字符串\"></a>3.3.9 连接字符串</h4><p>​        <code>join()</code>方法用于将序列中的元素以指定字符连接成一个新字符串，格式：<code>str.join(sequence)</code>，sequence代表要连接的元素序列，返回结果为生成的新字符串。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>name = [<span class=\"string\">&quot;zhangsan&quot;</span>, <span class=\"string\">&quot;lisi&quot;</span>, <span class=\"string\">&quot;wangwu&quot;</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot; &quot;</span>.join(name)</span><br><span class=\"line\"><span class=\"string\">&#x27;zhangsan lisi wangwu&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>name = (<span class=\"string\">&quot;zhangsan&quot;</span>, <span class=\"string\">&quot;lisi&quot;</span>, <span class=\"string\">&quot;wangwu&quot;</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;-&quot;</span>.join(name)</span><br><span class=\"line\"><span class=\"string\">&#x27;zhangsan-lisi-wangwu&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-3-10-查询开头结尾的特定字符串\"><a href=\"#3-3-10-查询开头结尾的特定字符串\" class=\"headerlink\" title=\"3.3.10 查询开头结尾的特定字符串\"></a>3.3.10 查询开头结尾的特定字符串</h4><p><strong>(1).startswith()：</strong>表示以什么开头，如果以指定字符结尾则返回True，否则返回False</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>var = <span class=\"string\">&quot;I love python!&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>var.startswith(<span class=\"string\">&quot;I&quot;</span>)</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>var.startswith(<span class=\"string\">&quot;I lo&quot;</span>)</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>var.startswith(<span class=\"string\">&quot;i&quot;</span>)</span><br><span class=\"line\"><span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>(2).endswith()：</strong>表示以什么开头，如果以指定字符结尾则返回True，否则返回False</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>var.endswith(<span class=\"string\">&quot;python!&quot;</span>)</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>var.endswith(<span class=\"string\">&quot;on!&quot;</span>)</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>var.endswith(<span class=\"string\">&quot;on&quot;</span>)</span><br><span class=\"line\"><span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"4-数字\"><a href=\"#4-数字\" class=\"headerlink\" title=\"4 数字\"></a>4 数字</h2><p>​        在编程中，经常使用数字来记录游戏得分、表示可视化数据、存储Web应用信息等。Python根据数字的用法以不同的方式处理它们。鉴于整数使用起来最简单，下面就先来看看Python是如何管理它们的。</p>\n<h3 id=\"4-1-整数\"><a href=\"#4-1-整数\" class=\"headerlink\" title=\"4.1 整数\"></a>4.1 整数</h3><p>​        <strong>在Python中，可对整数进行加（+）减（-）乘（*）除（/）四则运算</strong>。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">10</span> + <span class=\"number\">22</span>   <span class=\"comment\"># 加</span></span><br><span class=\"line\"><span class=\"number\">32</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">10</span> - <span class=\"number\">22</span>   <span class=\"comment\"># 减</span></span><br><span class=\"line\">-<span class=\"number\">12</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">10</span> * <span class=\"number\">22</span>  <span class=\"comment\"># 乘</span></span><br><span class=\"line\"><span class=\"number\">220</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">10</span> / <span class=\"number\">22</span>   <span class=\"comment\"># 除，无论是否可以整除，得到的结果都是是浮点数</span></span><br><span class=\"line\"><span class=\"number\">0.45454545454545453</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">23</span> // <span class=\"number\">10</span>    <span class=\"comment\"># 地板除，返回除数的整数部分</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">23</span> % <span class=\"number\">10</span>     <span class=\"comment\"># 取余，返回除数的余数部分</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">2</span> ** <span class=\"number\">10</span>     <span class=\"comment\"># 乘方</span></span><br><span class=\"line\"><span class=\"number\">1024</span></span><br></pre></td></tr></table></figure>\n\n<p>​        <strong>Python还支持运算次序</strong>，因此你可在同一个表达式中使用多种运算。你还可以使用括号来修改运算次序，让Python按你指定的次序执行运算。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">2</span> + <span class=\"number\">3</span>*<span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">14</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>( <span class=\"number\">2</span> + <span class=\"number\">3</span>) * <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">20</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-2-浮点数\"><a href=\"#4-2-浮点数\" class=\"headerlink\" title=\"4.2 浮点数\"></a>4.2 浮点数</h3><p>​        <strong>Python将带小数点的数字都称为浮点数</strong>。大多数编程语言都使用了这个术语，它指出了这样一个事实：小数点可出现在数字的任何位置。每种编程语言都须细心设计，以妥善地处理浮点数，确保不管小数点出现在什么位置，数字的行为都是正常的。从很大程度上说，使用浮点数时都无需考虑其行为。你只需输入要使用的数字，Python通常都会按你期望的方式处理它们：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">0.2</span> + <span class=\"number\">0.2</span></span><br><span class=\"line\"><span class=\"number\">0.4</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">2</span> * <span class=\"number\">0.2</span></span><br><span class=\"line\"><span class=\"number\">0.4</span></span><br></pre></td></tr></table></figure>\n\n<p>​        但需要注意的是，结果包含的小数位数可能是不确定时，结果可能会出现误差，如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">0.1</span> + <span class=\"number\">0.1</span></span><br><span class=\"line\"><span class=\"number\">0.2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">0.1</span> + <span class=\"number\">0.1</span> + <span class=\"number\">0.1</span></span><br><span class=\"line\"><span class=\"number\">0.30000000000000004</span></span><br></pre></td></tr></table></figure>\n\n<p>​        在计算机的世界中，一个普遍存在的问题是浮点数并不能准确地表示为十进制，因此就出现了这种精度问题，那么如何精准的计算呢？</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> decimal <span class=\"keyword\">import</span> Decimal</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(Decimal(<span class=\"string\">&quot;0.1&quot;</span>) + Decimal(<span class=\"string\">&quot;0.1&quot;</span>) + Decimal(<span class=\"string\">&quot;0.1&quot;</span>))</span><br><span class=\"line\"><span class=\"number\">0.3</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-python之禅\"><a href=\"#5-python之禅\" class=\"headerlink\" title=\"5. python之禅\"></a>5. python之禅</h2><p>​        python之禅阐述了python的编码的原则和设计理念。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> this</span><br><span class=\"line\">The Zen of Python, by Tim Peters</span><br><span class=\"line\"></span><br><span class=\"line\">Beautiful <span class=\"keyword\">is</span> better than ugly.</span><br><span class=\"line\">Explicit <span class=\"keyword\">is</span> better than implicit.</span><br><span class=\"line\">Simple <span class=\"keyword\">is</span> better than <span class=\"built_in\">complex</span>.</span><br><span class=\"line\">Complex <span class=\"keyword\">is</span> better than complicated.</span><br><span class=\"line\">Flat <span class=\"keyword\">is</span> better than nested.</span><br><span class=\"line\">Sparse <span class=\"keyword\">is</span> better than dense.</span><br><span class=\"line\">Readability counts.</span><br><span class=\"line\">Special cases aren<span class=\"string\">&#x27;t special enough to break the rules.</span></span><br><span class=\"line\"><span class=\"string\">Although practicality beats purity.</span></span><br><span class=\"line\"><span class=\"string\">Errors should never pass silently.</span></span><br><span class=\"line\"><span class=\"string\">Unless explicitly silenced.</span></span><br><span class=\"line\"><span class=\"string\">In the face of ambiguity, refuse the temptation to guess.</span></span><br><span class=\"line\"><span class=\"string\">There should be one-- and preferably only one --obvious way to do it.</span></span><br><span class=\"line\"><span class=\"string\">Although that way may not be obvious at first unless you&#x27;</span>re Dutch.</span><br><span class=\"line\">Now <span class=\"keyword\">is</span> better than never.</span><br><span class=\"line\">Although never <span class=\"keyword\">is</span> often better than *right* now.</span><br><span class=\"line\">If the implementation <span class=\"keyword\">is</span> hard to explain, it<span class=\"string\">&#x27;s a bad idea.</span></span><br><span class=\"line\"><span class=\"string\">If the implementation is easy to explain, it may be a good idea.</span></span><br><span class=\"line\"><span class=\"string\">Namespaces are one honking great idea -- let&#x27;</span>s do more of those!</span><br></pre></td></tr></table></figure>\n\n<p>翻译如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Python之禅 by Tim Peters</span><br><span class=\"line\"> </span><br><span class=\"line\">优美胜于丑陋（Python 以编写优美的代码为目标）</span><br><span class=\"line\">明了胜于晦涩（优美的代码应当是明了的，命名规范，风格相似）</span><br><span class=\"line\">简洁胜于复杂（优美的代码应当是简洁的，不要有复杂的内部实现）</span><br><span class=\"line\">复杂胜于凌乱（如果复杂不可避免，那代码间也不能有难懂的关系，要保持接口简洁）</span><br><span class=\"line\">扁平胜于嵌套（优美的代码应当是扁平的，不能有太多的嵌套）</span><br><span class=\"line\">间隔胜于紧凑（优美的代码有适当的间隔，不要奢望一行代码解决问题）</span><br><span class=\"line\">可读性很重要（优美的代码是可读的）</span><br><span class=\"line\">即便假借特例的实用性之名，也不可违背这些规则（这些规则至高无上）</span><br><span class=\"line\">不要包容所有错误，除非你确定需要这样做（精准地捕获异常，不写 <span class=\"keyword\">except</span>:<span class=\"keyword\">pass</span> 风格的代码）</span><br><span class=\"line\">当存在多种可能，不要尝试去猜测</span><br><span class=\"line\">而是尽量找一种，最好是唯一一种明显的解决方案（如果不确定，就用穷举法）</span><br><span class=\"line\">虽然这并不容易，因为你不是 Python 之父（这里的 Dutch 是指 Guido ）</span><br><span class=\"line\">做也许好过不做，但不假思索就动手还不如不做（动手之前要细思量）</span><br><span class=\"line\">如果你无法向人描述你的方案，那肯定不是一个好方案；反之亦然（方案测评标准）</span><br><span class=\"line\">命名空间是一种绝妙的理念，我们应当多加利用（倡导与号召）</span><br></pre></td></tr></table></figure>\n","comments":true,"permalink":"https://scaven.site/2021-05/pVarString/","categories":[{"name":"python","slug":"python","permalink":"https://scaven.site/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"https://scaven.site/tags/python/"}]},{"title":"PythonList","date":"2021-05-02T05:49:44.000Z","path":"2021-05/pList/","content":"<h1 id=\"第三章-列表简介和列表操作\"><a href=\"#第三章-列表简介和列表操作\" class=\"headerlink\" title=\"第三章 列表简介和列表操作\"></a>第三章 列表简介和列表操作</h1><h2 id=\"1-认识列表\"><a href=\"#1-认识列表\" class=\"headerlink\" title=\"1. 认识列表\"></a>1. 认识列表</h2><h3 id=\"1-1-列表是什么？\"><a href=\"#1-1-列表是什么？\" class=\"headerlink\" title=\"1.1 列表是什么？\"></a>1.1 列表是什么？</h3><p>​        列表是由一系列按特定顺序排列的不相关的元素组成且可以更改的集合。在Python中，用方括号（[]）来表示列表，并用逗号来分隔其中的元素。从描述中，我们可以知道：</p>\n<span id=\"more\"></span>\n<ul>\n<li>列表中的元素是有顺序的，因此可以通过位置(索引)来访问</li>\n<li>列表中的元素可以被更改</li>\n<li>列表是一个集合，可以包含不定个数的元素</li>\n</ul>\n<h3 id=\"1-2-如何定义列表？\"><a href=\"#1-2-如何定义列表？\" class=\"headerlink\" title=\"1.2 如何定义列表？\"></a>1.2 如何定义列表？</h3><p><strong>方法1：直接定义</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L = [<span class=\"string\">&quot;北京&quot;</span>, <span class=\"string\">&quot;天津&quot;</span>, <span class=\"string\">&quot;上海&quot;</span>, <span class=\"string\">&quot;广州&quot;</span>, <span class=\"string\">&quot;重庆&quot;</span>, <span class=\"string\">&quot;西安&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(L)</span><br><span class=\"line\">[<span class=\"string\">&#x27;北京&#x27;</span>, <span class=\"string\">&#x27;天津&#x27;</span>, <span class=\"string\">&#x27;上海&#x27;</span>, <span class=\"string\">&#x27;广州&#x27;</span>, <span class=\"string\">&#x27;重庆&#x27;</span>, <span class=\"string\">&#x27;西安&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看变量L的类型</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">type</span>(L)</span><br><span class=\"line\">&lt;<span class=\"class\"><span class=\"keyword\">class</span> &#x27;<span class=\"title\">list</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>方法2：通过list()函数定义</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>var = <span class=\"string\">&quot;I love Python!&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"built_in\">list</span>(var))</span><br><span class=\"line\">[<span class=\"string\">&#x27;I&#x27;</span>, <span class=\"string\">&#x27; &#x27;</span>, <span class=\"string\">&#x27;l&#x27;</span>, <span class=\"string\">&#x27;o&#x27;</span>, <span class=\"string\">&#x27;v&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span>, <span class=\"string\">&#x27; &#x27;</span>, <span class=\"string\">&#x27;P&#x27;</span>, <span class=\"string\">&#x27;y&#x27;</span>, <span class=\"string\">&#x27;t&#x27;</span>, <span class=\"string\">&#x27;h&#x27;</span>, <span class=\"string\">&#x27;o&#x27;</span>, <span class=\"string\">&#x27;n&#x27;</span>, <span class=\"string\">&#x27;!&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">type</span>(<span class=\"built_in\">list</span>(var))</span><br><span class=\"line\">&lt;<span class=\"class\"><span class=\"keyword\">class</span> &#x27;<span class=\"title\">list</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-访问列表的元素\"><a href=\"#2-访问列表的元素\" class=\"headerlink\" title=\"2 访问列表的元素\"></a>2 访问列表的元素</h2><h3 id=\"2-1-通过索引访问列表的元素\"><a href=\"#2-1-通过索引访问列表的元素\" class=\"headerlink\" title=\"2.1 通过索引访问列表的元素\"></a>2.1 通过索引访问列表的元素</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L = [<span class=\"string\">&quot;北京&quot;</span>, <span class=\"string\">&quot;天津&quot;</span>, <span class=\"string\">&quot;上海&quot;</span>, <span class=\"string\">&quot;广州&quot;</span>, <span class=\"string\">&quot;重庆&quot;</span>, <span class=\"string\">&quot;西安&quot;</span>]</span><br></pre></td></tr></table></figure>\n\n<p>​        上面定义的列表变量<code>L</code>的正向和反向索引如下，和字符串一样，访问列表也是通过索引。</p>\n<p><img src=\"image-20210425191901360.png\" alt=\"image-20210425191901360\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 正向取值</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(L[<span class=\"number\">0</span>])</span><br><span class=\"line\">北京</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 反向取值</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(L[-<span class=\"number\">6</span>])</span><br><span class=\"line\">北京</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 对列表进行切片</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(L[:<span class=\"number\">4</span>])</span><br><span class=\"line\">[<span class=\"string\">&#x27;北京&#x27;</span>, <span class=\"string\">&#x27;天津&#x27;</span>, <span class=\"string\">&#x27;上海&#x27;</span>, <span class=\"string\">&#x27;广州&#x27;</span>]</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 指定步长</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(L[::<span class=\"number\">2</span>])</span><br><span class=\"line\">[<span class=\"string\">&#x27;北京&#x27;</span>, <span class=\"string\">&#x27;上海&#x27;</span>, <span class=\"string\">&#x27;重庆&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将列表排反序，即将列表的元素倒过来</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(L[::-<span class=\"number\">1</span>])   </span><br><span class=\"line\">[<span class=\"string\">&#x27;西安&#x27;</span>, <span class=\"string\">&#x27;重庆&#x27;</span>, <span class=\"string\">&#x27;广州&#x27;</span>, <span class=\"string\">&#x27;上海&#x27;</span>, <span class=\"string\">&#x27;天津&#x27;</span>, <span class=\"string\">&#x27;北京&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-使用列表中的元素\"><a href=\"#2-2-使用列表中的元素\" class=\"headerlink\" title=\"2.2 使用列表中的元素\"></a>2.2 使用列表中的元素</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&quot;我来自&quot;</span> + L[<span class=\"number\">0</span>] + <span class=\"string\">&quot;,&quot;</span> + <span class=\"string\">&quot;我在&quot;</span> + L[-<span class=\"number\">4</span>] + <span class=\"string\">&quot;工作。&quot;</span> + <span class=\"string\">&quot;我想去&quot;</span> + L[<span class=\"number\">4</span>] + <span class=\"string\">&quot;或&quot;</span> + L[<span class=\"number\">5</span>] + <span class=\"string\">&quot;旅游。&quot;</span>)</span><br><span class=\"line\">我来自北京,我在上海工作。我想去重庆或西安旅游。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-修改、添加和删除元素\"><a href=\"#3-修改、添加和删除元素\" class=\"headerlink\" title=\"3 修改、添加和删除元素\"></a>3 修改、添加和删除元素</h2><p>​        列表中的元素是可以被修改、添加和删除。</p>\n<h3 id=\"3-1-修改列表的元素\"><a href=\"#3-1-修改列表的元素\" class=\"headerlink\" title=\"3.1 修改列表的元素\"></a>3.1 修改列表的元素</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L = [<span class=\"string\">&quot;北京&quot;</span>, <span class=\"string\">&quot;天津&quot;</span>, <span class=\"string\">&quot;上海&quot;</span>, <span class=\"string\">&quot;广州&quot;</span>, <span class=\"string\">&quot;重庆&quot;</span>, <span class=\"string\">&quot;西安&quot;</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(L)</span><br><span class=\"line\"><span class=\"number\">1843256916608</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将列表中的第3个元素(索引为2)&quot;上海&quot;修改成&quot;成都&quot;，此时列表的元素已经发生了变化，但是列表的内存地址并未变化</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L[<span class=\"number\">2</span>] = <span class=\"string\">&quot;成都&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(L)</span><br><span class=\"line\">[<span class=\"string\">&#x27;北京&#x27;</span>, <span class=\"string\">&#x27;天津&#x27;</span>, <span class=\"string\">&#x27;成都&#x27;</span>, <span class=\"string\">&#x27;广州&#x27;</span>, <span class=\"string\">&#x27;重庆&#x27;</span>, <span class=\"string\">&#x27;西安&#x27;</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(L)</span><br><span class=\"line\"><span class=\"number\">1843256916608</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-在列表中添加元素\"><a href=\"#3-2-在列表中添加元素\" class=\"headerlink\" title=\"3.2 在列表中添加元素\"></a>3.2 在列表中添加元素</h3><h4 id=\"3-2-1-在列表末尾追加元素\"><a href=\"#3-2-1-在列表末尾追加元素\" class=\"headerlink\" title=\"3.2.1 在列表末尾追加元素\"></a>3.2.1 在列表末尾追加元素</h4><p>​        格式：<code>L.append(&quot;添加的列表元素&quot;)</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L = [<span class=\"string\">&quot;北京&quot;</span>, <span class=\"string\">&quot;天津&quot;</span>, <span class=\"string\">&quot;上海&quot;</span>, <span class=\"string\">&quot;广州&quot;</span>, <span class=\"string\">&quot;重庆&quot;</span>, <span class=\"string\">&quot;西安&quot;</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L.append(<span class=\"string\">&quot;乌鲁木齐&quot;</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(L)</span><br><span class=\"line\">[<span class=\"string\">&#x27;北京&#x27;</span>, <span class=\"string\">&#x27;天津&#x27;</span>, <span class=\"string\">&#x27;上海&#x27;</span>, <span class=\"string\">&#x27;广州&#x27;</span>, <span class=\"string\">&#x27;重庆&#x27;</span>, <span class=\"string\">&#x27;西安&#x27;</span>, <span class=\"string\">&#x27;乌鲁木齐&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-2-2-在指定位置插入元素\"><a href=\"#3-2-2-在指定位置插入元素\" class=\"headerlink\" title=\"3.2.2 在指定位置插入元素\"></a>3.2.2 在指定位置插入元素</h4><p>​        格式：L.insert(“插入的元素”, 索引值)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L = [<span class=\"string\">&quot;北京&quot;</span>, <span class=\"string\">&quot;天津&quot;</span>, <span class=\"string\">&quot;上海&quot;</span>, <span class=\"string\">&quot;广州&quot;</span>, <span class=\"string\">&quot;重庆&quot;</span>, <span class=\"string\">&quot;西安&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从索引为3的地方插入一个元素&quot;乌鲁木齐&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L.insert(<span class=\"number\">3</span>, <span class=\"string\">&quot;乌鲁木齐&quot;</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(L)</span><br><span class=\"line\">[<span class=\"string\">&#x27;北京&#x27;</span>, <span class=\"string\">&#x27;天津&#x27;</span>, <span class=\"string\">&#x27;上海&#x27;</span>, <span class=\"string\">&#x27;乌鲁木齐&#x27;</span>, <span class=\"string\">&#x27;广州&#x27;</span>, <span class=\"string\">&#x27;重庆&#x27;</span>, <span class=\"string\">&#x27;西安&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从索引为0的位置插入</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L = [<span class=\"string\">&quot;北京&quot;</span>, <span class=\"string\">&quot;天津&quot;</span>, <span class=\"string\">&quot;上海&quot;</span>, <span class=\"string\">&quot;广州&quot;</span>, <span class=\"string\">&quot;重庆&quot;</span>, <span class=\"string\">&quot;西安&quot;</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L.insert(<span class=\"number\">0</span>, <span class=\"string\">&quot;杭州&quot;</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(L)</span><br><span class=\"line\">[<span class=\"string\">&#x27;杭州&#x27;</span>, <span class=\"string\">&#x27;北京&#x27;</span>, <span class=\"string\">&#x27;天津&#x27;</span>, <span class=\"string\">&#x27;上海&#x27;</span>, <span class=\"string\">&#x27;广州&#x27;</span>, <span class=\"string\">&#x27;重庆&#x27;</span>, <span class=\"string\">&#x27;西安&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-2-3-从列表中删除元素\"><a href=\"#3-2-3-从列表中删除元素\" class=\"headerlink\" title=\"3.2.3 从列表中删除元素\"></a>3.2.3 从列表中删除元素</h4><p>删除列表元素的两种方法：</p>\n<ul>\n<li>del L[index]：删除指定位置的元素</li>\n<li>L.pop()：默认删除最后一个元素，也可以删除指定位置的元素</li>\n<li>L.remove(“元素”)：移除列表中某个元素的第一个匹配项</li>\n<li>使用场景：如果要从列表中删除一个元素，且不再以任何方式使用它，就使用del语句；如果要在删除元素后还能继续使用它，就使用方法pop()。</li>\n</ul>\n<p><strong>(1).del L[index]</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L = [<span class=\"string\">&quot;北京&quot;</span>, <span class=\"string\">&quot;天津&quot;</span>, <span class=\"string\">&quot;上海&quot;</span>, <span class=\"string\">&quot;广州&quot;</span>, <span class=\"string\">&quot;重庆&quot;</span>, <span class=\"string\">&quot;西安&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除索引为0的元素</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">del</span> L[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(L)</span><br><span class=\"line\">[<span class=\"string\">&#x27;天津&#x27;</span>, <span class=\"string\">&#x27;上海&#x27;</span>, <span class=\"string\">&#x27;广州&#x27;</span>, <span class=\"string\">&#x27;重庆&#x27;</span>, <span class=\"string\">&#x27;西安&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p><strong>(2). L.pop()的用法</strong></p>\n<ul>\n<li>删除最后一个元素</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 通过pop()方法删除元素有返回值，这种方法对于要获取删除值的场景很有用</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L = [<span class=\"string\">&quot;北京&quot;</span>, <span class=\"string\">&quot;天津&quot;</span>, <span class=\"string\">&quot;上海&quot;</span>, <span class=\"string\">&quot;广州&quot;</span>, <span class=\"string\">&quot;重庆&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L.pop()     <span class=\"comment\"># 返回的是一个字符串类型</span></span><br><span class=\"line\"><span class=\"string\">&#x27;重庆&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(L)</span><br><span class=\"line\">[<span class=\"string\">&#x27;北京&#x27;</span>, <span class=\"string\">&#x27;天津&#x27;</span>, <span class=\"string\">&#x27;上海&#x27;</span>, <span class=\"string\">&#x27;广州&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除指定位置的元素，pop()方法可以删除指定位置的元素，只需要将索引告诉pop()即可</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L = [<span class=\"string\">&quot;北京&quot;</span>, <span class=\"string\">&quot;天津&quot;</span>, <span class=\"string\">&quot;上海&quot;</span>, <span class=\"string\">&quot;广州&quot;</span>, <span class=\"string\">&quot;重庆&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L.pop(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;上海&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(L)</span><br><span class=\"line\">[<span class=\"string\">&#x27;北京&#x27;</span>, <span class=\"string\">&#x27;天津&#x27;</span>, <span class=\"string\">&#x27;广州&#x27;</span>, <span class=\"string\">&#x27;重庆&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p><strong>(3). L.remove(“元素”)</strong></p>\n<p>​        方法remove()只删除第一个指定的值。如果要删除的值可能在列表中出现多次，就需要使用循环来判断是否删除了所有这样的值。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L = [<span class=\"string\">&quot;北京&quot;</span>, <span class=\"string\">&quot;天津&quot;</span>, <span class=\"string\">&quot;上海&quot;</span>, <span class=\"string\">&quot;广州&quot;</span>, <span class=\"string\">&quot;重庆&quot;</span>, <span class=\"string\">&quot;上海&quot;</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L.remove(<span class=\"string\">&quot;上海&quot;</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(L)</span><br><span class=\"line\">[<span class=\"string\">&#x27;北京&#x27;</span>, <span class=\"string\">&#x27;天津&#x27;</span>, <span class=\"string\">&#x27;广州&#x27;</span>, <span class=\"string\">&#x27;重庆&#x27;</span>, <span class=\"string\">&#x27;上海&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-3-组织列表\"><a href=\"#3-3-组织列表\" class=\"headerlink\" title=\"3.3 组织列表\"></a>3.3 组织列表</h3><p>​        在你创建的列表中，元素的排列顺序常常是无法预测的，因为你并非总能控制用户提供数据的顺序。这虽然在大多数情况下都是不可避免的，但你经常需要以特定的顺序呈现信息。有时候，你希望保留列表元素最初的排列顺序，而有时候又需要调整排列顺序。Python提供了很多组织列表的方式，可根据具体情况选用。</p>\n<h4 id=\"3-3-1-使用方法-sort-对列表进行永久性排序\"><a href=\"#3-3-1-使用方法-sort-对列表进行永久性排序\" class=\"headerlink\" title=\"3.3.1 使用方法 sort()对列表进行永久性排序\"></a>3.3.1 使用方法 sort()对列表进行永久性排序</h4><p><strong>(1). 正序</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>cars = [<span class=\"string\">&#x27;bmw&#x27;</span>, <span class=\"string\">&#x27;audi&#x27;</span>, <span class=\"string\">&#x27;toyota&#x27;</span>, <span class=\"string\">&#x27;subaru&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 对列表进行排序</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>cars.sort()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列表cars发生了变化，一般性的做饭是，先对原先列表进行备份，然后再进行排序</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(cars)               </span><br><span class=\"line\">[<span class=\"string\">&#x27;audi&#x27;</span>, <span class=\"string\">&#x27;bmw&#x27;</span>, <span class=\"string\">&#x27;subaru&#x27;</span>, <span class=\"string\">&#x27;toyota&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p><strong>(2). 反序</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>cars = [<span class=\"string\">&#x27;bmw&#x27;</span>, <span class=\"string\">&#x27;audi&#x27;</span>, <span class=\"string\">&#x27;toyota&#x27;</span>, <span class=\"string\">&#x27;subaru&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>cars.sort(reverse=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(cars)</span><br><span class=\"line\">[<span class=\"string\">&#x27;toyota&#x27;</span>, <span class=\"string\">&#x27;subaru&#x27;</span>, <span class=\"string\">&#x27;bmw&#x27;</span>, <span class=\"string\">&#x27;audi&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-3-2-使用函数-sorted-对列表进行临时排序\"><a href=\"#3-3-2-使用函数-sorted-对列表进行临时排序\" class=\"headerlink\" title=\"3.3.2 使用函数 sorted()对列表进行临时排序\"></a>3.3.2 使用函数 sorted()对列表进行临时排序</h4><p>​        要保留列表元素原来的排列顺序，同时以特定的顺序呈现它们，可使用函数sorted()。函数sorted()让你能够按特定顺序显示列表元素，同时不影响它们在列表中的原始排列顺序。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>cars = [<span class=\"string\">&#x27;bmw&#x27;</span>, <span class=\"string\">&#x27;audi&#x27;</span>, <span class=\"string\">&#x27;toyota&#x27;</span>, <span class=\"string\">&#x27;subaru&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">sorted</span>(cars)</span><br><span class=\"line\">[<span class=\"string\">&#x27;audi&#x27;</span>, <span class=\"string\">&#x27;bmw&#x27;</span>, <span class=\"string\">&#x27;subaru&#x27;</span>, <span class=\"string\">&#x27;toyota&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列表cars并未发生变化</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(cars)</span><br><span class=\"line\">[<span class=\"string\">&#x27;bmw&#x27;</span>, <span class=\"string\">&#x27;audi&#x27;</span>, <span class=\"string\">&#x27;toyota&#x27;</span>, <span class=\"string\">&#x27;subaru&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-3-3-反向打印列表\"><a href=\"#3-3-3-反向打印列表\" class=\"headerlink\" title=\"3.3.3 反向打印列表\"></a>3.3.3 反向打印列表</h4><p><strong>(1). 使用索引</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>cars = [<span class=\"string\">&#x27;bmw&#x27;</span>, <span class=\"string\">&#x27;audi&#x27;</span>, <span class=\"string\">&#x27;toyota&#x27;</span>, <span class=\"string\">&#x27;subaru&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(cars[::-<span class=\"number\">1</span>])</span><br><span class=\"line\">[<span class=\"string\">&#x27;subaru&#x27;</span>, <span class=\"string\">&#x27;toyota&#x27;</span>, <span class=\"string\">&#x27;audi&#x27;</span>, <span class=\"string\">&#x27;bmw&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p><strong>(2). 使用reverse()方法</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>cars = [<span class=\"string\">&#x27;bmw&#x27;</span>, <span class=\"string\">&#x27;audi&#x27;</span>, <span class=\"string\">&#x27;toyota&#x27;</span>, <span class=\"string\">&#x27;subaru&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>cars.reverse()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(cars)     <span class=\"comment\"># 列表cars发生了变化</span></span><br><span class=\"line\">[<span class=\"string\">&#x27;subaru&#x27;</span>, <span class=\"string\">&#x27;toyota&#x27;</span>, <span class=\"string\">&#x27;audi&#x27;</span>, <span class=\"string\">&#x27;bmw&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p><strong>(2). 使用reversed()函数</strong></p>\n<p>​        reversed()函数的作用是返回一个反转的迭代器</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>cars = [<span class=\"string\">&#x27;bmw&#x27;</span>, <span class=\"string\">&#x27;audi&#x27;</span>, <span class=\"string\">&#x27;toyota&#x27;</span>, <span class=\"string\">&#x27;subaru&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">reversed</span>(cars)</span><br><span class=\"line\">&lt;list_reverseiterator <span class=\"built_in\">object</span> at <span class=\"number\">0x000001D03871A580</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"built_in\">list</span>(<span class=\"built_in\">reversed</span>(cars)))</span><br><span class=\"line\">[<span class=\"string\">&#x27;subaru&#x27;</span>, <span class=\"string\">&#x27;toyota&#x27;</span>, <span class=\"string\">&#x27;audi&#x27;</span>, <span class=\"string\">&#x27;bmw&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-3-4-列表的长度–len\"><a href=\"#3-3-4-列表的长度–len\" class=\"headerlink\" title=\"3.3.4 列表的长度–len()\"></a>3.3.4 列表的长度–len()</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>cars = [<span class=\"string\">&#x27;bmw&#x27;</span>, <span class=\"string\">&#x27;audi&#x27;</span>, <span class=\"string\">&#x27;toyota&#x27;</span>, <span class=\"string\">&#x27;subaru&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(cars))</span><br><span class=\"line\"><span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-3-5-统计某个元素在列表中出现的次数–count\"><a href=\"#3-3-5-统计某个元素在列表中出现的次数–count\" class=\"headerlink\" title=\"3.3.5 统计某个元素在列表中出现的次数–count()\"></a>3.3.5 统计某个元素在列表中出现的次数–count()</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L = [<span class=\"string\">&quot;北京&quot;</span>, <span class=\"string\">&quot;天津&quot;</span>, <span class=\"string\">&quot;上海&quot;</span>, <span class=\"string\">&quot;广州&quot;</span>, <span class=\"string\">&quot;重庆&quot;</span>, <span class=\"string\">&quot;上海&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(L.count(<span class=\"string\">&quot;上海&quot;</span>))</span><br><span class=\"line\"><span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-3-6-获取列表中某元素第一次出现的索引值\"><a href=\"#3-3-6-获取列表中某元素第一次出现的索引值\" class=\"headerlink\" title=\"3.3.6 获取列表中某元素第一次出现的索引值\"></a>3.3.6 获取列表中某元素第一次出现的索引值</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L = [<span class=\"string\">&quot;北京&quot;</span>, <span class=\"string\">&quot;天津&quot;</span>, <span class=\"string\">&quot;上海&quot;</span>, <span class=\"string\">&quot;广州&quot;</span>, <span class=\"string\">&quot;重庆&quot;</span>, <span class=\"string\">&quot;上海&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(L.index(<span class=\"string\">&quot;上海&quot;</span>))</span><br><span class=\"line\"><span class=\"number\">2</span>      <span class=\"comment\"># 注意这里的2是指索引，是第三个元素</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-3-7-清空列表和删除列表\"><a href=\"#3-3-7-清空列表和删除列表\" class=\"headerlink\" title=\"3.3.7 清空列表和删除列表\"></a>3.3.7 清空列表和删除列表</h4><ul>\n<li>清空列表：是指列表中的元素个数为0，列表还存在</li>\n<li>删除列表：列表被删除，内存空间被回收，列表不存在</li>\n</ul>\n<p><strong>(1). 清空列表</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L = [<span class=\"string\">&quot;北京&quot;</span>, <span class=\"string\">&quot;天津&quot;</span>, <span class=\"string\">&quot;上海&quot;</span>, <span class=\"string\">&quot;广州&quot;</span>, <span class=\"string\">&quot;重庆&quot;</span>, <span class=\"string\">&quot;上海&quot;</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(L)         <span class=\"comment\"># 清空列表前，列表的内存值</span></span><br><span class=\"line\"><span class=\"number\">1993811645504</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L.clear()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(L)</span><br><span class=\"line\">[]             <span class=\"comment\"># 表示一个空列表，列表长度为0的列表</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">len</span>(L)     <span class=\"comment\"># 列表长度为0，即列表中不存在元素</span></span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(L)     <span class=\"comment\"># 列表的内存值未发生变化</span></span><br><span class=\"line\"><span class=\"number\">1993811645504</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>(2). 删除列表</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L = [<span class=\"string\">&quot;北京&quot;</span>, <span class=\"string\">&quot;天津&quot;</span>, <span class=\"string\">&quot;上海&quot;</span>, <span class=\"string\">&quot;广州&quot;</span>, <span class=\"string\">&quot;重庆&quot;</span>, <span class=\"string\">&quot;上海&quot;</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(L)</span><br><span class=\"line\"><span class=\"number\">1993808982720</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">del</span> L</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(L)    <span class=\"comment\"># 提示列表L未被定义，即不存在列表L</span></span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">&quot;&lt;pyshell#86&gt;&quot;</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(L)</span><br><span class=\"line\">NameError: name <span class=\"string\">&#x27;L&#x27;</span> <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> defined</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">len</span>(L)    <span class=\"comment\"># 提示列表L未被定义，即不存在列表L</span></span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">&quot;&lt;pyshell#87&gt;&quot;</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    <span class=\"built_in\">len</span>(L)</span><br><span class=\"line\">NameError: name <span class=\"string\">&#x27;L&#x27;</span> <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> defined</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(L)    <span class=\"comment\"># 提示列表L未被定义，即不存在列表L</span></span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">&quot;&lt;pyshell#88&gt;&quot;</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    <span class=\"built_in\">id</span>(L)</span><br><span class=\"line\">NameError: name <span class=\"string\">&#x27;L&#x27;</span> <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> defined</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-3-8-复制列表\"><a href=\"#3-3-8-复制列表\" class=\"headerlink\" title=\"3.3.8 复制列表\"></a>3.3.8 复制列表</h4><p><strong>(1). 通过L.copy()方法复制列表</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L = [<span class=\"string\">&quot;北京&quot;</span>, <span class=\"string\">&quot;天津&quot;</span>, <span class=\"string\">&quot;广州&quot;</span>, <span class=\"string\">&quot;重庆&quot;</span>, <span class=\"string\">&quot;上海&quot;</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(L)</span><br><span class=\"line\"><span class=\"number\">1993811792448</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>NEW = L.copy()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(NEW)</span><br><span class=\"line\">[<span class=\"string\">&#x27;北京&#x27;</span>, <span class=\"string\">&#x27;天津&#x27;</span>, <span class=\"string\">&#x27;广州&#x27;</span>, <span class=\"string\">&#x27;重庆&#x27;</span>, <span class=\"string\">&#x27;上海&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(NEW)    <span class=\"comment\"># 复制后的列表NEW和复制前的列表内存值不一样，说明不是同一个列表</span></span><br><span class=\"line\"><span class=\"number\">1993811791936</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 对列表NEW进行修改，看看是否会影响原列表</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">del</span> NEW[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(NEW)</span><br><span class=\"line\">[<span class=\"string\">&#x27;天津&#x27;</span>, <span class=\"string\">&#x27;上海&#x27;</span>, <span class=\"string\">&#x27;广州&#x27;</span>, <span class=\"string\">&#x27;重庆&#x27;</span>, <span class=\"string\">&#x27;上海&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(L)             <span class=\"comment\"># 删除复制后列表的元素，原列表未变化</span></span><br><span class=\"line\">[<span class=\"string\">&#x27;北京&#x27;</span>, <span class=\"string\">&#x27;天津&#x27;</span>, <span class=\"string\">&#x27;上海&#x27;</span>, <span class=\"string\">&#x27;广州&#x27;</span>, <span class=\"string\">&#x27;重庆&#x27;</span>, <span class=\"string\">&#x27;上海&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p>复制前后的内存地址变化</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列表L和列表L中元素的内存地址</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(L)</span><br><span class=\"line\"><span class=\"number\">2788859105152</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(L[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"number\">2788859139152</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(L[<span class=\"number\">1</span>])</span><br><span class=\"line\"><span class=\"number\">2788859139056</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(L[<span class=\"number\">2</span>])</span><br><span class=\"line\"><span class=\"number\">2788859139248</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(L[<span class=\"number\">3</span>])</span><br><span class=\"line\"><span class=\"number\">2788859139344</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(L[<span class=\"number\">4</span>])</span><br><span class=\"line\"><span class=\"number\">2788859139440</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(NEW)</span><br><span class=\"line\"><span class=\"number\">2788859097216</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查L和NEW两个列表中元素的内存地址是否一样，结果为True表示内存地址一样</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L[<span class=\"number\">0</span>] <span class=\"keyword\">is</span> NEW[<span class=\"number\">0</span>] <span class=\"keyword\">and</span> L[<span class=\"number\">1</span>] <span class=\"keyword\">is</span> NEW[<span class=\"number\">1</span>] <span class=\"keyword\">and</span> L[<span class=\"number\">2</span>] <span class=\"keyword\">is</span> NEW[<span class=\"number\">2</span>] <span class=\"keyword\">and</span> L[<span class=\"number\">3</span>] <span class=\"keyword\">is</span> NEW[<span class=\"number\">3</span>] <span class=\"keyword\">and</span> L[<span class=\"number\">4</span>] <span class=\"keyword\">is</span> NEW[<span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>\n\n<p>内存地址和元素的关联关系如下图所示：</p>\n<img src=\"image-20210426151953676.png\" alt=\"image-20210426151953676\" style=\"zoom:67%;\" />\n\n\n\n<p><strong>(2). 通过变量赋值的方式复制列表</strong></p>\n<p>​        本质是创建一个指向被拷贝列表的引用，他们使用的是同一块内存区域，因为无论更改其中任何一个变量,我们被拷贝的变量也会跟着改变。简单的来说,赋值拷贝,无论把列表赋值给多少个变量,这些变量指向的都是同一个列表</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L = [<span class=\"string\">&quot;北京&quot;</span>, <span class=\"string\">&quot;天津&quot;</span>, <span class=\"string\">&quot;上海&quot;</span>, <span class=\"string\">&quot;广州&quot;</span>, <span class=\"string\">&quot;重庆&quot;</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(L)</span><br><span class=\"line\"><span class=\"number\">1993812065152</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>NEW = L     <span class=\"comment\"># 两个列表的内存地址一样，说明是同一个列表，对其中的一个修改会影响另一个的值</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(NEW)</span><br><span class=\"line\"><span class=\"number\">1993812065152</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">del</span> NEW[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(L)</span><br><span class=\"line\">[<span class=\"string\">&#x27;天津&#x27;</span>, <span class=\"string\">&#x27;上海&#x27;</span>, <span class=\"string\">&#x27;广州&#x27;</span>, <span class=\"string\">&#x27;重庆&#x27;</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(NEW)</span><br><span class=\"line\">[<span class=\"string\">&#x27;天津&#x27;</span>, <span class=\"string\">&#x27;上海&#x27;</span>, <span class=\"string\">&#x27;广州&#x27;</span>, <span class=\"string\">&#x27;重庆&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p>内存地址和元素关联关系如下图：</p>\n<img src=\"image-20210426154410461.png\" alt=\"image-20210426154410461\" style=\"zoom:67%;\" />\n\n<p>深浅复制的问题：</p>\n<p>​        在python中，如果列表中不嵌套列表，则对<code>L.copy()</code>方法复制前后的两个列表进行操作将不会影响另一个列表，但是如果存在嵌套列表，则将发生变化</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L = [<span class=\"string\">&quot;boy&quot;</span>, [<span class=\"number\">111</span>, <span class=\"string\">&quot;222&quot;</span>], <span class=\"string\">&quot;girl&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>NEW = L.copy()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(NEW)</span><br><span class=\"line\">[<span class=\"string\">&#x27;boy&#x27;</span>, [<span class=\"number\">111</span>, <span class=\"string\">&#x27;222&#x27;</span>], <span class=\"string\">&#x27;girl&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看列表L和列表NEW中相对应的每个元素的内存地址是否一致，输出结果为True，说明L和NEW列表的内容id一样</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L[<span class=\"number\">0</span>] <span class=\"keyword\">is</span> NEW[<span class=\"number\">0</span>] <span class=\"keyword\">and</span> L[<span class=\"number\">1</span>] <span class=\"keyword\">is</span> NEW[<span class=\"number\">1</span>] <span class=\"keyword\">and</span> L[<span class=\"number\">2</span>] <span class=\"keyword\">is</span> NEW[<span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改列表L的第二个元素(即嵌套列表)中的值</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L[<span class=\"number\">1</span>][<span class=\"number\">0</span>] = <span class=\"string\">&quot;Hello&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 两个列表的值都发生了变化</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(L)</span><br><span class=\"line\">[<span class=\"string\">&#x27;boy&#x27;</span>, [<span class=\"string\">&#x27;Hello&#x27;</span>, <span class=\"string\">&#x27;222&#x27;</span>], <span class=\"string\">&#x27;girl&#x27;</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(NEW)</span><br><span class=\"line\">[<span class=\"string\">&#x27;boy&#x27;</span>, [<span class=\"string\">&#x27;Hello&#x27;</span>, <span class=\"string\">&#x27;222&#x27;</span>], <span class=\"string\">&#x27;girl&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p>​        执行代码<code>NEW = L.copy()</code>时，内存地址指向如下图，也就是说浅复制的时候，只复制了第一层内存地址，对于如嵌套这样的第二层地址并没有被复制，因此当我们修改嵌套列表的值时，复制前后的列表的值都发生了变化。</p>\n<img src=\"image-20210426161707148.png\" alt=\"image-20210426161707148\" style=\"zoom:67%;\" />\n\n<p>​        执行代码<code>L[1][0] = &quot;Hello&quot;</code>时，内存中的整数<code>111</code>的指向丢失，等待被内存回收，重新指向了定义的值<code>&quot;Hello&quot;</code>,内存地址指向如下图：</p>\n<img src=\"image-20210426162220761.png\" alt=\"image-20210426162220761\" style=\"zoom:67%;\" />\n\n<p>​        对于这种嵌套列表的情况，我们应该使用深拷贝。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> copy</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L = [<span class=\"string\">&quot;boy&quot;</span>, [<span class=\"number\">111</span>, <span class=\"string\">&quot;222&quot;</span>], <span class=\"string\">&quot;girl&quot;</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(L)</span><br><span class=\"line\">[<span class=\"string\">&#x27;boy&#x27;</span>, [<span class=\"number\">111</span>, <span class=\"string\">&#x27;222&#x27;</span>], <span class=\"string\">&#x27;girl&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>NEW = copy.deepcopy(L)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(NEW)</span><br><span class=\"line\">[<span class=\"string\">&#x27;boy&#x27;</span>, [<span class=\"number\">111</span>, <span class=\"string\">&#x27;222&#x27;</span>], <span class=\"string\">&#x27;girl&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改列表L的第二个元素(即嵌套列表)中的值</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L[<span class=\"number\">1</span>][<span class=\"number\">0</span>] = <span class=\"string\">&quot;Hello&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列表L的元素被修改了</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(L)</span><br><span class=\"line\">[<span class=\"string\">&#x27;boy&#x27;</span>, [<span class=\"string\">&#x27;Hello&#x27;</span>, <span class=\"string\">&#x27;222&#x27;</span>], <span class=\"string\">&#x27;girl&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 复制过后的列表NEW的元素没有被修改了</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(NEW)</span><br><span class=\"line\">[<span class=\"string\">&#x27;boy&#x27;</span>, [<span class=\"number\">111</span>, <span class=\"string\">&#x27;222&#x27;</span>], <span class=\"string\">&#x27;girl&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p>深拷贝如下图所示：</p>\n<img src=\"image-20210426164206901.png\" alt=\"image-20210426164206901\" style=\"zoom:67%;\" />\n\n\n\n<h4 id=\"3-3-9-在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）\"><a href=\"#3-3-9-在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）\" class=\"headerlink\" title=\"3.3.9 在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）\"></a>3.3.9 在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L1 = [<span class=\"string\">&quot;北京&quot;</span>, <span class=\"string\">&quot;天津&quot;</span>, <span class=\"string\">&quot;上海&quot;</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L2 = [<span class=\"string\">&quot;西安&quot;</span>, <span class=\"string\">&quot;广州&quot;</span>, <span class=\"string\">&quot;重庆&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将列表L2的元素扩展到列表L1中，此时列表L1中将按顺序加入L2的元素，列表L2不变化，L1将发生变化</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L1.extend(L2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(L1)     <span class=\"comment\"># 列表L1发生了变化</span></span><br><span class=\"line\">[<span class=\"string\">&#x27;北京&#x27;</span>, <span class=\"string\">&#x27;天津&#x27;</span>, <span class=\"string\">&#x27;上海&#x27;</span>, <span class=\"string\">&#x27;西安&#x27;</span>, <span class=\"string\">&#x27;广州&#x27;</span>, <span class=\"string\">&#x27;重庆&#x27;</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(L2)    <span class=\"comment\"># 列表L2未发生变化</span></span><br><span class=\"line\">[<span class=\"string\">&#x27;西安&#x27;</span>, <span class=\"string\">&#x27;广州&#x27;</span>, <span class=\"string\">&#x27;重庆&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"4-遍历整个列表\"><a href=\"#4-遍历整个列表\" class=\"headerlink\" title=\"4 遍历整个列表\"></a>4 遍历整个列表</h2><p>​        如何快速的取出列表中的元素？当然如果是取出列表中的一些元素，我们肯定会使用索引。但，如果我们想取出列表中的所有元素，使用索引的方式将浪费大量的时间，这里我们可以使用for循环进行遍历整个列表，然后将列表的元素一一取出。</p>\n<p>​        for循环格式：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> [var] <span class=\"keyword\">in</span> L:   <span class=\"comment\"># 表示当[var]在L中，</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span>          <span class=\"comment\">#  这里是要执行的代码，需要缩进四个空格，这里将从L中取出每个元素，分别执行代码，直到L中没有元素为止</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;for循环结束了&quot;</span>)  <span class=\"comment\"># 这里的print()代码，由于跟for循环是同一个缩进，因此将在所有的for循环执行完成后被执行</span></span><br></pre></td></tr></table></figure>\n\n<p>案例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L = [<span class=\"string\">&quot;北京&quot;</span>, <span class=\"string\">&quot;天津&quot;</span>, <span class=\"string\">&quot;上海&quot;</span>, <span class=\"string\">&quot;广州&quot;</span>, <span class=\"string\">&quot;重庆&quot;</span>, <span class=\"string\">&quot;西安&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> L:</span><br><span class=\"line\">      <span class=\"built_in\">print</span>(i)</span><br><span class=\"line\">        </span><br><span class=\"line\">北京</span><br><span class=\"line\">天津</span><br><span class=\"line\">上海</span><br><span class=\"line\">广州</span><br><span class=\"line\">重庆</span><br><span class=\"line\">西安</span><br></pre></td></tr></table></figure>\n\n<p>​        <code>for i in L</code>这行代码让Python获取列表<code>L</code>中的第一个元素（<code>&quot;北京&quot;</code>），并将其存储到变量<code>i</code>中，然后执行下一行代码<code>print(L)</code>，这样就打印出了<code>&quot;北京&quot;</code>。依次循环往复，分别将列表中的元素赋值给变量<code>i</code>，然后通过<code>print(i)</code>打印出来。</p>\n<h3 id=\"4-1-在for循环中执行更多的操作\"><a href=\"#4-1-在for循环中执行更多的操作\" class=\"headerlink\" title=\"4.1 在for循环中执行更多的操作\"></a>4.1 在for循环中执行更多的操作</h3><p>​        上面的案例中，我们只是取出来了列表L中的所有元素，但是取出元素并不是我们的最终目的，使用这些元素才是我们的目的。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L = [<span class=\"string\">&quot;北京&quot;</span>, <span class=\"string\">&quot;天津&quot;</span>, <span class=\"string\">&quot;上海&quot;</span>, <span class=\"string\">&quot;广州&quot;</span>, <span class=\"string\">&quot;重庆&quot;</span>, <span class=\"string\">&quot;西安&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> L:</span><br><span class=\"line\">      <span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;&#125;是一座美丽的城市&quot;</span>.<span class=\"built_in\">format</span>(i))</span><br><span class=\"line\"></span><br><span class=\"line\">      </span><br><span class=\"line\">北京是一座美丽的城市</span><br><span class=\"line\">天津是一座美丽的城市</span><br><span class=\"line\">上海是一座美丽的城市</span><br><span class=\"line\">广州是一座美丽的城市</span><br><span class=\"line\">重庆是一座美丽的城市</span><br><span class=\"line\">西安是一座美丽的城市</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-2-在-for-循环结束后执行一些操作\"><a href=\"#4-2-在-for-循环结束后执行一些操作\" class=\"headerlink\" title=\"4.2 在 for 循环结束后执行一些操作\"></a>4.2 在 for 循环结束后执行一些操作</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">L = [<span class=\"string\">&quot;北京&quot;</span>, <span class=\"string\">&quot;天津&quot;</span>, <span class=\"string\">&quot;上海&quot;</span>, <span class=\"string\">&quot;广州&quot;</span>, <span class=\"string\">&quot;重庆&quot;</span>, <span class=\"string\">&quot;西安&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> L:</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;&#125;是一座美丽的城市&quot;</span>.<span class=\"built_in\">format</span>(i))   <span class=\"comment\"># 每循环一次，该代码将被执行一次</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下面的print()函数跟for循环同一个缩进层级，因此将在for循环执行完成后被执行</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;我非常喜欢这些城市，并想去每个城市旅游！&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>执行结果如下：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">北京是一座美丽的城市</span><br><span class=\"line\">天津是一座美丽的城市</span><br><span class=\"line\">上海是一座美丽的城市</span><br><span class=\"line\">广州是一座美丽的城市</span><br><span class=\"line\">重庆是一座美丽的城市</span><br><span class=\"line\">西安是一座美丽的城市</span><br><span class=\"line\">我非常喜欢这些城市，并想去每个城市旅游！</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-创建数值列表\"><a href=\"#5-创建数值列表\" class=\"headerlink\" title=\"5 创建数值列表\"></a>5 创建数值列表</h2><p>​        列表非常适合用于存储数字集合，而Python提供了很多工具，可帮助你高效地处理数字列表。</p>\n<h3 id=\"5-1-使用函数-range\"><a href=\"#5-1-使用函数-range\" class=\"headerlink\" title=\"5.1 使用函数 range()\"></a>5.1 使用函数 range()</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"number\">5</span>):</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(i)</span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n\n<p>​        通过range()函数，我们可以求出1-100这100个数相加的和</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">sum</span>(<span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"number\">101</span>))</span><br><span class=\"line\"><span class=\"number\">5050</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-2-使用-range-创建数字列表\"><a href=\"#5-2-使用-range-创建数字列表\" class=\"headerlink\" title=\"5.2 使用 range()创建数字列表\"></a>5.2 使用 range()创建数字列表</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">list</span>(<span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"number\">5</span>))</span><br><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">list</span>(<span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"number\">10</span>,<span class=\"number\">2</span>))</span><br><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-3-对数字列表执行简单的统计计算\"><a href=\"#5-3-对数字列表执行简单的统计计算\" class=\"headerlink\" title=\"5.3 对数字列表执行简单的统计计算\"></a>5.3 对数字列表执行简单的统计计算</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d = <span class=\"built_in\">list</span>(<span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"number\">100</span>,<span class=\"number\">2</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(d)</span><br><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">10</span>, <span class=\"number\">12</span>, <span class=\"number\">14</span>, <span class=\"number\">16</span>, <span class=\"number\">18</span>, <span class=\"number\">20</span>, <span class=\"number\">22</span>, <span class=\"number\">24</span>, <span class=\"number\">26</span>, <span class=\"number\">28</span>, <span class=\"number\">30</span>, <span class=\"number\">32</span>, <span class=\"number\">34</span>, <span class=\"number\">36</span>, <span class=\"number\">38</span>, <span class=\"number\">40</span>, <span class=\"number\">42</span>, <span class=\"number\">44</span>, <span class=\"number\">46</span>, <span class=\"number\">48</span>, <span class=\"number\">50</span>, <span class=\"number\">52</span>, <span class=\"number\">54</span>, <span class=\"number\">56</span>, <span class=\"number\">58</span>, <span class=\"number\">60</span>, <span class=\"number\">62</span>, <span class=\"number\">64</span>, <span class=\"number\">66</span>, <span class=\"number\">68</span>, <span class=\"number\">70</span>, <span class=\"number\">72</span>, <span class=\"number\">74</span>, <span class=\"number\">76</span>, <span class=\"number\">78</span>, <span class=\"number\">80</span>, <span class=\"number\">82</span>, <span class=\"number\">84</span>, <span class=\"number\">86</span>, <span class=\"number\">88</span>, <span class=\"number\">90</span>, <span class=\"number\">92</span>, <span class=\"number\">94</span>, <span class=\"number\">96</span>, <span class=\"number\">98</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">max</span>(d)</span><br><span class=\"line\"><span class=\"number\">98</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">min</span>(d)</span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">sum</span>(d)</span><br><span class=\"line\"><span class=\"number\">2450</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"5-4-列表解析式\"><a href=\"#5-4-列表解析式\" class=\"headerlink\" title=\"5.4 列表解析式\"></a>5.4 列表解析式</h3><p>​        列表解析将for循环和创建新元素的代码合并成一行，并自动附加新元素。</p>\n<p>​        例如，现在我们要得到一<code>个0-10</code>中偶数与自身乘积的列表，按照平常的操作，我们可能会写一个<code>for循环</code>，如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">list</span>(<span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"number\">10</span>,<span class=\"number\">2</span>))</span><br><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>]</span><br><span class=\"line\">l = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">list</span>(<span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"number\">10</span>,<span class=\"number\">2</span>)):</span><br><span class=\"line\">    i = i * i</span><br><span class=\"line\">    l.append(i)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(l)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 结果如下：</span></span><br><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">4</span>, <span class=\"number\">16</span>, <span class=\"number\">36</span>, <span class=\"number\">64</span>]</span><br></pre></td></tr></table></figure>\n\n<p>​        这样的写法，确实能达到达到效果，但是在python中，我们可以使用列表解析式完成。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>var = [i * i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"number\">10</span>, <span class=\"number\">2</span>)]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(var)</span><br><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">4</span>, <span class=\"number\">16</span>, <span class=\"number\">36</span>, <span class=\"number\">64</span>]</span><br></pre></td></tr></table></figure>\n","comments":true,"permalink":"https://scaven.site/2021-05/pList/","categories":[{"name":"python","slug":"python","permalink":"https://scaven.site/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"https://scaven.site/tags/python/"}]},{"title":"PythonIf","date":"2021-05-02T04:59:25.000Z","path":"2021-05/pIf/","content":"<h1 id=\"if语句\"><a href=\"#if语句\" class=\"headerlink\" title=\"if语句\"></a>if语句</h1><p>​        编程时经常需要检查一系列条件，并据此决定采取什么措施。在Python中，if语句让你能够检查程序的当前状态，并据此采取相应的措施。</p>\n<h2 id=\"1-格式\"><a href=\"#1-格式\" class=\"headerlink\" title=\"1. 格式\"></a>1. 格式</h2><h3 id=\"1-1-单分支结构\"><a href=\"#1-1-单分支结构\" class=\"headerlink\" title=\"1.1 单分支结构\"></a>1.1 单分支结构</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> 条件为真:</span><br><span class=\"line\">   执行的代码块</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n\n<p>注意：</p>\n<ul>\n<li>每个条件后面要使用冒号 **:**，表示接下来是满足条件后要执行的语句块。</li>\n<li>使用缩进来划分语句块，相同缩进数的语句在一起组成一个语句块。</li>\n</ul>\n<h3 id=\"1-2-双分支结构\"><a href=\"#1-2-双分支结构\" class=\"headerlink\" title=\"1.2 双分支结构\"></a>1.2 双分支结构</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> 条件为真:</span><br><span class=\"line\">   执行的代码块</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"keyword\">if</span>为假时，执行的代码块</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-3-多分支结构\"><a href=\"#1-3-多分支结构\" class=\"headerlink\" title=\"1.3 多分支结构\"></a>1.3 多分支结构</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> 条件为真时:</span><br><span class=\"line\">   执行的代码块</span><br><span class=\"line\"><span class=\"keyword\">elif</span> 上面条件为假，此条件为真时:</span><br><span class=\"line\">    执行的代码块</span><br><span class=\"line\"><span class=\"keyword\">elif</span> 上面条件都为假，此条件为真时:</span><br><span class=\"line\">    执行的代码块</span><br><span class=\"line\"><span class=\"keyword\">elif</span> 上面条件都为假，此条件为真时:</span><br><span class=\"line\">    执行的代码块</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"keyword\">if</span>和<span class=\"keyword\">elif</span>都为假时，执行的代码块</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-案例\"><a href=\"#2-案例\" class=\"headerlink\" title=\"2. 案例\"></a>2. 案例</h2><h3 id=\"2-1-案例1：判断正负数\"><a href=\"#2-1-案例1：判断正负数\" class=\"headerlink\" title=\"2.1 案例1：判断正负数\"></a>2.1 <strong>案例1：判断正负数</strong></h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var = <span class=\"number\">2</span> </span><br><span class=\"line\"><span class=\"keyword\">if</span> var &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;var是一个负数&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;var是一个正数&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-2-案例2：判断用户输入的年龄\"><a href=\"#2-2-案例2：判断用户输入的年龄\" class=\"headerlink\" title=\"2.2 案例2：判断用户输入的年龄\"></a>2.2 <strong>案例2：判断用户输入的年龄</strong></h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Age = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入您的年龄： &quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> Age.isdigit():</span><br><span class=\"line\">    age = <span class=\"built_in\">int</span>(Age)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> age &lt;= <span class=\"number\">20</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;您好，您是一个年轻人&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> age &lt;= <span class=\"number\">45</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;您好，您是一个中年人 &quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> age &gt; <span class=\"number\">45</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;您好，您是一个老年人&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;您好，您是一个长寿的人&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;您的输入不正确，请输入数字！&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>需要注意的几点：</p>\n<ul>\n<li> 同类型做比较才有意义：input()函数的输入结果是一个字符串类型，在本案例中需要将其转换成数字类型，然后做比较</li>\n<li> 不要相信用户的输入，年龄是个数字，但是总会有人不按套路出牌，比如输入字母、汉字、符号等</li>\n<li> 上面的案例中我们使用了嵌套<code>if-else</code></li>\n</ul>\n<h2 id=\"3-else这个脚踏多只船的家伙\"><a href=\"#3-else这个脚踏多只船的家伙\" class=\"headerlink\" title=\"3 else这个脚踏多只船的家伙\"></a>3 else这个脚踏多只船的家伙</h2><p>​        <code>else</code>不仅能跟<code>if</code>搭档，还能跟<code>for</code>和<code>while</code>搭档，只有当for或<code>while</code>循环被break中断后，才会跳过<code>else</code>语句</p>\n<h3 id=\"3-1-for…else\"><a href=\"#3-1-for…else\" class=\"headerlink\" title=\"3.1 for…else\"></a>3.1 for…else</h3><p><strong>案例：获取 100 以内的质数</strong></p>\n<p>​        质数：<em>质数</em>是指在大于1的自然数中，除了1和它本身以外不再有其他因数的自然数，这是百度的定义，说简单点就是只能除1和本身时得到的商是整数，如：2、3、5、7、11、13、17、19</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num = []</span><br><span class=\"line\">i=<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>, <span class=\"number\">100</span>):</span><br><span class=\"line\">   j=<span class=\"number\">2</span></span><br><span class=\"line\">   <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>, i):</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(i % j == <span class=\"number\">0</span>):</span><br><span class=\"line\">         <span class=\"keyword\">break</span></span><br><span class=\"line\">   <span class=\"keyword\">else</span>:</span><br><span class=\"line\">      num.append(i)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(num)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-while…else\"><a href=\"#3-2-while…else\" class=\"headerlink\" title=\"3.2 while…else\"></a>3.2 while…else</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i = <span class=\"number\">0</span></span><br><span class=\"line\">num = []</span><br><span class=\"line\"><span class=\"keyword\">while</span> i &lt; <span class=\"number\">10</span>:</span><br><span class=\"line\">    i += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> i == <span class=\"number\">5</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        num.append(i)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(num)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># 运行结果为：此时没有运行结果，因此没有执行到print()函数，也就不能将print(num)输出的屏幕上</span></span><br><span class=\"line\"></span><br><span class=\"line\">i = <span class=\"number\">0</span></span><br><span class=\"line\">num = []</span><br><span class=\"line\"><span class=\"keyword\">while</span> i &lt; <span class=\"number\">10</span>:</span><br><span class=\"line\">    i += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> i == <span class=\"number\">5</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        num.append(i)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(i)   <span class=\"comment\"># 为了方便查看执行结果，再此处添加一个print()函数，打印i的值</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(num)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># 执行结果为：</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n","comments":true,"permalink":"https://scaven.site/2021-05/pIf/","categories":[{"name":"python","slug":"python","permalink":"https://scaven.site/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"https://scaven.site/tags/python/"}]},{"title":"PythonJupyterNotebook","date":"2021-05-02T02:31:39.000Z","path":"2021-05/pJupyterNotebook/","content":"<h1 id=\"安装jupyter-notebook\"><a href=\"#安装jupyter-notebook\" class=\"headerlink\" title=\"安装jupyter notebook\"></a>安装jupyter notebook</h1><p>​        Jupyter Notebook 是一个基于 Web 的交互式计算笔记本环境，允许用户创建和共享各种内容，包括实时代码、方程式、可视化和叙述文本的文档。它的用途包括：数据清理和转换、数值模拟、统计建模、数据可视化与机器学习等。</p>\n<span id=\"more\"></span>\n<h2 id=\"1-Jupyter-Notebook的主要特点\"><a href=\"#1-Jupyter-Notebook的主要特点\" class=\"headerlink\" title=\"1 Jupyter Notebook的主要特点\"></a>1 Jupyter Notebook的主要特点</h2><ul>\n<li>编程时具有<strong>语法高亮</strong>、<em>缩进</em>、<em>tab补全</em>的功能。</li>\n<li>可直接通过浏览器运行代码，同时在代码块下方展示运行结果。</li>\n<li>以富媒体格式展示计算结果。富媒体格式包括：HTML，LaTeX，PNG，SVG等。</li>\n<li>对代码编写说明文档或语句时，支持Markdown语法。</li>\n<li>支持使用LaTeX编写数学性说明。</li>\n</ul>\n<h2 id=\"2-安装jupyter\"><a href=\"#2-安装jupyter\" class=\"headerlink\" title=\"2 安装jupyter\"></a>2 安装jupyter</h2><h3 id=\"2-1-安装python3\"><a href=\"#2-1-安装python3\" class=\"headerlink\" title=\"2.1 安装python3\"></a>2.1 安装python3</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># yum -y install python3</span></span><br><span class=\"line\"><span class=\"comment\"># python3 -V</span></span><br><span class=\"line\">Python <span class=\"number\">3.6</span><span class=\"number\">.8</span></span><br></pre></td></tr></table></figure>\n\n<p>使用ipython生成密码字符串</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ipython3</span></span><br><span class=\"line\">Python <span class=\"number\">3.6</span><span class=\"number\">.8</span> (default, Nov <span class=\"number\">16</span> <span class=\"number\">2020</span>, <span class=\"number\">16</span>:<span class=\"number\">55</span>:<span class=\"number\">22</span>) </span><br><span class=\"line\"><span class=\"type\">Type</span> <span class=\"string\">&#x27;copyright&#x27;</span>, <span class=\"string\">&#x27;credits&#x27;</span> <span class=\"keyword\">or</span> <span class=\"string\">&#x27;license&#x27;</span> <span class=\"keyword\">for</span> more information</span><br><span class=\"line\">IPython <span class=\"number\">7.16</span><span class=\"number\">.1</span> -- An enhanced Interactive Python. <span class=\"type\">Type</span> <span class=\"string\">&#x27;?&#x27;</span> <span class=\"keyword\">for</span> <span class=\"built_in\">help</span>.</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">1</span>]: <span class=\"keyword\">from</span> notebook.auth <span class=\"keyword\">import</span> passwd</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">2</span>]: passwd()</span><br><span class=\"line\">Enter password:    <span class=\"comment\"># 输入登陆jupyter web界面的密码</span></span><br><span class=\"line\">Verify password: </span><br><span class=\"line\">Out[<span class=\"number\">2</span>]: <span class=\"string\">&#x27;argon2:$argon2id$v=19$m=10240,t=10,p=8$NgmObK0lb6vyt5RkhF5ole892GQ$EJM3XAEPwM+bc2EQtuXx5Q&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-安装并配置jupyter\"><a href=\"#2-2-安装并配置jupyter\" class=\"headerlink\" title=\"2.2 安装并配置jupyter\"></a>2.2 安装并配置jupyter</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> pip install jupyter</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-1-初始化jupyter\"><a href=\"#2-2-1-初始化jupyter\" class=\"headerlink\" title=\"2.2.1 初始化jupyter\"></a>2.2.1 初始化jupyter</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># python3 -m jupyter notebook --generate-config</span></span><br><span class=\"line\">Writing default config to: /root/.jupyter/jupyter_notebook_config.py</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-2-修改配置文件\"><a href=\"#2-2-2-修改配置文件\" class=\"headerlink\" title=\"2.2.2 修改配置文件\"></a>2.2.2 修改配置文件</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># vim .jupyter/jupyter_notebook_config.py</span></span><br><span class=\"line\">c.NotebookApp.browser = <span class=\"string\">&#x27;False&#x27;</span>      <span class=\"comment\"># 启动jupyter时，不打开浏览器</span></span><br><span class=\"line\">c.NotebookApp.ip = <span class=\"string\">&#x27;*&#x27;</span>     <span class=\"comment\"># 默认是本机访问localhost</span></span><br><span class=\"line\">c.NotebookApp.notebook_dir = <span class=\"string\">&#x27;/jupyter/&#x27;</span>   <span class=\"comment\"># jupyter根目录</span></span><br><span class=\"line\">c.NotebookApp.password = <span class=\"string\">&#x27;xx&#x27;</span>    <span class=\"comment\"># 通过ipython加密过后的密码</span></span><br><span class=\"line\">c.NotebookApp.port = <span class=\"number\">18888</span>       <span class=\"comment\"># 访问端口，默认是8888</span></span><br><span class=\"line\">c.NotebookNotary.data_dir = <span class=\"string\">&#x27;/jupyter/data/&#x27;</span>   <span class=\"comment\"># 数据目录</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-3-启动jupyter\"><a href=\"#2-2-3-启动jupyter\" class=\"headerlink\" title=\"2.2.3 启动jupyter\"></a>2.2.3 启动jupyter</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># mkdir /jupyter</span></span><br><span class=\"line\"><span class=\"comment\"># nohup python3 -m  jupyter notebook  --allow-root --ip 0.0.0.0 &gt; /jupyter/jupyter.log 2&gt;&amp;1 &amp;</span></span><br><span class=\"line\">[<span class=\"number\">1</span>] <span class=\"number\">22860</span></span><br><span class=\"line\"><span class=\"comment\"># ps -ef | grep jupyter</span></span><br><span class=\"line\">root     <span class=\"number\">22860</span> <span class=\"number\">21547</span>  <span class=\"number\">7</span> <span class=\"number\">22</span>:<span class=\"number\">42</span> pts/<span class=\"number\">0</span>    <span class=\"number\">00</span>:<span class=\"number\">00</span>:<span class=\"number\">00</span> /usr/<span class=\"built_in\">bin</span>/python3 /usr/local/<span class=\"built_in\">bin</span>/jupyter-notebook --allow-root --ip <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-4-在浏览器中，通过ip-18888进行访问：\"><a href=\"#2-2-4-在浏览器中，通过ip-18888进行访问：\" class=\"headerlink\" title=\"2.2.4 在浏览器中，通过ip:18888进行访问：\"></a>2.2.4 在浏览器中，通过<code>ip:18888</code>进行访问：</h4><p><img src=\"image-20210501224453408.png\" alt=\"image-20210501224453408\"></p>\n<h3 id=\"2-3-notebook的简单使用：\"><a href=\"#2-3-notebook的简单使用：\" class=\"headerlink\" title=\"2.3 notebook的简单使用：\"></a>2.3 notebook的简单使用：</h3><p>通过jupyter可以新建</p>\n<ul>\n<li>text文件</li>\n<li>目录</li>\n<li>jupyter notebook</li>\n<li>在浏览器中打开Terminal终端</li>\n</ul>\n<p><img src=\"image-20210501225448551.png\" alt=\"image-20210501225448551\"></p>\n<p>此时，服务器上的jupyter根目录中的文件如下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls /jupyter/ -l</span> </span><br><span class=\"line\">total 4</span><br><span class=\"line\">drwxrwxr-x 4 root     root  138 May  2 00:05 data</span><br><span class=\"line\">-rw-r--r-- 1 root     root 1625 May  2 00:05 jupyter.log</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls /jupyter/data/ -l</span> </span><br><span class=\"line\">total 16</span><br><span class=\"line\">-rw-r--r-- 1 root     root     4096 May  2 00:05 nbsignatures.db</span><br><span class=\"line\">-rw------- 1 root     root     1386 May  2 00:05 notebook_secret</span><br><span class=\"line\">drwxr-xr-x 3 root     root     73   May  1 23:51 pyhton基础知识</span><br><span class=\"line\">-rw-r--r-- 1 root     root     2186 May  1 22:58 test.ipynb</span><br><span class=\"line\">-rw-r--r-- 1 root     root     38   May  1 22:48 test.txt</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>新建jupyter notebook，并简单使用：</p>\n<p><img src=\"image-20210501230929937.png\" alt=\"image-20210501230929937\"></p>\n","comments":true,"permalink":"https://scaven.site/2021-05/pJupyterNotebook/","categories":[{"name":"python","slug":"python","permalink":"https://scaven.site/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"https://scaven.site/tags/python/"}]},{"title":"pContents","date":"2021-05-01T06:23:40.000Z","path":"2021-05/pContents/","content":"<h2 id=\"python入门知识：\"><a href=\"#python入门知识：\" class=\"headerlink\" title=\"python入门知识：\"></a>python入门知识：</h2><ul>\n<li>安装python：<a href=\"https://scaven.site/2021-05/pInstall/\">https://scaven.site/2021-05/pInstall/</a></li>\n<li>python基础知识–变量和字符串：<a href=\"https://scaven.site/2021-05/pVarString/\">https://scaven.site/2021-05/pVarString/</a></li>\n<li>python基础知识–列表：<a href=\"https://scaven.site/2021-05/pList/\">https://scaven.site/2021-05/pList/</a></li>\n<li>python基础知识–元组：<a href=\"https://scaven.site/2021-05/pTuple/\">https://scaven.site/2021-05/pTuple/</a></li>\n<li>python基础知识–if语句：<a href=\"https://scaven.site/2021-05/pIf/\">https://scaven.site/2021-05/pIf/</a></li>\n</ul>\n","comments":true,"permalink":"https://scaven.site/2021-05/pContents/","categories":[],"tags":[]},{"title":"PythonTuple","date":"2021-05-01T06:18:59.000Z","path":"2021-05/pTuple/","content":"<h1 id=\"第四章-元组\"><a href=\"#第四章-元组\" class=\"headerlink\" title=\"第四章 元组\"></a>第四章 元组</h1><h2 id=\"1-认识元组\"><a href=\"#1-认识元组\" class=\"headerlink\" title=\"1 认识元组\"></a>1 认识元组</h2><h3 id=\"1-1-元组是什么\"><a href=\"#1-1-元组是什么\" class=\"headerlink\" title=\"1.1 元组是什么\"></a>1.1 元组是什么</h3><p>​        Python 的元组与列表类似，不同之处在于元组的元素不能修改(元组是可信任的)。元组使用小括号 **( )**，列表使用方括号 **[ ]**。元组创建很简单，只需要在括号中添加元素，并使用逗号隔开即可。</p>\n<span id=\"more\"></span>\n<h3 id=\"1-2-如何定义元组\"><a href=\"#1-2-如何定义元组\" class=\"headerlink\" title=\"1.2 如何定义元组\"></a>1.2 如何定义元组</h3><ul>\n<li>直接通过变量定义</li>\n<li>通过tuple()函数定义</li>\n</ul>\n<p><strong>(1) 直接定义</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.定义一个空元组</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>t = ()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(t)</span><br><span class=\"line\">()           <span class=\"comment\"># 输出了一个空元组</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">type</span>(t)</span><br><span class=\"line\">&lt;<span class=\"class\"><span class=\"keyword\">class</span> &#x27;<span class=\"title\">tuple</span>&#x27;&gt;</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\"># 2.定义一个含有整型、浮点型、字符串、列表类型元素的元组</span></span><br><span class=\"line\">&gt;&gt;&gt; T = (1, &quot;2&quot;, 1.2, [&quot;Hello&quot;])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(T)</span><br><span class=\"line\">(<span class=\"number\">1</span>, <span class=\"string\">&#x27;2&#x27;</span>, <span class=\"number\">1.2</span>, [<span class=\"string\">&#x27;Hello&#x27;</span>])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">type</span>(T)</span><br><span class=\"line\">&lt;<span class=\"class\"><span class=\"keyword\">class</span> &#x27;<span class=\"title\">tuple</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>​        值得注意的是，当元组只有一个元素时，需要在元素后面加一个逗号。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.我们定义一个不加逗号的情况</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>t = (<span class=\"number\">1</span>)           <span class=\"comment\"># 当元组只有一个元素时，此种定义方法是错误的</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(t)</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">type</span>(t)           <span class=\"comment\"># 通过type()函数进行检测，发现是一个整型，并不是一个元组</span></span><br><span class=\"line\">&lt;<span class=\"class\"><span class=\"keyword\">class</span> &#x27;<span class=\"title\">int</span>&#x27;&gt;</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\"># 2.按照元组的定义要求进行定义并查看类型</span></span><br><span class=\"line\"><span class=\"class\">&gt;&gt;&gt; <span class=\"title\">print</span>(<span class=\"params\">t</span>)</span></span><br><span class=\"line\"><span class=\"class\">(<span class=\"params\"><span class=\"number\">1</span>,</span>)</span></span><br><span class=\"line\"><span class=\"class\">&gt;&gt;&gt; <span class=\"title\">type</span>(<span class=\"params\">t</span>)</span></span><br><span class=\"line\"><span class=\"class\">&lt;<span class=\"title\">class</span> &#x27;<span class=\"title\">tuple</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>(2) 通过tuple()函数定义</strong> </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">tuple</span>(<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">tuple</span>(<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">(<span class=\"string\">&#x27;1&#x27;</span>,)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将列表转换成元组</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L = [<span class=\"number\">1</span>, <span class=\"string\">&quot;Hello&quot;</span>, [<span class=\"string\">&quot;张三&quot;</span>, <span class=\"number\">9</span>]]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>t = <span class=\"built_in\">tuple</span>(L)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(t)</span><br><span class=\"line\">(<span class=\"number\">1</span>, <span class=\"string\">&#x27;Hello&#x27;</span>, [<span class=\"string\">&#x27;张三&#x27;</span>, <span class=\"number\">9</span>])</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-元组的常用操作\"><a href=\"#2-元组的常用操作\" class=\"headerlink\" title=\"2 元组的常用操作\"></a>2 元组的常用操作</h2><p>​        元组跟列表类似，列表的常用操作元组也适用，除了修改元组的值(包括修改、增加、删除元组的元素)。</p>\n<h3 id=\"2-1-遍历元组中的所有值\"><a href=\"#2-1-遍历元组中的所有值\" class=\"headerlink\" title=\"2.1 遍历元组中的所有值\"></a>2.1 遍历元组中的所有值</h3><p>​        跟列表一样，元组中的元素也可以通过for循环进行遍历</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L = [<span class=\"number\">1</span>, <span class=\"string\">&quot;Hello&quot;</span>, [<span class=\"string\">&quot;张三&quot;</span>, <span class=\"number\">9</span>]]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>T = <span class=\"built_in\">tuple</span>(L)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> T:</span><br><span class=\"line\">      <span class=\"built_in\">print</span>(t)</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\">Hello</span><br><span class=\"line\">[<span class=\"string\">&#x27;张三&#x27;</span>, <span class=\"number\">9</span>] </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-元组的索引\"><a href=\"#2-2-元组的索引\" class=\"headerlink\" title=\"2.2 元组的索引\"></a>2.2 元组的索引</h3><p>​        元组的索引同字符串、类别一样，当然也可以通过索引对元组进行切片操作。</p>\n<h4 id=\"2-2-1-通过索引获取元组的元素\"><a href=\"#2-2-1-通过索引获取元组的元素\" class=\"headerlink\" title=\"2.2.1 通过索引获取元组的元素\"></a>2.2.1 通过索引获取元组的元素</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>T = (<span class=\"number\">1</span>, <span class=\"string\">&quot;Hello&quot;</span>, [<span class=\"string\">&quot;张三&quot;</span>, <span class=\"number\">9</span>], <span class=\"number\">1.2</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>T[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>T[<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"string\">&#x27;Hello&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>T[-<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"number\">1.2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取元组中嵌套列表的元素</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>T[<span class=\"number\">2</span>]</span><br><span class=\"line\">[<span class=\"string\">&#x27;张三&#x27;</span>, <span class=\"number\">9</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>T[<span class=\"number\">2</span>][<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"string\">&#x27;张三&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>T[<span class=\"number\">2</span>][<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"number\">9</span></span><br></pre></td></tr></table></figure>\n\n<p>​        索引图如下：</p>\n<img src=\"./image-20210427092322338.png\" alt=\"image-20210427092322338\" style=\"zoom:67%;\" />\n\n<h4 id=\"2-2-2-通过索引对元组切片\"><a href=\"#2-2-2-通过索引对元组切片\" class=\"headerlink\" title=\"2.2.2 通过索引对元组切片\"></a>2.2.2 通过索引对元组切片</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 获取前三个元素</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>T[:<span class=\"number\">3</span>]</span><br><span class=\"line\">(<span class=\"number\">1</span>, <span class=\"string\">&#x27;Hello&#x27;</span>, [<span class=\"string\">&#x27;张三&#x27;</span>, <span class=\"number\">9</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取第三个元素和之后的所有元素</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>T[<span class=\"number\">2</span>:]</span><br><span class=\"line\">([<span class=\"string\">&#x27;张三&#x27;</span>, <span class=\"number\">9</span>], <span class=\"number\">1.2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将元组的元素排反序</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>T[::-<span class=\"number\">1</span>]</span><br><span class=\"line\">(<span class=\"number\">1.2</span>, [<span class=\"string\">&#x27;张三&#x27;</span>, <span class=\"number\">9</span>], <span class=\"string\">&#x27;Hello&#x27;</span>, <span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3-元组的拼接\"><a href=\"#2-3-元组的拼接\" class=\"headerlink\" title=\"2.3 元组的拼接\"></a>2.3 元组的拼接</h3><p>​        元组虽然不能进行元素的修改，但是我们可以将两个元组进行拼接形成一个大元组</p>\n<p><strong>(1) 通过加号将多个元组进行拼接</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 定义元组t1并检查内存地址</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>t1 = (<span class=\"number\">1</span>, <span class=\"string\">&quot;Hello&quot;</span>,)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(t1)</span><br><span class=\"line\"><span class=\"number\">2383109449664</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义元组t2并检查内存地址</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>t2 = ([<span class=\"string\">&quot;张三&quot;</span>, <span class=\"number\">9</span>], <span class=\"number\">1.2</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(t2)</span><br><span class=\"line\"><span class=\"number\">2383109981440</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 对t1和t2进行拼接</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>T = t1 + t2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 拼接过后的t1还是t1，t2还是t2，并没有发生变化</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(t1)</span><br><span class=\"line\"><span class=\"number\">2383109449664</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(t2)</span><br><span class=\"line\"><span class=\"number\">2383109981440</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(T)</span><br><span class=\"line\"><span class=\"number\">2383109666352</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>(2) 元组与整型的乘积</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 定义元组t1，并查看内存地址</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>t1 = (<span class=\"number\">1</span>, <span class=\"string\">&quot;Hello&quot;</span>,)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通过乘法扩展元组的元素</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>t1 * <span class=\"number\">2</span></span><br><span class=\"line\">(<span class=\"number\">1</span>, <span class=\"string\">&#x27;Hello&#x27;</span>, <span class=\"number\">1</span>, <span class=\"string\">&#x27;Hello&#x27;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-4-元组的删除\"><a href=\"#2-4-元组的删除\" class=\"headerlink\" title=\"2.4 元组的删除\"></a>2.4 元组的删除</h3><p>​        元组中的元素虽然不能被修改，但是并不妨碍我们删除元组。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(T)</span><br><span class=\"line\">(<span class=\"number\">1</span>, <span class=\"string\">&#x27;Hello&#x27;</span>, [<span class=\"string\">&#x27;张三&#x27;</span>, <span class=\"number\">9</span>], <span class=\"number\">1.2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除元组T后再次打印T，显示T未被定义</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">del</span> T</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(T)</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">&quot;&lt;pyshell#67&gt;&quot;</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(T)</span><br><span class=\"line\">NameError: name <span class=\"string\">&#x27;T&#x27;</span> <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> defined</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-5-元组的其他一些操作\"><a href=\"#2-5-元组的其他一些操作\" class=\"headerlink\" title=\"2.5 元组的其他一些操作\"></a>2.5 元组的其他一些操作</h3><p>​        元组适用序列的一般性操作，如<code>in</code>、<code>not in</code>、最大值、最小值、长度、元素和等</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>T = (<span class=\"number\">1</span>, <span class=\"string\">&#x27;Hello&#x27;</span>, [<span class=\"string\">&#x27;张三&#x27;</span>, <span class=\"number\">9</span>], <span class=\"number\">1.2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看指定元素是否包含于元组中</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">1</span> <span class=\"keyword\">in</span> T</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">1.2</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> T</span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">len</span>(T)</span><br><span class=\"line\"><span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n\n<p>​        获取元素全为数字的元组的最值，只适用于元组的元素全为数值的情况。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>t =  <span class=\"built_in\">tuple</span>(<span class=\"built_in\">range</span>(<span class=\"number\">101</span>))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">max</span>(t)</span><br><span class=\"line\"><span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">min</span>(t)</span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">sum</span>(t)</span><br><span class=\"line\"><span class=\"number\">5050</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">len</span>(t)</span><br><span class=\"line\"><span class=\"number\">101</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-关于-不-可变\"><a href=\"#3-关于-不-可变\" class=\"headerlink\" title=\"3 关于(不)可变\"></a>3 关于(不)可变</h2><p>​        不可变是指内存地址的变化，比如列表，可以修改元素值，修改元素值之后列表的内存地址并没有变化。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L = [<span class=\"number\">1</span>, <span class=\"string\">&#x27;Hello&#x27;</span>, [<span class=\"string\">&#x27;张三&#x27;</span>, <span class=\"number\">9</span>], <span class=\"number\">1.2</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(L)</span><br><span class=\"line\"><span class=\"number\">2383109707456</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(L[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"number\">140736779327136</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改列表第一个元素的值</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L[<span class=\"number\">0</span>] = <span class=\"string\">&quot;China&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(L)</span><br><span class=\"line\"><span class=\"number\">2383109707456</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(L[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"number\">2383109618544</span></span><br></pre></td></tr></table></figure>\n\n<p>​        通过上面的例子，我们可以发现，修改列表元素前后，列表L的内存地址(2383109707456)并没有变化，变化的是修改的元素的内存地址(即列表值的内存地址)，这就是说我们修改了列表的值，列表还是原先的列表(L的内存地址没有变化)，但是列表的元素已经发生了变化。</p>\n<p><img src=\"./image-20210427101204300.png\" alt=\"image-20210427101204300\"></p>\n<p>​        在未对列表元素进行修改时的内存地址和指向</p>\n<img src=\"./image-20210427102341664.png\" alt=\"image-20210427102341664\" style=\"zoom:67%;\" />\n\n<p>执行修改操作<code>L[0] = &quot;China&quot;</code>后，列表内存地址和指向的变化，列表L的内存地址并没有变化(仍然是<code>2383109707456</code>)，但是L内存地址(<code>2383109707456</code>)中的第一个内存地址却发生了变化，即L[0]的内存地址由<code>140736779327136</code>变成了<code>2383109618544</code>，这表示L[0]的指向变化了。</p>\n<p>​        举一个简单的例子来说，公司”销售部一组”(组名，相当于L的内存地址)有5个员工，其中员工编号为”1234”(相当于id(L[0])名字叫”张三”(相当于L[0]的值)的员工离职了，新招聘了一个叫”Tony”的员工，员工编号为”4567”，会影响公司”销售一组”的组名吗？这里的”销售一组”等同于L的内存地址，员工”张三”好比内存地址为”1234”指向的元素值，员工”Tony”好比内存地址为”4567”指向的元素值，”张三”离职和Tony入职，内存地址从”1234”修改成了”4567”，指向也随即发生了变化，但是并不会影响”销售一组”的组名。</p>\n<img src=\"./image-20210427102855904.png\" alt=\"image-20210427102855904\" style=\"zoom:67%;\" />\n\n<p>​        元组的元素不能被修改，修改后(只能通过重新定义)就变成了另一个元组了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>T = (<span class=\"number\">1</span>, <span class=\"string\">&#x27;Hello&#x27;</span>, [<span class=\"string\">&#x27;张三&#x27;</span>, <span class=\"number\">9</span>], <span class=\"number\">1.2</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(T)</span><br><span class=\"line\"><span class=\"number\">2383109991136</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 当我们强行修改元组的元素时，直接报错</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>T[<span class=\"number\">0</span>] = <span class=\"number\">8888</span>   </span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">&quot;&lt;pyshell#143&gt;&quot;</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    T[<span class=\"number\">0</span>] = <span class=\"number\">8888</span></span><br><span class=\"line\">TypeError: <span class=\"string\">&#x27;tuple&#x27;</span> <span class=\"built_in\">object</span> does <span class=\"keyword\">not</span> support item assignment</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># 通过重新定义修改元组元素</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>T = (<span class=\"number\">8888</span>, <span class=\"string\">&#x27;Hello&#x27;</span>, [<span class=\"string\">&#x27;张三&#x27;</span>, <span class=\"number\">9</span>], <span class=\"number\">1.2</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(T)</span><br><span class=\"line\"><span class=\"number\">2383109990976</span></span><br></pre></td></tr></table></figure>\n\n<p>​        元组元素不可变是元组内存地址指向的引用地址不能变化，引用地址不能变化，那么引用地址指向的值也不能变化，要改变应用地址只能重新定义元组。</p>\n<img src=\"./image-20210427111534244.png\" alt=\"image-20210427111534244\" style=\"zoom:67%;\" />\n","comments":true,"permalink":"https://scaven.site/2021-05/pTuple/","categories":[{"name":"python","slug":"python","permalink":"https://scaven.site/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"https://scaven.site/tags/python/"}]},{"title":"安装python","date":"2021-05-01T06:16:03.000Z","path":"2021-05/pInstall/","content":"<h1 id=\"第一章-起步–安装python\"><a href=\"#第一章-起步–安装python\" class=\"headerlink\" title=\"第一章 起步–安装python\"></a>第一章 起步–安装python</h1><p>​        python的安装可参考python官方给出的文档，官方文档从unix、windows和mac系统都给出了安装python的方法</p>\n<p>官方python安装文档地址：<a href=\"https://docs.python.org/zh-cn/3.9/using/index.html\">https://docs.python.org/zh-cn/3.9/using/index.html</a></p>\n<img src=\"image-20210421100658310.png\" alt=\"image-20210421100658310\" style=\"zoom:50%;\" />\n\n<p>​        当然，除了参考官方文档外，也可以参考本文安装教程，本篇python安装教程是之前在博客园写的笔记，此处直接使用博客园的笔记。</p>\n<span id=\"more\"></span>\n<p>博客园笔记地址：</p>\n<ul>\n<li>windows系统安装python：<a href=\"https://www.cnblogs.com/scaven-01/p/11397965.html\">https://www.cnblogs.com/scaven-01/p/11397965.html</a> </li>\n<li>Linux系统安装python：<a href=\"https://www.cnblogs.com/scaven-01/p/11395816.html\">https://www.cnblogs.com/scaven-01/p/11395816.html</a></li>\n</ul>\n<h2 id=\"1-在win10中安装python3-6-6\"><a href=\"#1-在win10中安装python3-6-6\" class=\"headerlink\" title=\"1.在win10中安装python3.6.6\"></a>1.在win10中安装python3.6.6</h2><h3 id=\"1-1-登录到官网下载指定python版本\"><a href=\"#1-1-登录到官网下载指定python版本\" class=\"headerlink\" title=\"1.1 登录到官网下载指定python版本\"></a>1.1 登录到官网下载指定python版本</h3><p>(1).登录到python官网：<a href=\"https://www.python.org/%EF%BC%8C%E7%82%B9%E5%87%BBDownloads\">https://www.python.org/，点击Downloads</a></p>\n<p> <img src=\"1493126-20190823085201841-539482177.png\" alt=\"img\"></p>\n<p>(2).选择需要下载的版本，点击版本后的Download</p>\n<p> <img src=\"1493126-20190823085214581-1096043229.png\" alt=\"img\"></p>\n<p>(3).选择操作系统为Windows的exe文件进行下载</p>\n<p> <img src=\"1493126-20190823085235124-1088341642.png\" alt=\"img\"></p>\n<p>(4).下载到桌面后，查看文件属性，如下图：</p>\n<p> <img src=\"1493126-20190823085244876-845671619.png\" alt=\"img\"></p>\n<h3 id=\"1-2-在win10中安装python3-6-6\"><a href=\"#1-2-在win10中安装python3-6-6\" class=\"headerlink\" title=\"1.2.在win10中安装python3.6.6\"></a>1.2.在win10中安装python3.6.6</h3><p>(1).双击python-3.6.6-amd64.exe文件，进入安装界面，选择Customize installation进行下一步安装，</p>\n<p> <img src=\"1493126-20190823085255779-1637204751.png\" alt=\"img\"></p>\n<p>(2).选择需要安装的功能，根据业务需求进行选择安装，完成后点击Next</p>\n<p> <img src=\"1493126-20190823085304554-802882196.png\" alt=\"img\"></p>\n<p>(3).选择需要安装的高级功能选项，根据业务需求进行选择安装，并设定安装路径，完成后点击Install进行安装</p>\n<p> <img src=\"1493126-20190823085314581-1496139347.png\" alt=\"img\"></p>\n<p>(4).配置完成进行安装</p>\n<p> <img src=\"1493126-20190823085324093-1341623617.png\" alt=\"img\"></p>\n<p>(5).安装成功：</p>\n<p> <img src=\"1493126-20190823085334605-579079025.png\" alt=\"img\"></p>\n<p>(6).验证安装，在windows系统的cmd命令提示符中输入python -V查看python版本信息，能查看到版本信息，则证明安装没有问题（如下图），若查询不到版本信息，请重新安装：</p>\n<p> <img src=\"1493126-20190823085343346-747313297.png\" alt=\"img\"></p>\n<p>备注：服务能正常跑起来才能证明服务没有问题，并不是安装完成没有任何报错就成功了，严谨的态度是安装完成后应该验证安装的结果。</p>\n<h3 id=\"1-3-windows系统中运行python的几种方法\"><a href=\"#1-3-windows系统中运行python的几种方法\" class=\"headerlink\" title=\"1.3.windows系统中运行python的几种方法\"></a>1.3.windows系统中运行python的几种方法</h3><p>(1).点击电脑桌面上的windows图标，找到刚刚安装的Python3.6文件夹，点击IDLE或者Python3.6</p>\n<p> <img src=\"1493126-20190823085355999-1461123636.png\" alt=\"img\"></p>\n<p>(2).打开windows系统的cmd命令提示符，输入python进入，退出python的方法有两种–ctrl+z或者输入exit()</p>\n<p> <img src=\"1493126-20190823085407627-741364019.png\" alt=\"img\"></p>\n<p>(3).在window10的搜索框里输入IDLE，点击回车进入IDLE，如下图：</p>\n<p><img src=\"1493126-20190823085417093-31418666.png\" alt=\"img\"></p>\n<p>点击回车后，界面如下</p>\n<p> <img src=\"1493126-20190823085427222-1951102661.png\" alt=\"img\"></p>\n<h2 id=\"2-在linux系统中安装python\"><a href=\"#2-在linux系统中安装python\" class=\"headerlink\" title=\"2.在linux系统中安装python\"></a>2.在linux系统中安装python</h2><p>​        下面在Linux系统(此处以CentOS7为例)安装python的方法，使用其中一个就行。</p>\n<h3 id=\"2-1-方法1–通过yum的方式安装\"><a href=\"#2-1-方法1–通过yum的方式安装\" class=\"headerlink\" title=\"2.1 方法1–通过yum的方式安装\"></a>2.1 方法1–通过yum的方式安装</h3><p>​        linux系统中默认安装了python2.7，python2已经不再维护，因此我们需要学习python3，在Linux系统中python2和python3可以共存，因此我们直接通过yum的方式安装python3</p>\n<blockquote>\n<p>Unix 系统中，为了不与同时安装的 Python 2.x 冲突，Python 3.x 解释器默认安装的执行文件名不是 <code>python</code></p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum -y install python3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 安装完成后检查python版本，能检查出python版本说明安装成功</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> python -V     <span class=\"comment\"># 默认的python版本是2.7.5</span></span></span><br><span class=\"line\">Python 2.7.5</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> python3 -V</span></span><br><span class=\"line\">Python 3.6.8</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-方法2–源码安装python\"><a href=\"#2-2-方法2–源码安装python\" class=\"headerlink\" title=\"2.2 方法2–源码安装python\"></a>2.2 方法2–源码安装python</h3><h4 id=\"2-2-1-登录到官网下载指定python版本\"><a href=\"#2-2-1-登录到官网下载指定python版本\" class=\"headerlink\" title=\"2.2.1.登录到官网下载指定python版本\"></a>2.2.1.登录到官网下载指定python版本</h4><p>(1).登录到Python官网：<a href=\"https://www.python.org/\">https://www.python.org/</a></p>\n<p> <img src=\"1493126-20190822174013786-573554072.png\" alt=\"img\"></p>\n<p>(2).选择指定版本的软件包进行下载：</p>\n<p> <img src=\"1493126-20190822174029342-564773510.png\" alt=\"img\"></p>\n<h4 id=\"2-2-2-在CentOS7中源码安装python3-6-6并验证安装结果\"><a href=\"#2-2-2-在CentOS7中源码安装python3-6-6并验证安装结果\" class=\"headerlink\" title=\"2.2.2.在CentOS7中源码安装python3.6.6并验证安装结果\"></a>2.2.2.在CentOS7中源码安装python3.6.6并验证安装结果</h4><p>(1).环境准备–安装依赖包</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">配置yum源，以便安装依赖软件包</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum clean all &amp;&amp; yum repolist</span>   </span><br></pre></td></tr></table></figure>\n\n<p> <img src=\"1493126-20190822174057592-421901418.png\" alt=\"img\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装依赖，其中readline-devel包是防止在新安装的环境中不能使用方向键的问题</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel libffi-devel gcc gcc-c++</span> </span><br></pre></td></tr></table></figure>\n\n<p> <img src=\"1493126-20190822174117652-1163712718.png\" alt=\"img\"></p>\n<p>(2).如果不愿意在Windows系统中下载python并上传到CentOS7系统中，可在CentOS7中使用wget命令直接下载python源码包，并进行源码编译安装python</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#下载指定版本的python源码包</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> wget https://www.python.org/ftp/python/3.6.6/Python-3.6.6.tar.xz</span>  </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> tar xvf Python-3.6.6.tar.xz</span>  </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">cd</span> Python-3.6.6/</span> </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ./configure --prefix=/usr/<span class=\"built_in\">local</span>/python3 <span class=\"comment\"># 安装到指定目录中/usr/local/python3</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> make &amp;&amp; make install</span> </span><br></pre></td></tr></table></figure>\n\n<p> <img src=\"1493126-20190822174139426-547736435.png\" alt=\"img\"></p>\n<p> <img src=\"1493126-20190822174152668-1085946048.png\" alt=\"img\"></p>\n<p>(3).将python3和pip添加到环境变量中</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ln -s /usr/<span class=\"built_in\">local</span>/python3/bin/python3 /usr/<span class=\"built_in\">local</span>/bin/python3</span> </span><br></pre></td></tr></table></figure>\n\n<p> <img src=\"1493126-20190822174206672-79634810.png\" alt=\"img\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 将pip也添加到环境变量</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ln -s /usr/<span class=\"built_in\">local</span>/python3/bin/pip3 /usr/<span class=\"built_in\">local</span>/bin/pip3</span></span><br></pre></td></tr></table></figure>\n\n<p> <img src=\"1493126-20190822174221566-882959078.png\" alt=\"img\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看pip的版本号</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> pip3 -V</span></span><br></pre></td></tr></table></figure>\n\n<p> <img src=\"1493126-20190822174232019-133160215.png\" alt=\"img\"></p>\n<h4 id=\"2-2-3-常见安装问题\"><a href=\"#2-2-3-常见安装问题\" class=\"headerlink\" title=\"2.2.3.常见安装问题\"></a>2.2.3.常见安装问题</h4><p>​        当我们为安装成功Python3而开心兴奋之时，我们发现我们的方向键无法使用了，如下图所示，解决方案是安装readline-devel软件包.</p>\n<p><img src=\"1493126-20190822174243300-872303349.png\" alt=\"img\"> </p>\n<h2 id=\"3-在mac中安装python\"><a href=\"#3-在mac中安装python\" class=\"headerlink\" title=\"3. 在mac中安装python\"></a>3. 在mac中安装python</h2><p>​        在mac笔记本中安装python请参考官网教程，官网地址：<a href=\"https://docs.python.org/zh-cn/3/using/mac.html\">https://docs.python.org/zh-cn/3/using/mac.html</a></p>\n<h2 id=\"4-选择一个好用的编辑器\"><a href=\"#4-选择一个好用的编辑器\" class=\"headerlink\" title=\"4.选择一个好用的编辑器\"></a>4.选择一个好用的编辑器</h2><p>​        工欲善其事，必先利其器。选择一个好用的python编辑器将达到事半功倍的效果，我选择的python编辑器是vscode，免费和扩展插件多是我选择的主要原因，安装教程可自行百度，此处不在赘述。</p>\n<p>​        此处附上vscode官网下载和安装教程，可供参考。</p>\n<p>vscode下载地址：<a href=\"https://code.visualstudio.com/\">https://code.visualstudio.com/</a></p>\n<p>vscode官方安装教程：<a href=\"https://code.visualstudio.com/docs/setup/setup-overview\">https://code.visualstudio.com/docs/setup/setup-overview</a></p>\n","comments":true,"permalink":"https://scaven.site/2021-05/pInstall/","categories":[{"name":"python","slug":"python","permalink":"https://scaven.site/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"https://scaven.site/tags/python/"}]},{"title":"Python.md","date":"2021-05-01T03:11:11.000Z","path":"2021-05/pPre/","content":"<h1 id=\"变量、注释、缩进与python之禅\"><a href=\"#变量、注释、缩进与python之禅\" class=\"headerlink\" title=\"变量、注释、缩进与python之禅\"></a>变量、注释、缩进与python之禅</h1><p>Q：运行hello_world.py 时发生的情况</p>\n<p>​        现在我们有一个hello_world.py的python文件，文件内容如下，当我们执行这个文件时，发生了什么呢？</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;hello world&quot;</span>)</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p>​        我们在cmd中执行hello_world.py文件</p>\n<!--more-->\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>phython3 hello_world.py</span><br><span class=\"line\">hello world    <span class=\"comment\"># 输出结果</span></span><br></pre></td></tr></table></figure>\n\n<p>​        运行文件hello_world.py时，末尾的**.py指出这是一个Python程序，因此编辑器将使用Python解释器来运行它<strong>。</strong>Python解释器读取整个程序，确定其中每个单词的含义**。例如，看到单词print时，解释器就会将括号中的内容打印到屏幕，而不会管括号中的内容是什么。</p>\n<h2 id=\"1-变量\"><a href=\"#1-变量\" class=\"headerlink\" title=\"1.变量\"></a>1.变量</h2><h3 id=\"1-1-格式\"><a href=\"#1-1-格式\" class=\"headerlink\" title=\"1.1 格式\"></a>1.1 格式</h3><p><strong><code>变量名=&quot;变量值&quot;</code></strong></p>\n<p>值得注意的几点：</p>\n<ul>\n<li>格式只能是**<code>变量名=&quot;变量值&quot;</code>**，如<code>name=&quot;张三&quot;</code></li>\n<li>格式不能是**<code>变量名=变量值</code><strong>，这种变量赋值的方法初学者很容易犯，在python中，</strong><code>变量名=变量值</code>**这种写法会被python解释等号两边是两个变量，定义变量的时候，等号后面的变量值一定是被引号包围起来的</li>\n<li>等号两边可以有空格，变量值中的引号可以是单引号或多引号，尤其是当变量值中本来就包含引号时，为了避免歧义就会使用多引号或转义符<code>\\</code></li>\n<li>变量一定是先定义，后使用，没有定义的变量，不能被引用，python将抛出错误</li>\n</ul>\n<h3 id=\"1-2-变量的命名和使用\"><a href=\"#1-2-变量的命名和使用\" class=\"headerlink\" title=\"1.2 变量的命名和使用\"></a>1.2 变量的命名和使用</h3><p>​        在Python中使用变量时，需要遵守下面的命名规范。</p>\n<ul>\n<li><p><strong>变量名只能包含字母、数字和下划线，但不能以数字打头</strong>，此处的字母并不局限于 26 个英文字母，可以包含中文字符、日文字符等。例如，可将变量命名为message_1，但不能将其命名为1_message。</p>\n</li>\n<li><p><strong>变量名不能包含空格，但可使用下划线来分隔其中的单词</strong>。例如，变量名greeting_message可行，但变量名greeting message会引发错误。</p>\n</li>\n<li><p><strong>不要将Python关键字和函数名用作变量名</strong>，即不要使用Python保留用于特殊用途的单词，如print（请参见附录A.4）。</p>\n</li>\n<li><p><strong>变量名应既简短又具有描述性</strong>。例如，name比n好，student_name比s_n好，name_length<br>比length_of_persons_name好。</p>\n</li>\n<li><p><strong>慎用容易引起歧义的字母</strong>，如小写字母l和大写字母O，因为它们可能被人错看成数字1和0。</p>\n</li>\n</ul>\n<p>python关键字：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> keyword</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(keyword.kwlist)</span><br><span class=\"line\">[<span class=\"string\">&#x27;False&#x27;</span>, <span class=\"string\">&#x27;None&#x27;</span>, <span class=\"string\">&#x27;True&#x27;</span>, <span class=\"string\">&#x27;and&#x27;</span>, <span class=\"string\">&#x27;as&#x27;</span>, <span class=\"string\">&#x27;assert&#x27;</span>, <span class=\"string\">&#x27;async&#x27;</span>, <span class=\"string\">&#x27;await&#x27;</span>, <span class=\"string\">&#x27;break&#x27;</span>, <span class=\"string\">&#x27;class&#x27;</span>, <span class=\"string\">&#x27;continue&#x27;</span>, <span class=\"string\">&#x27;def&#x27;</span>, <span class=\"string\">&#x27;del&#x27;</span>, <span class=\"string\">&#x27;elif&#x27;</span>, <span class=\"string\">&#x27;else&#x27;</span>, <span class=\"string\">&#x27;except&#x27;</span>, <span class=\"string\">&#x27;finally&#x27;</span>, <span class=\"string\">&#x27;for&#x27;</span>, <span class=\"string\">&#x27;from&#x27;</span>, <span class=\"string\">&#x27;global&#x27;</span>, <span class=\"string\">&#x27;if&#x27;</span>, <span class=\"string\">&#x27;import&#x27;</span>, <span class=\"string\">&#x27;in&#x27;</span>, <span class=\"string\">&#x27;is&#x27;</span>, <span class=\"string\">&#x27;lambda&#x27;</span>, <span class=\"string\">&#x27;nonlocal&#x27;</span>, <span class=\"string\">&#x27;not&#x27;</span>, <span class=\"string\">&#x27;or&#x27;</span>, <span class=\"string\">&#x27;pass&#x27;</span>, <span class=\"string\">&#x27;raise&#x27;</span>, <span class=\"string\">&#x27;return&#x27;</span>, <span class=\"string\">&#x27;try&#x27;</span>, <span class=\"string\">&#x27;while&#x27;</span>, <span class=\"string\">&#x27;with&#x27;</span>, <span class=\"string\">&#x27;yield&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-3-推荐使用的命令方法\"><a href=\"#1-3-推荐使用的命令方法\" class=\"headerlink\" title=\"1.3 推荐使用的命令方法\"></a>1.3 推荐使用的命令方法</h3><ul>\n<li>驼峰命名法：<ul>\n<li>大驼峰命名法：每个单词的首字母都大写，如<code>StudentName</code></li>\n<li>小驼峰命名法：头一个单词首字母小写，其余单词首字母大写，如<code>studentName</code></li>\n</ul>\n</li>\n<li>下划线连接符命名法，如<code>student_name</code></li>\n</ul>\n<h3 id=\"1-4-python赋值的方法\"><a href=\"#1-4-python赋值的方法\" class=\"headerlink\" title=\"1.4 python赋值的方法\"></a>1.4 python赋值的方法</h3><ul>\n<li>常规赋值：<code>a = 100</code></li>\n<li>链式赋值：<code> a = b = 100</code>，表示<code>a=100</code>，<code>b=100</code></li>\n<li>序列解包赋值： <code>a,b = 100,&quot;zhangsan&quot;</code>，等同于<code>a=100</code>，<code>b=&quot;zhangsan&quot;</code>，此种赋值方法中，等号两边的个数必须相等，否则python将抛出错误</li>\n<li>增量赋值： a+=1，等同于<code>a=a+1</code></li>\n</ul>\n<h3 id=\"1-5-变量与内存\"><a href=\"#1-5-变量与内存\" class=\"headerlink\" title=\"1.5 变量与内存\"></a>1.5 变量与内存</h3><h4 id=\"1-5-1-一个变量一个值\"><a href=\"#1-5-1-一个变量一个值\" class=\"headerlink\" title=\"1.5.1 一个变量一个值\"></a>1.5.1 一个变量一个值</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(a)</span><br><span class=\"line\"><span class=\"number\">140732887802624</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>​        当我们定义一个变量<code>a = 100</code>时，首先程序在内存中开辟了一块内存空间，将变量值<code>100</code>存入了这块内存中，并将变量名<code>a</code>指向了变量值<code>100</code>所在的内存地址，我们使用变量名就可以使用到存放于内存中的变量值。</p>\n<p><img src=\"image-20210502004502042.png\" alt=\"image-20210502004502042\"></p>\n<h4 id=\"1-5-2-同一个变量两个值\"><a href=\"#1-5-2-同一个变量两个值\" class=\"headerlink\" title=\"1.5.2 同一个变量两个值\"></a>1.5.2 同一个变量两个值</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(a)</span><br><span class=\"line\"><span class=\"number\">140732887802624</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"string\">&quot;lisi&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(a)</span><br><span class=\"line\"><span class=\"number\">1518145987568</span></span><br></pre></td></tr></table></figure>\n\n<p>​        如上所示，我们首先定义了一个变量<code>a = 100</code>，然后我们又把<code>&quot;lisi&quot;</code>的值赋给了变量<code>a</code>，即<code>a = &quot;lisi&quot;</code>，变量<code>a</code>在内存中的指向发生了怎样的变化呢？<br>​        首先当我们定义<code>a = 100</code>时，程序在内存中开辟了一块内存空间，将变量值<code>100</code>存入了这块内存中，并将变量名<code>a</code>指向了变量值<code>100</code>所在的内存地址；</p>\n<p>​        当我们将<code>&quot;lisi&quot;</code>的值赋给了变量<code>a</code>时，这时变量名<code>a</code>的指向将从<code>100</code>变成<code>&quot;lisi&quot;</code>，并且变量值<code>100</code>由于没有被变量引用(指向)将等待内存回收，如下图：</p>\n<p><img src=\"image-20210502005348961.png\" alt=\"image-20210502005348961\"></p>\n<h4 id=\"1-5-3-两个变量同一个变量值\"><a href=\"#1-5-3-两个变量同一个变量值\" class=\"headerlink\" title=\"1.5.3 两个变量同一个变量值\"></a>1.5.3 两个变量同一个变量值</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\"><span class=\"number\">1518145988016</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(b)</span><br><span class=\"line\"><span class=\"number\">1518145988016</span></span><br></pre></td></tr></table></figure>\n\n<p>​        如上所示，我们首先定义了一个变量<code>a = &quot;hello&quot;</code>，然后再定义了一个<code>b = &quot;hello&quot;</code>，此时，内存中的指向是怎么样的呢？</p>\n<p>我们不妨来大胆猜想，情况分两种：</p>\n<ol>\n<li><p>程序分别在内存中开辟了两块内存空间，将变量值<code>&quot;hello&quot;</code>存入内存中，并分别将变量名<code>a</code>和<code>b</code>指向了这两个内存空间中的<code>&quot;hello&quot;</code>；</p>\n</li>\n<li><p>程序在内存中只开辟了一个内存空间用于存放变量值<code>&quot;hello&quot;</code>，然后将变量<code>a</code>和<code>b</code>都指向了这块内存空间。</p>\n</li>\n</ol>\n<p>上面的两种猜想都是正确的。</p>\n<p>在python中，从节约内存的角度出发，将一些常用的简单字符串和数字([-5,257))做了优化，将这些变量的指向之前定义过的变量值，而不去重新开辟内存空间。</p>\n<p><strong>字符串</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 简单字符串</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>name = <span class=\"string\">&quot;zhangsan&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(name)</span><br><span class=\"line\"><span class=\"number\">1518145802416</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"string\">&quot;zhangsan&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(a)</span><br><span class=\"line\"><span class=\"number\">1518145802416</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 复杂字符串</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>message1 = <span class=\"string\">&quot;This is a message!&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(message1)</span><br><span class=\"line\"><span class=\"number\">1518145996160</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>message2 = <span class=\"string\">&quot;This is a message!&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(message2)</span><br><span class=\"line\"><span class=\"number\">1518145996000</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>数字</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num = []</span><br><span class=\"line\">a = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(-<span class=\"number\">10</span>, <span class=\"number\">300</span>)]</span><br><span class=\"line\">b = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(-<span class=\"number\">10</span>, <span class=\"number\">300</span>)]</span><br><span class=\"line\"><span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"number\">309</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> a[n] <span class=\"keyword\">is</span> b[n]:</span><br><span class=\"line\">        num.append(a[n])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(num)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 结果如下：</span></span><br><span class=\"line\">[-<span class=\"number\">5</span>, -<span class=\"number\">4</span>, -<span class=\"number\">3</span>, -<span class=\"number\">2</span>, -<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">13</span>, <span class=\"number\">14</span>, <span class=\"number\">15</span>, <span class=\"number\">16</span>, <span class=\"number\">17</span>, <span class=\"number\">18</span>, <span class=\"number\">19</span>, <span class=\"number\">20</span>, <span class=\"number\">21</span>, <span class=\"number\">22</span>, <span class=\"number\">23</span>, <span class=\"number\">24</span>, <span class=\"number\">25</span>, <span class=\"number\">26</span>, <span class=\"number\">27</span>, <span class=\"number\">28</span>, <span class=\"number\">29</span>, <span class=\"number\">30</span>, <span class=\"number\">31</span>, <span class=\"number\">32</span>, <span class=\"number\">33</span>, <span class=\"number\">34</span>, <span class=\"number\">35</span>, <span class=\"number\">36</span>, <span class=\"number\">37</span>, <span class=\"number\">38</span>, <span class=\"number\">39</span>, <span class=\"number\">40</span>, <span class=\"number\">41</span>, <span class=\"number\">42</span>, <span class=\"number\">43</span>, <span class=\"number\">44</span>, <span class=\"number\">45</span>, <span class=\"number\">46</span>, <span class=\"number\">47</span>, <span class=\"number\">48</span>, <span class=\"number\">49</span>, <span class=\"number\">50</span>, <span class=\"number\">51</span>, <span class=\"number\">52</span>, <span class=\"number\">53</span>, <span class=\"number\">54</span>, <span class=\"number\">55</span>, <span class=\"number\">56</span>, <span class=\"number\">57</span>, <span class=\"number\">58</span>, <span class=\"number\">59</span>, <span class=\"number\">60</span>, <span class=\"number\">61</span>, <span class=\"number\">62</span>, <span class=\"number\">63</span>, <span class=\"number\">64</span>, <span class=\"number\">65</span>, <span class=\"number\">66</span>, <span class=\"number\">67</span>, <span class=\"number\">68</span>, <span class=\"number\">69</span>, <span class=\"number\">70</span>, <span class=\"number\">71</span>, <span class=\"number\">72</span>, <span class=\"number\">73</span>, <span class=\"number\">74</span>, <span class=\"number\">75</span>, <span class=\"number\">76</span>, <span class=\"number\">77</span>, <span class=\"number\">78</span>, <span class=\"number\">79</span>, <span class=\"number\">80</span>, <span class=\"number\">81</span>, <span class=\"number\">82</span>, <span class=\"number\">83</span>, <span class=\"number\">84</span>, <span class=\"number\">85</span>, <span class=\"number\">86</span>, <span class=\"number\">87</span>, <span class=\"number\">88</span>, <span class=\"number\">89</span>, <span class=\"number\">90</span>, <span class=\"number\">91</span>, <span class=\"number\">92</span>, <span class=\"number\">93</span>, <span class=\"number\">94</span>, <span class=\"number\">95</span>, <span class=\"number\">96</span>, <span class=\"number\">97</span>, <span class=\"number\">98</span>, <span class=\"number\">99</span>, <span class=\"number\">100</span>, <span class=\"number\">101</span>, <span class=\"number\">102</span>, <span class=\"number\">103</span>, <span class=\"number\">104</span>, <span class=\"number\">105</span>, <span class=\"number\">106</span>, <span class=\"number\">107</span>, <span class=\"number\">108</span>, <span class=\"number\">109</span>, <span class=\"number\">110</span>, <span class=\"number\">111</span>, <span class=\"number\">112</span>, <span class=\"number\">113</span>, <span class=\"number\">114</span>, <span class=\"number\">115</span>, <span class=\"number\">116</span>, <span class=\"number\">117</span>, <span class=\"number\">118</span>, <span class=\"number\">119</span>, <span class=\"number\">120</span>, <span class=\"number\">121</span>, <span class=\"number\">122</span>, <span class=\"number\">123</span>, <span class=\"number\">124</span>, <span class=\"number\">125</span>, <span class=\"number\">126</span>, <span class=\"number\">127</span>, <span class=\"number\">128</span>, <span class=\"number\">129</span>, <span class=\"number\">130</span>, <span class=\"number\">131</span>, <span class=\"number\">132</span>, <span class=\"number\">133</span>, <span class=\"number\">134</span>, <span class=\"number\">135</span>, <span class=\"number\">136</span>, <span class=\"number\">137</span>, <span class=\"number\">138</span>, <span class=\"number\">139</span>, <span class=\"number\">140</span>, <span class=\"number\">141</span>, <span class=\"number\">142</span>, <span class=\"number\">143</span>, <span class=\"number\">144</span>, <span class=\"number\">145</span>, <span class=\"number\">146</span>, <span class=\"number\">147</span>, <span class=\"number\">148</span>, <span class=\"number\">149</span>, <span class=\"number\">150</span>, <span class=\"number\">151</span>, <span class=\"number\">152</span>, <span class=\"number\">153</span>, <span class=\"number\">154</span>, <span class=\"number\">155</span>, <span class=\"number\">156</span>, <span class=\"number\">157</span>, <span class=\"number\">158</span>, <span class=\"number\">159</span>, <span class=\"number\">160</span>, <span class=\"number\">161</span>, <span class=\"number\">162</span>, <span class=\"number\">163</span>, <span class=\"number\">164</span>, <span class=\"number\">165</span>, <span class=\"number\">166</span>, <span class=\"number\">167</span>, <span class=\"number\">168</span>, <span class=\"number\">169</span>, <span class=\"number\">170</span>, <span class=\"number\">171</span>, <span class=\"number\">172</span>, <span class=\"number\">173</span>, <span class=\"number\">174</span>, <span class=\"number\">175</span>, <span class=\"number\">176</span>, <span class=\"number\">177</span>, <span class=\"number\">178</span>, <span class=\"number\">179</span>, <span class=\"number\">180</span>, <span class=\"number\">181</span>, <span class=\"number\">182</span>, <span class=\"number\">183</span>, <span class=\"number\">184</span>, <span class=\"number\">185</span>, <span class=\"number\">186</span>, <span class=\"number\">187</span>, <span class=\"number\">188</span>, <span class=\"number\">189</span>, <span class=\"number\">190</span>, <span class=\"number\">191</span>, <span class=\"number\">192</span>, <span class=\"number\">193</span>, <span class=\"number\">194</span>, <span class=\"number\">195</span>, <span class=\"number\">196</span>, <span class=\"number\">197</span>, <span class=\"number\">198</span>, <span class=\"number\">199</span>, <span class=\"number\">200</span>, <span class=\"number\">201</span>, <span class=\"number\">202</span>, <span class=\"number\">203</span>, <span class=\"number\">204</span>, <span class=\"number\">205</span>, <span class=\"number\">206</span>, <span class=\"number\">207</span>, <span class=\"number\">208</span>, <span class=\"number\">209</span>, <span class=\"number\">210</span>, <span class=\"number\">211</span>, <span class=\"number\">212</span>, <span class=\"number\">213</span>, <span class=\"number\">214</span>, <span class=\"number\">215</span>, <span class=\"number\">216</span>, <span class=\"number\">217</span>, <span class=\"number\">218</span>, <span class=\"number\">219</span>, <span class=\"number\">220</span>, <span class=\"number\">221</span>, <span class=\"number\">222</span>, <span class=\"number\">223</span>, <span class=\"number\">224</span>, <span class=\"number\">225</span>, <span class=\"number\">226</span>, <span class=\"number\">227</span>, <span class=\"number\">228</span>, <span class=\"number\">229</span>, <span class=\"number\">230</span>, <span class=\"number\">231</span>, <span class=\"number\">232</span>, <span class=\"number\">233</span>, <span class=\"number\">234</span>, <span class=\"number\">235</span>, <span class=\"number\">236</span>, <span class=\"number\">237</span>, <span class=\"number\">238</span>, <span class=\"number\">239</span>, <span class=\"number\">240</span>, <span class=\"number\">241</span>, <span class=\"number\">242</span>, <span class=\"number\">243</span>, <span class=\"number\">244</span>, <span class=\"number\">245</span>, <span class=\"number\">246</span>, <span class=\"number\">247</span>, <span class=\"number\">248</span>, <span class=\"number\">249</span>, <span class=\"number\">250</span>, <span class=\"number\">251</span>, <span class=\"number\">252</span>, <span class=\"number\">253</span>, <span class=\"number\">254</span>, <span class=\"number\">255</span>, <span class=\"number\">256</span>]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-6-is和\"><a href=\"#1-6-is和\" class=\"headerlink\" title=\"1.6 is和==\"></a>1.6 <code>is</code>和<code>==</code></h3><p>​        在python中，<code>is</code>比较的是两个变量的内存值(内存空间)是否一致，<code>==</code>比较的是变量值是否相同。</p>\n<p>​        <code>==</code>比较变量值是否一样，通过肉眼可以查看到。但是通过<code>is</code>比较内存值是否一致时，我们需要考虑两方面的问题：</p>\n<ul>\n<li>简单字符串和[-5,257)之间的数字</li>\n<li>代码块：<ul>\n<li><strong>如果在同一代码块下</strong>，则采用同一代码块下的换缓存机制(即先将值保留在字典中，若后续的变量使用了相同的值，则直接将新变量指向该值，不再创建新的变量值，若不存在才创建新的变量值)。</li>\n<li><strong>如果在不同代码块中</strong>，则采用小数据池的驻留机制。</li>\n<li><strong>适用范围</strong>：仅限字符串、整形、布尔型，其他的数据类型，如列表、字典、元组等不适用该规则</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 简单字符串</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"string\">&quot;zhangsan&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = <span class=\"string\">&quot;zhangsan&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a <span class=\"keyword\">is</span> b</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a == b</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 复杂字符串</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>message1 = <span class=\"string\">&quot;This is a message!&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>message2 = <span class=\"string\">&quot;This is a message!&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>message1 <span class=\"keyword\">is</span> message2</span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>message1 == message2</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>\n\n<p>同一代码块下的结果：</p>\n<p><img src=\"image-20210502014359358.png\" alt=\"image-20210502014359358\"></p>\n<p>不同代码块下的结果：</p>\n<p><img src=\"image-20210502014435283.png\" alt=\"image-20210502014435283\"></p>\n<p><strong>案例：</strong></p>\n<p><strong>1.使用汉字作为变量(不推荐)</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>名字=<span class=\"string\">&quot;zhangsan&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(名字)</span><br><span class=\"line\">zhangsan</span><br></pre></td></tr></table></figure>\n\n<p><strong>2.变量值包含引号</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>message = <span class=\"string\">&quot;This&#x27;s an apple&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(message)</span><br><span class=\"line\">This<span class=\"string\">&#x27;s an apple</span></span><br></pre></td></tr></table></figure>\n\n<p>​        案例中This’s an apple中包含单引号，如果再使用单引号，则将引起歧义，python将抛出错误。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>message = <span class=\"string\">&#x27;This&#x27;</span>s an apple<span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&gt;&gt;&gt; print(message)</span></span><br><span class=\"line\"><span class=\"string\">## 执行后结果如下：</span></span><br><span class=\"line\"><span class=\"string\">  File &quot;test.py&quot;, line 4</span></span><br><span class=\"line\"><span class=\"string\">    message = &#x27;</span>This<span class=\"string\">&#x27;s an apple&#x27;</span>  <span class=\"comment\"># python将&#x27;This&#x27;当成了一个整体，&#x27;This&#x27;后面的字符串就搞蒙了python，因此抛出错误</span></span><br><span class=\"line\">                    ^</span><br><span class=\"line\">SyntaxError: invalid syntax   <span class=\"comment\"># 提示语法错误</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>3.定义变量时，等号后边不含引号</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>n = zhangsan</span><br></pre></td></tr></table></figure>\n\n<p>​        这种情况下，python会认为等号两边都是变量，即将变量<code>zhangsan</code>的值赋给变量<code>n</code>，这种情况需要分两种情况说明：</p>\n<ul>\n<li>如果上文中定义了<code>zhangsan</code>的值，即<code>zhangsan</code>是原本就是一个变量名，那么等式成立</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>zhangsan = <span class=\"number\">28</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>n = zhangsan   <span class=\"comment\"># 等同于n = zhangsan = 28，即先定义变量zhangsan，再将变量zhangsan的值赋给了n</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>如果上文没有定义<code>zhangsan</code>，那么python将抛出错误，即<strong>变量一定是先定义，后使用</strong>，此时我们重新打开cmd</li>\n</ul>\n<p><img src=\"image-20210421111639194.png\" alt=\"image-20210421111639194\"></p>\n<h2 id=\"2-注释\"><a href=\"#2-注释\" class=\"headerlink\" title=\"2 注释\"></a>2 注释</h2><p>​        python中使用井号（”#”）和三引号(单三引号或双三引号)进行注释，被注释的行将不会被执行。</p>\n<ul>\n<li>单行注释：<code>#</code></li>\n<li>多行注释：<code>&quot;&quot;&quot;</code>、<code>&#39;&#39;&#39;</code></li>\n</ul>\n<h3 id=\"2-1-当行注释\"><a href=\"#2-1-当行注释\" class=\"headerlink\" title=\"2.1 当行注释\"></a>2.1 当行注释</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 输入用户名</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;------&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>执行结果为：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">------</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-多行注释\"><a href=\"#2-2-多行注释\" class=\"headerlink\" title=\"2.2 多行注释\"></a>2.2 多行注释</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;------&quot;</span>)</span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">这里是注释信息，这里将不会被执行</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;------&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>执行结果为：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">------</span><br><span class=\"line\">------</span><br></pre></td></tr></table></figure>\n\n<p>关于注释需要注意的几点：</p>\n<ul>\n<li>一定要养成写注释的习惯，认真写注释不仅是对自己也是对阅读代码的人的尊重</li>\n<li>注释一定要简明扼要的阐述代码的目的</li>\n<li>注释一定要规范，此处要求的规范可以是大多数人的习惯，也可以是公司对代码注释的规定</li>\n<li>注释信息可以帮助调试代码</li>\n</ul>\n<h2 id=\"3-缩进\"><a href=\"#3-缩进\" class=\"headerlink\" title=\"3. 缩进\"></a>3. 缩进</h2><p>​        和其它程序设计语言（如 Java、C 语言）采用大括号“{}”分隔代码块不同，Python采用代码缩进和冒号（ : ）来区分代码块之间的层次。</p>\n<p>​        在 Python 中，对于类定义、函数定义、流程控制语句、异常处理语句等，<strong>行尾的冒号和下一行的缩进，表示下一个代码块的开始，而缩进的结束则表示此代码块的结束</strong>。</p>\n<p>​        注意，Python 中实现对代码的缩进，可以使用空格或者 Tab 键实现。但无论是手动敲空格，还是使用 Tab 键，<strong>通常情况下都是采用 4 个空格(约定熟成规范)长度作为一个缩进量</strong>（默认情况下，一个 Tab 键就表示 4 个空格）。</p>\n<p>​        Python 对代码的缩进要求非常严格，<strong>同一个级别代码块的缩进量必须一样</strong>，否则解释器会报<code> IndentationError</code>异常错误。</p>\n<p><img src=\"image-20210502095555498.png\" alt=\"image-20210502095555498\"></p>\n<h2 id=\"4-python之禅\"><a href=\"#4-python之禅\" class=\"headerlink\" title=\"4. python之禅\"></a>4. python之禅</h2><p>​        python之禅阐述了python的编码的原则和设计理念。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> this</span><br><span class=\"line\">The Zen of Python, by Tim Peters</span><br><span class=\"line\"></span><br><span class=\"line\">Beautiful <span class=\"keyword\">is</span> better than ugly.</span><br><span class=\"line\">Explicit <span class=\"keyword\">is</span> better than implicit.</span><br><span class=\"line\">Simple <span class=\"keyword\">is</span> better than <span class=\"built_in\">complex</span>.</span><br><span class=\"line\">Complex <span class=\"keyword\">is</span> better than complicated.</span><br><span class=\"line\">Flat <span class=\"keyword\">is</span> better than nested.</span><br><span class=\"line\">Sparse <span class=\"keyword\">is</span> better than dense.</span><br><span class=\"line\">Readability counts.</span><br><span class=\"line\">Special cases aren<span class=\"string\">&#x27;t special enough to break the rules.</span></span><br><span class=\"line\"><span class=\"string\">Although practicality beats purity.</span></span><br><span class=\"line\"><span class=\"string\">Errors should never pass silently.</span></span><br><span class=\"line\"><span class=\"string\">Unless explicitly silenced.</span></span><br><span class=\"line\"><span class=\"string\">In the face of ambiguity, refuse the temptation to guess.</span></span><br><span class=\"line\"><span class=\"string\">There should be one-- and preferably only one --obvious way to do it.</span></span><br><span class=\"line\"><span class=\"string\">Although that way may not be obvious at first unless you&#x27;</span>re Dutch.</span><br><span class=\"line\">Now <span class=\"keyword\">is</span> better than never.</span><br><span class=\"line\">Although never <span class=\"keyword\">is</span> often better than *right* now.</span><br><span class=\"line\">If the implementation <span class=\"keyword\">is</span> hard to explain, it<span class=\"string\">&#x27;s a bad idea.</span></span><br><span class=\"line\"><span class=\"string\">If the implementation is easy to explain, it may be a good idea.</span></span><br><span class=\"line\"><span class=\"string\">Namespaces are one honking great idea -- let&#x27;</span>s do more of those!</span><br></pre></td></tr></table></figure>\n\n<p>翻译如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Python之禅 by Tim Peters</span><br><span class=\"line\"> </span><br><span class=\"line\">优美胜于丑陋（Python 以编写优美的代码为目标）</span><br><span class=\"line\">明了胜于晦涩（优美的代码应当是明了的，命名规范，风格相似）</span><br><span class=\"line\">简洁胜于复杂（优美的代码应当是简洁的，不要有复杂的内部实现）</span><br><span class=\"line\">复杂胜于凌乱（如果复杂不可避免，那代码间也不能有难懂的关系，要保持接口简洁）</span><br><span class=\"line\">扁平胜于嵌套（优美的代码应当是扁平的，不能有太多的嵌套）</span><br><span class=\"line\">间隔胜于紧凑（优美的代码有适当的间隔，不要奢望一行代码解决问题）</span><br><span class=\"line\">可读性很重要（优美的代码是可读的）</span><br><span class=\"line\">即便假借特例的实用性之名，也不可违背这些规则（这些规则至高无上）</span><br><span class=\"line\">不要包容所有错误，除非你确定需要这样做（精准地捕获异常，不写 <span class=\"keyword\">except</span>:<span class=\"keyword\">pass</span> 风格的代码）</span><br><span class=\"line\">当存在多种可能，不要尝试去猜测</span><br><span class=\"line\">而是尽量找一种，最好是唯一一种明显的解决方案（如果不确定，就用穷举法）</span><br><span class=\"line\">虽然这并不容易，因为你不是 Python 之父（这里的 Dutch 是指 Guido ）</span><br><span class=\"line\">做也许好过不做，但不假思索就动手还不如不做（动手之前要细思量）</span><br><span class=\"line\">如果你无法向人描述你的方案，那肯定不是一个好方案；反之亦然（方案测评标准）</span><br><span class=\"line\">命名空间是一种绝妙的理念，我们应当多加利用（倡导与号召）</span><br></pre></td></tr></table></figure>\n","comments":true,"permalink":"https://scaven.site/2021-05/pPre/","categories":[{"name":"python","slug":"python","permalink":"https://scaven.site/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"https://scaven.site/tags/python/"}]},{"title":"aboutme","date":"2021-04-20T04:14:50.000Z","path":"2021-04/aboutme/","content":"<hr>\n<hr>\n\n<center>\n    <p>贺新郎·甚矣吾衰矣</p>\n</center>\n\n<center>\n    <p>【作者】辛弃疾 【朝代】宋</p>\n</center>\n\n<p>邑中园亭，仆皆为赋此词。一日，独坐停云，水声山色，竞来相娱。意溪山欲援例者，遂作数语，庶几仿佛渊明思亲友之意云。</p><br>\n\n<p>甚矣吾衰矣。怅平生、交游零落，只今余几！白发空垂三千丈，一笑人间万事。问何物、能令公喜？我见青山多妩媚，料青山见我应如是。情与貌，略相似。</p><br>\n<p>一尊搔首东窗里。想渊明、停云诗就，此时风味。江左沉酣求名者，岂识浊醪妙理。回首叫、云飞风起。不恨古人吾不见，恨古人、不见吾狂耳。知我者，二三子。</p><br>\n","comments":true,"permalink":"https://scaven.site/2021-04/aboutme/","categories":[],"tags":[{"name":"AboutMe","slug":"AboutMe","permalink":"https://scaven.site/tags/AboutMe/"}]},{"title":"welcome","date":"2021-04-20T02:11:08.000Z","path":"2021-04/welcome/","content":"<p>welcome to my blog!</p>\n","comments":true,"permalink":"https://scaven.site/2021-04/welcome/","categories":[{"name":"Home","slug":"Home","permalink":"https://scaven.site/categories/Home/"}],"tags":[{"name":"welcome","slug":"welcome","permalink":"https://scaven.site/tags/welcome/"}]}]