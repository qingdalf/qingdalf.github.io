[{"title":"docker","date":"2021-04-20T04:02:58.000Z","path":"2021-04/20-docker/","content":"","comments":true,"permalink":"https://scaven.site/2021-04/20-docker/","categories":[],"tags":[{"name":"kubernets","slug":"kubernets","permalink":"https://scaven.site/tags/kubernets/"}]},{"title":"welcome","date":"2021-04-20T02:11:08.000Z","path":"2021-04/20-welcome/","content":"<p>welcome to my blog!</p>\n","comments":true,"permalink":"https://scaven.site/2021-04/20-welcome/","categories":[{"name":"Home","slug":"Home","permalink":"https://scaven.site/categories/Home/"}],"tags":[{"name":"welcome","slug":"welcome","permalink":"https://scaven.site/tags/welcome/"}]},{"title":"docker-registory","date":"2021-04-19T01:09:44.000Z","path":"2021-04/19-docker-registory/","content":"<h1 id=\"第一章-docker私有仓库–harbor的搭建\"><a href=\"#第一章-docker私有仓库–harbor的搭建\" class=\"headerlink\" title=\"第一章 docker私有仓库–harbor的搭建\"></a>第一章 docker私有仓库–harbor的搭建</h1><h2 id=\"1-harbor是什么\"><a href=\"#1-harbor是什么\" class=\"headerlink\" title=\"1. harbor是什么\"></a>1. harbor是什么</h2><h3 id=\"1-1-harbor简介\"><a href=\"#1-1-harbor简介\" class=\"headerlink\" title=\"1.1 harbor简介\"></a>1.1 harbor简介</h3><p>​        Harbor是由VMware公司开源的一个用于存储和分发Docker镜像的企业级docker镜像仓库，默认使用https访问协议。通过添加一些企业必需的功能特性，例如安全、标识和管理等，扩展了开源Docker Distribution。作为一个企业级私有Registry服务器，Harbor提供了更好的性能和安全。提升用户使用Registry构建和运行环境传输镜像的效率。Harbor支持安装在多个Registry节点的镜像资源复制，镜像全部保存在私有Registry中， 确保数据和知识产权在公司内部网络中管控。另外，Harbor也提供了高级的安全特性，诸如用户管理，访问控制和活动审计等。</p>\n<ol>\n<li>云本机注册表：Harbour 支持容器映像和Helm图表，可用作云本机环境（如容器运行时和业务流程平台）的注册表。</li>\n<li>基于角色的访问控制：用户和存储库通过“项目”进行组织，用户可以对项目下的图像拥有不同的权限。</li>\n<li>基于策略的映像复制：可以基于具有多个过滤器（存储库，标记和标签）的策略在多个注册表实例之间复制（同步）映像。如果遇到任何错误，Harbor将自动重试进行复制。非常适合负载平衡，高可用性，多数据中心，混合和多云场景。</li>\n<li>漏洞扫描：Harbor定期扫描图像并警告用户漏洞。</li>\n<li>LDAP / AD支持：Harbor与现有企业LDAP / AD集成以进行用户身份验证和管理，并支持将LDAP组导入Harbor并为其分配适当的项目角色。</li>\n<li>图像删除和垃圾收集：可以删除图像，并可以回收它们的空间。</li>\n<li>公证：可以确保图像的真实性。</li>\n<li>图形用户门户：用户可以轻松浏览，搜索存储库和管理项目。</li>\n<li>审计：跟踪存储库的所有操作。</li>\n<li>RESTful API：适用于大多数管理操作的RESTful API，易于与外部系统集成。</li>\n<li>易于部署：提供在线和离线安装程序。　</li>\n</ol>\n<p>官方文档：<a href=\"https://goharbor.io/docs/\">https://goharbor.io/docs/</a></p>\n<p>github用户手册：<a href=\"https://github.com/goharbor/harbor/blob/master/docs/user_guide.md\">https://github.com/goharbor/harbor/blob/master/docs/user_guide.md</a></p>\n<p>官网：<a href=\"https://harbor.com/\">https://harbor.com/</a></p>\n<h3 id=\"1-2-harbor组件：\"><a href=\"#1-2-harbor组件：\" class=\"headerlink\" title=\"1.2 harbor组件：\"></a>1.2 harbor组件：</h3><table>\n<thead>\n<tr>\n<th>组件</th>\n<th align=\"left\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>harbor-adminserver</td>\n<td align=\"left\">配置管理中心</td>\n</tr>\n<tr>\n<td>harbor-db</td>\n<td align=\"left\">Mysql数据库</td>\n</tr>\n<tr>\n<td>harbor-jobservice</td>\n<td align=\"left\">负责镜像复制</td>\n</tr>\n<tr>\n<td>harbor-log</td>\n<td align=\"left\">记录操作日志</td>\n</tr>\n<tr>\n<td>harbor-ui</td>\n<td align=\"left\">Web管理页面和API</td>\n</tr>\n<tr>\n<td>nginx</td>\n<td align=\"left\">前端代理，负责前端页面和镜像上传/下载转发</td>\n</tr>\n<tr>\n<td>redis</td>\n<td align=\"left\">会话</td>\n</tr>\n<tr>\n<td>registry</td>\n<td align=\"left\">镜像存储</td>\n</tr>\n</tbody></table>\n<h2 id=\"2-harbor下载与安装\"><a href=\"#2-harbor下载与安装\" class=\"headerlink\" title=\"2 harbor下载与安装\"></a>2 harbor下载与安装</h2><h3 id=\"2-1-harbor下载\"><a href=\"#2-1-harbor下载\" class=\"headerlink\" title=\"2.1 harbor下载\"></a>2.1 harbor下载</h3><p>服务器配置要求：2C/4G/40G，推荐4C/8G/160G</p>\n<p>下载地址：<a href=\"https://github.com/goharbor/harbor/releases\">https://github.com/goharbor/harbor/releases</a></p>\n<h4 id=\"2-1-1-安装方式\"><a href=\"#2-1-1-安装方式\" class=\"headerlink\" title=\"2.1.1 安装方式\"></a>2.1.1 安装方式</h4><ul>\n<li>离线安装：下载harbor软件包到本地进行安装，软件包较大，下载速度慢</li>\n<li>在线安装：</li>\n<li>OVA安装程序：当用户具有vCenter环境时，使用此安装程序，在部署OVA后启动Harbor。</li>\n</ul>\n<p><img src=\"harbor%E4%B8%8B%E8%BD%BD.png\" alt=\"image-20210405111645490\"></p>\n<h3 id=\"2-2-harbor安装\"><a href=\"#2-2-harbor安装\" class=\"headerlink\" title=\"2.2 harbor安装\"></a>2.2 harbor安装</h3><h4 id=\"2-2-1-安装docker\"><a href=\"#2-2-1-安装docker\" class=\"headerlink\" title=\"2.2.1 安装docker\"></a>2.2.1 安装docker</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 如果已经安装了docker，可以使用下面的命令卸载</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-engine</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装必要的依赖包</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum install -y device-mapper-persistent-data lvm2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 添加docker仓库，并修改成国内清华镜像源</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> wget -O /etc/yum.repos.d/docker-ce.repo https://download.docker.com/linux/centos/docker-ce.repo</span> </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> sed -i <span class=\"string\">&#x27;s#download.docker.com#mirrors.tuna.tsinghua.edu.cn/docker-ce#&#x27;</span> /etc/yum.repos.d/docker-ce.repo</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum clean all &amp;&amp; yum repolist</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装docker</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum -y install docker-ce</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 添加镜像加速器</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> mkdir /etc/docker</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> vim /etc/docker/daemon.json</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com&quot;,&quot;http://hub-mirror.c.163.com&quot;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 启动并添加到开机自启动</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> systemctl start docker  &amp;&amp; systemctl <span class=\"built_in\">enable</span> docker</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-2-安装docker-compose\"><a href=\"#2-2-2-安装docker-compose\" class=\"headerlink\" title=\"2.2.2 安装docker-compose\"></a>2.2.2 安装docker-compose</h4><p>​        harbor使用docker-compose进行编排，因此在安装harbor之前必须先安装docker-compose。</p>\n<p>​        下载地址：<a href=\"https://github.com/docker/compose/releases\">https://github.com/docker/compose/releases</a></p>\n<img src=\"docker-compose下载.png\" alt=\"image-20210405111645490\" style=\"zoom:67%;\" />\n\n\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls docker-compose-Linux-x86_64</span></span><br><span class=\"line\">docker-compose-Linux-x86_64</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 添加执行权限并移动到环境变量路径中</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> chmod u+x docker-compose-Linux-x86_64</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> mv docker-compose-Linux-x86_64 /usr/bin/docker-compose</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 验证</span>  </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker-compose  --version</span></span><br><span class=\"line\">docker-compose version 1.28.6, build 5db8d86f</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker-compose简单用法</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker-compose --<span class=\"built_in\">help</span></span></span><br><span class=\"line\">Define and run multi-container applications with Docker.</span><br><span class=\"line\"></span><br><span class=\"line\">Usage:</span><br><span class=\"line\">  docker-compose [-f &lt;arg&gt;...] [--profile &lt;name&gt;...] [options] [--] [COMMAND] [ARGS...]</span><br><span class=\"line\">  docker-compose -h|--help</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\">  -f, --file FILE             Specify an alternate compose file</span><br><span class=\"line\">                              (default: docker-compose.yml)</span><br><span class=\"line\">  -p, --project-name NAME     Specify an alternate project name</span><br><span class=\"line\">                              (default: directory name)</span><br><span class=\"line\">  --profile NAME              Specify a profile to enable</span><br><span class=\"line\">  -c, --context NAME          Specify a context name</span><br><span class=\"line\">  --verbose                   Show more output</span><br><span class=\"line\">  --log-level LEVEL           Set log level (DEBUG, INFO, WARNING, ERROR, CRITICAL)</span><br><span class=\"line\">  --ansi (never|always|auto)  Control when to print ANSI control characters</span><br><span class=\"line\">  --no-ansi                   Do not print ANSI control characters (DEPRECATED)</span><br><span class=\"line\">  -v, --version               Print version and exit</span><br><span class=\"line\">  -H, --host HOST             Daemon socket to connect to</span><br><span class=\"line\"></span><br><span class=\"line\">  --tls                       Use TLS; implied by --tlsverify</span><br><span class=\"line\">  --tlscacert CA_PATH         Trust certs signed only by this CA</span><br><span class=\"line\">  --tlscert CLIENT_CERT_PATH  Path to TLS certificate file</span><br><span class=\"line\">  --tlskey TLS_KEY_PATH       Path to TLS key file</span><br><span class=\"line\">  --tlsverify                 Use TLS and verify the remote</span><br><span class=\"line\">  --skip-hostname-check       Don&#x27;t check the daemon&#x27;s hostname against the</span><br><span class=\"line\">                              name specified in the client certificate</span><br><span class=\"line\">  --project-directory PATH    Specify an alternate working directory</span><br><span class=\"line\">                              (default: the path of the Compose file)</span><br><span class=\"line\">  --compatibility             If set, Compose will attempt to convert keys</span><br><span class=\"line\">                              in v3 files to their non-Swarm equivalent (DEPRECATED)</span><br><span class=\"line\">  --env-file PATH             Specify an alternate environment file</span><br><span class=\"line\"></span><br><span class=\"line\">Commands:</span><br><span class=\"line\">  build              Build or rebuild services   # 构建或者重构服务</span><br><span class=\"line\">  config             Validate and view the Compose file</span><br><span class=\"line\">  create             Create services   # 创建服务</span><br><span class=\"line\">  down               Stop and remove resources  # 停止运行中的容器</span><br><span class=\"line\">  events             Receive real time events from containers</span><br><span class=\"line\">  exec               Execute a command in a running container  # 进入一个运行的容器中</span><br><span class=\"line\">  help               Get help on a command</span><br><span class=\"line\">  images             List images   # 列出存在的所有镜像</span><br><span class=\"line\">  kill               Kill containers   # kill掉容器</span><br><span class=\"line\">  logs               View output from containers  # 查看容器日志输出</span><br><span class=\"line\">  pause              Pause services   # 暂停服务</span><br><span class=\"line\">  port               Print the public port for a port binding  # 列出端口</span><br><span class=\"line\">  ps                 List containers   # 列出运行中的容器</span><br><span class=\"line\">  pull               Pull service images  # 推镜像到仓库</span><br><span class=\"line\">  push               Push service images  # 从仓库中拉取镜像</span><br><span class=\"line\">  restart            Restart services     # 重启服务</span><br><span class=\"line\">  rm                 Remove stopped containers  # 删除停止的容器</span><br><span class=\"line\">  run                Run a one-off command</span><br><span class=\"line\">  scale              Set number of containers for a service</span><br><span class=\"line\">  start              Start services    # 启动服务</span><br><span class=\"line\">  stop               Stop services     # 停止服务</span><br><span class=\"line\">  top                Display the running processes  # 展示运行容器使用的资源信息</span><br><span class=\"line\">  unpause            Unpause services</span><br><span class=\"line\">  up                 Create and start containers    # 启动容器</span><br><span class=\"line\">  version            Show version information and quit  # 查看docker-compose版本信息</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-3-安装harbor\"><a href=\"#2-2-3-安装harbor\" class=\"headerlink\" title=\"2.2.3 安装harbor\"></a>2.2.3 安装harbor</h4><p>​        harbor默认使用https协议进行访问，也支持http协议。因此接下来的安装过程将分成两个步骤，使用http协议和https协议进行harbor安装。</p>\n<h5 id=\"2-2-3-1-解压并认识harbor配置文件\"><a href=\"#2-2-3-1-解压并认识harbor配置文件\" class=\"headerlink\" title=\"2.2.3.1 解压并认识harbor配置文件\"></a>2.2.3.1 解压并认识harbor配置文件</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls</span> </span><br><span class=\"line\">harbor-offline-installer-v2.2.1.tgz</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> tar zxvf harbor-offline-installer-v2.2.1.tgz    <span class=\"comment\"># 解压</span></span></span><br><span class=\"line\">harbor/harbor.v2.2.1.tar.gz</span><br><span class=\"line\">harbor/prepare</span><br><span class=\"line\">harbor/LICENSE</span><br><span class=\"line\">harbor/install.sh</span><br><span class=\"line\">harbor/common.sh</span><br><span class=\"line\">harbor/harbor.yml.tmpl   # 配置文件样本</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cat harbor.yml.tmpl  | grep -Ev <span class=\"string\">&quot;^$|#&quot;</span>  <span class=\"comment\"># 简单认识配置模板文件</span></span></span><br><span class=\"line\">hostname: reg.mydomain.com   # 默认的域名，使用该域名需要域名解析，如果不做域名解析，可修改成harbor主机IP地址</span><br><span class=\"line\">http:               # http信息，默认端口信息都可以自行修改</span><br><span class=\"line\">  port: 80   </span><br><span class=\"line\">https:              # https的端口和证书存放路径，默认使用Https协议，但使用https需要配置证书，若不使用可注释掉</span><br><span class=\"line\">  port: 443    </span><br><span class=\"line\">  certificate: /your/certificate/path</span><br><span class=\"line\">  private_key: /your/private/key/path</span><br><span class=\"line\">harbor_admin_password: Harbor12345   # 登陆harbor仓库web界面默认密码，默认用户为adamin，建议修改</span><br><span class=\"line\">database:               # 数据库信息</span><br><span class=\"line\">  password: root123     # 数据库root用户密码，建议修改</span><br><span class=\"line\">  max_idle_conns: 50</span><br><span class=\"line\">  max_open_conns: 1000</span><br><span class=\"line\">data_volume: /data     # 默认存储位置</span><br><span class=\"line\">trivy:</span><br><span class=\"line\">  ignore_unfixed: false</span><br><span class=\"line\">  skip_update: false</span><br><span class=\"line\">  insecure: false</span><br><span class=\"line\">jobservice:</span><br><span class=\"line\">  max_job_workers: 10</span><br><span class=\"line\">notification:</span><br><span class=\"line\">  webhook_job_max_retry: 10</span><br><span class=\"line\">chart:</span><br><span class=\"line\">  absolute_url: disabled</span><br><span class=\"line\">log:</span><br><span class=\"line\">  level: info</span><br><span class=\"line\">  local:</span><br><span class=\"line\">    rotate_count: 50</span><br><span class=\"line\">    rotate_size: 200M</span><br><span class=\"line\">    location: /var/log/harbor</span><br><span class=\"line\">_version: 2.2.0</span><br><span class=\"line\">proxy:</span><br><span class=\"line\">  http_proxy:</span><br><span class=\"line\">  https_proxy:</span><br><span class=\"line\">  no_proxy:</span><br><span class=\"line\">  components:</span><br><span class=\"line\">    - core</span><br><span class=\"line\">    - jobservice</span><br><span class=\"line\">    - trivy</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-2-3-2-使用http协议访问harbor\"><a href=\"#2-2-3-2-使用http协议访问harbor\" class=\"headerlink\" title=\"2.2.3.2 使用http协议访问harbor\"></a>2.2.3.2 使用http协议访问harbor</h5><p>​        harbor默认使用https协议，如果不想使用https协议，可以修改/etc/docker/daemon.json文件。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> vim /etc/docker/daemon.json</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com&quot;,&quot;http://hub-mirror.c.163.com&quot;],</span><br><span class=\"line\">    &quot;insecure-registries&quot;: [&quot;10.138.3.111:80&quot;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 将harbor主机IP地址(如果配置了域名解析可直接使用域名)和端口写入该文件，让其受信任即可</span></span><br></pre></td></tr></table></figure>\n\n<p>​        注释掉harbor.yml.tmpl文件中关于https的内容</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> vim harbor.yml.tmpl  <span class=\"comment\"># 注释掉该文件中下面的内容</span></span></span><br><span class=\"line\">https:            </span><br><span class=\"line\">  port: 443    </span><br><span class=\"line\">  certificate: /your/certificate/path</span><br><span class=\"line\">  private_key: /your/private/key/path</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-2-3-3-使用https协议访问harbor\"><a href=\"#2-2-3-3-使用https协议访问harbor\" class=\"headerlink\" title=\"2.2.3.3 使用https协议访问harbor\"></a>2.2.3.3 使用https协议访问harbor</h5><p>​        使用https协议需要证书，接下来我们使用cfssl进行自签证书。</p>\n<p>安装cfssl</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> wget https://pkg.cfssl.org/R1.2/cfssl_linux-amd64</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> wget https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> wget https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 添加执行权限</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> chmod +x cfssl_linux-amd64 cfssljson_linux-amd64 cfssl-certinfo_linux-amd64</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 移动至环境变量路径</span></span><br><span class=\"line\">mv cfssl_linux-amd64 /usr/local/bin/cfssl   # 生成证书工具</span><br><span class=\"line\">mv cfssljson_linux-amd64 /usr/local/bin/cfssljson</span><br><span class=\"line\">mv cfssl-certinfo_linux-amd64 /usr/local/bin/cfssl-certinfo  # 证书信息查看工具</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 验证</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cfssl version</span></span><br><span class=\"line\">Version: 1.2.0</span><br><span class=\"line\">Revision: dev</span><br><span class=\"line\">Runtime: go1.6</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 生成ca证书配置文件</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> mkdir ssl</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">cd</span> ssl &amp;&amp; cfssl print-defaults config &gt; ca-config.json</span>  </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cat ca-config.json</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;signing&quot;: &#123;</span><br><span class=\"line\">        &quot;default&quot;: &#123;</span><br><span class=\"line\">            &quot;expiry&quot;: &quot;168h&quot;   # 过期时间，默认为168h，此处修改成87600h=10年</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;profiles&quot;: &#123;</span><br><span class=\"line\">            &quot;www&quot;: &#123;</span><br><span class=\"line\">                &quot;expiry&quot;: &quot;87600h&quot;,  # 默认是1年，这里修改成10年</span><br><span class=\"line\">                &quot;usages&quot;: [</span><br><span class=\"line\">                    &quot;signing&quot;,</span><br><span class=\"line\">                    &quot;key encipherment&quot;,</span><br><span class=\"line\">                    &quot;server auth&quot;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;client&quot;: &#123;</span><br><span class=\"line\">                &quot;expiry&quot;: &quot;87600h&quot;,  # 默认是1年，这里修改成10年</span><br><span class=\"line\">                &quot;usages&quot;: [</span><br><span class=\"line\">                    &quot;signing&quot;,</span><br><span class=\"line\">                    &quot;key encipherment&quot;,</span><br><span class=\"line\">                    &quot;client auth&quot;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 生成ca证书信息文件</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cfssl print-defaults csr &gt; ca-csr.json</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cat ca-csr.json</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;CN&quot;: &quot;example.net&quot;,   # 标识具体的域</span><br><span class=\"line\">    &quot;hosts&quot;: [            # 使用该证书的域名</span><br><span class=\"line\">        &quot;example.net&quot;,</span><br><span class=\"line\">        &quot;www.example.net&quot;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    &quot;key&quot;: &#123;    # 加密方式，一般使用rsa，大小使用2048</span><br><span class=\"line\">        &quot;algo&quot;: &quot;ecdsa&quot;,  # 加密方式，默认是ecdsa，此处使用rsa</span><br><span class=\"line\">        &quot;size&quot;: 256       # 默认是256，此处使用2048</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;names&quot;: [            # 证书中包含的国家地区和城市信息</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;C&quot;: &quot;US&quot;,   # 表示国家，修改成CN</span><br><span class=\"line\">            &quot;L&quot;: &quot;CA&quot;,   # 区域，这里修改成SiChuan</span><br><span class=\"line\">            &quot;ST&quot;: &quot;San Francisco&quot;   # 城市，修改成本地国内城市，ChengDu</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 使用证书信息文件生成证书</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cfssl gencert -initca ca-csr.json | cfssljson -bare ca -</span></span><br><span class=\"line\">2021/04/05 13:07:11 [INFO] generating a new CA key and certificate from CSR</span><br><span class=\"line\">2021/04/05 13:07:11 [INFO] generate received request</span><br><span class=\"line\">2021/04/05 13:07:11 [INFO] received CSR</span><br><span class=\"line\">2021/04/05 13:07:11 [INFO] generating key: rsa-2048</span><br><span class=\"line\">2021/04/05 13:07:12 [INFO] encoded CSR</span><br><span class=\"line\">2021/04/05 13:07:12 [INFO] signed certificate with serial number 697269161568410809548825101035635405041110584154</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 执行完成后，将生成两个pem文件，如下</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls *.pem</span></span><br><span class=\"line\">ca-key.pem  ca.pem</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 签署服务端证书</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cp ca-csr.json reg.com-csr.json</span> </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> vim reg.com-csr.json</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;CN&quot;: &quot;reg.com&quot;,   # 跟harbor配置文件中的域名一致</span><br><span class=\"line\">    &quot;hosts&quot;: [],</span><br><span class=\"line\">    &quot;key&quot;: &#123;    # 加密方式</span><br><span class=\"line\">        &quot;algo&quot;: &quot;rsa&quot;,  </span><br><span class=\"line\">        &quot;size&quot;: 2048       </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;names&quot;: [            # 证书中包含的国家地区和城市信息</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;C&quot;: &quot;CN&quot;,   # 国家</span><br><span class=\"line\">            &quot;L&quot;: &quot;SiChuan&quot;,   # 区域</span><br><span class=\"line\">            &quot;ST&quot;: &quot;ChengDu&quot;   # 城市</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 签发证书</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=www reg.com-csr.json | cfssljson -bare reg.com</span></span><br><span class=\"line\">2021/04/05 13:07:56 [INFO] generate received request</span><br><span class=\"line\">2021/04/05 13:07:56 [INFO] received CSR</span><br><span class=\"line\">2021/04/05 13:07:56 [INFO] generating key: rsa-2048</span><br><span class=\"line\">2021/04/05 13:07:56 [INFO] encoded CSR</span><br><span class=\"line\">2021/04/05 13:07:56 [INFO] signed certificate with serial number 184797551865598110499745729080826042064714656658</span><br><span class=\"line\">2021/04/05 13:07:56 [WARNING] This certificate lacks a &quot;hosts&quot; field. This makes it unsuitable for</span><br><span class=\"line\">websites. For more information see the Baseline Requirements for the Issuance and Management</span><br><span class=\"line\">of Publicly-Trusted Certificates, v.1.1.6, from the CA/Browser Forum (https://cabforum.org);</span><br><span class=\"line\">specifically, section 10.2.3 (&quot;Information Requirements&quot;).</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls *.pem</span></span><br><span class=\"line\">ca-key.pem  ca.pem  reg.com-key.pem  reg.com.pem</span><br></pre></td></tr></table></figure>\n\n<p>修改harbor配置文件，将证书路径写入harbor配置文件中</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls /etc/docker/ssl</span></span><br><span class=\"line\">reg.com-key.pem  reg.com.pem</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> vim harbor.yml.tmpl    <span class=\"comment\"># 将路径写入即可</span></span></span><br><span class=\"line\">···</span><br><span class=\"line\">http</span><br><span class=\"line\">  port: 80    # 注释掉关于http的信息</span><br><span class=\"line\">https:</span><br><span class=\"line\">  port: 443</span><br><span class=\"line\">  certificate: /etc/docker/ssl/reg.com.pem</span><br><span class=\"line\">  private_key: /etc/docker/ssl/reg.com-key.pem</span><br><span class=\"line\">···</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-2-3-4-安装\"><a href=\"#2-2-3-4-安装\" class=\"headerlink\" title=\"2.2.3.4 安装\"></a>2.2.3.4 安装</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 准备配置文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">cd</span> /root/harbor &amp;&amp; mv harbor.yml.tmpl harbor.yml</span> </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker image load -i harbor.v2.2.1.tar.gz &amp;&amp; ./prepare</span>   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装并启动harbor容器</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ./install.sh</span></span><br><span class=\"line\">····</span><br><span class=\"line\">Creating network &quot;harbor_harbor&quot; with the default driver</span><br><span class=\"line\">Creating harbor-log ... done</span><br><span class=\"line\">Creating harbor-db     ... done</span><br><span class=\"line\">Creating registry      ... done</span><br><span class=\"line\">Creating harbor-portal ... done</span><br><span class=\"line\">Creating redis         ... done</span><br><span class=\"line\">Creating registryctl   ... done</span><br><span class=\"line\">Creating harbor-core   ... done</span><br><span class=\"line\">Creating nginx             ... done</span><br><span class=\"line\">Creating harbor-jobservice ... done</span><br><span class=\"line\">✔ ----Harbor has been installed and started successfully.----  #</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker contianer ls</span> </span><br></pre></td></tr></table></figure>\n\n<p><img src=\"%E5%AE%89%E8%A3%85%E5%AE%8C%E6%88%90%E5%90%8E%E7%9A%84%E5%AE%B9%E5%99%A8.png\" alt=\"image-20210405140323830\"></p>\n<h3 id=\"2-3-访问web页面\"><a href=\"#2-3-访问web页面\" class=\"headerlink\" title=\"2.3 访问web页面\"></a>2.3 访问web页面</h3><p>​        将reg.com域名解析写入windows主机中的hosts文件，做完域名解析后在web浏览器中输入域名，由于我们使用的是自签证书，因此还是会提示链接不安全(并显示在浏览器uri前面)，点击”添加另外”即可：</p>\n<img src=\"不安全界面提醒.png\" alt=\"image-20210405151403972\" style=\"zoom:67%;\" />\n\n<p>登陆界面如下，用户名admin，密码为harbor.yml文件中定义的admin密码：</p>\n<p><img src=\"harbor%E7%99%BB%E9%99%86%E7%95%8C%E9%9D%A2.png\" alt=\"image-20210405140601898\"></p>\n<p>进入控制台，不喜欢该主题的话，可以点击下方<code>浅色主题</code>进行切换</p>\n<p><img src=\"harbor%E6%8E%A7%E5%88%B6%E5%8F%B0.png\" alt=\"image-20210405140845298\"></p>\n<p>查看证书信息</p>\n<img src=\"查看证书方法.png\" alt=\"image-20210405150634165\" style=\"zoom:50%;\" />\n\n<p>证书信息：</p>\n<img src=\"证书信息.png\" alt=\"image-20210405150442674\" style=\"zoom:67%;\" />\n\n<p>​        docker仓库搭建就完成，docker仓库的使用方法，请参考下一个章节的文章。</p>\n<h1 id=\"第二章-harbor仓库的使用\"><a href=\"#第二章-harbor仓库的使用\" class=\"headerlink\" title=\"第二章 harbor仓库的使用\"></a>第二章 harbor仓库的使用</h1><h2 id=\"1-命令行登陆到harbor仓库\"><a href=\"#1-命令行登陆到harbor仓库\" class=\"headerlink\" title=\"1.命令行登陆到harbor仓库\"></a>1.命令行登陆到harbor仓库</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 从另外的主机访问harbor仓库</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker login https://reg.com</span></span><br><span class=\"line\">Username: admin</span><br><span class=\"line\">Password: </span><br><span class=\"line\">Error response from daemon: login attempt to https://reg.com/v2/ failed with status: 404 Not Found</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 提示找不到https://reg.com，解决方法做hosts域名解析</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">echo</span> <span class=\"string\">&quot;10.138.3.111 reg.com&quot;</span> &gt;&gt; /etc/hosts</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 做完hosts域名解析后，再一次登陆，提示未知的认证</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker login https://reg.com</span></span><br><span class=\"line\">Username: admin</span><br><span class=\"line\">Password: </span><br><span class=\"line\">Error response from daemon: Get https://reg.com/v2/: x509: certificate signed by unknown authority</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 此时查看harbor主机上的messages日志，将看到访问失败的信息</span></span><br><span class=\"line\">Apr  5 15:20:13 reg dockerd: time=&quot;2021-04-05T15:20:13.964537621+08:00&quot; level=error msg=&quot;Handler for POST /v1.41/auth returned error: login attempt to https://reg.com/v2/ failed with status: 404 Not Found&quot;</span><br><span class=\"line\">Apr  5 15:24:35 reg dockerd: time=&quot;2021-04-05T15:24:35.416729925+08:00&quot; level=info msg=&quot;Error logging in to endpoint, trying next endpoint&quot; error=&quot;Get https://reg.com/v2/: x509: certificate signed by unknown authority&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 解决方法，将harbor主机上的自签证书拷贝到需要访问harbor的主机上</span></span><br><span class=\"line\">mkdir /etc/docker/certs.d/reg.com -p  # 在被访问主机上新建目录，目录名称是/etc/docker/certs.d/harbor主机域名</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 将harbor主机上的reg.com.pem文件拷贝到被访问主机上，名称后缀为.crt，不是.pem</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> scp -P 10022 /etc/docker/ssl/reg.com.pem 10.138.3.111:/etc/docker/certs.d/reg.com/reg.com.crt</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 再次访问就没有问题了</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker login https://reg.com</span></span><br><span class=\"line\">Username: admin</span><br><span class=\"line\">Password: </span><br><span class=\"line\">WARNING! Your password will be stored unencrypted in /root/.docker/config.json.</span><br><span class=\"line\">Configure a credential helper to remove this warning. See</span><br><span class=\"line\">https://docs.docker.com/engine/reference/commandline/login/#credentials-store</span><br><span class=\"line\"></span><br><span class=\"line\">Login Succeeded</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看主机上所有镜像</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker image ls</span></span><br><span class=\"line\">REPOSITORY   TAG                 IMAGE ID       CREATED        SIZE</span><br><span class=\"line\">php          lnmp_php_7.4.16     960a00c2710a   6 hours ago    712MB</span><br><span class=\"line\">nginx        lnmp_ningx_1.18.0   438f02d48ea9   15 hours ago   489MB</span><br><span class=\"line\">mysql        5.7                 cd0f0b1e283d   5 days ago     449MB</span><br><span class=\"line\">centos       centos7.6.1810      f1cb7c7d58b7   2 years ago    202MB</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 给centos镜像修改标签</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker tag centos:centos7.6.1810 reg.com/library/centos:centos7.6.1810</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker image ls</span></span><br><span class=\"line\">REPOSITORY               TAG                 IMAGE ID       CREATED        SIZE</span><br><span class=\"line\">php                      lnmp_php_7.4.16     960a00c2710a   6 hours ago    712MB</span><br><span class=\"line\">nginx                    lnmp_ningx_1.18.0   438f02d48ea9   15 hours ago   489MB</span><br><span class=\"line\">mysql                    5.7                 cd0f0b1e283d   5 days ago     449MB</span><br><span class=\"line\">centos                   centos7.6.1810      f1cb7c7d58b7   2 years ago    202MB</span><br><span class=\"line\">reg.com/library/centos   centos7.6.1810      f1cb7c7d58b7   2 years ago    202MB</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 推送centos镜像到reg.com仓库中</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker push reg.com/library/centos:centos7.6.1810</span></span><br><span class=\"line\">The push refers to repository [reg.com/library/centos]</span><br><span class=\"line\">89169d87dbe2: Pushed </span><br><span class=\"line\">centos7.6.1810: digest: sha256:747b2de199b6197a26eb1a24d69740d25483995842b2d2f75824095e9d1d19eb size: 529</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-推送镜像到harbor仓库\"><a href=\"#2-推送镜像到harbor仓库\" class=\"headerlink\" title=\"2.推送镜像到harbor仓库\"></a>2.推送镜像到harbor仓库</h2><p>​        harbor仓库中给出的镜像推送方法提示：</p>\n<img src=\"推送镜像提示.png\" alt=\"image-20210405154748691\" style=\"zoom:67%;\" />\n\n<p>镜像推送完成后，我们刷新页面，查看harbor页面上的镜像信息：</p>\n<p><img src=\"%E6%8E%A8%E9%80%81%E9%95%9C%E5%83%8F%E5%90%8E%E9%A1%B5%E9%9D%A2.png\" alt=\"image-20210405154949618\"></p>\n<h2 id=\"3-harbor集群\"><a href=\"#3-harbor集群\" class=\"headerlink\" title=\"3. harbor集群\"></a>3. harbor集群</h2><p><img src=\"image-20210405155317751.png\" alt=\"image-20210405155317751\"></p>\n<p>通过前文的方法，配置多台harbor主机，此处使用http协议进行访问，具体方法不再赘述。</p>\n<p>安装完成后，登陆备库</p>\n<p><img src=\"image-20210407093120139.png\" alt=\"image-20210407093120139\"></p>\n<p>登陆主库进行主备配置，点击<code>仓库管理</code>–&gt;<code>新建目标</code>，填入备库的访问地址，输入备库的访问用户和密码，如图所示：</p>\n<p><img src=\"image-20210407093838402.png\" alt=\"image-20210407093838402\"></p>\n<p>测试连接：</p>\n<p><img src=\"image-20210407094451578.png\" alt=\"image-20210407094451578\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 进入harbor安装目录，执行命令，停止harbor镜像仓库</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker-compose  down</span> </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> vim /etc/docker/daemon.json</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com&quot;,&quot;http://hub-mirror.c.163.com&quot;],</span><br><span class=\"line\">    &quot;insecure-registries&quot;: [&quot;10.138.3.222:80&quot;]  # 将被控端域名添加信任</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>完成后，如下：</p>\n<p><img src=\"image-20210407093246786.png\" alt=\"image-20210407093246786\"></p>\n<p>新建复制规则：</p>\n<p><img src=\"image-20210407101521855.png\" alt=\"image-20210407101521855\"></p>\n<p>创建完成后，如下：</p>\n<p><img src=\"image-20210407100135332.png\" alt=\"image-20210407100135332\"></p>\n<p>现在，我们推送一个镜像到<code>reg.com</code>主库中，查看备库<code>10.138.3.222:80</code>是否进行了同步</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker tag mysql:5.7 reg.com/library/mysql:5.7</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker image ls | grep mysql</span> </span><br><span class=\"line\">mysql                           5.7                 cd0f0b1e283d   6 days ago    449MB</span><br><span class=\"line\">reg.com/library/mysql           5.7                 cd0f0b1e283d   6 days ago    449MB</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker login reg.com   <span class=\"comment\"># 登陆主库</span></span></span><br><span class=\"line\">Authenticating with existing credentials...</span><br><span class=\"line\">WARNING! Your password will be stored unencrypted in /root/.docker/config.json.</span><br><span class=\"line\">Configure a credential helper to remove this warning. See</span><br><span class=\"line\">https://docs.docker.com/engine/reference/commandline/login/#credentials-store</span><br><span class=\"line\"></span><br><span class=\"line\">Login Succeeded</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 推送镜像到主库</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker push reg.com/library/mysql:5.7</span>   </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>查看<code>reg.com</code>主库，检查是否推送成功</p>\n<p><img src=\"image-20210407102231326.png\" alt=\"image-20210407102231326\"></p>\n<p>查看<code>reg.com</code>上<code>复制管理</code>中的信息，显示复制成功</p>\n<p><img src=\"image-20210407102333046.png\" alt=\"image-20210407102333046\"></p>\n<p>检查备库<code>10.138.3.222:80</code>是否成功同步了<code>msyql:5.7</code></p>\n<p><img src=\"image-20210407102436663.png\" alt=\"image-20210407102436663\"></p>\n<p>同步成功</p>\n<p>配置主主</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> mkdir /etc/docker/certs.d/reg.com -p    <span class=\"comment\"># 在备服务器上新建目录</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 将reg.com主机上的认证文件拷贝到备服务器上</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> scp -P 10022 /etc/docker/ssl/reg.com.pem 10.138.3.222:/etc/docker/certs.d/reg.com/reg.com.crt</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看备服务器上的认证文件</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls /etc/docker/certs.d/reg.com/reg.com.crt</span> </span><br><span class=\"line\">/etc/docker/certs.d/reg.com/reg.com.crt</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>主从复制+备份harbor数据目录/data/+数据库文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 日志文件</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls /var/<span class=\"built_in\">log</span>/harbor/</span></span><br><span class=\"line\">core.log  jobservice.log  portal.log  postgresql.log  proxy.log  redis.log  registryctl.log  registry.log</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> harbor数据文件</span></span><br><span class=\"line\">ls /data/</span><br><span class=\"line\">ca_download  database  job_logs  redis  registry  secret</span><br><span class=\"line\"></span><br><span class=\"line\">ls /data/registry/docker/registry/v2/repositories/library/centos/</span><br><span class=\"line\">_layers  _manifests  _uploads  # library/centos是我们刚刚上传的centos镜像</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls /data/secret/</span></span><br><span class=\"line\">cert  core  keys  registry</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls /data/secret/core/</span></span><br><span class=\"line\">private_key.pem</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls /data/secret/cert/</span></span><br><span class=\"line\">server.crt  server.key</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls /data/secret/keys/</span></span><br><span class=\"line\">secretkey</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls /data/secret/registry/</span></span><br><span class=\"line\">root.crt</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"附：忘记harbor登陆密码的解决方法\"><a href=\"#附：忘记harbor登陆密码的解决方法\" class=\"headerlink\" title=\"附：忘记harbor登陆密码的解决方法\"></a>附：忘记harbor登陆密码的解决方法</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">echo</span> -n <span class=\"string\">&quot;Admin@2020&quot;</span>|md5sum</span></span><br><span class=\"line\">06d1108043ad13aebdca098c7e6bfe64  -</span><br><span class=\"line\"></span><br><span class=\"line\">[root@reg ~]# docker exec -it harbor-db /bin/bash   # 进入数据库容器  </span><br><span class=\"line\">postgres [ / ]$ netstat  -lntp </span><br><span class=\"line\">Active Internet connections (only servers)</span><br><span class=\"line\">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name</span><br><span class=\"line\">tcp        0      0 0.0.0.0:5432            0.0.0.0:*               LISTEN      1/postgres      </span><br><span class=\"line\">tcp        0      0 127.0.0.11:34651        0.0.0.0:*               LISTEN      -               </span><br><span class=\"line\">tcp6       0      0 :::5432                 :::*                    LISTEN      1/postgres </span><br><span class=\"line\"></span><br><span class=\"line\">postgres [ / ]$  psql -U postgres -d postgres -h 127.0.0.1 -p 5432   # 登陆数据库</span><br><span class=\"line\">psql (9.6.21)</span><br><span class=\"line\">Type &quot;help&quot; for help.</span><br><span class=\"line\"></span><br><span class=\"line\">postgres=# help</span><br><span class=\"line\">You are using psql, the command-line interface to PostgreSQL.</span><br><span class=\"line\">Type:  \\copyright for distribution terms</span><br><span class=\"line\">       \\h for help with SQL commands</span><br><span class=\"line\">       \\? for help with psql commands</span><br><span class=\"line\">       \\g or terminate with semicolon to execute query</span><br><span class=\"line\">       \\q to quit</span><br><span class=\"line\">postgres=# \\c registry    # 切换到registry数据库中</span><br><span class=\"line\">You are now connected to database &quot;registry&quot; as user &quot;postgres&quot;.</span><br><span class=\"line\"></span><br><span class=\"line\">registry=# select * from harbor_user;</span><br><span class=\"line\"> user_id | username |           password                |realname      |             salt            |</span><br><span class=\"line\">---------+-----------+---------------------------------+---------------+-----------------------------+</span><br><span class=\"line\">       2 | anonymous |                                 | anonymous user|                             | </span><br><span class=\"line\">       1 | admin     |b5361d73851310e3f99e417c21f00fff | system admin  |F9xavf065XBc44obZewfrSrVkUoF42Gd </span><br><span class=\"line\">(2 rows)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"第三章-prometheus-grafana监控docker主机\"><a href=\"#第三章-prometheus-grafana监控docker主机\" class=\"headerlink\" title=\"第三章 prometheus+grafana监控docker主机\"></a>第三章 prometheus+grafana监控docker主机</h1><p>监控系统概述：</p>\n<ul>\n<li><p>cAdvisor(container cAdvisor)：用于收集正在运行的容器资源使用和性能信息，在每个docker 主机上部署</p>\n<p><a href=\"https://github.com/google/cAdvisor\">https://github.com/google/cAdvisor</a></p>\n</li>\n<li><p>Prometheus：容器监控系统，从cAdvisor收集并存储数据，官网<a href=\"https://prometheus.io/\">https://prometheus.io/</a></p>\n</li>\n<li><p>Grafana：开源可视化展示系统，官网<a href=\"https://grafana.com/grafana\">https://grafana.com/grafana</a></p>\n</li>\n</ul>\n<h2 id=\"1-配置cAdvisor\"><a href=\"#1-配置cAdvisor\" class=\"headerlink\" title=\"1.配置cAdvisor\"></a>1.配置cAdvisor</h2><h3 id=\"1-1-安装cAdvisor\"><a href=\"#1-1-安装cAdvisor\" class=\"headerlink\" title=\"1.1 安装cAdvisor\"></a>1.1 安装cAdvisor</h3><p>​        可通过<code>GitHub</code>中<code>cAdvisor</code>的运行容器命令，运行<code>cAdvisor</code></p>\n<img src=\"image-20210405163157209.png\" alt=\"image-20210405163157209\" style=\"zoom:67%;\" />\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run \\</span><br><span class=\"line\">  --volume=/:/rootfs:ro \\</span><br><span class=\"line\">  --volume=/var/run:/var/run:ro \\</span><br><span class=\"line\">  --volume=/sys:/sys:ro \\</span><br><span class=\"line\">  --volume=/var/lib/docker/:/var/lib/docker:ro \\</span><br><span class=\"line\">  --volume=/dev/disk/:/dev/disk:ro \\</span><br><span class=\"line\">  --publish=8080:8080 \\</span><br><span class=\"line\">  --detach=true \\</span><br><span class=\"line\">  --name=cadvisor \\</span><br><span class=\"line\">  --privileged \\</span><br><span class=\"line\">  --device=/dev/kmsg \\</span><br><span class=\"line\">  google/cadvisor:latest     # Github中的源地址可能访问不了，因此这里更换成dockerhub中的地址</span><br><span class=\"line\">Unable to find image &#x27;google/cadvisor:latest&#x27; locally</span><br><span class=\"line\">latest: Pulling from google/cadvisor</span><br><span class=\"line\">ff3a5c916c92: Downloading </span><br><span class=\"line\">44a45bb65cdf: Download complete </span><br><span class=\"line\">0bbe1a2fe2a6: Download complete </span><br><span class=\"line\">latest: Pulling from google/cadvisor</span><br><span class=\"line\">ff3a5c916c92: Pull complete </span><br><span class=\"line\">44a45bb65cdf: Pull complete </span><br><span class=\"line\">0bbe1a2fe2a6: Pull complete </span><br><span class=\"line\">Digest: sha256:815386ebbe9a3490f38785ab11bda34ec8dacf4634af77b8912832d4f85dca04</span><br><span class=\"line\">Status: Downloaded newer image for google/cadvisor:latest</span><br><span class=\"line\">WARNING: IPv4 forwarding is disabled. Networking will not work.  # 此处有一个报错，需要打开路由转发功能</span><br><span class=\"line\">e1132c19a4129804a28c1c0d0d61884ced3d548625daf882834095a420d3da7a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker container ls</span> </span><br><span class=\"line\">CONTAINER ID   IMAGE                    COMMAND                  CREATED          STATUS                          PORTS                                NAMES</span><br><span class=\"line\">886e2bce936f   google/cadvisor:latest   &quot;/usr/bin/cadvisor -…&quot;   12 seconds ago   Up 11 seconds                   0.0.0.0:8080-&gt;8080/tcp               cadvisor</span><br><span class=\"line\">60d4d688b698   php:lnmp_php_7.4.16      &quot;./sbin/php-fpm -c /…&quot;   6 hours ago      Restarting (78) 3 seconds ago                                        lnmp_php</span><br><span class=\"line\">10124a1d6b8b   mysql:5.7                &quot;docker-entrypoint.s…&quot;   16 hours ago     Up 7 hours                      33060/tcp, 0.0.0.0:13306-&gt;3306/tcp   lnmp_mysql</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-2-访问-cAdvisor\"><a href=\"#1-2-访问-cAdvisor\" class=\"headerlink\" title=\"1.2 访问 cAdvisor\"></a>1.2 访问 <code>cAdvisor</code></h3><p>​        直接在浏览器中输入url–<code>http://10.138.3.130:8080</code>访问<code>cAdvisor</code>，访问较慢 </p>\n<p><img src=\"image-20210405214538925.png\" alt=\"image-20210405214538925\"></p>\n<blockquote>\n<p>第一次实验的时候一直不能通过<a href=\"http://10.138.3.130:8080/%E8%AE%BF%E9%97%AE%EF%BC%8C%E9%87%8D%E6%96%B0%E5%88%A0%E9%99%A4%E5%B9%B6%E5%AE%89%E8%A3%85cAdvisor%E5%AE%B9%E5%99%A8%EF%BC%8C%E5%8F%91%E7%8E%B0%E6%89%A7%E8%A1%8C%E5%AE%8C%E6%96%B0%E5%BB%BAcAdvisor%E5%AE%B9%E5%99%A8%E5%90%8E%E6%9C%89%E4%B8%80%E4%B8%AA%E6%8A%A5%E9%94%99%E4%BF%A1%E6%81%AF%60WARNING\">http://10.138.3.130:8080/访问，重新删除并安装cAdvisor容器，发现执行完新建cAdvisor容器后有一个报错信息`WARNING</a>: IPv4 forwarding is disabled. Networking will not work.<code>，解决方法是打开路由转发功能</code>echo ‘net.ipv4.ip_forward=1’ &gt;&gt; /usr/lib/sysctl.d/00-system.conf`</p>\n</blockquote>\n<p>查看宿主机上运行的容器信息：</p>\n<p><img src=\"image-20210405214435116.png\" alt=\"image-20210405214435116\"></p>\n<h2 id=\"2-配置prometheus\"><a href=\"#2-配置prometheus\" class=\"headerlink\" title=\"2. 配置prometheus\"></a>2. 配置prometheus</h2><h3 id=\"2-1-安装prometheus\"><a href=\"#2-1-安装prometheus\" class=\"headerlink\" title=\"2.1 安装prometheus\"></a>2.1 安装prometheus</h3><p>​        <code>prometheus</code>可部署在任意的宿主机上，<code> cAdvisor</code>暴露出来的指标必须要符合<code>prometheus</code>的格式，才能被<code>prometheus</code>采集，我们在浏览器中输入<code>http://10.138.3.130:8080/metrics</code>，即可查看到符合<code>prometheus</code>格式的信息</p>\n<p><img src=\"image-20210405214835081.png\" alt=\"image-20210405214835081\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装prometheus</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker run -d --name prometheus -p 9090:9090 prom/prometheus</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker ps -l</span> </span><br><span class=\"line\">CONTAINER ID   IMAGE             COMMAND                  CREATED         STATUS         PORTS                    NAMES</span><br><span class=\"line\">fe3468745563   prom/prometheus   &quot;/bin/prometheus --c…&quot;   6 seconds ago   Up 5 seconds   0.0.0.0:9090-&gt;9090/tcp   prometheus</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-访问prometheus\"><a href=\"#2-2-访问prometheus\" class=\"headerlink\" title=\"2.2 访问prometheus\"></a>2.2 访问prometheus</h3><p>​        在浏览器中访问<code>http://ip:9090/config</code>，如下：</p>\n<img src=\"image-20210405215848324.png\" alt=\"image-20210405215848324\" style=\"zoom: 67%;\" />\n\n<h3 id=\"2-3-添加监控主机\"><a href=\"#2-3-添加监控主机\" class=\"headerlink\" title=\"2.3 添加监控主机\"></a>2.3 添加监控主机</h3><p>​        修改<code>prometheus</code>配置文件，让<code>prometheus</code>采集数据，每一个被监控端的信息都需要写入<code>prometheus</code>的配置文件，<code>prometheus</code>才能采集到数据，更改配置文件就是让<code>prometheus</code>知道去哪里取数据。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 进入prometheus容器中</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker <span class=\"built_in\">exec</span> -it fe3468745563 sh</span> </span><br><span class=\"line\">/prometheus $ vi /etc/prometheus/prometheus.yml </span><br><span class=\"line\">scrape_configs:                                                    </span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\"> The job name is added as a label `job=&lt;job_name&gt;` to any timeseries scraped from this config.</span></span><br><span class=\"line\">  - job_name: &#x27;prometheus&#x27;     # 等同于分组的组名                                                                                                               </span><br><span class=\"line\">    static_configs:                      </span><br><span class=\"line\">    - targets: [&#x27;localhost:9090&#x27;]       # 被监控的目标端 </span><br><span class=\"line\">                                 </span><br><span class=\"line\">  - job_name: &#x27;docker&#x27;           # 新建一个docker分组</span><br><span class=\"line\">                                 </span><br><span class=\"line\">    static_configs:              </span><br><span class=\"line\">    - targets: [&#x27;10.138.3.130:8080&#x27;]    # 添加cAdvisor的接口，就能监控到数据；多个被监控端，用逗号隔开</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 重启生效</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker container restart  fe3468745563</span> </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker ps -l</span> </span><br><span class=\"line\">CONTAINER ID   IMAGE             COMMAND                  CREATED          STATUS          PORTS                    NAMES</span><br><span class=\"line\">fe3468745563   prom/prometheus   &quot;/bin/prometheus --c…&quot;   17 minutes ago   Up 14 seconds   0.0.0.0:9090-&gt;9090/tcp   prometheus</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>​        此时就能在<code>prometheus</code>的<code>targets</code>页面查看新添加的主机信息：</p>\n<p><img src=\"image-20210405221649388.png\" alt=\"image-20210405221649388\"></p>\n<p>​        现在我们可以通过在<code>prometheus</code>的<code>Graph</code>页面输入<code>promql</code>查看指定的性能数据了</p>\n<p><img src=\"image-20210405221756180.png\" alt=\"image-20210405221756180\"></p>\n<p>​        如下，这里只要输入一个字符，就能列出跟含有该字符的所有的<code>promql</code>，非常方便</p>\n<p><img src=\"image-20210405221946712.png\" alt=\"image-20210405221946712\"></p>\n<h2 id=\"3-配置Grafana\"><a href=\"#3-配置Grafana\" class=\"headerlink\" title=\"3.配置Grafana\"></a>3.配置Grafana</h2><h3 id=\"3-1-安装Grafana\"><a href=\"#3-1-安装Grafana\" class=\"headerlink\" title=\"3.1 安装Grafana\"></a>3.1 安装Grafana</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker run -d --name grafana -p 3000:3000 grafana/grafana</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker ps -l</span> </span><br><span class=\"line\">CONTAINER ID   IMAGE             COMMAND     CREATED          STATUS          PORTS                    NAMES</span><br><span class=\"line\">99ec838588e1   grafana/grafana   &quot;/run.sh&quot;   39 seconds ago   Up 37 seconds   0.0.0.0:3000-&gt;3000/tcp   grafana</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-登陆Grafana\"><a href=\"#3-2-登陆Grafana\" class=\"headerlink\" title=\"3.2 登陆Grafana\"></a>3.2 登陆Grafana</h3><p>​        登陆grafana，用户和密码都是admin，登陆后会要求修改密码。</p>\n<p><img src=\"image-20210405222545189.png\" alt=\"image-20210405222545189\"></p>\n<p>​        修改密码后(Admin)，进入主页：</p>\n<p><img src=\"image-20210405222915458.png\" alt=\"image-20210405222915458\"></p>\n<h3 id=\"3-3-配置Grafana\"><a href=\"#3-3-配置Grafana\" class=\"headerlink\" title=\"3.3 配置Grafana\"></a>3.3 配置Grafana</h3><h4 id=\"3-3-1-添加数据源–Prometheus\"><a href=\"#3-3-1-添加数据源–Prometheus\" class=\"headerlink\" title=\"3.3.1 添加数据源–Prometheus\"></a>3.3.1 添加数据源–Prometheus</h4><p>​        首先，添加一个数据源–即告诉<code>Grafana</code>去哪里获取数据，点击<code>DATA SOURCES</code>，使<code>grafana</code>连接到<code>prometheus</code>，下图页面展示了所有能添加的数据源。</p>\n<p><img src=\"image-20210405223215419.png\" alt=\"image-20210405223215419\"></p>\n<p>​        输入Prometheus的访问地址，并保存。</p>\n<p><img src=\"image-20210405223339334.png\" alt=\"image-20210405223339334\"></p>\n<p>​        查看添加的数据源信息：</p>\n<p><img src=\"image-20210405223451030.png\" alt=\"image-20210405223451030\"></p>\n<h4 id=\"3-3-2-添加自定义仪表盘\"><a href=\"#3-3-2-添加自定义仪表盘\" class=\"headerlink\" title=\"3.3.2 添加自定义仪表盘\"></a>3.3.2 添加自定义仪表盘</h4><p><img src=\"image-20210405223545260.png\" alt=\"image-20210405223545260\"></p>\n<p>​        默认的仪表盘页面(更正：下文中截图Prometheus的查询语句promql，误写成了proql)如下：</p>\n<p><img src=\"image-20210405224051163.png\" alt=\"image-20210405224051163\"></p>\n<p>​        此时我们即将使用到<code>promql</code>，即将<code>promql</code>添加到<code>Grafana</code>仪表盘中的<code>Metrics</code>中<code>Grafana</code>将在该图形中展示哪种<code>promethues</code>中的数据，我们依旧可以通过<code>prometheus</code>界面上的<code>Graph</code>进行调试，如监控内存，我们列出所有跟容器相关的<code>container_memory_usage_bytes</code>的信息</p>\n<p><img src=\"image-20210405224523020.png\" alt=\"image-20210405224523020\"></p>\n<p>​        下面，我们通过筛选条件，列出容器的<code>container_memory_usage_bytes</code>信息，<code>promql</code>语句为<code>container_memory_usage_bytes&#123;image!=&quot;&quot;&#125;</code></p>\n<p><img src=\"image-20210405224757286.png\" alt=\"image-20210405224757286\"></p>\n<p>​        接下来，我们采集具体的容器，如名称为<code>cAdvisor</code>的容器的信息，<code>promql</code>为<code>container_memory_usage_bytes&#123;image!=&quot;&quot;,name=&quot;cadvisor&quot;&#125;</code>，如下</p>\n<p><img src=\"image-20210405225046812.png\" alt=\"image-20210405225046812\"></p>\n<p>​        将上面得到的<code>promql</code>写入到<code>grafana</code>中的<code>metrics</code>，就能得到数据</p>\n<p><img src=\"image-20210405230150973.png\" alt=\"image-20210405230150973\"></p>\n<p>​        完成后，如下图所示：</p>\n<p><img src=\"image-20210405230244625.png\" alt=\"image-20210405230244625\"></p>\n<h4 id=\"3-3-3-添加模板仪表盘\"><a href=\"#3-3-3-添加模板仪表盘\" class=\"headerlink\" title=\"3.3.3 添加模板仪表盘\"></a>3.3.3 添加模板仪表盘</h4><p>​        如果每台机器都要这样手动配置一个图形的话，对于十来台服务器来说还可以接受，但对于成有千上万台的服务器的公司来说，这样的配置方式无疑是灾难性的，因此有没有一个通用的模板呢？答案是肯定的，<code>grafana</code>官网提供了很多这样的监控模板，访问地址–<code>https://grafana.com/grafana/dashboards/</code>：</p>\n<p><img src=\"image-20210405230718697.png\" alt=\"image-20210405230718697\"></p>\n<p>​        监控docker主机模板ID：193，即使用url–<code>https://grafana.com/grafana/dashboards/193</code></p>\n<p><img src=\"image-20210405231133723.png\" alt=\"image-20210405231133723\"></p>\n<p>在grafana首页中，点击<code>manage</code>–&gt;<code>import</code>，输入<code>193</code>导入模板</p>\n<p><img src=\"image-20210405231439212.png\" alt=\"image-20210405231439212\"></p>\n<p>输入<code>193</code>点击<code>load</code>按钮</p>\n<p><img src=\"image-20210405231558075.png\" alt=\"image-20210405231558075\"></p>\n<p>点击<code>load</code>后，自动加载</p>\n<p><img src=\"image-20210405231650128.png\" alt=\"image-20210405231650128\"></p>\n<p>导入后，即可看到仪表盘数据内容</p>\n<p><img src=\"image-20210405231742854.png\" alt=\"image-20210405231742854\"></p>\n<p>​        这里的仪表盘只是大佬给我们做好了的模板，本质上也是通过<code>promql</code>自定义仪表盘来做的，例如，我们查看上图中的<code>Total Memory Usage</code>，点击<code>Edit</code>来到编辑界面</p>\n<p><img src=\"image-20210405232056122.png\" alt=\"image-20210405232056122\"></p>\n<p>​        <code>promql</code>语句如下：</p>\n<p><img src=\"image-20210405232158441.png\" alt=\"image-20210405232158441\"></p>\n<p> 一些常见的坑：</p>\n<ul>\n<li>不展示数据：<ul>\n<li>可能是宿主机由于时间不同步</li>\n<li>promql格式有问题，可以通过<code>prometheus</code>的<code>Graph</code>进行检查</li>\n<li>prometheus本来就没有数据</li>\n</ul>\n</li>\n</ul>\n<p>cAdvisor+prometheus+grafana进行监控的步骤总结：</p>\n<ol>\n<li>在被监控主机上安装cAdvisor容器，让cAdvisor收集宿主机数据</li>\n<li>将宿主机监控端写入prometheus配置文件，让Prometheus能够获得cAdvisor采集到宿主机的监控数据</li>\n<li>添加到grafana仪表盘(但是每天主机都添加一个仪表盘是不是很烦呢？能否一个界面显示所有的主机呢？需要查看哪台主机就点击哪台主机呢？)</li>\n</ol>\n<p>​        点击下图中的<code>设置</code>按钮，进入设置选项</p>\n<p><img src=\"image-20210405233132149.png\" alt=\"image-20210405233132149\"></p>\n<p>​        点击<code>Versions</code>，添加变量</p>\n<p><img src=\"image-20210405233216163.png\" alt=\"image-20210405233216163\"></p>\n<p>​        如下，列出所有分组(或主机)信息，即<code>dashboard</code>中是按照<code>job</code>还是<code>instance</code>显示主机：</p>\n<p><img src=\"image-20210405233844242.png\" alt=\"image-20210405233844242\"></p>\n<p>​        上图中的配置，我们仍然是通过<code>promql</code>实现，在<code>Graph</code>页面显示不出的数据，不可能在<code>grafana</code>中能显示图形。</p>\n<p><img src=\"image-20210405233532485.png\" alt=\"image-20210405233532485\"></p>\n<p>​        此时，查看<code>grafana</code>仪表盘，就多了选择框，可以选择主机或分组，上图中<code>add variables</code>(添加变量)时使用 的是<code>instance</code>就显示所有主机的信息，添加的是<code>job</code>就会显示所有分组的信息。</p>\n<p><img src=\"image-20210405234100094.png\" alt=\"image-20210405234100094\"></p>\n<p>​        但是，现在我们选择两个不同的节点，图表的结果是一样的，因为<code>promql</code>中的语句写死了，没有采集到对应<code>node</code>节点主机的信息，因此需要修改，方法如下，先点击进入其中一个仪表盘的修改界面：</p>\n<p><img src=\"image-20210405234556293.png\" alt=\"image-20210405234556293\"></p>\n<p>​        添加上每台主机，在原<code>promql</code>的基础上，添加上<code>&quot;instance=&#39;$Node&#39;&quot;</code>，变量<code>Node</code>是我们上文中通过<code>add variables</code>自定义的变量名称</p>\n<p><img src=\"image-20210405234802713.png\" alt=\"image-20210405234802713\"></p>\n<p>​        通过这样的修改，得到的就是每一台主机的<code>内存使用量</code>了，然后再将该仪表盘中的其他仪表盘<code>promql</code>都进行这样的修改，就能展示出每台主机独特的信息。 </p>\n","comments":true,"permalink":"https://scaven.site/2021-04/19-docker-registory/","categories":[{"name":"docker","slug":"docker","permalink":"https://scaven.site/categories/docker/"}],"tags":[{"name":"kubernets","slug":"kubernets","permalink":"https://scaven.site/tags/kubernets/"}]}]