[{"title":"ansible Playbook剧本","date":"2021-05-25T07:15:02.000Z","path":"2021-05/ansiblePlaybook/","content":"<h2 id=\"五、Playbook-模板\"><a href=\"#五、Playbook-模板\" class=\"headerlink\" title=\"五、Playbook 模板\"></a>五、Playbook 模板</h2><h3 id=\"1-jinja2\"><a href=\"#1-jinja2\" class=\"headerlink\" title=\"1. jinja2\"></a>1. jinja2</h3><p>​        Jinja2是基于Python实现的一种模板引擎，具有集成沙箱执行环境，Ansible也是使用Jinja2动态渲染模板文件。使用template模块实现。在实际管理服务器时，不一定组内所有主机都做相同操作。例如，用zabbix监控几十台新上架的服务器，需要将 zabbix_agentd.conf分发到被监控主机，这个文件中 hostname的ip每台都不同，如果单台操作工作量大，有什么好的方法可以批量操作吗？这时就用到模板了。</p>\n<span id=\"more\"></span>\n<p><code>Jinja2</code>语言，使用字面量，有下面形式</p>\n<ul>\n<li>字符串：使用单引号或双引号</li>\n<li>数字：整数，浮点数</li>\n<li>列表：[item1, item2, …]</li>\n<li>元组：(item1, item2, …)</li>\n<li>字典：{key1:value1, key2:value2, …}</li>\n<li>布尔型：true/false</li>\n</ul>\n<p>运算符：</p>\n<ul>\n<li><p>算术运算：+, -, *, /, //, %, **</p>\n</li>\n<li><p>比较操作：==, !=, &gt;, &gt;=, &lt;, &lt;=</p>\n</li>\n<li><p>逻辑运算：and, or, not</p>\n</li>\n<li><p>流表达式：For If When</p>\n</li>\n</ul>\n<p>在playbook role中的格式：</p>\n<ul>\n<li>templates文件必须存放于templates目录下，且命名为 .j2 结尾</li>\n<li>yaml/yml 文件需和templates目录平级，目录结构如下：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── temnginx.yml</span><br><span class=\"line\">└── templates</span><br><span class=\"line\">     └── nginx.conf.j2</span><br></pre></td></tr></table></figure>\n案例：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cat zabbix_agentd.conf.j2</span> </span><br><span class=\"line\">PidFile=/var/run/zabbix/zabbix_agentd.pid</span><br><span class=\"line\">LogFile=/var/log/zabbix/zabbix_agentd.log</span><br><span class=\"line\">DebugLevel=3</span><br><span class=\"line\">Server=192.168.1.20</span><br><span class=\"line\">ListenPort=10050</span><br><span class=\"line\">ListenIP=&#123;&#123; ansible_eth0.ipv4.address &#125;&#125;</span><br><span class=\"line\">Hostname=&#123;&#123; ansible_eth0.ipv4.address &#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>playbook</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># vi zabbix.yaml </span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">node</span> </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">install</span></span><br><span class=\"line\">    <span class=\"attr\">yum:</span> </span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">https://repo.zabbix.com/zabbix/4.4/rhel/7/x86_64/zabbix-agent-4.4.4-1.el7.x86_64.rpm</span> </span><br><span class=\"line\">      <span class=\"attr\">state:</span> <span class=\"string\">present</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">config</span></span><br><span class=\"line\">    <span class=\"attr\">template:</span> </span><br><span class=\"line\">      <span class=\"attr\">src:</span> <span class=\"string\">zabbix_agentd.conf.j2</span> </span><br><span class=\"line\">      <span class=\"attr\">dest:</span> <span class=\"string\">/tmp/zabbix_agentd.conf</span></span><br></pre></td></tr></table></figure>\n\n<p>执行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 这里只执行复制配置文件到目标主机上的任务</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible-playbook --tags config zabbix.yaml</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible node -a <span class=\"string\">&quot;cat /tmp/zabbix_agentd.conf&quot;</span></span></span><br><span class=\"line\">192.168.1.3 | CHANGED | rc=0 &gt;&gt;</span><br><span class=\"line\">PidFile=/var/run/zabbix/zabbix_agentd.pid</span><br><span class=\"line\">LogFile=/var/log/zabbix/zabbix_agentd.log</span><br><span class=\"line\">DebugLevel=3</span><br><span class=\"line\">Server=192.168.1.20</span><br><span class=\"line\">ListenPort=10050</span><br><span class=\"line\">ListenIP=192.168.1.3        # ip地址自动被修改成了</span><br><span class=\"line\">Hostname=192.168.1.3</span><br><span class=\"line\">192.168.1.4 | CHANGED | rc=0 &gt;&gt;</span><br><span class=\"line\">PidFile=/var/run/zabbix/zabbix_agentd.pid</span><br><span class=\"line\">LogFile=/var/log/zabbix/zabbix_agentd.log</span><br><span class=\"line\">DebugLevel=3</span><br><span class=\"line\">Server=192.168.1.20</span><br><span class=\"line\">ListenPort=10050</span><br><span class=\"line\">ListenIP=192.168.1.4   # ip地址自动被修改成了</span><br><span class=\"line\">Hostname=192.168.1.4</span><br></pre></td></tr></table></figure>\n\n<p>​        这是最简单的用法，模板还支持运算符、流程控制等。</p>\n<ul>\n<li>遍历列表</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"string\">%</span> <span class=\"string\">set</span> <span class=\"string\">list=</span>[<span class=\"string\">&#x27;one&#x27;</span>, <span class=\"string\">&#x27;two&#x27;</span>, <span class=\"string\">&#x27;three&#x27;</span>] <span class=\"string\">%</span>&#125;  <span class=\"comment\"># 定义列表。list是列表的名称，[&#x27;one&#x27;, &#x27;two&#x27;, &#x27;three&#x27;]是列表的值</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;<span class=\"string\">%</span> <span class=\"string\">for</span> <span class=\"string\">i</span> <span class=\"string\">in</span> <span class=\"string\">list</span> <span class=\"string\">%</span>&#125;      <span class=\"comment\"># for循环list列表</span></span><br><span class=\"line\">  &#123;<span class=\"string\">%</span> <span class=\"string\">if</span> <span class=\"string\">i</span> <span class=\"string\">==</span> <span class=\"string\">&#x27;two&#x27;</span> <span class=\"string\">%</span>&#125;    <span class=\"comment\"># 如果i恒等于two，则输出two</span></span><br><span class=\"line\">     <span class=\"string\">-&gt;</span> <span class=\"string\">two</span></span><br><span class=\"line\">  &#123;<span class=\"string\">%</span> <span class=\"string\">elif</span> <span class=\"string\">loop.index</span> <span class=\"string\">==</span> <span class=\"number\">3</span> <span class=\"string\">%</span>&#125;   <span class=\"comment\"># 如果索引值为3，则输出3，索引从1开始</span></span><br><span class=\"line\">    <span class=\"string\">-&gt;</span> <span class=\"number\">3</span></span><br><span class=\"line\">  &#123;<span class=\"string\">%</span> <span class=\"string\">else</span> <span class=\"string\">%</span>&#125;   <span class=\"comment\"># 否则输出遍历到的值</span></span><br><span class=\"line\">    &#123;&#123;<span class=\"string\">i</span>&#125;&#125;</span><br><span class=\"line\">  &#123;<span class=\"string\">%</span> <span class=\"string\">endif</span> <span class=\"string\">%</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">%</span> <span class=\"string\">endfor</span> <span class=\"string\">%</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>遍历字典</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"string\">%</span> <span class=\"string\">set</span> <span class=\"string\">dict=</span>&#123;<span class=\"attr\">&#x27;abc&#x27;:</span> <span class=\"string\">&#x27;30&#x27;</span>&#125; <span class=\"string\">%</span>&#125;   <span class=\"comment\"># 定义字典</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;<span class=\"string\">%</span> <span class=\"string\">for</span> <span class=\"string\">key</span>, <span class=\"string\">value</span> <span class=\"string\">in</span> <span class=\"string\">dict.iteritems()</span> <span class=\"string\">%</span>&#125;</span><br><span class=\"line\">   &#123;&#123;<span class=\"string\">key</span>&#125;&#125; <span class=\"string\">-&gt;</span> &#123;&#123;<span class=\"string\">value</span>&#125;&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">%</span> <span class=\"string\">endfor</span> <span class=\"string\">%</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p>案例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">node</span></span><br><span class=\"line\">  <span class=\"attr\">vars:</span></span><br><span class=\"line\">    <span class=\"attr\">hello:</span> <span class=\"number\">123</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">template:</span> </span><br><span class=\"line\">      <span class=\"attr\">src:</span> <span class=\"string\">file.j2</span> </span><br><span class=\"line\">      <span class=\"attr\">dest:</span> <span class=\"string\">/tmp/file.txt</span></span><br></pre></td></tr></table></figure>\n\n<p>file.j2 文件内容如下</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"string\">%</span> <span class=\"string\">set</span> <span class=\"string\">list=</span>[<span class=\"string\">&#x27;one&#x27;</span>, <span class=\"string\">&#x27;two&#x27;</span>, <span class=\"string\">&#x27;three&#x27;</span>] <span class=\"string\">%</span>&#125;  <span class=\"comment\"># 定义列表。list是列表的名称，[&#x27;one&#x27;, &#x27;two&#x27;, &#x27;three&#x27;]是列表的值</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;<span class=\"string\">%</span> <span class=\"string\">for</span> <span class=\"string\">i</span> <span class=\"string\">in</span> <span class=\"string\">list</span> <span class=\"string\">%</span>&#125;      <span class=\"comment\"># for循环list列表</span></span><br><span class=\"line\">  &#123;<span class=\"string\">%</span> <span class=\"string\">if</span> <span class=\"string\">i</span> <span class=\"string\">==</span> <span class=\"string\">&#x27;two&#x27;</span> <span class=\"string\">%</span>&#125;    <span class=\"comment\"># 如果i恒等于two，则输出two</span></span><br><span class=\"line\">     <span class=\"string\">-&gt;</span> <span class=\"string\">two</span></span><br><span class=\"line\">  &#123;<span class=\"string\">%</span> <span class=\"string\">elif</span> <span class=\"string\">loop.index</span> <span class=\"string\">==</span> <span class=\"number\">3</span> <span class=\"string\">%</span>&#125;   <span class=\"comment\"># 如果索引值为3，则输出3，索引从1开始</span></span><br><span class=\"line\">    <span class=\"string\">-&gt;</span> <span class=\"number\">3</span></span><br><span class=\"line\">  &#123;<span class=\"string\">%</span> <span class=\"string\">else</span> <span class=\"string\">%</span>&#125;   <span class=\"comment\"># 否则输出遍历到的值</span></span><br><span class=\"line\">    &#123;&#123;<span class=\"string\">i</span>&#125;&#125;</span><br><span class=\"line\">  &#123;<span class=\"string\">%</span> <span class=\"string\">endif</span> <span class=\"string\">%</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">%</span> <span class=\"string\">endfor</span> <span class=\"string\">%</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; <span class=\"string\">hello</span> &#125;&#125;   <span class=\"comment\"># 输出变量hello</span></span><br></pre></td></tr></table></figure>\n\n<p>执行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible-playbook  tmp.yaml</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 检查</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible node -a <span class=\"string\">&quot;cat /tmp/file.txt&quot;</span></span></span><br><span class=\"line\">192.168.1.3 | CHANGED | rc=0 &gt;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      one</span><br><span class=\"line\">         -&gt; two</span><br><span class=\"line\">        -&gt; 3</span><br><span class=\"line\">  </span><br><span class=\"line\">123   #  &#123;&#123; hello &#125;&#125; 的输出</span><br><span class=\"line\">192.168.1.4 | CHANGED | rc=0 &gt;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      one</span><br><span class=\"line\">         -&gt; two</span><br><span class=\"line\">        -&gt; 3</span><br><span class=\"line\">  </span><br><span class=\"line\">123</span><br></pre></td></tr></table></figure>\n\n<p>​        <code>set</code>用于定义变量，<code>jinja2</code>也可以使用<code>ansible</code>中定义的变量。</p>\n<p>​        <code>loop</code>是在<code>&#123;% for %&#125;</code>标签中生成的变量，用于获取当前循环进展信息。</p>\n<p>​        其中<code>loop.index</code>是循环计数器，当前循环的索引从 1 开始。比较常见的一种用法是结合 Ansible 内置主机变量。</p>\n<p>例如，比较常用的一种用法，遍历组中所有主机IP：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># vi test.yaml </span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"> <span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">node</span></span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"attr\">tasks:</span></span><br><span class=\"line\">   <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">测试</span></span><br><span class=\"line\">     <span class=\"attr\">template:</span> <span class=\"string\">src=file.j2</span> <span class=\"string\">dest=/tmp/file.txt</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># vi file.j2 </span></span><br><span class=\"line\">&#123;<span class=\"string\">%</span> <span class=\"string\">for</span> <span class=\"string\">host</span> <span class=\"string\">in</span> <span class=\"string\">groups</span>[<span class=\"string\">&#x27;node&#x27;</span>] <span class=\"string\">%</span>&#125;</span><br><span class=\"line\">    <span class=\"string\">http://&#123;&#123;</span> <span class=\"string\">hostvars[host].inventory_hostname</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">  &#123;<span class=\"string\">%</span> <span class=\"string\">if</span> <span class=\"string\">not</span> <span class=\"string\">loop.last</span> <span class=\"string\">%</span>&#125;   <span class=\"comment\"># loop.last当前循环为最后一个循环时，该变量为 True</span></span><br><span class=\"line\">  &#123;<span class=\"string\">%</span> <span class=\"string\">endif</span> <span class=\"string\">%</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">%</span> <span class=\"string\">endfor</span> <span class=\"string\">%</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible-playbook test.yaml</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible node -a <span class=\"string\">&quot;cat /tmp/file.txt&quot;</span></span></span><br><span class=\"line\">192.168.1.3 | CHANGED | rc=0 &gt;&gt;</span><br><span class=\"line\">    http://192.168.1.3</span><br><span class=\"line\">        http://192.168.1.4</span><br><span class=\"line\">  </span><br><span class=\"line\">192.168.1.4 | CHANGED | rc=0 &gt;&gt;</span><br><span class=\"line\">    http://192.168.1.3</span><br><span class=\"line\">        http://192.168.1.4</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>案例：管理Nginx 配置文件</p>\n<p>playbook文件</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cat nginx_config.yaml</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">node</span></span><br><span class=\"line\">  <span class=\"attr\">gather_facts:</span> <span class=\"literal\">no</span></span><br><span class=\"line\">  <span class=\"attr\">vars:</span></span><br><span class=\"line\">    <span class=\"attr\">http_port:</span> <span class=\"number\">80</span></span><br><span class=\"line\">    <span class=\"attr\">server_name:</span> <span class=\"string\">www.abc.com</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Copy</span> <span class=\"string\">nginx</span> <span class=\"string\">config</span> <span class=\"string\">file</span> </span><br><span class=\"line\">    <span class=\"attr\">template:</span> <span class=\"string\">src=site.conf.j2</span> <span class=\"string\">dest=/tmp/site.conf</span></span><br><span class=\"line\">    <span class=\"attr\">tags:</span> <span class=\"string\">config</span></span><br><span class=\"line\">    <span class=\"attr\">notify:</span> <span class=\"string\">reload</span> <span class=\"string\">nginx</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"attr\">handlers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">reload</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">service:</span> <span class=\"string\">name=nginx</span> <span class=\"string\">state=reloaded</span></span><br></pre></td></tr></table></figure>\n\n<p>jinja模板文件</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cat site.conf.j2</span></span><br><span class=\"line\"><span class=\"string\">upstream</span> <span class=\"string\">webservers</span> &#123;</span><br><span class=\"line\">    &#123;<span class=\"string\">%</span> <span class=\"string\">for</span> <span class=\"string\">host</span> <span class=\"string\">in</span> <span class=\"string\">groups</span>[<span class=\"string\">&#x27;node&#x27;</span>] <span class=\"string\">%</span>&#125;</span><br><span class=\"line\">       <span class=\"string\">server</span> &#123;&#123; <span class=\"string\">hostvars</span>[<span class=\"string\">host</span>]<span class=\"string\">.inventory_hostname</span> &#125;&#125;<span class=\"string\">:80;</span></span><br><span class=\"line\">    &#123;<span class=\"string\">%</span> <span class=\"string\">endfor</span> <span class=\"string\">%</span>&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">server</span> &#123;</span><br><span class=\"line\">  <span class=\"string\">listen</span> &#123;&#123; <span class=\"string\">http_port</span> &#125;&#125;<span class=\"string\">;</span></span><br><span class=\"line\">  <span class=\"string\">server_name</span> &#123;&#123; <span class=\"string\">server_name</span> &#125;&#125;<span class=\"string\">;</span></span><br><span class=\"line\">  <span class=\"string\">location</span> <span class=\"string\">/</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">proxy_pass</span> <span class=\"string\">http://webservers;</span></span><br><span class=\"line\"> &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible-playbook --tag config nginx_conf.yaml</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible 192.168.1.4 -a <span class=\"string\">&quot;cat /tmp/site.conf&quot;</span></span></span><br><span class=\"line\">192.168.1.4 | CHANGED | rc=0 &gt;&gt;</span><br><span class=\"line\">upstream webservers &#123;</span><br><span class=\"line\">           server 192.168.1.3:80;</span><br><span class=\"line\">           server 192.168.1.4:80;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">  listen 80;</span><br><span class=\"line\">  server_name www.abc.com;</span><br><span class=\"line\">  location / &#123;</span><br><span class=\"line\">    proxy_pass http://webservers;</span><br><span class=\"line\"> &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-role\"><a href=\"#2-role\" class=\"headerlink\" title=\"2. role\"></a>2. role</h3><p>​        Roles 是一种目录组织风格，用于层次性、结构化地组织 playbook。roles 能够根据层次型结构自动装载变量文件、tasks 以及 handlers 等。假如,有 7 台机器组成的服务器集群，3 台分别是 web，需要配置 Nginx，2 台是数据库主备，需要配置 MySQL，2 台是负载均衡器需要配置 LVS，这事该如何来定义 playbook 呢？可能会想到分别写 3 个 playbook 文件应用对应组服务器上，但是这些 playbook不利于维护，也不利于模块化调用，比如后来又增加一台服务器，这台服务器即是 MySQL 也是 Nginx，我们只能再写一个 playbook 文件完成此需求，这样代码就重复写了。</p>\n<p>​        因此，我们如果用 Roles 会更好解决该问题，分别定义三个角色：webservers、dbservers、lbservers，那么调用时如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"> <span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">webservers</span></span><br><span class=\"line\">  <span class=\"attr\">roles:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">web</span></span><br><span class=\"line\">  </span><br><span class=\"line\"> <span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">dbservers</span></span><br><span class=\"line\">  <span class=\"attr\">roles:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">db</span></span><br><span class=\"line\">  </span><br><span class=\"line\"> <span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">lbservers</span></span><br><span class=\"line\">  <span class=\"attr\">roles:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">lb</span></span><br><span class=\"line\">  </span><br><span class=\"line\"> <span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">other</span></span><br><span class=\"line\">  <span class=\"attr\">roles:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">web</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">db</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-1-Roles-目录结构\"><a href=\"#2-1-Roles-目录结构\" class=\"headerlink\" title=\"2.1  Roles 目录结构\"></a>2.1  Roles 目录结构</h4><p><img src=\"../ansibleBase/image-20210712120417808.png\" alt=\"image-20210712120417808\"></p>\n<p>​        在一个任意目录名下包含一个playbook.yml入口文件，定义如果使用role，同级有个名为roles的目录，里面的每个目录代表一个 role，role 目录里包含角以下目录，这些目录必须包含一个 main.yml 文件。 </p>\n<ul>\n<li><p>tasks - 包含角色要执行的主要任务列表。</p>\n</li>\n<li><p>handlers - 包含角色使用的处理程序。其他角色也可以用</p>\n</li>\n<li><p>defaults - 角色默认的变量</p>\n</li>\n<li><p>vars - 角色的其他变量</p>\n</li>\n<li><p>files - 角色部署时用到的文件</p>\n</li>\n<li><p>templates - 角色部署时用到的模板</p>\n</li>\n<li><p>meta - 角色定义的一些元数据</p>\n</li>\n</ul>\n<blockquote>\n<p>注意：role的中的目录不一定都要使用，一般常用的是tasks、handlers、files、vars、templates等</p>\n</blockquote>\n<p>可以使用<code>ansible-galaxy role init 项目名 </code>命令生成roles目录结构，也可以手动新建目录。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible-galaxy role init demo</span></span><br><span class=\"line\">- Role demo was created successfully</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> tree demo/</span></span><br><span class=\"line\">demo/</span><br><span class=\"line\">|-- README.md</span><br><span class=\"line\">|-- defaults</span><br><span class=\"line\">|   `-- main.yml</span><br><span class=\"line\">|-- files</span><br><span class=\"line\">|-- handlers</span><br><span class=\"line\">|   `-- main.yml</span><br><span class=\"line\">|-- meta</span><br><span class=\"line\">|   `-- main.yml</span><br><span class=\"line\">|-- tasks</span><br><span class=\"line\">|   `-- main.yml</span><br><span class=\"line\">|-- templates</span><br><span class=\"line\">|-- tests</span><br><span class=\"line\">|   |-- inventory</span><br><span class=\"line\">|   `-- test.yml</span><br><span class=\"line\">`-- vars</span><br><span class=\"line\">    `-- main.yml</span><br><span class=\"line\"></span><br><span class=\"line\">8 directories, 8 files</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-roles的基本用法\"><a href=\"#2-2-roles的基本用法\" class=\"headerlink\" title=\"2.2 roles的基本用法\"></a>2.2 roles的基本用法</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> mkdir -p project/&#123;web,db&#125;/&#123;tasks,files,templates&#125;  <span class=\"comment\"># 手动新建roles目录</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> tree project/</span></span><br><span class=\"line\">project/</span><br><span class=\"line\">|-- db</span><br><span class=\"line\">|   |-- files         # 存放文件，如文本文件、tar包、rpm包等</span><br><span class=\"line\">|   |-- tasks         # 存放主任务代码</span><br><span class=\"line\">|   `-- templates     # 存放jinja2文件</span><br><span class=\"line\">`-- web</span><br><span class=\"line\">    |-- files</span><br><span class=\"line\">    |-- tasks</span><br><span class=\"line\">    `-- templates</span><br><span class=\"line\"></span><br><span class=\"line\">8 directories, 0 files</span><br></pre></td></tr></table></figure>\n\n<p>在角色里编辑任务列表</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">vi</span> <span class=\"string\">web/tasks/main.yaml</span> </span><br><span class=\"line\"> <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">安装Nginx</span> </span><br><span class=\"line\">   <span class=\"attr\">debug:</span> <span class=\"string\">msg=&quot;install...&quot;</span> </span><br><span class=\"line\"> <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">拷贝文件</span> </span><br><span class=\"line\">   <span class=\"attr\">copy:</span> <span class=\"string\">src=hosts</span> <span class=\"string\">dest=/tmp</span> </span><br><span class=\"line\"> <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">拷贝配置文件</span> </span><br><span class=\"line\">   <span class=\"attr\">template:</span> <span class=\"string\">src=test.conf</span> <span class=\"string\">dest=/tmp</span></span><br></pre></td></tr></table></figure>\n\n<p>​        涉及的文件存放到files目录下，模板文件存放到templates目录下。<br>编写入口文件：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">vi</span> <span class=\"string\">playbook.yaml</span> </span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"> <span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">webservers</span> </span><br><span class=\"line\">   <span class=\"attr\">roles:</span>      <span class=\"comment\"># 如果roles下有多个列表将顺序执行，可通过指定tags执行特定的roles</span></span><br><span class=\"line\">   <span class=\"bullet\">-</span> <span class=\"string\">db</span>        <span class=\"comment\"># 列表格式</span></span><br><span class=\"line\">     <span class=\"attr\">tags:</span> [<span class=\"string\">&quot;db&quot;</span>]    <span class=\"comment\"># 通过tags指定执行特定的roles</span></span><br><span class=\"line\">     </span><br><span class=\"line\">   <span class=\"bullet\">-</span> &#123;<span class=\"attr\">role:</span> <span class=\"string\">web</span>, <span class=\"attr\">app_port:</span> <span class=\"number\">8080</span>, <span class=\"attr\">tags:</span> <span class=\"string\">web</span>&#125;   <span class=\"comment\"># 字典的格式，并定义了变量和tags</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>执行</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible-playbook [--tag db] playbook.yaml</span><br></pre></td></tr></table></figure>\n","comments":true,"permalink":"https://qingdalf.github.io/2021-05/ansiblePlaybook/","categories":[{"name":"DevOps","slug":"DevOps","permalink":"https://qingdalf.github.io/categories/DevOps/"}],"tags":[]},{"title":"ansible进阶","date":"2021-05-25T05:30:49.000Z","path":"2021-05/ansibleAdvanced/","content":"<h2 id=\"四、运维自动化-Ansible\"><a href=\"#四、运维自动化-Ansible\" class=\"headerlink\" title=\"四、运维自动化-Ansible\"></a>四、运维自动化-Ansible</h2><h3 id=\"1-ansible-galaxy\"><a href=\"#1-ansible-galaxy\" class=\"headerlink\" title=\"1.ansible-galaxy\"></a>1.ansible-galaxy</h3><p>​        Ansible Galaxy是Ansible的官方社区中心，用于共享Ansible角色。role是Ansible构建playbook的方式，可多次复用。Ansible Galaxy指的是一个网站共享和下载 Ansible 角色，也可以是帮助 roles 更好的工作的命令行工具。</p>\n<p>官网：<a href=\"https://galaxy.ansible.com/\">https://galaxy.ansible.com/</a></p>\n<span id=\"more\"></span>\n<p>ansible-galaxy常见用法</p>\n<p>ansible-galaxy 语法：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible-galaxy -h</span> </span><br><span class=\"line\">usage: ansible-galaxy [-h] [--version] [-v] TYPE ...</span><br><span class=\"line\"></span><br><span class=\"line\">Perform various Role and Collection related operations.</span><br><span class=\"line\"></span><br><span class=\"line\">positional arguments:</span><br><span class=\"line\">  TYPE</span><br><span class=\"line\">    collection   Manage an Ansible Galaxy collection.</span><br><span class=\"line\">    role         Manage an Ansible Galaxy role.</span><br><span class=\"line\"></span><br><span class=\"line\">optional arguments:</span><br><span class=\"line\">  --version      show program&#x27;s version number, config file location,</span><br><span class=\"line\">                 configured module search path, module location, executable</span><br><span class=\"line\">                 location and exit</span><br><span class=\"line\">  -h, --help     show this help message and exit</span><br><span class=\"line\">  -v, --verbose  verbose mode (-vvv for more, -vvvv to enable connection</span><br><span class=\"line\">                 debugging)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible-galaxy [delete|import|info|init|install|list|login|remove|search|setup] [--<span class=\"built_in\">help</span>] [options]</span> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 列出已安装的galaxy</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible-galaxy list geerlingguy.mysql</span></span><br><span class=\"line\">- geerlingguy.mysql, 2.8.1</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装galaxy</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible-galaxy install geerlingguy.redis</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 删除galaxy</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible-galaxy remove geerlingguy.redis</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-Ansible-vault\"><a href=\"#2-Ansible-vault\" class=\"headerlink\" title=\"2.Ansible-vault\"></a>2.Ansible-vault</h3><p>功能：管理加密解密yml文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible-vault -h</span> </span><br><span class=\"line\">usage: ansible-vault [-h] [--version] [-v]</span><br><span class=\"line\">                     &#123;create,decrypt,edit,view,encrypt,encrypt_string,rekey&#125;</span><br><span class=\"line\">                     ...</span><br><span class=\"line\"></span><br><span class=\"line\">encryption/decryption utility for Ansible data files</span><br><span class=\"line\"></span><br><span class=\"line\">positional arguments:</span><br><span class=\"line\">  &#123;create,decrypt,edit,view,encrypt,encrypt_string,rekey&#125;</span><br><span class=\"line\">    create              Create new vault encrypted file   # 创建加密文件</span><br><span class=\"line\">    decrypt             Decrypt vault encrypted file      # 解密</span><br><span class=\"line\">    edit                Edit vault encrypted file         # 编辑加密文件</span><br><span class=\"line\">    view                View vault encrypted file         # 查看加密文件</span><br><span class=\"line\">    encrypt             Encrypt YAML file                 # 加密一个yaml文件</span><br><span class=\"line\">    encrypt_string      Encrypt a string                  # 加密一个字符串</span><br><span class=\"line\">    rekey               Re-key a vault encrypted file     # 修改密码口令</span><br><span class=\"line\"></span><br><span class=\"line\">optional arguments:</span><br><span class=\"line\">  --version             show program&#x27;s version number, config file location,</span><br><span class=\"line\">                        configured module search path, module location,</span><br><span class=\"line\">                        executable location and exit</span><br><span class=\"line\">  -h, --help            show this help message and exit</span><br><span class=\"line\">  -v, --verbose         verbose mode (-vvv for more, -vvvv to enable</span><br><span class=\"line\">                        connection debugging)</span><br><span class=\"line\"></span><br><span class=\"line\">See &#x27;ansible-vault &lt;command&gt; --help&#x27; for more information on a specific command.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 加密</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">ansible-vault encrypt Hello.yml</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 编辑加密文件</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible-vault edit Hello.yml</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 解密</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible-vault decrypt Hello.yml</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 修改口令</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible-vault rekey Hello.yml</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 创建新文件</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible-vault create new.yml</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-Ansible-console\"><a href=\"#3-Ansible-console\" class=\"headerlink\" title=\"3.Ansible-console\"></a>3.Ansible-console</h3><p>作用：可交互执行命令，支持tab补全。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible-console</span></span><br><span class=\"line\">Welcome to the ansible console.</span><br><span class=\"line\">Type help or ? to list commands.  # help和?可以列出命令</span><br><span class=\"line\"></span><br><span class=\"line\">root@all (3)[f:5]$ </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 执行用户root@当前操作的主机组(all) (当前组的主机数量3)[f:并发数5]</span></span><br><span class=\"line\">root@all (3)[f:5]$ forks 10   # 修改并发数为10</span><br><span class=\"line\">root@all (3)[f:10]$           # 并发数变成了10</span><br><span class=\"line\"></span><br><span class=\"line\">root@all (3)[f:10]$ list     # all中的所有主机IP</span><br><span class=\"line\">192.168.1.2</span><br><span class=\"line\">192.168.1.3</span><br><span class=\"line\">192.168.1.4</span><br><span class=\"line\">root@all (3)[f:10]$ cd node   # 通过cd切换inventory中的主机组，执行cd可返回all</span><br><span class=\"line\">root@node (2)[f:10]$ list     # 列出node主机中的服务器IP</span><br><span class=\"line\">192.168.1.3</span><br><span class=\"line\">192.168.1.4</span><br><span class=\"line\"></span><br><span class=\"line\">root@node (2)[f:10]$ cd</span><br><span class=\"line\">root@* (3)[f:10]$ setup filter=ansible_distribution_version  # 执行命令</span><br><span class=\"line\">192.168.1.2 | SUCCESS =&gt; &#123;</span><br><span class=\"line\">    &quot;ansible_facts&quot;: &#123;</span><br><span class=\"line\">        &quot;ansible_distribution_version&quot;: &quot;7.6&quot;, </span><br><span class=\"line\">        &quot;discovered_interpreter_python&quot;: &quot;/usr/bin/python&quot;</span><br><span class=\"line\">    &#125;, </span><br><span class=\"line\">    &quot;changed&quot;: false</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">192.168.1.4 | SUCCESS =&gt; &#123;</span><br><span class=\"line\">    &quot;ansible_facts&quot;: &#123;</span><br><span class=\"line\">        &quot;ansible_distribution_version&quot;: &quot;7.6&quot;, </span><br><span class=\"line\">        &quot;discovered_interpreter_python&quot;: &quot;/usr/bin/python&quot;</span><br><span class=\"line\">    &#125;, </span><br><span class=\"line\">    &quot;changed&quot;: false</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">192.168.1.3 | SUCCESS =&gt; &#123;</span><br><span class=\"line\">    &quot;ansible_facts&quot;: &#123;</span><br><span class=\"line\">        &quot;ansible_distribution_version&quot;: &quot;6.10&quot;, </span><br><span class=\"line\">        &quot;discovered_interpreter_python&quot;: &quot;/usr/bin/python&quot;</span><br><span class=\"line\">    &#125;, </span><br><span class=\"line\">    &quot;changed&quot;: false</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">root@* (3)[f:10]$ ping        # 执行ping命令</span><br><span class=\"line\">192.168.1.3 | SUCCESS =&gt; &#123;</span><br><span class=\"line\">    &quot;changed&quot;: false, </span><br><span class=\"line\">    &quot;ping&quot;: &quot;pong&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">192.168.1.4 | SUCCESS =&gt; &#123;</span><br><span class=\"line\">    &quot;changed&quot;: false, </span><br><span class=\"line\">    &quot;ping&quot;: &quot;pong&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">192.168.1.2 | SUCCESS =&gt; &#123;</span><br><span class=\"line\">    &quot;changed&quot;: false, </span><br><span class=\"line\">    &quot;ping&quot;: &quot;pong&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">root@* (3)[f:10]$ exit    # 退出终端</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-Ansible-playbook\"><a href=\"#4-Ansible-playbook\" class=\"headerlink\" title=\"4.Ansible-playbook\"></a>4.Ansible-playbook</h3><p><strong>工作机制</strong>：通过读取预先编写好的（playbook）文件对主机实现批量管理</p>\n<h4 id=\"4-1语法：\"><a href=\"#4-1语法：\" class=\"headerlink\" title=\"4.1语法：\"></a>4.1语法：</h4><ul>\n<li><p>格式：<code>ansible-playbook [options] &lt;filename.yml&gt;</code></p>\n</li>\n<li><p>常见选项</p>\n<ul>\n<li><p><code>-C 文件名</code> ：执行前先检查语法。</p>\n</li>\n<li><p><code>-i</code>：指定inventory主机清单</p>\n</li>\n<li><p><code>-D</code>：显示出执行前后的变化内容</p>\n</li>\n<li><p><code>-v </code>：显示过程 -vv -vvv 更详细</p>\n</li>\n<li><p><code>--check</code> ：只检测可能会发生的改变，但不真正执行操作</p>\n</li>\n<li><p><code>--list-hosts</code> ：列出运行任务的主机</p>\n</li>\n<li><p><code>--list-tasks</code> ：列出此playbook中的所有任务</p>\n</li>\n<li><p><code>--list-tags</code>： 列出此playbook中的所有的tags</p>\n</li>\n<li><p><code>--limit 主机列表</code> ：只针对主机列表中的主机执行</p>\n</li>\n<li><p><code>--step</code> ：一步一步执行脚本</p>\n</li>\n<li><p><code>--flush-cache</code> ：清除fact缓存</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"4-2-Playbook工作流程\"><a href=\"#4-2-Playbook工作流程\" class=\"headerlink\" title=\"4.2 Playbook工作流程\"></a>4.2 Playbook工作流程</h4><p>​        与ansible的执行流程大体一致，只不过使用ansible-doc是在命令行输入命令，playbook是事先将ansible指令编写好，等待一次性执行。</p>\n<p><img src=\"../ansibleBase/image-20210702112029691.png\" alt=\"image-20210702112029691\"></p>\n<h4 id=\"4-3-第一个playbook\"><a href=\"#4-3-第一个playbook\" class=\"headerlink\" title=\"4.3 第一个playbook\"></a>4.3 第一个playbook</h4><h5 id=\"4-3-1-编写yaml文件\"><a href=\"#4-3-1-编写yaml文件\" class=\"headerlink\" title=\"4.3.1 编写yaml文件\"></a>4.3.1 编写yaml文件</h5><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cat deploy.yaml </span></span><br><span class=\"line\"><span class=\"string\">---</span>           <span class=\"comment\"># 以 --- 开头，用于标记文件开始</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">all</span>  <span class=\"comment\"># 指定该playbook操作的主机，可以是主机中或单个ip地址，必须存在于inventory文件中</span></span><br><span class=\"line\">  <span class=\"attr\">remote_user:</span> <span class=\"string\">root</span>   <span class=\"comment\"># 远程主机上执行命令的用户</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"attr\">tasks:</span>              <span class=\"comment\"># 执行的任务，默认是列表的形式，可以是一个任务或多个任务，</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">first</span> <span class=\"string\">yaml</span> <span class=\"string\">file</span>     <span class=\"comment\"># 任务的名称</span></span><br><span class=\"line\">      <span class=\"attr\">command:</span> <span class=\"string\">/usr/bin/echo</span> <span class=\"string\">&quot;hello playbook&quot;</span> <span class=\"string\">&gt;</span> <span class=\"string\">/root/t.txt</span>   <span class=\"comment\"># 模块</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4-3-2-检查语法\"><a href=\"#4-3-2-检查语法\" class=\"headerlink\" title=\"4.3.2 检查语法\"></a>4.3.2 检查语法</h5><p>​        检查语法只是模拟执行，并没有正主机上正在执行yaml文件，编写yaml部署文件后，都应该对yaml文件的语法进行检查，然后再执行yaml文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible-playbook -C deploy.yaml</span> </span><br></pre></td></tr></table></figure>\n\n<p>执行结果如下：</p>\n<p><img src=\"../ansibleBase/image-20210702110151587.png\" alt=\"image-20210702110151587\"></p>\n<blockquote>\n<p>注意：执行-C时，最后的执行结果是绿色，表示没有对服务器进行变更</p>\n</blockquote>\n<h5 id=\"4-3-3-执行yaml文件\"><a href=\"#4-3-3-执行yaml文件\" class=\"headerlink\" title=\"4.3.3 执行yaml文件\"></a>4.3.3 执行yaml文件</h5><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ansible-playbook deploy.yaml</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下图中执行失败的原因是，centos6.10中的echo命令是在/bin/echo，不是在/usr/bin/echo</span></span><br><span class=\"line\"><span class=\"comment\"># which echo  # 在centos6.10上查询echo的路径</span></span><br><span class=\"line\"><span class=\"string\">/bin/echo</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"../ansibleBase/image-20210702110538523.png\" alt=\"image-20210702110538523\"></p>\n<blockquote>\n<p>注意：执行结果为黄色，表示对服务器进行了修改，跟使用-C进行检查时的输出颜色不一样</p>\n</blockquote>\n<h4 id=\"4-4-YAML语法简介\"><a href=\"#4-4-YAML语法简介\" class=\"headerlink\" title=\"4.4 YAML语法简介\"></a>4.4 YAML语法简介</h4><ul>\n<li>大小写敏感，使用<code>#</code>注释</li>\n<li>使用缩进表示层级关系(跟python一样)</li>\n<li>缩进时不要tab键和空格混用，建议只是用空格作为缩进。</li>\n<li>缩进的空格数目不重要，只要相同层级的元素左侧对齐即可</li>\n<li>可以将多个play文件合并到一个palybook中，使用<code>---</code>分割即可，即<code>---</code>表示新文件的开始</li>\n<li>使用<code>|</code>和<code>&gt;</code>来分隔多行，实际上这只是一行。</li>\n<li>Yaml中不允许在双引号中出现转义符号，所以都是以单引号来避免转义符错误  </li>\n</ul>\n<h5 id=\"4-4-1-yaml支持的数据结构–列表：\"><a href=\"#4-4-1-yaml支持的数据结构–列表：\" class=\"headerlink\" title=\"4.4.1 yaml支持的数据结构–列表：\"></a>4.4.1 yaml支持的数据结构–列表：</h5><ul>\n<li>格式：<code>横杠 空格 列表名称</code>，如<code>- web</code></li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">baidu</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"number\">163</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">tencent</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4-4-2-yaml支持的数据结构–字典-键值对\"><a href=\"#4-4-2-yaml支持的数据结构–字典-键值对\" class=\"headerlink\" title=\"4.4.2 yaml支持的数据结构–字典(键值对)\"></a>4.4.2 yaml支持的数据结构–字典(键值对)</h5><ul>\n<li>格式：<code>key: value</code>，注意“:”(冒号)后必须有一个空格</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行写法，</span></span><br><span class=\"line\">&#123;<span class=\"attr\">name:</span> <span class=\"string\">baidu</span>, <span class=\"attr\">blog:</span> <span class=\"string\">&quot;https://www.baidu.com&quot;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 多行写法</span></span><br><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">baidu</span></span><br><span class=\"line\"><span class=\"attr\">blog:</span> <span class=\"string\">https://www.baidu.com</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4-4-3-纯量：数字、布尔、字符串\"><a href=\"#4-4-3-纯量：数字、布尔、字符串\" class=\"headerlink\" title=\"4.4.3 纯量：数字、布尔、字符串\"></a>4.4.3 纯量：数字、布尔、字符串</h5><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">create_key:</span> <span class=\"literal\">yes</span></span><br><span class=\"line\"><span class=\"attr\">needs_agent:</span> <span class=\"literal\">no</span></span><br><span class=\"line\"><span class=\"attr\">knows_oop:</span> <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"attr\">likes_emacs:</span> <span class=\"literal\">TRUE</span></span><br><span class=\"line\"><span class=\"attr\">uses_cvs:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"引用变量\"><a href=\"#引用变量\" class=\"headerlink\" title=\"引用变量\"></a>引用变量</h5><p>格式：Ansible使用 <code>&#123;&#123; var &#125;&#125;</code>来引用变量，大括号里面的变量名前后有空格</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> &#123;&#123; <span class=\"string\">variable_name</span> &#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-playbook的构成\"><a href=\"#5-playbook的构成\" class=\"headerlink\" title=\"5 playbook的构成\"></a>5 playbook的构成</h3><h4 id=\"5-1-主机和用户\"><a href=\"#5-1-主机和用户\" class=\"headerlink\" title=\"5.1 主机和用户\"></a>5.1 主机和用户</h4><ul>\n<li>hosts：是一个由冒号分隔的一个或多个组（逗号分隔）的列表</li>\n<li>remote_user：是运行时的用户名。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">- hosts: web,dns     # 多个分组用逗号隔开</span><br><span class=\"line\">  remote_user: root    # 远程执行用户</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>如果远程执行用户是普通用户，可以通过become进行提权</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">hosts：webservers</span> </span><br><span class=\"line\">  <span class=\"attr\">remote_user:</span> <span class=\"string\">ops</span></span><br><span class=\"line\">  <span class=\"string\">become：yes</span></span><br><span class=\"line\">  <span class=\"attr\">become_user:</span> <span class=\"string\">root</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-2-gather-facts\"><a href=\"#5-2-gather-facts\" class=\"headerlink\" title=\"5.2 gather_facts\"></a>5.2 gather_facts</h4><p>​        我们在学习ansible模块的时候，学习了一个<code>setup</code>模块，ansible默认在每次执行playbook的时候会收集客户端信息，但是有时候我们并不需要用到这个信息，我们可以把这个步骤跳过，即使用<code>gather_facts: no</code>关闭关闭信息收集的过程，可以提高ansible的执行效率</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">hosts：webservers</span> </span><br><span class=\"line\">  <span class=\"attr\">remote_user:</span> <span class=\"string\">root</span></span><br><span class=\"line\">  <span class=\"attr\">gather_facts:</span> <span class=\"literal\">no</span>  <span class=\"comment\"># 使用false也可以</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>对比</p>\n<ul>\n<li>不添加<code>gather_facts: no</code>时，playbook的执行时间</li>\n</ul>\n<p><img src=\"../ansibleBase/image-20210702161524994.png\" alt=\"image-20210702161524994\"></p>\n<ul>\n<li>添加<code>gather_facts: no</code>时，playbook的执行时间</li>\n</ul>\n<p><img src=\"../ansibleBase/image-20210702161616209.png\" alt=\"image-20210702161616209\"></p>\n</li>\n</ul>\n<h4 id=\"5-3-变量–vars\"><a href=\"#5-3-变量–vars\" class=\"headerlink\" title=\"5.3 变量–vars\"></a>5.3 变量–vars</h4><p>​        playbook中运行在yaml文件中通过<code>vars</code>定义变量，后文可通过<code>&#123;&#123; variable_name &#125;&#125;</code>应用变量，注意大括号里面两边有空格。</p>\n <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">web,dns</span></span><br><span class=\"line\">  <span class=\"attr\">remote_user:</span> <span class=\"string\">root</span></span><br><span class=\"line\">  <span class=\"attr\">vars:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">IP:</span> <span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.1</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">测试</span>    <span class=\"comment\"># 名称支持中文</span></span><br><span class=\"line\">  <span class=\"attr\">shell:</span> <span class=\"string\">echo</span> &#123;&#123; <span class=\"string\">IP</span> &#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-4-任务–tasks\"><a href=\"#5-4-任务–tasks\" class=\"headerlink\" title=\"5.4 任务–tasks\"></a>5.4 任务–tasks</h4><p>​        每个 play 包含一系列任务。这些任务按照顺序执行，在 play 中，所有主机都会执行相同的任务指令。play 目的是将选择的主机映射到任务。在运行剧本时，如果有任务失败，会从整个剧本中取出，只需修改剧本文件并重新运行。不必担心已成功的主机重复运行。因为模块是幂等的，也就是说，<strong>多次运行模块应该与运行一次效果一样的</strong>。<strong>实现幂等性的方法是让模块检查是否已经实现了期望状态，如果已经是该状态，则退出而不执行任何动作</strong>。所以重新运行剧本是安全的。每个任务都应该有一个name，在运行时会输出到控制台，方便查看进度，因此提供每个任务步骤的描述是有必要的。</p>\n<p>​        基本任务如下，大多数模块用法一样，采用 key=value 格式，</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">tasks:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">install</span>   </span><br><span class=\"line\">  <span class=\"attr\">yum:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">http</span></span><br><span class=\"line\">    <span class=\"attr\">state:</span> <span class=\"string\">latest</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">make</span> <span class=\"string\">sure</span> <span class=\"string\">apache</span> <span class=\"string\">is</span> <span class=\"string\">running</span></span><br><span class=\"line\">  <span class=\"attr\">service:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">httpd</span></span><br><span class=\"line\">    <span class=\"attr\">state:</span> <span class=\"string\">started</span></span><br></pre></td></tr></table></figure>\n\n<p>​        command和shell模块没有参数，直接写命令即可，command 和 shell 模块关心的是返回状态码，如果返回非 0 说明执行失败（中断执行），但可能有些命令成功退出状态码不为 0，但也不希望中断执行，可以如下处理：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">tasks:</span>     </span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">enable</span> <span class=\"string\">selinux</span></span><br><span class=\"line\"> <span class=\"attr\">command:</span> <span class=\"string\">/sbin/setenforce</span> <span class=\"number\">1</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">shell</span></span><br><span class=\"line\">  <span class=\"attr\">shell:</span> <span class=\"string\">ls</span> <span class=\"string\">/root/</span> <span class=\"string\">||</span> <span class=\"string\">/bin/true</span>   <span class=\"comment\"># 忽略运行失败的情况</span></span><br></pre></td></tr></table></figure>\n\n<p>​        也可以使用<code> ignore_errors</code>忽略执行失败的情况</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">tasks:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">运行命令忽略结果</span></span><br><span class=\"line\">  <span class=\"attr\">shell:</span> <span class=\"string\">ls</span> <span class=\"string\">/data</span></span><br><span class=\"line\">  <span class=\"attr\">ignore_errors:</span> <span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>\n\n<p>​        如果模块动作写太长，可以空格换行并缩进：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">tasks:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">拷贝文件</span></span><br><span class=\"line\">  <span class=\"attr\">copy:</span> <span class=\"string\">src=/etc/ansible/hosts</span> <span class=\"string\">dest=/etc/ansible/hosts</span></span><br><span class=\"line\">        <span class=\"string\">owner=root</span> <span class=\"string\">group=root</span> <span class=\"string\">mode=0644</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-5-Handlers和notity\"><a href=\"#5-5-Handlers和notity\" class=\"headerlink\" title=\"5.5 Handlers和notity\"></a>5.5 Handlers和notity</h4><p>​        Playbooks 具备一个可用于响应变化的基本事件系统，可以基于某个任务结束后触发另一个任务，如配置文件发生了变化，重启服务等。Handlers也是一些task的列表，不过是由特定条件触发的操作，满足条件方才执行，否则不执行。</p>\n<ul>\n<li>notify：变更通知，指定 handlers</li>\n<li>Handlers：处理程序，由特定条件触发的 Tasks，与常规任务一样，如果 notfiy 没有通知处理程序，它将不会运行。无论在运行 playbook 中有多少个任务通知处理程序，在执行完 playbook 后只会运行一次。</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">node</span></span><br><span class=\"line\">  <span class=\"attr\">remote_user:</span> <span class=\"string\">root</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">拷贝虚拟主机文件</span></span><br><span class=\"line\">    <span class=\"attr\">copy:</span></span><br><span class=\"line\">      <span class=\"attr\">src:</span> <span class=\"string\">./site.conf</span></span><br><span class=\"line\">      <span class=\"attr\">dest:</span> <span class=\"string\">/etc/nginx/conf.d/site.conf</span></span><br><span class=\"line\">    <span class=\"attr\">notify:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">reload</span> <span class=\"string\">nginx</span>   <span class=\"comment\"># 名称跟handlers处的名字对应</span></span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">检查网址状态</span></span><br><span class=\"line\">    <span class=\"attr\">systemd:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">      <span class=\"attr\">state:</span> <span class=\"string\">started</span></span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"attr\">handlers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">reload</span> <span class=\"string\">nginx</span>   <span class=\"comment\"># 跟notify的名称对应</span></span><br><span class=\"line\">    <span class=\"attr\">systemd:</span> </span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">      <span class=\"attr\">state:</span> <span class=\"string\">reloaded</span></span><br></pre></td></tr></table></figure>\n\n<p>​        我们注意到，playbook的运行是从上到下的，上面的代码虽然会执行nginx的重启操作，但是在tasks都运行完成后，才执行的handlers，有时候我们希望在修改了配置文件后，就立马重启nginx服务，可增加以下字段声明：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">node</span></span><br><span class=\"line\">  <span class=\"attr\">remote_user:</span> <span class=\"string\">root</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">拷贝虚拟主机文件</span></span><br><span class=\"line\">    <span class=\"attr\">copy:</span></span><br><span class=\"line\">      <span class=\"attr\">src:</span> <span class=\"string\">./site.conf</span></span><br><span class=\"line\">      <span class=\"attr\">dest:</span> <span class=\"string\">/etc/nginx/conf.d/site.conf</span></span><br><span class=\"line\">    <span class=\"attr\">notify:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">reload</span> <span class=\"string\">nginx</span>   <span class=\"comment\"># 名称跟handlers处的名字对应</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">meta:</span> <span class=\"string\">flush_handlers</span>   <span class=\"comment\"># 立马执行重启nginx操作</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">检查网址状态</span></span><br><span class=\"line\">    <span class=\"attr\">systemd:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">      <span class=\"attr\">state:</span> <span class=\"string\">started</span></span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"attr\">handlers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">reload</span> <span class=\"string\">nginx</span>   <span class=\"comment\"># 跟notify的名称对应</span></span><br><span class=\"line\">    <span class=\"attr\">systemd:</span> </span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">      <span class=\"attr\">state:</span> <span class=\"string\">reloaded</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-6-tags–任务控制\"><a href=\"#5-6-tags–任务控制\" class=\"headerlink\" title=\"5.6 tags–任务控制\"></a>5.6 tags–任务控制</h4><p>​        如果你有一个大的剧本，你希望在不运行整个剧本的情况下运行特定部分，这时可以给每个任务打标签，然后根据标签控制指定任务运行。</p>\n<p>给任务打标签： </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">webservers</span></span><br><span class=\"line\">  <span class=\"attr\">gather_facts:</span> <span class=\"literal\">no</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">安装</span> <span class=\"string\">Nginx</span></span><br><span class=\"line\">    <span class=\"attr\">yum:</span> <span class=\"string\">name=nginx</span> <span class=\"string\">state=present</span></span><br><span class=\"line\">    <span class=\"attr\">tags:</span> <span class=\"string\">install</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">拷贝</span> <span class=\"string\">Nginx</span> <span class=\"string\">配置文件</span></span><br><span class=\"line\">    <span class=\"attr\">copy:</span> <span class=\"string\">src=nginx.conf</span> <span class=\"string\">dest=/etc/nginx/nginx.conf</span></span><br><span class=\"line\">    <span class=\"attr\">tags:</span> <span class=\"string\">config</span></span><br><span class=\"line\">  <span class=\"string\">-name:</span> <span class=\"string\">...</span></span><br><span class=\"line\">  <span class=\"string\">...</span></span><br></pre></td></tr></table></figure>\n\n<p>​        在命令行使用–tags 或–skip-tags 过滤任务，例如只运行标签是 config 和install 的任务：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible-playbook nginx.yml --tags <span class=\"string\">&quot;config,install&quot;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>跳过安装：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible-playbook nginx.yml --skip-tags <span class=\"string\">&quot;install&quot;</span></span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-7-变量\"><a href=\"#5-7-变量\" class=\"headerlink\" title=\"5.7 变量\"></a>5.7 变量</h4><h5 id=\"5-7-1-变量命名\"><a href=\"#5-7-1-变量命名\" class=\"headerlink\" title=\"5.7.1 变量命名\"></a>5.7.1 变量命名</h5><p>​        变量名称应为字母，数字和下划线。变量应始终以字母开头。</p>\n<h5 id=\"5-7-2-变量定义的几种方式\"><a href=\"#5-7-2-变量定义的几种方式\" class=\"headerlink\" title=\"5.7.2 变量定义的几种方式\"></a>5.7.2 变量定义的几种方式</h5><p>​        优先级：<code>命令行 -e &gt; vars_files指定变量文件 &gt; 主机清单普通变量 &gt; 主机清单公共(组)变量</code></p>\n<h6 id=\"5-7-2-1-命令行定义变量\"><a href=\"#5-7-2-1-命令行定义变量\" class=\"headerlink\" title=\"5.7.2.1 命令行定义变量\"></a>5.7.2.1 命令行定义变量</h6><p>格式：使用<code>-e</code>进行定义变量，定义几个变量就用几个<code>-e</code>，可以在playbook中引用，优先级最高。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible-playbook -e nginx_version=1.19 -e nginx_user=nginx main.yaml</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"5-7-2-2-inventory文件中定义\"><a href=\"#5-7-2-2-inventory文件中定义\" class=\"headerlink\" title=\"5.7.2.2 inventory文件中定义\"></a>5.7.2.2 inventory文件中定义</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cat /etc/ansible/hosts</span></span><br><span class=\"line\">[own]</span><br><span class=\"line\">192.168.1.2 ansible_connect=local </span><br><span class=\"line\"></span><br><span class=\"line\">[node]</span><br><span class=\"line\">192.168.1.3  hostname=web port=8080  # 向指定主机传递变量</span><br><span class=\"line\">192.168.1.4  hostname=db port=3306</span><br><span class=\"line\"></span><br><span class=\"line\">[gp:children]</span><br><span class=\"line\">variable_name=value     #向组内的所有主机传递相同的变量：</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"5-7-2-3-inventory同级目录中定义\"><a href=\"#5-7-2-3-inventory同级目录中定义\" class=\"headerlink\" title=\"5.7.2.3 inventory同级目录中定义\"></a>5.7.2.3 inventory同级目录中定义</h6><ul>\n<li>定义组变量：在inventory同级目录中(/etc/ansible/)新建组变量存放目录<code>group_vars</code>，在<code>group_vars</code>目录下新建以组名命名的yaml文件(如果需要将变量赋值给所有组内的主机，可将变量写入名称为all的文件中)，在该文件中以json格式定义变量</li>\n<li>定义主机变量：在inventory同级目录中(/etc/ansible/)新建主机变量存放目录<code>host_vars</code>，在<code>host_vars</code>目录下新建以主机名(或者IP地址，跟hosts目录中定义的主机保持一致)命名的yaml文件，在该文件中以json格式定义变量</li>\n</ul>\n<p>案例：</p>\n<ul>\n<li>inventory文件</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cat /etc/ansible/hosts</span></span><br><span class=\"line\">[own]</span><br><span class=\"line\">192.168.1.2 ansible_connect=local </span><br><span class=\"line\"></span><br><span class=\"line\">[node]</span><br><span class=\"line\">192.168.1.3 </span><br><span class=\"line\">192.168.1.4 </span><br><span class=\"line\"></span><br><span class=\"line\">[gp:children]</span><br><span class=\"line\">own</span><br><span class=\"line\">node</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>定义变量：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 在ansible主机中新建主机变量及组变量存放目录，并新建变量文件</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> mkdir -p /etc/ansible/&#123;group_vars,host_vars&#125;</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cat  /etc/ansible/host_vars/192.168.1.2.yaml   <span class=\"comment\"># 主机变量文件，以inventory中主机ip命名</span></span></span><br><span class=\"line\">var_host: 192.168.1.2  # 直接使用变量名可访问变量值</span><br><span class=\"line\">https:                 # 多层级变量的使用</span><br><span class=\"line\">  port: 80</span><br><span class=\"line\">  ip: 192.168.1.2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cat  /etc/ansible/group_vars/node.yaml         <span class=\"comment\"># 组变量文件，以inventory中组命名</span></span></span><br><span class=\"line\">var_groups: node</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>playbook中引用变量</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cat var.yaml </span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.2</span></span><br><span class=\"line\">  <span class=\"attr\">remote_user:</span> <span class=\"string\">root</span></span><br><span class=\"line\">  <span class=\"attr\">gather_facts:</span> <span class=\"literal\">no</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">use</span> <span class=\"string\">vars</span></span><br><span class=\"line\">    <span class=\"attr\">shell:</span> <span class=\"string\">|</span>       <span class=\"comment\"># 使用竖线表示多个同级别的shell命令</span></span><br><span class=\"line\">      <span class=\"string\">echo</span> &#123;&#123; <span class=\"string\">var_host</span> &#125;&#125; <span class=\"string\">&gt;&gt;</span> <span class=\"string\">/root/&#123;&#123;</span> <span class=\"string\">var_host</span> <span class=\"string\">&#125;&#125;.txt</span></span><br><span class=\"line\">      <span class=\"string\">mkdir</span> <span class=\"string\">-p</span> <span class=\"string\">/&#123;&#123;</span> <span class=\"string\">https.ip</span> <span class=\"string\">&#125;&#125;/&#123;&#123;</span> <span class=\"string\">https.port</span> <span class=\"string\">&#125;&#125;</span> <span class=\"string\">&amp;&amp;</span> <span class=\"string\">echo</span> &#123;&#123; <span class=\"string\">https.ip</span> &#125;&#125;<span class=\"string\">:&#123;&#123;</span> <span class=\"string\">https.port</span> <span class=\"string\">&#125;&#125;</span> <span class=\"string\">&gt;</span> <span class=\"string\">/&#123;&#123;</span> <span class=\"string\">https.ip</span> <span class=\"string\">&#125;&#125;/&#123;&#123;</span> <span class=\"string\">https.port</span> <span class=\"string\">&#125;&#125;/test.txt</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">node</span></span><br><span class=\"line\">  <span class=\"attr\">remote_user:</span> <span class=\"string\">root</span></span><br><span class=\"line\">  <span class=\"attr\">gather_facts:</span> <span class=\"literal\">no</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">use</span> <span class=\"string\">vars</span></span><br><span class=\"line\">    <span class=\"attr\">shell:</span> <span class=\"string\">echo</span> &#123;&#123; <span class=\"string\">var_groups</span> &#125;&#125; <span class=\"string\">&gt;&gt;</span> <span class=\"string\">/root/&#123;&#123;</span> <span class=\"string\">var_groups</span> <span class=\"string\">&#125;&#125;.txt</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>执行playbook并检查</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 执行前查询</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible 192.168.1.2 -a <span class=\"string\">&quot;ls /root/192.168.1.2.txt&quot;</span></span></span><br><span class=\"line\">192.168.1.2 | FAILED | rc=2 &gt;&gt;</span><br><span class=\"line\">ls: cannot access /root/192.168.1.2.txt: No such file or directorynon-zero return code</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible 192.168.1.2 -a <span class=\"string\">&quot;ls /192.168.1.2&quot;</span></span></span><br><span class=\"line\">192.168.1.2 | FAILED | rc=2 &gt;&gt;</span><br><span class=\"line\">ls: cannot access /192.168.1.2: No such file or directorynon-zero return code</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible node -a <span class=\"string\">&quot;ls /root/node.txt&quot;</span></span></span><br><span class=\"line\">192.168.1.3 | FAILED | rc=2 &gt;&gt;</span><br><span class=\"line\">ls: cannot access /root/node.txt: No such file or directorynon-zero return code</span><br><span class=\"line\">192.168.1.4 | FAILED | rc=2 &gt;&gt;</span><br><span class=\"line\">ls: cannot access /root/node.txt: No such file or directorynon-zero return code</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 执行playbook</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible-playbook  var.yaml</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 执行后检查</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible 192.168.1.2 -a <span class=\"string\">&quot;cat /root/192.168.1.2.txt&quot;</span></span></span><br><span class=\"line\">192.168.1.2 | CHANGED | rc=0 &gt;&gt;</span><br><span class=\"line\">192.168.1.2                     # 文件内容</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible 192.168.1.2 -a <span class=\"string\">&quot;cat /192.168.1.2/80/test.txt&quot;</span></span></span><br><span class=\"line\">192.168.1.2 | CHANGED | rc=0 &gt;&gt;</span><br><span class=\"line\">192.168.1.2:80</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible node -a <span class=\"string\">&quot;cat /root/node.txt&quot;</span></span></span><br><span class=\"line\">192.168.1.4 | CHANGED | rc=0 &gt;&gt;</span><br><span class=\"line\">node                     # 文件内容</span><br><span class=\"line\">192.168.1.3 | CHANGED | rc=0 &gt;&gt;</span><br><span class=\"line\">node                     # 文件内容</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"5-7-2-4-在-playbook-中定义\"><a href=\"#5-7-2-4-在-playbook-中定义\" class=\"headerlink\" title=\"5.7.2.4 在 playbook 中定义\"></a>5.7.2.4 <strong>在 playbook 中定义</strong></h6><p>​        可在playbook中直接定义变量和变量文件，变量文件的格式也是<code>变量名: 变量值</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">web,dns</span></span><br><span class=\"line\">  <span class=\"attr\">remote_user:</span> <span class=\"string\">root</span></span><br><span class=\"line\">  <span class=\"attr\">vars:</span>                <span class=\"comment\"># 直接定义变量</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">IP:</span> <span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.1</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">IP2:</span> <span class=\"string\">XXX</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"attr\">vars_files:</span>         <span class=\"comment\"># 将变量定义在变量文件中，此处指明变量文件的(绝对或相对)路径即可</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">./vars.yml</span></span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">测试</span>    <span class=\"comment\"># 名称支持中文</span></span><br><span class=\"line\">  <span class=\"attr\">shell:</span> <span class=\"string\">echo</span> &#123;&#123; <span class=\"string\">IP</span> &#125;&#125;<span class=\"string\">-&#123;&#123;</span> <span class=\"string\">IP2</span> <span class=\"string\">&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"5-7-2-5-在-Role-中定义\"><a href=\"#5-7-2-5-在-Role-中定义\" class=\"headerlink\" title=\"5.7.2.5 在 Role 中定义\"></a>5.7.2.5 在 Role 中定义</h6><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">webservers</span></span><br><span class=\"line\">  <span class=\"attr\">roles:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> &#123;<span class=\"attr\">role:</span> <span class=\"string\">web</span>, <span class=\"attr\">port:</span> <span class=\"number\">80</span>&#125;  <span class=\"comment\"># 除了字典第一个元素指明调用的 role，后面是传递给role的变量</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"5-7-2-6-register（注册变量）\"><a href=\"#5-7-2-6-register（注册变量）\" class=\"headerlink\" title=\"5.7.2.6 register（注册变量）\"></a>5.7.2.6 <strong>register（注册变量）</strong></h6><p>​        将任务执行的结果保存到变量，供后续任务使用。reigster 保存的是一个字典。 register变量的命名不能用<code>- </code>中横线</p>\n<ul>\n<li>单变量值输出</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">all</span></span><br><span class=\"line\">  <span class=\"attr\">remote_user:</span> <span class=\"string\">root</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">get</span> <span class=\"string\">date</span> </span><br><span class=\"line\">    <span class=\"attr\">command:</span> <span class=\"string\">date</span> <span class=\"string\">+&quot;%F_%T&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">register:</span> <span class=\"string\">date_output</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">echo</span> <span class=\"string\">date_output</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> <span class=\"string\">touch</span> <span class=\"string\">/tmp/&#123;&#123;date_output.stdout&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n等同于\n</blockquote>\n<p>执行代码并查看结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible-playbook register.yaml</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible all -m shell -a <span class=\"string\">&quot;ls /tmp/2021*&quot;</span></span></span><br><span class=\"line\">192.168.1.3 | CHANGED | rc=0 &gt;&gt;</span><br><span class=\"line\">/tmp/2021-07-02_08:32:04</span><br><span class=\"line\">192.168.1.2 | CHANGED | rc=0 &gt;&gt;</span><br><span class=\"line\">/tmp/2021-07-02_16:32:04</span><br><span class=\"line\">192.168.1.4 | CHANGED | rc=0 &gt;&gt;</span><br><span class=\"line\">/tmp/2021-07-02_16:32:04</span><br></pre></td></tr></table></figure>\n\n<p>判断文件是否存在</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">all</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">check</span> <span class=\"string\">file</span></span><br><span class=\"line\">    <span class=\"attr\">shell:</span> <span class=\"string\">ls</span> <span class=\"string\">/root/ip.txt</span></span><br><span class=\"line\">    <span class=\"attr\">ignore_errors:</span> <span class=\"literal\">true</span>            <span class=\"comment\"># 忽略执行失败的结果，即playbook不会因为执行失败而退出</span></span><br><span class=\"line\">    <span class=\"attr\">register:</span> <span class=\"string\">release</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">show</span> <span class=\"string\">file</span> <span class=\"string\">not</span> <span class=\"string\">found</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> <span class=\"string\">/usr/bin/wall</span> <span class=\"string\">&quot;file not found&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">when:</span> <span class=\"string\">release.rc</span> <span class=\"type\">!=</span> <span class=\"number\">0</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">show</span> <span class=\"string\">file</span> <span class=\"string\">found</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> <span class=\"string\">/usr/bin/wall</span> <span class=\"string\">&quot;file found&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">when:</span> <span class=\"string\">release.rc</span> <span class=\"string\">==</span> <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<p>执行结果：</p>\n<p><img src=\"../ansibleBase/image-20210707141840713.png\" alt=\"image-20210707141840713\"></p>\n<p>案例中，只有<code>192.168.1.2</code>主机中存在以<code>ip地址</code>命名的文件，因此其他节点在执行<code>check file</code>步骤时都执行失败</p>\n<ul>\n<li>多变量值输出</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cat register111.yaml</span> </span><br><span class=\"line\">---</span><br><span class=\"line\">- hosts: node</span><br><span class=\"line\">  tasks:</span><br><span class=\"line\">  - shell: /bin/cat /etc/centos-release</span><br><span class=\"line\">    register: release </span><br><span class=\"line\">  </span><br><span class=\"line\">  - name: show release</span><br><span class=\"line\">    debug: var=release</span><br></pre></td></tr></table></figure>\n\n<p>debug的输出结果(截取其中一台的结果)</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># debug的输出结果如下</span></span><br><span class=\"line\"><span class=\"attr\">ok:</span> [<span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.3</span>] <span class=\"string\">=&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;release&quot;:</span> &#123;               <span class=\"comment\"># 定义的变量名称</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;changed&quot;:</span> <span class=\"literal\">true</span>,                           <span class=\"comment\"># 执行命令的状态，如果命令执行了，则为 true；</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;cmd&quot;:</span> <span class=\"string\">&quot;/bin/cat /etc/centos-release&quot;</span>,     <span class=\"comment\"># 执行的命令</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;delta&quot;:</span> <span class=\"string\">&quot;0:00:00.297975&quot;</span>,                 <span class=\"comment\"># 执行花费时间</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;end&quot;:</span> <span class=\"string\">&quot;2021-07-07 02:42:29.754230&quot;</span>,       <span class=\"comment\"># 结束时间</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;failed&quot;:</span> <span class=\"literal\">false</span>,    <span class=\"comment\"># 命令执行的结果，如果为 false 则表示命令执行成功，true 则表示命令执行失败</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;rc&quot;:</span> <span class=\"number\">0</span>,                                   <span class=\"comment\"># 执行结果</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;start&quot;:</span> <span class=\"string\">&quot;2021-07-07 02:42:29.456255&quot;</span>,     <span class=\"comment\"># 命令执行的开始时间</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;stderr&quot;:</span> <span class=\"string\">&quot;&quot;</span>,                              <span class=\"comment\"># 命令输出的标准错误信息</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;stderr_lines&quot;:</span> [],        <span class=\"comment\"># 按换行符分割输出的内容，在多行输出时，显示的效果比stderr更加直观</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;stdout&quot;:</span> <span class=\"string\">&quot;CentOS release 6.10 (Final)&quot;</span>,   <span class=\"comment\"># 命令的标准输出结果</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;stdout_lines&quot;:</span> [</span><br><span class=\"line\">            <span class=\"string\">&quot;CentOS release 6.10 (Final)&quot;</span>     <span class=\"comment\"># 按换行符分割输出的内容，在多行输出时，结果更加直观</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">ok:</span> [<span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.4</span>] <span class=\"string\">=&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;release&quot;:</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">&quot;changed&quot;:</span> <span class=\"literal\">true</span>, </span><br><span class=\"line\">        <span class=\"attr\">&quot;cmd&quot;:</span> <span class=\"string\">&quot;/bin/cat /etc/centos-release&quot;</span>, </span><br><span class=\"line\">        <span class=\"attr\">&quot;delta&quot;:</span> <span class=\"string\">&quot;0:00:00.296056&quot;</span>, </span><br><span class=\"line\">        <span class=\"attr\">&quot;end&quot;:</span> <span class=\"string\">&quot;2021-07-07 10:42:29.755399&quot;</span>, </span><br><span class=\"line\">        <span class=\"attr\">&quot;failed&quot;:</span> <span class=\"literal\">false</span>, </span><br><span class=\"line\">        <span class=\"attr\">&quot;rc&quot;:</span> <span class=\"number\">0</span>, </span><br><span class=\"line\">        <span class=\"attr\">&quot;start&quot;:</span> <span class=\"string\">&quot;2021-07-07 10:42:29.459343&quot;</span>, </span><br><span class=\"line\">        <span class=\"attr\">&quot;stderr&quot;:</span> <span class=\"string\">&quot;&quot;</span>, </span><br><span class=\"line\">        <span class=\"attr\">&quot;stderr_lines&quot;:</span> [], </span><br><span class=\"line\">        <span class=\"attr\">&quot;stdout&quot;:</span> <span class=\"string\">&quot;CentOS Linux release 7.6.1810 (Core) &quot;</span>, </span><br><span class=\"line\">        <span class=\"attr\">&quot;stdout_lines&quot;:</span> [</span><br><span class=\"line\">            <span class=\"string\">&quot;CentOS Linux release 7.6.1810 (Core) &quot;</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>调用</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">node</span></span><br><span class=\"line\">  <span class=\"attr\">gather_facts:</span> <span class=\"literal\">no</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">shell:</span> <span class=\"string\">/bin/cat</span> <span class=\"string\">/etc/centos-release</span></span><br><span class=\"line\">    <span class=\"attr\">ignore_errors:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">register:</span> <span class=\"string\">release</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">show</span> <span class=\"string\">Centos</span> <span class=\"number\">6</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> <span class=\"string\">/usr/bin/wall</span> <span class=\"string\">&quot;Centos 6&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">when:</span> <span class=\"string\">release.stdout</span> <span class=\"string\">==</span> <span class=\"string\">&quot;CentOS release 6.10 (Final)&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">show</span> <span class=\"string\">Centos</span> <span class=\"number\">7</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> <span class=\"string\">/usr/bin/wall</span> <span class=\"string\">&quot;Centos 7&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">when:</span> <span class=\"string\">release.stdout</span> <span class=\"string\">==</span> <span class=\"string\">&quot;CentOS Linux release 7.6.1810 (Core) &quot;</span>    <span class=\"comment\"># search模糊匹配</span></span><br></pre></td></tr></table></figure>\n\n<p>输出结果截屏如下：</p>\n<p><img src=\"../ansibleBase/image-20210707111208902.png\" alt=\"image-20210707111208902\"></p>\n<h6 id=\"5-7-2-7-facts（系统信息变量）\"><a href=\"#5-7-2-7-facts（系统信息变量）\" class=\"headerlink\" title=\"5.7.2.7  facts（系统信息变量）\"></a>5.7.2.7  <strong>facts（系统信息变量）</strong></h6><p>​        系统信息变量：facts，默认会执行，可在 playbook 中直接调用</p>\n<ul>\n<li><p>属性：</p>\n</li>\n<li><p>层级属性：</p>\n</li>\n<li><p>数组：</p>\n</li>\n</ul>\n<p>如果用不到 facts，建议关闭(详见5.2)，提供执行效率： </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">all</span></span><br><span class=\"line\">  <span class=\"attr\">gather_facts:</span> <span class=\"literal\">yes</span> <span class=\"comment\"># 默认开启，可使用no或者false关闭</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">facts</span></span><br><span class=\"line\">    <span class=\"attr\">shell:</span> <span class=\"string\">echo</span> &#123;&#123; <span class=\"string\">ansible_version</span> &#125;&#125; <span class=\"string\">&gt;</span> <span class=\"string\">/tmp/2021-07-02_08:32:04</span></span><br><span class=\"line\">    <span class=\"attr\">tags:</span> <span class=\"string\">ansible_version</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-8-Playbook流程控制\"><a href=\"#5-8-Playbook流程控制\" class=\"headerlink\" title=\"5.8 Playbook流程控制\"></a>5.8 Playbook流程控制</h4><h5 id=\"5-8-1-条件\"><a href=\"#5-8-1-条件\" class=\"headerlink\" title=\"5.8.1 条件\"></a><strong>5.8.1 条件</strong></h5><p>根据不同的条件执行不同的指令： </p>\n<ul>\n<li><p>特定主机跳过特定步骤</p>\n</li>\n<li><p>特定操作系统适用软件包管理器不同 </p>\n</li>\n<li><p>只清理磁盘空间即将满的主机</p>\n</li>\n</ul>\n<p>在 Ansible 中使用 when 子句很容易做到这一点，该子句是没有双花括号的原始jinja2 表达式，使用非常简单。</p>\n<h6 id=\"5-8-1-1-单条件\"><a href=\"#5-8-1-1-单条件\" class=\"headerlink\" title=\"5.8.1.1 单条件\"></a>5.8.1.1 单条件</h6><p>案例：</p>\n<ul>\n<li>在特定主机上执行debug任务</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">all</span></span><br><span class=\"line\">  <span class=\"attr\">gather_facts:</span> <span class=\"literal\">yes</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Host</span> <span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.2</span> <span class=\"string\">run</span> <span class=\"string\">this</span> <span class=\"string\">task</span></span><br><span class=\"line\">    <span class=\"attr\">debug:</span> </span><br><span class=\"line\">      <span class=\"attr\">msg:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; ansible_default_ipv4.address &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">when:</span> <span class=\"string\">ansible_default_ipv4.address</span> <span class=\"string\">==</span> <span class=\"string\">&#x27;192.168.1.2&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>执行结果如下：</p>\n<p><img src=\"../ansibleBase/image-20210707113216602.png\" alt=\"image-20210707113216602\"></p>\n<ul>\n<li>在指定操作系统上执行命令</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">all</span></span><br><span class=\"line\">  <span class=\"attr\">gather_facts:</span> <span class=\"literal\">yes</span>  </span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Update</span> <span class=\"string\">apache</span> <span class=\"string\">version</span> <span class=\"bullet\">-</span> <span class=\"string\">yum</span></span><br><span class=\"line\">    <span class=\"attr\">yum:</span> </span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">httpd</span> </span><br><span class=\"line\">      <span class=\"attr\">state:</span> <span class=\"string\">present</span></span><br><span class=\"line\">    <span class=\"attr\">when:</span> <span class=\"string\">ansible_pkg_mgr</span> <span class=\"string\">==</span> <span class=\"string\">&#x27;yum&#x27;</span> <span class=\"string\">and</span>  <span class=\"string\">ansible_distribution_major_version</span> <span class=\"string\">==</span> <span class=\"string\">&quot;7&quot;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Update</span> <span class=\"string\">apache</span> <span class=\"string\">version</span> <span class=\"bullet\">-</span> <span class=\"string\">apt</span></span><br><span class=\"line\">    <span class=\"attr\">apt:</span> </span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">apache2</span> </span><br><span class=\"line\">      <span class=\"attr\">state:</span> <span class=\"string\">present</span> </span><br><span class=\"line\">      <span class=\"attr\">update_cache:</span> <span class=\"literal\">yes</span></span><br><span class=\"line\">    <span class=\"attr\">when:</span> <span class=\"string\">ansible_pkg_mgr</span> <span class=\"string\">==</span> <span class=\"string\">&#x27;apt&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>测试执行结果如下：</p>\n<p><img src=\"../ansibleBase/image-20210707114024302.png\" alt=\"image-20210707114024302\"></p>\n<p>判断变量是否定义</p>\n<ul>\n<li>变量已经定义：<code>is defined</code></li>\n<li>变量未定义：<code>is undefined</code></li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">all</span></span><br><span class=\"line\">  <span class=\"attr\">gather_facts:</span> <span class=\"literal\">no</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">foo</span> <span class=\"string\">is</span> <span class=\"string\">defined</span></span><br><span class=\"line\">    <span class=\"attr\">shell:</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;I&#x27;ve got &#x27;<span class=\"template-variable\">&#123;&#123; foo &#125;&#125;</span>&#x27; and am not afraid to use it!&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">when:</span> <span class=\"string\">foo</span> <span class=\"string\">is</span> <span class=\"string\">defined</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">bar</span> <span class=\"string\">is</span> <span class=\"string\">undefined</span></span><br><span class=\"line\">    <span class=\"attr\">fail:</span> </span><br><span class=\"line\">      <span class=\"attr\">msg:</span> <span class=\"string\">&quot;Bailing out. this play requires &#x27;bar&#x27;&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">when:</span> <span class=\"string\">bar</span> <span class=\"string\">is</span> <span class=\"string\">undefined</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>执行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible-playbook -e foo=<span class=\"string\">&quot;hello world&quot;</span> -e bar=<span class=\"string\">&quot;1111&quot;</span> defined.yaml</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible-playbook -e foo=<span class=\"string\">&quot;hello world&quot;</span> defined.yaml</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible-playbook -e bar=<span class=\"string\">&quot;1111&quot;</span> defined.yaml</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"5-8-1-2-测试多条件\"><a href=\"#5-8-1-2-测试多条件\" class=\"headerlink\" title=\"5.8.1.2 测试多条件\"></a>5.8.1.2 测试多条件</h6><ul>\n<li><p>一个 when 语句可用于评估多个条件：使用 and 和 or 关键字组合条件，并使用括号分组条件。 </p>\n</li>\n<li><p>使用 and 语句运算时，两个条件必须为真，才能满足整个条件语句。 </p>\n</li>\n<li><p>使用 or 语句时，其中任一条件为真时，就能满足条件语句。</p>\n</li>\n</ul>\n<p>and的常见用法1：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">all</span></span><br><span class=\"line\">  <span class=\"attr\">gather_facts:</span> <span class=\"literal\">yes</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">&quot;仅在 CentOS6 系统执行&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">shell:</span> <span class=\"string\">hostname</span></span><br><span class=\"line\">    <span class=\"attr\">when:</span> <span class=\"string\">ansible_distribution</span> <span class=\"string\">==</span> <span class=\"string\">&quot;CentOS&quot;</span> <span class=\"string\">and</span> <span class=\"string\">ansible_distribution_major_version</span> <span class=\"string\">==</span> <span class=\"string\">&quot;6&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>and的常见用法2：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">all</span></span><br><span class=\"line\">  <span class=\"attr\">gather_facts:</span> <span class=\"literal\">yes</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">&quot;仅在 CentOS6 系统执行&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">shell:</span> <span class=\"string\">hostname</span></span><br><span class=\"line\">    <span class=\"attr\">when:</span> <span class=\"string\">(ansible_distribution</span> <span class=\"string\">==</span> <span class=\"string\">&quot;CentOS&quot;</span><span class=\"string\">)</span> <span class=\"string\">and</span> <span class=\"string\">(ansible_distribution_major_version</span> <span class=\"string\">==</span> <span class=\"string\">&quot;6&quot;</span><span class=\"string\">)</span></span><br></pre></td></tr></table></figure>\n\n<p>and的常见用法3：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">all</span></span><br><span class=\"line\">  <span class=\"attr\">gather_facts:</span> <span class=\"literal\">yes</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">&quot;仅在 CentOS6 系统执行&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">shell:</span> <span class=\"string\">hostname</span></span><br><span class=\"line\">    <span class=\"attr\">when:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">ansible_distribution</span> <span class=\"string\">==</span> <span class=\"string\">&quot;CentOS&quot;</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">ansible_distribution_major_version</span> <span class=\"string\">==</span> <span class=\"string\">&quot;6&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>​        or 语句写法与 and 语句一样，此处不再赘述。</p>\n<p>比较操作符：</p>\n<table>\n<thead>\n<tr>\n<th><strong>操作符</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>==</td>\n<td>相等，两边值是否相等，相等则为真</td>\n</tr>\n<tr>\n<td>!=</td>\n<td>不相等，两边值是否不相等，则为真</td>\n</tr>\n<tr>\n<td>&gt;</td>\n<td>大于，左边值是否大于右边值，则为真</td>\n</tr>\n<tr>\n<td>&lt;</td>\n<td>小于，左边值是否小于右边值，则为真</td>\n</tr>\n<tr>\n<td>&gt;=</td>\n<td>大于等于，左边值是否大于等于右边值，则为真</td>\n</tr>\n<tr>\n<td>&lt;=</td>\n<td>小于等于，左边值是否小于等于右边值，则为真</td>\n</tr>\n</tbody></table>\n<h5 id=\"5-8-2-循环\"><a href=\"#5-8-2-循环\" class=\"headerlink\" title=\"5.8.2 循环\"></a>5.8.2 循环</h5><p>​        通常，希望在一个任务中执行许多操作，例如创建多个用户，安装多个软件或重复轮询，直到达到某个结果。 在 Ansible2.5 之前，主要 <code>with_&lt;lookup&gt;</code>关键字创建循环。随着新版的发布，执行循环的推荐方式使用新 <code>loop</code> 关键字，并支持 <code>with_*</code>大部分用法。</p>\n<p><a href=\"https://docs.ansible.com/ansible/latest/user_guide/playbooks_loops.html\">https://docs.ansible.com/ansible/latest/user_guide/playbooks_loops.html</a></p>\n<h6 id=\"5-8-2-1-with-x格式\"><a href=\"#5-8-2-1-with-x格式\" class=\"headerlink\" title=\"5.8.2.1 with_x格式\"></a>5.8.2.1 with_x格式</h6><ul>\n<li>案例：批量安装软件</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">node</span></span><br><span class=\"line\">  <span class=\"attr\">gather_facts:</span> <span class=\"literal\">no</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">install</span></span><br><span class=\"line\">    <span class=\"attr\">yum:</span> </span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; item &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">state:</span> <span class=\"string\">latest</span></span><br><span class=\"line\">    <span class=\"attr\">with_list:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">tree</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">psmisc</span></span><br></pre></td></tr></table></figure>\n\n<p>检查并执行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible node -m shell -a <span class=\"string\">&quot;rpm -ql &#123;tree,pstree&#125; &quot;</span></span></span><br><span class=\"line\">192.168.1.3 | FAILED | rc=2 &gt;&gt;</span><br><span class=\"line\">package tree is not installed</span><br><span class=\"line\">package pstree is not installednon-zero return code</span><br><span class=\"line\">192.168.1.4 | FAILED | rc=2 &gt;&gt;</span><br><span class=\"line\">package tree is not installed</span><br><span class=\"line\">package pstree is not installednon-zero return code</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible-playbook with.yaml</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible node -m shell -a <span class=\"string\">&quot;rpm -qa &#123;tree,psmisc&#125; &quot;</span></span></span><br><span class=\"line\">192.168.1.3 | CHANGED | rc=0 &gt;&gt;</span><br><span class=\"line\">tree-1.5.3-3.el6.x86_64</span><br><span class=\"line\">psmisc-22.6-24.el6.x86_64</span><br><span class=\"line\">192.168.1.4 | CHANGED | rc=0 &gt;&gt;</span><br><span class=\"line\">tree-1.6.0-10.el7.x86_64</span><br><span class=\"line\">psmisc-22.20-17.el7.x86_64</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"5-8-2-2-loop格式\"><a href=\"#5-8-2-2-loop格式\" class=\"headerlink\" title=\"5.8.2.2 loop格式\"></a>5.8.2.2 loop格式</h6><p>案例：批量新建用户</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">node</span></span><br><span class=\"line\">  <span class=\"attr\">gather_facts:</span> <span class=\"literal\">no</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">user</span> <span class=\"string\">add</span></span><br><span class=\"line\">    <span class=\"attr\">user:</span> </span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; item.name &#125;&#125;</span>&quot;</span> </span><br><span class=\"line\">      <span class=\"attr\">groups:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; item.group &#125;&#125;</span>&quot;</span> </span><br><span class=\"line\">      <span class=\"attr\">state:</span> <span class=\"string\">present</span> </span><br><span class=\"line\">    <span class=\"attr\">loop:</span>            <span class=\"comment\"># 只需要将with_list修改成loop即可</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> &#123;<span class=\"string\">&quot;name&quot;</span><span class=\"string\">:&quot;user1&quot;</span>,<span class=\"string\">&quot;group&quot;</span><span class=\"string\">:&quot;wheel&quot;</span>&#125;</span><br><span class=\"line\">    <span class=\"bullet\">-</span> &#123;<span class=\"string\">&quot;name&quot;</span><span class=\"string\">:&quot;user2&quot;</span>,<span class=\"string\">&quot;group&quot;</span><span class=\"string\">:&quot;wheel&quot;</span>&#125;</span><br><span class=\"line\">    <span class=\"bullet\">-</span> &#123;<span class=\"string\">&quot;name&quot;</span><span class=\"string\">:&quot;user3&quot;</span>,<span class=\"string\">&quot;group&quot;</span><span class=\"string\">:&quot;wheel&quot;</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行并检查</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible-playbook loop.yaml</span></span><br><span class=\"line\"></span><br><span class=\"line\">PLAY [node] *******************************************************************************************************</span><br><span class=\"line\"></span><br><span class=\"line\">TASK [user add] ********************************************************************************************************</span><br><span class=\"line\">changed: [192.168.1.4] =&gt; (item=&#123;u&#x27;group&#x27;: u&#x27;wheel&#x27;, u&#x27;name&#x27;: u&#x27;user1&#x27;&#125;)</span><br><span class=\"line\">changed: [192.168.1.3] =&gt; (item=&#123;u&#x27;group&#x27;: u&#x27;wheel&#x27;, u&#x27;name&#x27;: u&#x27;user1&#x27;&#125;)</span><br><span class=\"line\">changed: [192.168.1.3] =&gt; (item=&#123;u&#x27;group&#x27;: u&#x27;wheel&#x27;, u&#x27;name&#x27;: u&#x27;user2&#x27;&#125;)</span><br><span class=\"line\">changed: [192.168.1.4] =&gt; (item=&#123;u&#x27;group&#x27;: u&#x27;wheel&#x27;, u&#x27;name&#x27;: u&#x27;user2&#x27;&#125;)</span><br><span class=\"line\">changed: [192.168.1.3] =&gt; (item=&#123;u&#x27;group&#x27;: u&#x27;wheel&#x27;, u&#x27;name&#x27;: u&#x27;user3&#x27;&#125;)</span><br><span class=\"line\">changed: [192.168.1.4] =&gt; (item=&#123;u&#x27;group&#x27;: u&#x27;wheel&#x27;, u&#x27;name&#x27;: u&#x27;user3&#x27;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">PLAY RECAP *******************************************************************************************************</span><br><span class=\"line\">192.168.1.3    : ok=1    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   </span><br><span class=\"line\">192.168.1.4    : ok=1    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   </span><br><span class=\"line\"></span><br><span class=\"line\">[root@9bdfb9d93df9 yaml]# ansible node -a &quot;id user1&quot;</span><br><span class=\"line\">192.168.1.4 | CHANGED | rc=0 &gt;&gt;</span><br><span class=\"line\">uid=1002(user1) gid=1002(user1) groups=1002(user1),10(wheel)</span><br><span class=\"line\">192.168.1.3 | CHANGED | rc=0 &gt;&gt;</span><br><span class=\"line\">uid=1002(user1) gid=1002(user1) groups=1002(user1),10(wheel)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"5-8-3-判断和循环\"><a href=\"#5-8-3-判断和循环\" class=\"headerlink\" title=\"5.8.3 判断和循环\"></a>5.8.3 判断和循环</h5><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">node</span></span><br><span class=\"line\">  <span class=\"attr\">gather_facts:</span> <span class=\"literal\">no</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">test</span></span><br><span class=\"line\">    <span class=\"attr\">debug:</span> </span><br><span class=\"line\">      <span class=\"attr\">msg:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; item &#125;&#125;</span>&quot;</span> </span><br><span class=\"line\">    <span class=\"attr\">loop:</span> [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>]</span><br><span class=\"line\">    <span class=\"attr\">when:</span> <span class=\"string\">item</span> <span class=\"string\">&lt;</span> <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<p>从系统信息获取判断条件</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">node</span></span><br><span class=\"line\">  <span class=\"attr\">gather_facts:</span> <span class=\"literal\">yes</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">disk</span> <span class=\"string\">check</span></span><br><span class=\"line\">    <span class=\"attr\">shell:</span> <span class=\"string\">touch</span> <span class=\"string\">/tmp/123</span></span><br><span class=\"line\">    <span class=\"attr\">loop:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; ansible_mounts &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">when:</span> <span class=\"string\">item.mount</span> <span class=\"string\">==</span> <span class=\"string\">&quot;/&quot;</span> <span class=\"string\">and</span> <span class=\"string\">item.size_available</span> <span class=\"string\">&gt;</span> <span class=\"number\">52000000000</span></span><br></pre></td></tr></table></figure>\n","comments":true,"permalink":"https://qingdalf.github.io/2021-05/ansibleAdvanced/","categories":[{"name":"DevOps","slug":"DevOps","permalink":"https://qingdalf.github.io/categories/DevOps/"}],"tags":[]},{"title":"ansible常用模块","date":"2021-05-25T05:06:46.000Z","path":"2021-05/ansibleModuls/","content":"<h2 id=\"三、Ansible常用模块\"><a href=\"#三、Ansible常用模块\" class=\"headerlink\" title=\"三、Ansible常用模块\"></a>三、Ansible常用模块</h2><blockquote>\n<p> 备注：接下来的实验使用docker容器进行，即ansible和测试使用的主机都使用容器，inventory文件跟之前类似(只是ip地址不一样)。<br> 镜像文件已经上传dockerhub，需要可自取，地址：<a href=\"https://hub.docker.com/repository/docker/qingdalf/ansible\">https://hub.docker.com/repository/docker/qingdalf/ansible</a><br>官网：<a href=\"http://docs.ansible.com/\">http://docs.ansible.com/</a></p>\n</blockquote>\n<span id=\"more\"></span>\n<p>其他参考网址：<a href=\"http://ansible.com.cn/index.html\">http://ansible.com.cn/index.html</a></p>\n<h3 id=\"1-ping\"><a href=\"#1-ping\" class=\"headerlink\" title=\"1 ping\"></a>1 ping</h3><p>功能：尝试连接到主机，验证并返回pong成功。</p>\n<blockquote>\n<p>对于Windows目标，请改用win_ping模块，不使用icmp协议，使用ssh协议。</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible own -m ping</span> </span><br><span class=\"line\">192.168.1.2 | SUCCESS =&gt; &#123;   # 执行结果成功</span><br><span class=\"line\">    &quot;ansible_facts&quot;: &#123;</span><br><span class=\"line\">        &quot;discovered_interpreter_python&quot;: &quot;/usr/bin/python&quot;</span><br><span class=\"line\">    &#125;, </span><br><span class=\"line\">    &quot;changed&quot;: false,   # 执行结果未对被控端进行更改，false表示无修改</span><br><span class=\"line\">    &quot;ping&quot;: &quot;pong&quot;      # 返回值&#x27;pong&#x27;，表示执行成功</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"ansible.assets/image-20210326164200487.png\" alt=\"image-20210326164200487\"></p>\n<h3 id=\"2-command\"><a href=\"#2-command\" class=\"headerlink\" title=\"2 command\"></a>2 command</h3><p>功能：在远程节点上执行命令</p>\n<blockquote>\n<p>变量和操作符号 “&lt;”, “&gt;”, “|”, “;” and “&amp;” 不能正常工作。如果需要使用，请使用shell模块</p>\n</blockquote>\n<blockquote>\n<p>Ansible默认不指定模块时，将使用此模块。</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible-doc -s <span class=\"built_in\">command</span></span></span><br><span class=\"line\">- name: Execute commands on targets   # 到目标机上执行命令</span><br><span class=\"line\">  command:</span><br><span class=\"line\">      argv:      # Passes the command as a list rather than a string. Use `argv&#x27; to avoid quoting values that would otherwise be interpreted incorrectly (for example &quot;user name&quot;). Only the string or the list form can be provided, not both.  One or the other must be provided.</span><br><span class=\"line\">      chdir:     # Change into this directory before running the command.   # 命令运行前先切换到此目录</span><br><span class=\"line\">      cmd:       # The command to run.</span><br><span class=\"line\">      </span><br><span class=\"line\">      # 条件判断，如果文件存在，将不执行后面的命令，不存在则执行</span><br><span class=\"line\">      creates: # A filename or (since 2.0) glob pattern. If it already exists, this step *won&#x27;t* be run. </span><br><span class=\"line\">     </span><br><span class=\"line\">     # 命令模块使用一个自由格式的命令来运行</span><br><span class=\"line\">      free_form:  # The command module takes a free form command to run. There is no actual parameter named &#x27;free form&#x27;.</span><br><span class=\"line\">      </span><br><span class=\"line\">      # 条件判断，如果文件存在，将执行后面的命令</span><br><span class=\"line\">      removes:  # A filename or (since 2.0) glob pattern. If it already exists, this step *will* be run.</span><br><span class=\"line\">      </span><br><span class=\"line\">      # 将命令的stdin直接设置为指定的值</span><br><span class=\"line\">      stdin:                 # Set the stdin of the command directly to the specified value.</span><br><span class=\"line\">      stdin_add_newline:     # If set to `yes&#x27;, append a newline to stdin data.</span><br><span class=\"line\">      strip_empty_ends:      # Strip empty lines from the end of stdout/stderr in result.</span><br><span class=\"line\">      </span><br><span class=\"line\">      # 是否开启报警</span><br><span class=\"line\">      warn:                  # Enable or disable task warnings.</span><br></pre></td></tr></table></figure>\n\n<p>示例：</p>\n<ul>\n<li>creates和removes的条件判断</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible 192.168.1.2 -m <span class=\"built_in\">command</span> -a <span class=\"string\">&quot;chdir=/etc/ansible creates=ansible.cfg cat hosts &quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">首先切换到/etc/ansible目录，如果该目录中存在ansible.cfg文件，则查看指定主机上的hosts文件</span></span><br><span class=\"line\">192.168.1.2 | SUCCESS | rc=0 &gt;&gt;</span><br><span class=\"line\">skipped, since ansible.cfg exists</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible 192.168.1.2 -m <span class=\"built_in\">command</span> -a <span class=\"string\">&quot;chdir=/etc/ creates=ansible.cfg date &#x27;+%F %T&#x27; &quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">首先切换到/etc目录，如果该目录中存在ansible.cfg文件，则打印当前时间</span></span><br><span class=\"line\">192.168.1.2 | CHANGED | rc=0 &gt;&gt;</span><br><span class=\"line\">2021-06-29 16:00:25</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible 192.168.1.2  -m <span class=\"built_in\">command</span> -a <span class=\"string\">&quot;chdir=/etc/ansible removes=ansible.cfg cat hosts &quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 首先切换到/etc/ansible目录中，如果该目录中存在ansible.cfg文件，则执行cat hosts命令</span></span><br><span class=\"line\">192.168.1.2 | CHANGED | rc=0 &gt;&gt;</span><br><span class=\"line\">[own]</span><br><span class=\"line\">192.168.1.2 ansible_connect=local ansible_ssh_port=22 ansible_ssh_user=root ansible_ssh_pass=123456</span><br><span class=\"line\"></span><br><span class=\"line\">[node]</span><br><span class=\"line\">192.168.1.3 ansible_ssh_port=22 ansible_ssh_user=root ansible_ssh_pass=123456</span><br><span class=\"line\">192.168.1.4 ansible_ssh_port=22 ansible_ssh_user=root ansible_ssh_pass=123456</span><br><span class=\"line\"></span><br><span class=\"line\">[gp:children]   </span><br><span class=\"line\">own</span><br><span class=\"line\">node</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>command模块执行shell命令</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible node  -m <span class=\"built_in\">command</span> -a <span class=\"string\">&quot;hostname&quot;</span>   <span class=\"comment\"># 只能执行不含特殊符号的的shell命令</span></span></span><br><span class=\"line\">192.168.1.3 | CHANGED | rc=0 &gt;&gt;</span><br><span class=\"line\">6baf2df55339</span><br><span class=\"line\">192.168.1.4 | CHANGED | rc=0 &gt;&gt;</span><br><span class=\"line\">1a22effd8cc1</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible node  -m shell -a <span class=\"string\">&quot;hostname &amp;&amp; free -g&quot;</span>  <span class=\"comment\"># 含有特殊符号的shell命令要使用shell模块</span></span></span><br><span class=\"line\">192.168.1.3 | CHANGED | rc=0 &gt;&gt;</span><br><span class=\"line\">6baf2df55339</span><br><span class=\"line\">             total       used       free     shared    buffers     cached</span><br><span class=\"line\">Mem:             7          6          0          0          0          5</span><br><span class=\"line\">-/+ buffers/cache:          0          6</span><br><span class=\"line\">Swap:            3          0          3</span><br><span class=\"line\">192.168.1.4 | CHANGED | rc=0 &gt;&gt;</span><br><span class=\"line\">1a22effd8cc1</span><br><span class=\"line\">              total        used        free      shared  buff/cache   available</span><br><span class=\"line\">Mem:              7           0           0           0           6           6</span><br><span class=\"line\">Swap:             3           0           3</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible node  -m <span class=\"built_in\">command</span> -a <span class=\"string\">&quot;echo <span class=\"variable\">$HOSTNAME</span>&quot;</span>   <span class=\"comment\"># 含有$符号的命令，command不一定能执行成功</span></span></span><br><span class=\"line\">192.168.1.4 | CHANGED | rc=0 &gt;&gt;</span><br><span class=\"line\">9bdfb9d93df9 # 执行结果错误</span><br><span class=\"line\">192.168.1.3 | CHANGED | rc=0 &gt;&gt;</span><br><span class=\"line\">9bdfb9d93df9 # 执行结果错误</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible node  -m <span class=\"built_in\">command</span> -a <span class=\"string\">&quot;hostname&quot;</span>   <span class=\"comment\"># 正确结果如下</span></span></span><br><span class=\"line\">192.168.1.3 | CHANGED | rc=0 &gt;&gt;</span><br><span class=\"line\">6baf2df55339</span><br><span class=\"line\">192.168.1.4 | CHANGED | rc=0 &gt;&gt;</span><br><span class=\"line\">1a22effd8cc1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-shell\"><a href=\"#3-shell\" class=\"headerlink\" title=\"3 shell\"></a>3 shell</h3><p>功能：在远程节点上执行命令和脚本（脚本在远程节点）。与command模快使用一致，但是变量和操作符号 “&lt;”, “&gt;”, “|”, “;” and “&amp;” 能正常工作，对于一些复杂的命令(如命令中含有多引号等)，执行结果有问题</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cat /root/Hostname.sh   <span class=\"comment\"># 在被控端均存在该脚本文件，shell脚本必须存在于被控端</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\">Hostname=`hostname`</span><br><span class=\"line\">echo &quot;my hostname is $Hostname &quot;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible node -m shell -a <span class=\"string\">&#x27;source /root/Hostname.sh&#x27;</span></span>  </span><br><span class=\"line\">192.168.1.4 | CHANGED | rc=0 &gt;&gt;</span><br><span class=\"line\">my hostname is 1a22effd8cc1 </span><br><span class=\"line\">192.168.1.3 | CHANGED | rc=0 &gt;&gt;</span><br><span class=\"line\">my hostname is 6baf2df55339</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 对于一些复杂的命令(如命令中含有多引号等),执行结果错误，只能写脚本到远程主机执行</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible own -m shell -a <span class=\"string\">&quot;df -h | awk -F&#x27; &#x27; &#x27;&#123;print <span class=\"variable\">$1</span>&#125;&#x27;&quot;</span></span>   </span><br><span class=\"line\">192.168.1.2 | CHANGED | rc=0 &gt;&gt;</span><br><span class=\"line\">Filesystem               Size  Used Avail Use% Mounted on</span><br><span class=\"line\">overlay                   45G   12G   34G  26% /</span><br><span class=\"line\">tmpfs                     64M     0   64M   0% /dev</span><br><span class=\"line\">tmpfs                    3.9G     0  3.9G   0% /sys/fs/cgroup</span><br><span class=\"line\">shm                       64M  124K   64M   1% /dev/shm</span><br><span class=\"line\">/dev/mapper/centos-root   45G   12G   34G  26% /etc/hosts</span><br><span class=\"line\">tmpfs                    3.9G     0  3.9G   0% /proc/asound</span><br><span class=\"line\">tmpfs                    3.9G     0  3.9G   0% /proc/acpi</span><br><span class=\"line\">tmpfs                    3.9G     0  3.9G   0% /proc/scsi</span><br><span class=\"line\">tmpfs                    3.9G     0  3.9G   0% /sys/firmware</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-script\"><a href=\"#4-script\" class=\"headerlink\" title=\"4 script\"></a>4 script</h3><p>功能：把脚本复制到远程节点后，在远程节点运行脚本（脚本在控制节点上）</p>\n<p>给定的脚本将通过远程节点上的shell环境进行处理。这个模块在远程系统上不需要python，就像原始脚本一样。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cat /root/date.sh   <span class=\"comment\"># 脚本文件只存放于ansible主机上，在node节点上不存在该文件</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\">Date=`date &quot;+%F %T&quot;`</span><br><span class=\"line\">echo &quot;now is $Date &quot;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible node -m script -a <span class=\"string\">&#x27;/root/date.sh&#x27;</span></span></span><br><span class=\"line\">192.168.1.3 | CHANGED =&gt; &#123;</span><br><span class=\"line\">    &quot;changed&quot;: true, </span><br><span class=\"line\">    &quot;rc&quot;: 0, </span><br><span class=\"line\">    &quot;stderr&quot;: &quot;Shared connection to 192.168.1.3 closed.\\r\\n&quot;, </span><br><span class=\"line\">    &quot;stderr_lines&quot;: [</span><br><span class=\"line\">        &quot;Shared connection to 192.168.1.3 closed.&quot;</span><br><span class=\"line\">    ], </span><br><span class=\"line\">    &quot;stdout&quot;: &quot;now is 2021-06-29 08:10:32 \\r\\n&quot;, </span><br><span class=\"line\">    &quot;stdout_lines&quot;: [</span><br><span class=\"line\">        &quot;now is 2021-06-29 08:10:32 &quot;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">192.168.1.4 | CHANGED =&gt; &#123;</span><br><span class=\"line\">    &quot;changed&quot;: true, </span><br><span class=\"line\">    &quot;rc&quot;: 0, </span><br><span class=\"line\">    &quot;stderr&quot;: &quot;Shared connection to 192.168.1.4 closed.\\r\\n&quot;, </span><br><span class=\"line\">    &quot;stderr_lines&quot;: [</span><br><span class=\"line\">        &quot;Shared connection to 192.168.1.4 closed.&quot;</span><br><span class=\"line\">    ], </span><br><span class=\"line\">    &quot;stdout&quot;: &quot;now is 2021-06-29 16:10:32 \\r\\n&quot;, </span><br><span class=\"line\">    &quot;stdout_lines&quot;: [</span><br><span class=\"line\">        &quot;now is 2021-06-29 16:10:32 &quot;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-copy\"><a href=\"#5-copy\" class=\"headerlink\" title=\"5 copy\"></a>5 copy</h3><p>功能：复制文件或目录到远程节点。默认会覆盖目标文件</p>\n<ul>\n<li><p>backup：在覆盖之前将原文件备份，备份文件包含时间信息。有两个选项：yes|no </p>\n</li>\n<li><p>content：用于替代”src”,可以直接设定指定文件的内容，相当于echo 重定向内容到文件</p>\n</li>\n<li><p>dest：必选项。要将源文件复制到的远程主机的绝对路径，如果源文件是一个目录，那么该路径也必须是个目录</p>\n</li>\n<li><p>directory_mode：递归的设定目录的权限，默认为系统默认权限</p>\n</li>\n<li><p>force：如果目标主机包含该文件，但内容不同，如果设置为yes，则强制覆盖，如果为no，则只有当目标主机的目标位置不存在该文件时，才复制。默认为yes</p>\n</li>\n<li><p>others：所有的file模块里的选项都可以在这里使用</p>\n</li>\n<li><p>src：要复制到远程主机的文件在本地的地址，可以是绝对路径，也可以是相对路径。如果路径是一个目录，它将递归复制。在这种情况下，如果路径使用”/“来结尾，则只复制目录里的内容，如果没有使用”/“来结尾，则包含目录在内的整个内容全部复制，类似于rsync。</p>\n</li>\n</ul>\n<p>案例：</p>\n<ul>\n<li>复制单个文件：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible node -m copy -a <span class=\"string\">&quot;src=/root/date.sh dest=/tmp mode=755 backup=yes&quot;</span></span></span><br><span class=\"line\">192.168.1.4 | CHANGED =&gt; &#123;</span><br><span class=\"line\">    &quot;ansible_facts&quot;: &#123;</span><br><span class=\"line\">        &quot;discovered_interpreter_python&quot;: &quot;/usr/bin/python&quot;</span><br><span class=\"line\">    &#125;, </span><br><span class=\"line\">    &quot;changed&quot;: true, </span><br><span class=\"line\">    &quot;checksum&quot;: &quot;d3d7ee0afd604dfb3578967a6e28730d496f7417&quot;, </span><br><span class=\"line\">    &quot;dest&quot;: &quot;/tmp/date.sh&quot;,   # 远程目录</span><br><span class=\"line\">    &quot;gid&quot;: 0, </span><br><span class=\"line\">    &quot;group&quot;: &quot;root&quot;,          # 组用户</span><br><span class=\"line\">    &quot;md5sum&quot;: &quot;49aa4bcc368baf63b70688393b13d49a&quot;,    # md5值</span><br><span class=\"line\">    &quot;mode&quot;: &quot;0755&quot;,           # 权限</span><br><span class=\"line\">    &quot;owner&quot;: &quot;root&quot;,          # 用户</span><br><span class=\"line\">    &quot;size&quot;: 54,               # 文件大小</span><br><span class=\"line\">    &quot;src&quot;: &quot;/root/.ansible/tmp/ansible-tmp-1624954413.51-1933-165292432384705/source&quot;,   # 源路径</span><br><span class=\"line\">    &quot;state&quot;: &quot;file&quot;,         # 类型是目录</span><br><span class=\"line\">    &quot;uid&quot;: 0</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">192.168.1.3 | CHANGED =&gt; &#123;</span><br><span class=\"line\">    &quot;ansible_facts&quot;: &#123;</span><br><span class=\"line\">        &quot;discovered_interpreter_python&quot;: &quot;/usr/bin/python&quot;</span><br><span class=\"line\">    &#125;, </span><br><span class=\"line\">    &quot;changed&quot;: true, </span><br><span class=\"line\">    &quot;checksum&quot;: &quot;d3d7ee0afd604dfb3578967a6e28730d496f7417&quot;, </span><br><span class=\"line\">    &quot;dest&quot;: &quot;/tmp/date.sh&quot;, </span><br><span class=\"line\">    &quot;gid&quot;: 0, </span><br><span class=\"line\">    &quot;group&quot;: &quot;root&quot;, </span><br><span class=\"line\">    &quot;md5sum&quot;: &quot;49aa4bcc368baf63b70688393b13d49a&quot;, </span><br><span class=\"line\">    &quot;mode&quot;: &quot;0755&quot;, </span><br><span class=\"line\">    &quot;owner&quot;: &quot;root&quot;, </span><br><span class=\"line\">    &quot;size&quot;: 54, </span><br><span class=\"line\">    &quot;src&quot;: &quot;/root/.ansible/tmp/ansible-tmp-1624954413.43-1931-102617490762111/source&quot;, </span><br><span class=\"line\">    &quot;state&quot;: &quot;file&quot;, </span><br><span class=\"line\">    &quot;uid&quot;: 0</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 检查远程node节点上是否存在已经复制的文件</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible node -a <span class=\"string\">&quot;ls -l /tmp/date.sh&quot;</span></span></span><br><span class=\"line\">192.168.1.4 | CHANGED | rc=0 &gt;&gt;</span><br><span class=\"line\">-rwxr-xr-x 1 root root 54 Jun 29 16:13 /tmp/date.sh  # 存在，权限为755</span><br><span class=\"line\">192.168.1.3 | CHANGED | rc=0 &gt;&gt;</span><br><span class=\"line\">-rwxr-xr-x 1 root root 54 Jun 29 08:13 /tmp/date.sh</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>复制目录<ul>\n<li>src=/root/test/：目录后面带<code>/</code>的情况会只复制<code>test</code>目录中的文件，不复制<code>test</code>目录</li>\n<li>src=/root/test：复制<code>test</code>目录和<code>test</code>目录中的文件</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls <span class=\"built_in\">test</span>/</span></span><br><span class=\"line\">date.sh  passwd</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible node -m copy -a <span class=\"string\">&quot;src=/root/test dest=/tmp backup=yes owner=nobody group=root&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 复制/root/<span class=\"built_in\">test</span>目录到node节点上的/tmp目录下，并且设置属组和属主分别是root和nobody</span></span><br><span class=\"line\">192.168.1.4 | CHANGED =&gt; &#123;</span><br><span class=\"line\">    &quot;changed&quot;: true, </span><br><span class=\"line\">    &quot;dest&quot;: &quot;/tmp/&quot;, </span><br><span class=\"line\">    &quot;src&quot;: &quot;/root/test&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">192.168.1.3 | CHANGED =&gt; &#123;</span><br><span class=\"line\">    &quot;changed&quot;: true, </span><br><span class=\"line\">    &quot;dest&quot;: &quot;/tmp/&quot;, </span><br><span class=\"line\">    &quot;src&quot;: &quot;/root/test&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 目录的属组和属主</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible node -a <span class=\"string\">&quot;ls -l -d /tmp/test&quot;</span></span></span><br><span class=\"line\">192.168.1.3 | CHANGED | rc=0 &gt;&gt;</span><br><span class=\"line\">drwxr-xr-x 2 nobody root 35 Jun 29 08:21 /tmp/test</span><br><span class=\"line\">192.168.1.4 | CHANGED | rc=0 &gt;&gt;</span><br><span class=\"line\">drwxr-xr-x 2 nobody root 35 Jun 29 16:21 /tmp/test</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 目录中文件的属组和属主</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible node -a <span class=\"string\">&quot;ls -l /tmp/test&quot;</span></span></span><br><span class=\"line\">192.168.1.3 | CHANGED | rc=0 &gt;&gt;</span><br><span class=\"line\">total 8</span><br><span class=\"line\">-rw-r--r-- 1 nobody root  54 Jun 29 08:21 date.sh  # 属组和属主分别是root和nobody</span><br><span class=\"line\">-rw-r--r-- 1 nobody root 745 Jun 29 08:21 passwd</span><br><span class=\"line\">192.168.1.4 | CHANGED | rc=0 &gt;&gt;</span><br><span class=\"line\">total 8</span><br><span class=\"line\">-rw-r--r-- 1 nobody root  54 Jun 29 16:21 date.sh</span><br><span class=\"line\">-rw-r--r-- 1 nobody root 745 Jun 29 16:21 passwd</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>根据内容生成文件，相当于echo abc123 &gt; /home/scaven/123.txt</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible node -m copy -a <span class=\"string\">&#x27;content=&quot;hello world!&quot; dest=/tmp/456.txt&#x27;</span></span></span><br><span class=\"line\">192.168.1.4 | CHANGED =&gt; &#123;</span><br><span class=\"line\">    &quot;ansible_facts&quot;: &#123;</span><br><span class=\"line\">        &quot;discovered_interpreter_python&quot;: &quot;/usr/bin/python&quot;</span><br><span class=\"line\">    &#125;, </span><br><span class=\"line\">    &quot;changed&quot;: true, </span><br><span class=\"line\">    &quot;checksum&quot;: &quot;430ce34d020724ed75a196dfc2ad67c77772d169&quot;, </span><br><span class=\"line\">    &quot;dest&quot;: &quot;/tmp/456.txt&quot;, </span><br><span class=\"line\">    &quot;gid&quot;: 0, </span><br><span class=\"line\">    &quot;group&quot;: &quot;root&quot;, </span><br><span class=\"line\">    &quot;md5sum&quot;: &quot;fc3ff98e8c6a0d3087d515c0473f8677&quot;, </span><br><span class=\"line\">    &quot;mode&quot;: &quot;0644&quot;, </span><br><span class=\"line\">    &quot;owner&quot;: &quot;root&quot;, </span><br><span class=\"line\">    &quot;size&quot;: 12, </span><br><span class=\"line\">    &quot;src&quot;: &quot;/root/.ansible/tmp/ansible-tmp-1624955443.01-2627-173444630807556/source&quot;, </span><br><span class=\"line\">    &quot;state&quot;: &quot;file&quot;, </span><br><span class=\"line\">    &quot;uid&quot;: 0</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">···</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible node -a <span class=\"string\">&quot;cat  /tmp/456.txt&quot;</span></span></span><br><span class=\"line\">192.168.1.3 | CHANGED | rc=0 &gt;&gt;</span><br><span class=\"line\">hello world!</span><br><span class=\"line\">192.168.1.4 | CHANGED | rc=0 &gt;&gt;</span><br><span class=\"line\">hello world!</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-fetch\"><a href=\"#6-fetch\" class=\"headerlink\" title=\"6 fetch\"></a>6 fetch</h3><p>功能：从远程节点获取文件(只能是文件)到本地目录。默认会以主机清单中的主机名（或IP地址）为目录存放获取到的文件</p>\n<p>dest：目标目录</p>\n<p>src：源目录</p>\n<p>flat：表示是否去除目录层级结构，yes表示去除目录层级结构</p>\n<p>注意：不能使用通配符</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls /tmp/</span></span><br><span class=\"line\">ks-script-6pKh_p  yum.log</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible node -m fetch -a <span class=\"string\">&#x27;src=/tmp/456.txt dest=/tmp/&#x27;</span></span></span><br><span class=\"line\">192.168.1.4 | CHANGED =&gt; &#123;</span><br><span class=\"line\">    &quot;changed&quot;: true, </span><br><span class=\"line\">    &quot;checksum&quot;: &quot;430ce34d020724ed75a196dfc2ad67c77772d169&quot;, </span><br><span class=\"line\">    &quot;dest&quot;: &quot;/tmp/192.168.1.4/tmp/456.txt&quot;, </span><br><span class=\"line\">    &quot;md5sum&quot;: &quot;fc3ff98e8c6a0d3087d515c0473f8677&quot;, </span><br><span class=\"line\">    &quot;remote_checksum&quot;: &quot;430ce34d020724ed75a196dfc2ad67c77772d169&quot;, </span><br><span class=\"line\">    &quot;remote_md5sum&quot;: null</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">192.168.1.3 | CHANGED =&gt; &#123;</span><br><span class=\"line\">    &quot;changed&quot;: true, </span><br><span class=\"line\">    &quot;checksum&quot;: &quot;430ce34d020724ed75a196dfc2ad67c77772d169&quot;, </span><br><span class=\"line\">    &quot;dest&quot;: &quot;/tmp/192.168.1.3/tmp/456.txt&quot;, </span><br><span class=\"line\">    &quot;md5sum&quot;: &quot;fc3ff98e8c6a0d3087d515c0473f8677&quot;, </span><br><span class=\"line\">    &quot;remote_checksum&quot;: &quot;430ce34d020724ed75a196dfc2ad67c77772d169&quot;, </span><br><span class=\"line\">    &quot;remote_md5sum&quot;: null</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls /tmp/   <span class=\"comment\"># 默认会以IP地址新建目录存放文件</span></span></span><br><span class=\"line\">192.168.1.3  192.168.1.4  ks-script-6pKh_p  yum.log</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 如果源目录中层级结构较深，可可以使用flat=yes去除目录的层级结构</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible node -m fetch -a <span class=\"string\">&#x27;src=/tmp/456.txt dest=/tmp/ flat=yes&#x27;</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-file\"><a href=\"#7-file\" class=\"headerlink\" title=\"7 file\"></a>7 file</h3><p>功能：设置远程节点的文件的文件属性</p>\n<ul>\n<li><p>force: 在两种情况下会强制创建软连接，默认值为 no</p>\n<ul>\n<li>源文件不存在但之后会建立的情况下</li>\n<li>目标软连接已存在，需要先取消之前的软连，然后创建新的软链</li>\n</ul>\n</li>\n<li><p>group：定义文件的属组</p>\n</li>\n<li><p>mode：定义文件的权限</p>\n</li>\n<li><p>owner：定义文件的属主</p>\n</li>\n<li><p>path：必选项，定义文件的路径</p>\n</li>\n<li><p>recurse：递归设置文件的属性，只对目录生效（-R）</p>\n</li>\n<li><p>src：要被链接的源文件的属性，只应用于state=link的情况</p>\n</li>\n<li><p>dest：被链接到的路径，只应用与state=link的情况</p>\n</li>\n<li><p>state：</p>\n<ul>\n<li>directory：如果目录不存在创建目录</li>\n<li>file：即使文件不存在，也不会被创建</li>\n<li>link：创建软连接</li>\n<li>hard：创建硬链接</li>\n<li>touch：如果文件不存在，则会创建一个新的文件，如果文件存在，则会更新其最后修改时间</li>\n<li>absent：删除目录，文件或者取消链接文件，相当于rm -rf</li>\n</ul>\n</li>\n</ul>\n<p><strong>创建文件</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible node -m file -a <span class=\"string\">&quot;name=/tmp/hello.txt mode=777 state=touch&quot;</span></span></span><br></pre></td></tr></table></figure>\n\n<p><strong>删除新建的文件</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible node -m file -a <span class=\"string\">&quot;name=/tmp/hello.txt state=absent&quot;</span></span></span><br></pre></td></tr></table></figure>\n\n<p><strong>创建目录</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 创建普通目录</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible node -m file -a <span class=\"string\">&quot;name=/tmp/dir1 state=directory mode=744&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 创建递归目录</span> </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible node -m file -a <span class=\"string\">&quot;name=/tmp/dir1/dir2/dir3/dir4 state=directory recurse=yes mode=744&quot;</span></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>删除目录</strong>：跟删除文件一样</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible node -m file -a <span class=\"string\">&quot;name=/tmp/dir1 state=absent&quot;</span></span></span><br></pre></td></tr></table></figure>\n\n<p><strong>创建链接文件</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible node -m file -a <span class=\"string\">&#x27;src=/etc/passwd dest=/tmp/passwd state=link&#x27;</span></span></span><br></pre></td></tr></table></figure>\n\n<p><strong>删除链接文件</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible node -m file -a <span class=\"string\">&#x27;dest=/tmp/fstab state=absent&#x27;</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-hostname\"><a href=\"#8-hostname\" class=\"headerlink\" title=\"8 hostname\"></a>8 hostname</h3><p>功能：设置远程节点主机名</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible-doc -s hostname</span></span><br><span class=\"line\">- name: Manage hostname</span><br><span class=\"line\">  hostname:</span><br><span class=\"line\">      name:                  # (required) Name of the host</span><br><span class=\"line\">      use:                   # Which strategy to use to update the hostname. If not set we try to autodetect, but this can be problematic, specially with</span><br><span class=\"line\">                               containers as they can present misleading information.</span><br></pre></td></tr></table></figure>\n\n<p>修改主机名</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible 192.168.1.3 -m hostname -a <span class=\"string\">&quot;name=node1&quot;</span>    <span class=\"comment\"># 永久生效</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible 192.168.1.4 -m hostname -a <span class=\"string\">&quot;name=node2&quot;</span></span> </span><br></pre></td></tr></table></figure>\n\n<p>批量修改主机名：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cat /etc/ansible/hosts  <span class=\"comment\"># 可以通过将变量设置在inventory中，然后在命令行中引用变量</span></span></span><br><span class=\"line\">[own]</span><br><span class=\"line\">192.168.1.2 ansible_connect=local ansible_ssh_port=22 ansible_ssh_user=root ansible_ssh_pass=123456</span><br><span class=\"line\"></span><br><span class=\"line\">[node]</span><br><span class=\"line\">192.168.1.3 ansible_ssh_port=22 ansible_ssh_user=root ansible_ssh_pass=123456 hostname=web port=8080</span><br><span class=\"line\">192.168.1.4 ansible_ssh_port=22 ansible_ssh_user=root ansible_ssh_pass=123456 hostname=db port=3306</span><br><span class=\"line\"></span><br><span class=\"line\">[gp:children]   </span><br><span class=\"line\">own</span><br><span class=\"line\">node</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible node -m hostname -a <span class=\"string\">&#x27;name=&#123;&#123; hostname &#125;&#125;-&#123;&#123; port &#125;&#125;&#x27;</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible ndoe -a <span class=\"string\">&quot;hostname&quot;</span>  <span class=\"comment\"># 检查</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9-cron\"><a href=\"#9-cron\" class=\"headerlink\" title=\"9 cron\"></a>9 cron</h3><p>功能：管理计划任务</p>\n<ul>\n<li><p>backup: 对远程主机上的原计划内容修改之前做备份</p>\n</li>\n<li><p>cront_file: 如果指定该选项，则用该文件替换远程主机上的cron.d目录下的用户计划任务</p>\n</li>\n<li><p>day: 日(1-31,<em>,</em>/2,……)</p>\n</li>\n<li><p>hour: 小时(0-23,<em>,</em>/2,……)</p>\n</li>\n<li><p>minute: 分钟(0-59,<em>,</em>/2,……)</p>\n</li>\n<li><p>mouth: 月(1-12,<em>,</em>/2,……)</p>\n</li>\n<li><p>weekday: 周(0-7,*,……)</p>\n</li>\n<li><p>job: 要执行的任务，依赖于state=present</p>\n</li>\n<li><p>name: 该任务的描述，必选项，可通过name执行修改、删除等操作。</p>\n</li>\n<li><p>special_time：指定什么时候执行（被触发），参数：reboot，yearly，annually，monthly，weekly，daily，hourly。</p>\n</li>\n<li><p>state：确认该任务计划是创建还是删除 Present(启用) | Absent(停用)</p>\n</li>\n<li><p>user：以哪个用户的身份执行</p>\n</li>\n</ul>\n<p>案例：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> job里面写绝对路径，如有空格，需使用引号，建议每次都写name，以后好注释和删除</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible node -m cron -a <span class=\"string\">&quot;minute=* weekday=1,3,5 job=&#x27;/usr/bin/wall FBI warning&#x27; name=warnningcron&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 通过name注释定时任务</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible node -m cron -a <span class=\"string\">&quot;disabled=true job=&#x27;/usr/bin/wall FBI warning&#x27; name=warnningcron&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 通过name删除定时任务</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible node -m cron -a <span class=\"string\">&quot;job=&#x27;/usr/bin/wall FBI warning&#x27; name=warnningcron state=absent&quot;</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-yum\"><a href=\"#10-yum\" class=\"headerlink\" title=\"10 yum\"></a>10 yum</h3><p>功能：使用yum包管理器来管理软件包</p>\n<ul>\n<li><p>config_file：yum的配置文件</p>\n</li>\n<li><p>disable_gpg_check: 关闭gpg_check</p>\n</li>\n<li><p>disablerepo: 不启用某个源</p>\n</li>\n<li><p>enablerepo：启用某个源</p>\n</li>\n<li><p>list：列出repo源</p>\n</li>\n<li><p>name：软件包的名称，可以为一个url路径，或者本地一个rpm包的路径</p>\n</li>\n<li><p>state：状态，包括以下5个参数</p>\n<ul>\n<li>安装：present（默认） 、installed </li>\n<li>删除：absent、removed </li>\n<li>最新版：latest</li>\n</ul>\n</li>\n</ul>\n<p><strong>案例</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible node -m yum -a <span class=\"string\">&quot;name=tree,lrzsz state=latest&quot;</span>  <span class=\"comment\">#多个服务之间用逗号隔开</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible c -m yum -a <span class=\"string\">&quot;name=tree,lrzsz state=absent&quot;</span>    <span class=\"comment\">#多个服务之间用逗号隔开</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"11-yum-repository\"><a href=\"#11-yum-repository\" class=\"headerlink\" title=\"11 yum_repository\"></a>11 yum_repository</h3><p>功能：配置管理yum源</p>\n<ul>\n<li><p>reposdir：    repo文件存放目录</p>\n</li>\n<li><p>file：      repo文件名，默认为name的值</p>\n</li>\n<li><p>name:      唯一的repository ID</p>\n</li>\n<li><p>gpgkey：     设置gpgkey</p>\n</li>\n<li><p>gpgcheck:    设置gpg检查</p>\n</li>\n<li><p>enabled:     设置开启关闭</p>\n</li>\n<li><p>bandwidth：    控制带宽，0为无限</p>\n</li>\n<li><p>state：     状态（present，absent）</p>\n</li>\n<li><p>description：  描述信息</p>\n</li>\n<li><p>baseurl：yum源的访问路径</p>\n</li>\n</ul>\n<p><strong>案例</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 指定yum源文件的各个参数即可，会自动创建指定名称的文件，不用提前创建文件</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">  ansible 192.168.1.3 -m yum_repository -a <span class=\"string\">&#x27;state=present name=test enabled=yes gpgcheck=no description=&quot;yumrepo test&quot; baseurl=&quot;ftp://192.168.1.1/centos6.10&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible 192.168.1.3 -a <span class=\"string\">&quot;cat /etc/yum.repos.d/test.repo&quot;</span>   <span class=\"comment\"># 检查</span></span></span><br><span class=\"line\">192.168.1.3 | CHANGED | rc=0 &gt;&gt;</span><br><span class=\"line\">[test]</span><br><span class=\"line\">baseurl = ftp://192.168.1.1/centos6.10</span><br><span class=\"line\">enabled = 1</span><br><span class=\"line\">gpgcheck = 0</span><br><span class=\"line\">name = yumrepo test</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"12-service\"><a href=\"#12-service\" class=\"headerlink\" title=\"12 service\"></a>12 service</h3><p>功能：配置管理服务</p>\n<ul>\n<li><p>arguments: 给命令行提供一些选项</p>\n</li>\n<li><p>enable：是否开机启动 yes | no</p>\n</li>\n<li><p>name：服务名称</p>\n</li>\n<li><p>pattern：定义一个模式，如果通过status命令来查看服务的状态时，没有响应，就会通过ps指令在进程中根据该模式进行查找，如果匹配到，则认为该服务已经在运行，否则会认为未启动( ps aux | grep <code>pattern</code> )</p>\n</li>\n<li><p>runlevel：运行级别</p>\n</li>\n<li><p>sleep：如果执行了restarted，则在 stop 和 start 之间沉睡几秒钟</p>\n</li>\n<li><p>state：started、stopped、restarted和reloaded，其中started和stoped是幂等的，也就是说如果服务已经停止，那么运行stopped不会执行任何操作</p>\n</li>\n</ul>\n<p><strong>案例：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 启动httpd服务并设置开机自启动</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible 192.168.1.3 -m service -a <span class=\"string\">&quot;name=httpd state=started enabled=yes&quot;</span></span></span><br><span class=\"line\">192.168.1.3 | CHANGED =&gt; &#123;</span><br><span class=\"line\">    &quot;ansible_facts&quot;: &#123;</span><br><span class=\"line\">        &quot;discovered_interpreter_python&quot;: &quot;/usr/bin/python&quot;</span><br><span class=\"line\">    &#125;, </span><br><span class=\"line\">    &quot;changed&quot;: true, </span><br><span class=\"line\">    &quot;enabled&quot;: true, </span><br><span class=\"line\">    &quot;name&quot;: &quot;httpd&quot;, </span><br><span class=\"line\">    &quot;state&quot;: &quot;started&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible 192.168.1.3 -m service -a <span class=\"string\">&quot;name=httpd state=stopped enabled=no&quot;</span> <span class=\"comment\"># 关闭httpd服务并设置开机不启动</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"13-setup\"><a href=\"#13-setup\" class=\"headerlink\" title=\"13 setup\"></a>13 setup</h3><p>功能：收集关于远程主机的信息。</p>\n<p>在playbooks里经常会用到的一个参数gather_facts就与该模块相关</p>\n<ul>\n<li><p><code>--tree</code> :将所有主机的输出信息保存到/tmp/目录下，以/etc/ansible/hosts里的主机名或ip为文件名</p>\n</li>\n<li><p><code>filter</code>：过滤要显示的内容 </p>\n</li>\n</ul>\n<p>ansible的setup模块非常好用，常用信息如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible_devices：仅显示磁盘设备信息</span><br><span class=\"line\">ansible_distribution：显示是什么系统，例：centos,suse等</span><br><span class=\"line\">ansible_distribution_major_version：显示是系统主版本</span><br><span class=\"line\">ansible_distribution_version：仅显示系统版本</span><br><span class=\"line\">ansible_distribution_release：发行版名称</span><br><span class=\"line\">ansible_architecture： 系统架构</span><br><span class=\"line\">ansible_machine：显示系统类型，例：32位，还是64位</span><br><span class=\"line\">ansible_eth0：仅显示eth0的信息，网卡名称eth0根据具体环境而定</span><br><span class=\"line\">ansible_hostname：仅显示主机名</span><br><span class=\"line\">ansible_kernel：仅显示内核版本</span><br><span class=\"line\">ansible_lvm：显示lvm相关信息</span><br><span class=\"line\">ansible_memtotal_mb：显示系统总内存</span><br><span class=\"line\">ansible_memfree_mb：显示可用系统内存</span><br><span class=\"line\">ansible_memory_mb：详细显示内存情况</span><br><span class=\"line\">ansible_swaptotal_mb：显示总的swap内存</span><br><span class=\"line\">ansible_swapfree_mb：显示swap内存的可用内存</span><br><span class=\"line\">ansible_mounts：显示系统磁盘挂载情况</span><br><span class=\"line\">ansible_processor：显示cpu个数(具体显示每个cpu的型号)</span><br><span class=\"line\">ansible_processor_vcpus：显示cpu个数(只显示总的个数)</span><br><span class=\"line\">ansible_architecture： 系统架构信息</span><br><span class=\"line\">ansible_nodename： 节点名，即主机名称？</span><br><span class=\"line\">ansible_fqdn： FQDN名，即/etc/hosts文件中设置的名称</span><br><span class=\"line\">ansible_domain： 主机域名后缀</span><br><span class=\"line\">ansible_all_ipv4_addresses：所有的IPv4地址</span><br><span class=\"line\">ansible_all_ipv6_addresses：所有的IPv6地址</span><br><span class=\"line\">ansible_default_ipv4： 默认网关的网卡配置信息</span><br><span class=\"line\">ansible_dns：DNS设置信息</span><br><span class=\"line\">ansible_pkg_mgr： 软件包管理方式</span><br><span class=\"line\">ansible_service_mgr： 服务管理方式</span><br><span class=\"line\">ansible_user_id/shell/dir/gid/uid/gecos: 执行用户的用户名、shell、家目录、GID、UID、用户描述信息</span><br><span class=\"line\">ansible_os_family： 家族系列</span><br><span class=\"line\">ansible_cmdline： 内核启动参数</span><br><span class=\"line\">ansible_selinux： SElinux状态</span><br><span class=\"line\">ansible_env： 当前环境变量参数</span><br><span class=\"line\">ansible_date_time： 时间相关</span><br><span class=\"line\">ansible_python_version： python版本</span><br><span class=\"line\">ansible_device_links： 所有挂载的设备的UUID和卷标名</span><br><span class=\"line\">gather_subset：按子集收集信息，值有all, min, hardware, network, virtual, ohai, facter。不包含请使用！号，如，!network</span><br></pre></td></tr></table></figure>\n\n<p>案例：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible 192.168.1.4  -m setup -a <span class=\"string\">&#x27;filter=ansible_distribution_version&#x27;</span> --tree /root/</span></span><br><span class=\"line\">192.168.1.4 | SUCCESS =&gt; &#123;</span><br><span class=\"line\">    &quot;ansible_facts&quot;: &#123;</span><br><span class=\"line\">        &quot;ansible_distribution_version&quot;: &quot;7.6&quot;, </span><br><span class=\"line\">        &quot;discovered_interpreter_python&quot;: &quot;/usr/bin/python&quot;</span><br><span class=\"line\">    &#125;, </span><br><span class=\"line\">    &quot;changed&quot;: false</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls</span> </span><br><span class=\"line\">192.168.1.4  anaconda-ks.cfg  date.sh  test</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cat  192.168.1.4</span> </span><br><span class=\"line\">&#123;&quot;ansible_facts&quot;: &#123;&quot;ansible_distribution_version&quot;: &quot;7.6&quot;, &quot;discovered_interpreter_python&quot;: &quot;/usr/bin/python&quot;&#125;, &quot;changed&quot;: false&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible 192.168.1.4  -m setup -a <span class=\"string\">&quot;filter=ansible_cmdline&quot;</span>  <span class=\"comment\"># 查看内核启动参数</span></span></span><br><span class=\"line\">192.168.1.4 | SUCCESS =&gt; &#123;</span><br><span class=\"line\">    &quot;ansible_facts&quot;: &#123;</span><br><span class=\"line\">        &quot;ansible_cmdline&quot;: &#123;</span><br><span class=\"line\">            &quot;BOOT_IMAGE&quot;: &quot;/vmlinuz-3.10.0-957.el7.x86_64&quot;, </span><br><span class=\"line\">            &quot;LANG&quot;: &quot;en_US.UTF-8&quot;, </span><br><span class=\"line\">            &quot;crashkernel&quot;: &quot;auto&quot;, </span><br><span class=\"line\">            &quot;quiet&quot;: true, </span><br><span class=\"line\">            &quot;rd.lvm.lv&quot;: &quot;centos/swap&quot;, </span><br><span class=\"line\">            &quot;rhgb&quot;: true, </span><br><span class=\"line\">            &quot;ro&quot;: true, </span><br><span class=\"line\">            &quot;root&quot;: &quot;/dev/mapper/centos-root&quot;</span><br><span class=\"line\">        &#125;, </span><br><span class=\"line\">        &quot;discovered_interpreter_python&quot;: &quot;/usr/bin/python&quot;</span><br><span class=\"line\">    &#125;, </span><br><span class=\"line\">    &quot;changed&quot;: false</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看ansible_cmdline的信息，特别注意的是，这里是将ansible_cmdline的所有信息都显示出来了，跟grep有本质区别，不可混淆</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看python版本</span></span><br><span class=\"line\">[root@9bdfb9d93df9 ~]# ansible 192.168.1.3 -m setup -a &quot;filter=ansible_python_version&quot;</span><br><span class=\"line\">192.168.1.3 | SUCCESS =&gt; &#123;</span><br><span class=\"line\">    &quot;ansible_facts&quot;: &#123;</span><br><span class=\"line\">        &quot;ansible_python_version&quot;: &quot;2.6.6&quot;, </span><br><span class=\"line\">        &quot;discovered_interpreter_python&quot;: &quot;/usr/bin/python&quot;</span><br><span class=\"line\">    &#125;, </span><br><span class=\"line\">    &quot;changed&quot;: false</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14-user\"><a href=\"#14-user\" class=\"headerlink\" title=\"14 user\"></a>14 user</h3><p>功能：管理用户账号</p>\n<ul>\n<li><p>home：指定用户的家目录</p>\n</li>\n<li><p>createhome: 是否创建用户家目录 yes | no</p>\n</li>\n<li><p>groups：用户的附加组，跟group有本质区别</p>\n</li>\n<li><p>group：用户的属组</p>\n</li>\n<li><p>uid：用户的uid</p>\n</li>\n<li><p>password：用户的密码</p>\n</li>\n<li><p>name：用户的名称</p>\n</li>\n<li><p>system：是否是系统用户</p>\n</li>\n<li><p>remove：是否删除用户家目录，需跟state=absent一起使用</p>\n</li>\n<li><p>comment：填写用户的注释信息</p>\n</li>\n<li><p>state：具体的操作， 删除/添加， present | absent</p>\n</li>\n<li><p>shell： 指定用户的shell</p>\n</li>\n</ul>\n<p>案例：</p>\n<ul>\n<li>新建用户</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">在远程主机上创建用户qian，家目录在/tmp下，uid是700，用户组是root</span> </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible all -m user -a <span class=\"string\">&quot;createhome=yes name=qian uid=700 groups=root state=present&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible all -m <span class=\"built_in\">command</span> -a <span class=\"string\">&quot;id qian&quot;</span></span></span><br><span class=\"line\">192.168.1.3 | CHANGED | rc=0 &gt;&gt;</span><br><span class=\"line\">uid=700(qian) gid=700(qian) groups=700(qian),0(root)</span><br><span class=\"line\">192.168.1.4 | CHANGED | rc=0 &gt;&gt;</span><br><span class=\"line\">uid=700(qian) gid=1000(qian) groups=1000(qian),0(root)</span><br><span class=\"line\">192.168.1.2 | CHANGED | rc=0 &gt;&gt;</span><br><span class=\"line\">uid=700(qian) gid=1000(qian) groups=1000(qian),0(root)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除用户</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible all -m user -a <span class=\"string\">&quot;name=qian uid=700 groups=root remove=yes state=absent&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible all -m <span class=\"built_in\">command</span> -a <span class=\"string\">&quot;id qian&quot;</span></span></span><br><span class=\"line\">192.168.1.3 | FAILED | rc=1 &gt;&gt;</span><br><span class=\"line\">id: qian: No such usernon-zero return code</span><br><span class=\"line\">192.168.1.4 | FAILED | rc=1 &gt;&gt;</span><br><span class=\"line\">id: qian: no such usernon-zero return code</span><br><span class=\"line\">192.168.1.2 | FAILED | rc=1 &gt;&gt;</span><br><span class=\"line\">id: qian: no such usernon-zero return code</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15-group\"><a href=\"#15-group\" class=\"headerlink\" title=\"15 group\"></a>15 group</h3><p>功能：添加组或删除组，group模块请求的是groupadd, groupdel, groupmod 三个指令</p>\n<ul>\n<li>name：必须参数，用于指定要操作的组名称。 </li>\n<li>state：用于指定组的状态，两个值可选，present，absent，默认为 present，设置为absent 表示删除组。 </li>\n<li>gid：用于指定组的gid</li>\n</ul>\n<p>案例：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible node  -m group -a <span class=\"string\">&quot;name=test state=present gid=2000&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible node -m <span class=\"built_in\">command</span> -a <span class=\"string\">&quot;egrep  &#x27;^test&#x27; /etc/group&quot;</span></span></span><br><span class=\"line\">192.168.1.4 | CHANGED | rc=0 &gt;&gt;</span><br><span class=\"line\">test:x:2000:</span><br><span class=\"line\">192.168.1.3 | CHANGED | rc=0 &gt;&gt;</span><br><span class=\"line\">test:x:2000:</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"16-get-url\"><a href=\"#16-get-url\" class=\"headerlink\" title=\"16 get_url\"></a>16 get_url</h3><p>功能：从 HTTP, HTTPS, or FTP 下载文件</p>\n<ul>\n<li><p>checksum：  下载完成后进行checksum；格式：checksum=”sha256:D98291AC[…]B6DC7B97”.值有sha1, sha224, sha384, sha256, sha512, md5</p>\n</li>\n<li><p>timeout：   下载超时时间，默认10s</p>\n</li>\n<li><p>url：     下载的URL网址</p>\n</li>\n<li><p>url_password、url_username：主要用于需要用户名密码进行验证的情况</p>\n</li>\n<li><p>use_proxy：   是否使用代理，代理需事先在环境变量中定义</p>\n</li>\n<li><p>force：     yes目标存在时下载，no目标文件不存在时下载</p>\n</li>\n<li><p>backup:    创建一个包含时间戳信息的备份文件</p>\n</li>\n<li><p>mode:      指定文件权限</p>\n</li>\n</ul>\n<p>案例：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible node -m get_url -a <span class=\"string\">&quot;dest=/tmp/ url=https://www.mmonly.cc/mmtp/xgmn/299069.html&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible node -a <span class=\"string\">&quot;ls /tmp/299069.html&quot;</span></span></span><br><span class=\"line\">192.168.1.3 | CHANGED | rc=0 &gt;&gt;</span><br><span class=\"line\">/tmp/299069.html</span><br><span class=\"line\">192.168.1.4 | CHANGED | rc=0 &gt;&gt;</span><br><span class=\"line\">/tmp/299069.html</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"17-lineinfile\"><a href=\"#17-lineinfile\" class=\"headerlink\" title=\"17 lineinfile\"></a>17 lineinfile</h3><p>功能：替换一个文件中特定的行，或者使用一个反引用的正则表达式替换一个现有的行。只有找到的最后一行将被替换</p>\n<ul>\n<li>backup：创建一个包含时间戳信息的备份文件</li>\n<li>backrefs：为no时，如果没有匹配,则添加一行line。如果匹配了，则把匹配内容替被换为line内容；为yes时，如果没有匹配，则文件保持不变。如果匹配了，把匹配内容替被换为line内容。</li>\n<li>insertafter：配合state=present。该行将在指定正则表达式的最后一个匹配之后插入。一个特殊的价值是在EOF; EOF用于在文件的末尾插入行。如果指定的正则表达式没有匹配，则将使用EOF</li>\n<li>insertbefore：state=present。该行将在指定正则表达式的最后一个匹配之前插入。 BOF用于在文件的开头插入行。如果指定的正则表达式不匹配，则该行将被插入到文件的末尾。不能使用backrefs</li>\n<li>line: 指定要更改的内容，有符号和空格的文件内容，请用单引号</li>\n<li>user/group： 指定用户和用户组</li>\n<li>mode: 指定文件权限</li>\n<li>valiate：在保存sudoers文件前，验证语法，如果有错，执行时，会报出来，重新编辑playbook</li>\n<li>regexp: 正则表达式，有符号和空格的文件内容，请用单引号</li>\n</ul>\n<p>案例：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible 192.168.1.3 -a <span class=\"string\">&quot;cat /tmp/hello.txt&quot;</span>  <span class=\"comment\"># 三台机器上该文件内容都一样</span></span></span><br><span class=\"line\">192.168.1.3 | CHANGED | rc=0 &gt;&gt;</span><br><span class=\"line\">hello world</span><br><span class=\"line\">123</span><br><span class=\"line\">hhello world</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible all -m lineinfile -a <span class=\"string\">&quot;path=/tmp/hello.txt regexp=&#x27;^hello&#x27; line=&#x27;SELINUX=disabled&#x27;&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible 192.168.1.3 -a <span class=\"string\">&quot;cat /tmp/hello.txt&quot;</span></span></span><br><span class=\"line\">192.168.1.3 | CHANGED | rc=0 &gt;&gt;</span><br><span class=\"line\">SELINUX=disabled   # 被修改的行的行</span><br><span class=\"line\">123</span><br><span class=\"line\">hhello world</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>指定行插入</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 行前插入</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible all -m lineinfile -a <span class=\"string\">&quot;path=/tmp/hello.txt insertbefore=&#x27;SELINUX=disabled&#x27; line=&#x27;test before&#x27;&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible 192.168.1.3 -a <span class=\"string\">&quot;cat /tmp/hello.txt&quot;</span></span></span><br><span class=\"line\">192.168.1.3 | CHANGED | rc=0 &gt;&gt;</span><br><span class=\"line\">test before   # 新插入的行</span><br><span class=\"line\">SELINUX=disabled</span><br><span class=\"line\">123</span><br><span class=\"line\">hhello world</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 行后插入</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible all  -m lineinfile -a <span class=\"string\">&quot;path=/tmp/hello.txt insertafter=&#x27;SELINUX=disabled&#x27; line=&#x27;test after&#x27;&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible all -a <span class=\"string\">&quot;cat /tmp/hello.txt&quot;</span></span></span><br><span class=\"line\">192.168.1.3 | CHANGED | rc=0 &gt;&gt;</span><br><span class=\"line\">test before</span><br><span class=\"line\">SELINUX=disabled</span><br><span class=\"line\">test after   # 新插入的行</span><br><span class=\"line\">123</span><br><span class=\"line\">hhello world</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>修改文件内容的同时修改文件属组和属主</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible all -m user -a <span class=\"string\">&quot;createhome=yes name=qian uid=1001 groups=root state=present&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible 192.168.1.3 -a <span class=\"string\">&quot;ls -l /tmp/hello.txt&quot;</span></span></span><br><span class=\"line\">192.168.1.3 | CHANGED | rc=0 &gt;&gt;</span><br><span class=\"line\">-rw-r--r-- 1 root root 57 Jul  2 01:15 /tmp/hello.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible all -m lineinfile -a <span class=\"string\">&quot;path=/tmp/hello.txt state=present line=&#x27;111222&#x27; mode=755 owner=qian group=qian&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible all -a <span class=\"string\">&quot;ls -l /tmp/hello.txt&quot;</span></span></span><br><span class=\"line\">192.168.1.3 | CHANGED | rc=0 &gt;&gt;</span><br><span class=\"line\">-rwxr-xr-x 1 qian qian 64 Jul  2 01:20 /tmp/hello.txt  # 变化了用户和用户组</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible all -a <span class=\"string\">&quot;cat /tmp/hello.txt&quot;</span></span></span><br><span class=\"line\">192.168.1.3 | CHANGED | rc=0 &gt;&gt;</span><br><span class=\"line\">test before</span><br><span class=\"line\">SELINUX=disabled</span><br><span class=\"line\">test after</span><br><span class=\"line\">123</span><br><span class=\"line\">hhello world</span><br><span class=\"line\">111222   # 新插入的行</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"18-Unarchive\"><a href=\"#18-Unarchive\" class=\"headerlink\" title=\"18 Unarchive\"></a>18 Unarchive</h3><p>功能：解压缩，从ansible主控端寻找解压源文件，或客户端寻找解压源文件</p>\n<ul>\n<li>src：     源路径</li>\n<li>dest:     解压后的路径</li>\n<li>mode:    指定文件权限</li>\n<li>copy：默认为yes，当copy=yes，拷贝的文件是从ansible控制端复制到远程主机上的，如果设置为copy=no，那么会在远程主机上寻找src源文件</li>\n</ul>\n<p>案例：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible all -m unarchive -a <span class=\"string\">&quot;src=/mnt/ansible.tar dest=/mnt/ mode=755 copy=yes&quot;</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"19-replace\"><a href=\"#19-replace\" class=\"headerlink\" title=\"19 replace\"></a>19 replace</h3><p>功能：替换一个文件中符合匹配的所有行，或者使用一个反引用的正则表达式替换所有的行。</p>\n<ul>\n<li><p>path: 必须参数，指定要操作的文件</p>\n</li>\n<li><p>regexp: 必须参数，指定一个python正则表达式，文件中与正则匹配的字符串将会被替换</p>\n</li>\n<li><p>replace：指定最终要替换成的字符串 </p>\n</li>\n<li><p>backup： 操作前是否进行备份，yes|no</p>\n</li>\n<li><p>owner/group/mode: 指定文件的属主/属组/权限</p>\n</li>\n</ul>\n<p> 案例：</p>\n<ul>\n<li>替换指定字符串</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible 192.168.1.3 -a <span class=\"string\">&quot;ls -l /tmp/hello.txt&quot;</span></span></span><br><span class=\"line\">192.168.1.3 | CHANGED | rc=0 &gt;&gt;</span><br><span class=\"line\">-rwxr-xr-x 1 qian qian 64 Jul  2 01:20 /tmp/hello.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible 192.168.1.3 -a <span class=\"string\">&quot;cat  /tmp/hello.txt&quot;</span></span></span><br><span class=\"line\">192.168.1.3 | CHANGED | rc=0 &gt;&gt;</span><br><span class=\"line\">test before</span><br><span class=\"line\">SELINUX=disabled</span><br><span class=\"line\">test after</span><br><span class=\"line\">123</span><br><span class=\"line\">hhello world</span><br><span class=\"line\">111222</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible all -m replace -a <span class=\"string\">&quot;path=/tmp/hello.txt regexp=&#x27;^test&#x27; replace=&#x27;TEST&#x27; backup=yes owner=root group=root mode=666&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible 192.168.1.3 -a <span class=\"string\">&quot;ls -l /tmp/hello.txt&quot;</span></span></span><br><span class=\"line\">192.168.1.3 | CHANGED | rc=0 &gt;&gt;</span><br><span class=\"line\">-rw-rw-rw- 1 root root 92 Jul  2 09:27 /tmp/hello.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible 192.168.1.3 -a <span class=\"string\">&quot;cat  /tmp/hello.txt&quot;</span></span></span><br><span class=\"line\">192.168.1.3 | CHANGED | rc=0 &gt;&gt;</span><br><span class=\"line\">TEST before   # test被替换成了TEST</span><br><span class=\"line\">SELINUX=disabled</span><br><span class=\"line\">TEST after   # test被替换成了TEST</span><br><span class=\"line\">123</span><br><span class=\"line\">hhello world</span><br><span class=\"line\">111222</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>替换整行</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible all -m replace -a <span class=\"string\">&quot;path=/tmp/hello.txt regexp=&#x27;^1.*&#x27; replace=&#x27;0101&#x27;&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible 192.168.1.3 -a <span class=\"string\">&quot;cat  /tmp/hello.txt&quot;</span></span></span><br><span class=\"line\">192.168.1.3 | CHANGED | rc=0 &gt;&gt;</span><br><span class=\"line\">TEST before</span><br><span class=\"line\">SELINUX=disabled</span><br><span class=\"line\">TEST after</span><br><span class=\"line\">0101</span><br><span class=\"line\">hhello world</span><br><span class=\"line\">0101</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意替换字符串和替换整行的不同写法</p>\n</blockquote>\n<h3 id=\"20-debug\"><a href=\"#20-debug\" class=\"headerlink\" title=\"20 debug\"></a>20 debug</h3><ul>\n<li>输出指定字符串到标准输出，常用于调试</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible all -m debug -a &quot;msg=123&quot;</span><br><span class=\"line\">192.168.1.2 | SUCCESS =&gt; &#123;</span><br><span class=\"line\">    &quot;msg&quot;: &quot;123&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">192.168.1.3 | SUCCESS =&gt; &#123;</span><br><span class=\"line\">    &quot;msg&quot;: &quot;123&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">192.168.1.4 | SUCCESS =&gt; &#123;</span><br><span class=\"line\">    &quot;msg&quot;: &quot;123&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","comments":true,"permalink":"https://qingdalf.github.io/2021-05/ansibleModuls/","categories":[{"name":"DevOps","slug":"DevOps","permalink":"https://qingdalf.github.io/categories/DevOps/"}],"tags":[]},{"title":"ansible基础","date":"2021-05-25T04:52:46.000Z","path":"2021-05/ansibleBase/","content":"<h2 id=\"一、走进ansible\"><a href=\"#一、走进ansible\" class=\"headerlink\" title=\"一、走进ansible\"></a>一、走进ansible</h2><h3 id=\"1-ansible的发展史\"><a href=\"#1-ansible的发展史\" class=\"headerlink\" title=\"1 ansible的发展史\"></a>1 ansible的发展史</h3><p>​        作者：Michael DeHaan（同时也是Cobbler与Func的作者）</p>\n<p>​        2012年3月9日，发布0.0.1版本，2015年10月17日被RedHat斥资1.5亿元收购，目前已经属于IBM(IBM于2019年耗资340亿美元完成对红帽的收购)，ansible已经分为社区版和商业版(如图形化界面功能)</p>\n <span id=\"more\"></span>\n<p>​        官网：<a href=\"https://www.ansible.com/\">https://www.ansible.com/</a></p>\n<p>​        官方文档：<a href=\"https://docs.ansible.com/\">https://docs.ansible.com</a></p>\n<h3 id=\"2-ansible特性：\"><a href=\"#2-ansible特性：\" class=\"headerlink\" title=\"2 ansible特性：\"></a>2 ansible特性：</h3><ul>\n<li><p>模块化：调用特定的模块，完成特定任务</p>\n</li>\n<li><p>有Paramiko(python对ssh的实现)，PyYAML，Jinja2（模板语言）三个关键模块</p>\n</li>\n<li><p>基于Python语言实现，支持自定义模块，可使用任何编程语言写模块</p>\n</li>\n<li><p>部署简单，基于python和SSH(默认已安装)，agentless，无需代理，不依赖PKI（无需ssl）</p>\n</li>\n<li><p>安全，基于OpenSSH通信(1.3及之后的版本，1.2 及之前使用 paramiko通信)</p>\n</li>\n<li><p>支持playbook编排任务，YAML格式，编排任务，支持丰富的数据结构</p>\n</li>\n<li><p>幂等性：任务执行1遍和执行n遍效果一样，不因重复执行带来意外情况</p>\n</li>\n<li><p>较强大的多层解决方案</p>\n</li>\n</ul>\n<h3 id=\"3-ansible的架构：\"><a href=\"#3-ansible的架构：\" class=\"headerlink\" title=\"3 ansible的架构：\"></a>3 ansible的架构：</h3><p>​        组合inventory、API、Modules(分为官方内置模块(core modules)和第三方用户自定义模块(Custom modules))、Plugins(不常用)</p>\n<p><img src=\"./image-20210326124446469.png\" alt=\"image-20210326124446469\"></p>\n<p>ansible命令执行来源：</p>\n<ul>\n<li>user普通用户</li>\n<li>playbooks，剧本任务(任务集)</li>\n<li>CMDB(配置管理数据库) API调用</li>\n<li>public/private cloud  API调用</li>\n<li>user–&gt;ansible playbook–&gt;ansible</li>\n</ul>\n<p>注意事项：</p>\n<ul>\n<li>执行ansible的主机一般被称为管理端、主控端、中控、master等</li>\n<li>硬性要求：主控端python版本需要2.6或以上</li>\n<li>被控端python版本小于2.4，需要安装python-simplejson</li>\n<li>被控端如开启selinux，需要安装libselinux-python</li>\n<li>windows不能作为主控端，只能作为被控端</li>\n</ul>\n<h2 id=\"二、ansible安装和入门\"><a href=\"#二、ansible安装和入门\" class=\"headerlink\" title=\"二、ansible安装和入门\"></a>二、ansible安装和入门</h2><h3 id=\"1安装方式：\"><a href=\"#1安装方式：\" class=\"headerlink\" title=\"1安装方式：\"></a>1安装方式：</h3><p>常用安装方法可参考文档：<a href=\"http://www.ansible.com.cn/docs/intro_installation.html#githubansible\">http://www.ansible.com.cn/docs/intro_installation.html#githubansible</a></p>\n<h4 id=\"1-1-yum方式的安装\"><a href=\"#1-1-yum方式的安装\" class=\"headerlink\" title=\"1.1 yum方式的安装\"></a>1.1 yum方式的安装</h4><ul>\n<li>通过CentOS自带的yum源安装，ansilbe被红帽收购后(2019年 7月 9日,红帽被IBM收购，现在ansible属于IBM)，ansible的源被集成到了yum源中</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum search ansible</span></span><br><span class=\"line\">Loaded plugins: fastestmirror</span><br><span class=\"line\">Loading mirror speeds from cached hostfile</span><br><span class=\"line\"> * base: ftp.sjtu.edu.cn</span><br><span class=\"line\"> * extras: ftp.sjtu.edu.cn</span><br><span class=\"line\"> * updates: ftp.sjtu.edu.cn</span><br><span class=\"line\">======================================================================== N/S matched: ansible =========================================================================</span><br><span class=\"line\">centos-release-ansible-27.noarch : Ansible 2.7 packages from the CentOS ConfigManagement SIG repository</span><br><span class=\"line\">centos-release-ansible-28.noarch : Ansible 2.8 packages from the CentOS ConfigManagement SIG repository</span><br><span class=\"line\">centos-release-ansible-29.noarch : Ansible 2.9 packages from the CentOS ConfigManagement SIG repository</span><br><span class=\"line\">centos-release-ansible26.noarch : Ansible 2.6 packages from the CentOS ConfigManagement SIG repository</span><br><span class=\"line\"></span><br><span class=\"line\">  Name and summary matches only, use &quot;search all&quot; for everything.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum -y install centos-release-ansible-29.noarch</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ll  /etc/yum.repos.d/CentOS-SIG-ansible-29.repo</span> </span><br><span class=\"line\">-rw-r--r-- 1 root root 1192 Mar 31  2020 /etc/yum.repos.d/CentOS-SIG-ansible-29.repo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum -y install ansible</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum info ansible</span></span><br><span class=\"line\">Loaded plugins: fastestmirror</span><br><span class=\"line\">Loading mirror speeds from cached hostfile</span><br><span class=\"line\"> * base: ftp.sjtu.edu.cn</span><br><span class=\"line\"> * centos-ansible-29: ftp.sjtu.edu.cn</span><br><span class=\"line\"> * extras: ftp.sjtu.edu.cn</span><br><span class=\"line\"> * updates: ftp.sjtu.edu.cn</span><br><span class=\"line\">Installed Packages</span><br><span class=\"line\">Name        : ansible</span><br><span class=\"line\">Arch        : noarch</span><br><span class=\"line\">Version     : 2.9.18</span><br><span class=\"line\">Release     : 1.el7</span><br><span class=\"line\">Size        : 103 M</span><br><span class=\"line\">Repo        : installed</span><br><span class=\"line\">From repo   : centos-ansible-29   </span><br><span class=\"line\">Summary     : SSH-based configuration management, deployment, and task execution system</span><br><span class=\"line\">URL         : http://ansible.com</span><br><span class=\"line\">License     : GPLv3+</span><br><span class=\"line\">Description : Ansible is a radically simple model-driven configuration management,</span><br><span class=\"line\">            : multi-node deployment, and remote task execution system. Ansible works</span><br><span class=\"line\">            : over SSH and does not require any software or daemons to be installed</span><br><span class=\"line\">            : on remote nodes. Extension modules can be written in any language and</span><br><span class=\"line\">            : are transferred to managed machines automatically.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible --version   <span class=\"comment\"># 安装结果验证</span></span></span><br><span class=\"line\">ansible 2.9.18</span><br><span class=\"line\">  config file = /etc/ansible/ansible.cfg   # 配置文件</span><br><span class=\"line\">  configured module search path = [u&#x27;/root/.ansible/plugins/modules&#x27;, u&#x27;/usr/share/ansible/plugins/modules&#x27;]</span><br><span class=\"line\">  ansible python module location = /usr/lib/python2.7/site-packages/ansible  # ansible的python模块位置</span><br><span class=\"line\">  executable location = /usr/bin/ansible  # 二进制文件</span><br><span class=\"line\">  python version = 2.7.5 (default, Oct 30 2018, 23:45:53) [GCC 4.8.5 20150623 (Red Hat 4.8.5-36)]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>通过epel源安装</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum -y install epel-release</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum info ansible</span></span><br><span class=\"line\">Loaded plugins: fastestmirror</span><br><span class=\"line\">Loading mirror speeds from cached hostfile</span><br><span class=\"line\"> * base: mirrors.tuna.tsinghua.edu.cn</span><br><span class=\"line\"> * epel: mirror.init7.net</span><br><span class=\"line\"> * extras: mirrors.tuna.tsinghua.edu.cn</span><br><span class=\"line\"> * updates: mirrors.tuna.tsinghua.edu.cn</span><br><span class=\"line\">Available Packages</span><br><span class=\"line\">Name        : ansible</span><br><span class=\"line\">Arch        : noarch</span><br><span class=\"line\">Version     : 2.9.18</span><br><span class=\"line\">Release     : 1.el7</span><br><span class=\"line\">Size        : 17 M</span><br><span class=\"line\">Repo        : epel/x86_64</span><br><span class=\"line\">Summary     : SSH-based configuration management, deployment, and task execution system</span><br><span class=\"line\">URL         : http://ansible.com</span><br><span class=\"line\">License     : GPLv3+</span><br><span class=\"line\">Description : Ansible is a radically simple model-driven configuration management,</span><br><span class=\"line\">            : multi-node deployment, and remote task execution system. Ansible works</span><br><span class=\"line\">            : over SSH and does not require any software or daemons to be installed</span><br><span class=\"line\">            : on remote nodes. Extension modules can be written in any language and</span><br><span class=\"line\">            : are transferred to managed machines automatically.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum -y install ansible</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible --version    <span class=\"comment\"># 验证安装情况</span></span></span><br><span class=\"line\">ansible 2.9.18</span><br><span class=\"line\">  config file = /etc/ansible/ansible.cfg   # 配置文件</span><br><span class=\"line\">  configured module search path = [u&#x27;/root/.ansible/plugins/modules&#x27;, u&#x27;/usr/share/ansible/plugins/modules&#x27;]</span><br><span class=\"line\">  ansible python module location = /usr/lib/python2.7/site-packages/ansible  # ansible的python模块位置</span><br><span class=\"line\">  executable location = /usr/bin/ansible  # 二进制文件</span><br><span class=\"line\">  python version = 2.7.5 (default, Oct 30 2018, 23:45:53) [GCC 4.8.5 20150623 (Red Hat 4.8.5-36)]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-2-pip安装\"><a href=\"#1-2-pip安装\" class=\"headerlink\" title=\"1.2 pip安装\"></a>1.2 pip安装</h4><p>​        python安装包搜索下载网址：<a href=\"https://pypi.org/\">https://pypi.org/</a></p>\n<p><img src=\"./image-20210514110746040.png\" alt=\"image-20210514110746040\"></p>\n<h5 id=\"1-2-1-外网安装ansible\"><a href=\"#1-2-1-外网安装ansible\" class=\"headerlink\" title=\"1.2.1 外网安装ansible\"></a>1.2.1 外网安装ansible</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 如果没有安装pip，请首先安装pip</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> python get-pip.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> pip install ansible</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"1-2-2-内网安装ansible\"><a href=\"#1-2-2-内网安装ansible\" class=\"headerlink\" title=\"1.2.2 内网安装ansible\"></a>1.2.2 内网安装ansible</h5><ul>\n<li>上传依赖包到内网服务器</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ll /root/ansible</span></span><br><span class=\"line\">total 11924</span><br><span class=\"line\">-rw-r--r-- 1 root root 6039597 May 14 12:11 ansible-base-2.10.9.tar.gz</span><br><span class=\"line\">-rw-r--r-- 1 root root  401244 May 16 10:51 cffi-1.14.5-cp36-cp36m-manylinux1_x86_64.whl</span><br><span class=\"line\">-rw-r--r-- 1 root root 3181242 May 16 10:42 cryptography-3.4.7-cp36-abi3-manylinux2014_x86_64.whl</span><br><span class=\"line\">-rw-r--r-- 1 root root  133357 May 16 10:39 Jinja2-3.0.0-py3-none-any.whl</span><br><span class=\"line\">-rw-r--r-- 1 root root   30194 May 16 10:53 MarkupSafe-2.0.0-cp36-cp36m-manylinux2010_x86_64.whl</span><br><span class=\"line\">-rw-r--r-- 1 root root   40870 May 16 10:49 packaging-20.9-py2.py3-none-any.whl</span><br><span class=\"line\">-rw-r--r-- 1 root root  112041 May 16 10:51 pycparser-2.20-py2.py3-none-any.whl</span><br><span class=\"line\">-rw-r--r-- 1 root root   67842 May 16 10:53 pyparsing-2.4.7-py2.py3-none-any.whl</span><br><span class=\"line\">-rw-r--r-- 1 root root  640847 May 16 10:40 PyYAML-5.4.1-cp36-cp36m-manylinux1_x86_64.whl</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ll /root/pipupgrade</span></span><br><span class=\"line\">-rw-r--r-- 1 root root 1547644 May 16 10:56 pip-21.1.1-py3-none-any.whl</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>安装python3</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装依赖并将python3.6上传至内网服务器</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel libffi-devel gcc gcc-c++</span> </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> tar xf Python-3.6.8.tar.xz</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">cd</span> Python-3.6.8</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ./configure --prefix=/usr/<span class=\"built_in\">local</span>/python3</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> make &amp;&amp; make install</span> </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> PATH=<span class=\"variable\">$PATH</span>:/usr/<span class=\"built_in\">local</span>/python3/bin</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">echo</span> <span class=\"variable\">$PATH</span></span></span><br><span class=\"line\">/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin:/usr/local/python3/bin</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> pip3 --version</span></span><br><span class=\"line\">pip 18.1 from /usr/local/python3/lib/python3.6/site-packages/pip (python 3.6)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 升级pip版本</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">cd</span> /root/pipupgrade</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> python3 -m pip install --upgrade pip-21.1.1-py3-none-any.whl   <span class=\"comment\"># 不升级新版pip，会安装ansible依赖包失败</span></span></span><br><span class=\"line\">Processing ./pip-21.1.1-py3-none-any.whl</span><br><span class=\"line\">Installing collected packages: pip</span><br><span class=\"line\">  Found existing installation: pip 18.1</span><br><span class=\"line\">    Uninstalling pip-18.1:</span><br><span class=\"line\">      Successfully uninstalled pip-18.1</span><br><span class=\"line\">Successfully installed pip-21.1.1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> pip3 --version</span></span><br><span class=\"line\">pip 21.1.1 from /usr/local/python3/lib/python3.6/site-packages/pip (python 3.6)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>pip安装ansible</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> pip3 install ./*.whl   <span class=\"comment\"># 安装依赖软件</span></span></span><br><span class=\"line\">Processing ./cffi-1.14.5-cp36-cp36m-manylinux1_x86_64.whl</span><br><span class=\"line\">Processing ./cryptography-3.4.7-cp36-abi3-manylinux2014_x86_64.whl</span><br><span class=\"line\">Processing ./Jinja2-3.0.0-py3-none-any.whl</span><br><span class=\"line\">Processing ./MarkupSafe-2.0.0-cp36-cp36m-manylinux2010_x86_64.whl</span><br><span class=\"line\">Processing ./packaging-20.9-py2.py3-none-any.whl</span><br><span class=\"line\">Processing ./pycparser-2.20-py2.py3-none-any.whl</span><br><span class=\"line\">Processing ./pyparsing-2.4.7-py2.py3-none-any.whl</span><br><span class=\"line\">Processing ./PyYAML-5.4.1-cp36-cp36m-manylinux1_x86_64.whl</span><br><span class=\"line\">Installing collected packages: pycparser, pyparsing, MarkupSafe, cffi, PyYAML, packaging, Jinja2, cryptography</span><br><span class=\"line\">Successfully installed Jinja2-3.0.0 MarkupSafe-2.0.0 PyYAML-5.4.1 cffi-1.14.5 cryptography-3.4.7 packaging-20.9 pycparser-2.20 pyparsing-2.4.7</span><br><span class=\"line\">WARNING: Running pip as root will break packages and permissions. You should install packages reliably by using venv: https://pip.pypa.io/warnings/venv</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> pip3 install ansible-base-2.10.9.tar.gz  <span class=\"comment\"># 安装ansible</span></span></span><br><span class=\"line\">Processing ./ansible-base-2.10.9.tar.gz</span><br><span class=\"line\">Requirement already satisfied: jinja2 in /usr/local/python3/lib/python3.6/site-packages (from ansible-base==2.10.9) (3.0.0)</span><br><span class=\"line\">Requirement already satisfied: PyYAML in /usr/local/python3/lib/python3.6/site-packages (from ansible-base==2.10.9) (5.4.1)</span><br><span class=\"line\">Requirement already satisfied: cryptography in /usr/local/python3/lib/python3.6/site-packages (from ansible-base==2.10.9) (3.4.7)</span><br><span class=\"line\">Requirement already satisfied: packaging in /usr/local/python3/lib/python3.6/site-packages (from ansible-base==2.10.9) (20.9)</span><br><span class=\"line\">Requirement already satisfied: cffi&gt;=1.12 in /usr/local/python3/lib/python3.6/site-packages (from cryptography-&gt;ansible-base==2.10.9) (1.14.5)</span><br><span class=\"line\">Requirement already satisfied: pycparser in /usr/local/python3/lib/python3.6/site-packages (from cffi&gt;=1.12-&gt;cryptography-&gt;ansible-base==2.10.9) (2.20)</span><br><span class=\"line\">Requirement already satisfied: MarkupSafe&gt;=2.0.0rc2 in /usr/local/python3/lib/python3.6/site-packages (from jinja2-&gt;ansible-base==2.10.9) (2.0.0)</span><br><span class=\"line\">Requirement already satisfied: pyparsing&gt;=2.0.2 in /usr/local/python3/lib/python3.6/site-packages (from packaging-&gt;ansible-base==2.10.9) (2.4.7)</span><br><span class=\"line\">Using legacy &#x27;setup.py install&#x27; for ansible-base, since package &#x27;wheel&#x27; is not installed.</span><br><span class=\"line\">Installing collected packages: ansible-base</span><br><span class=\"line\">    Running setup.py install for ansible-base ... done</span><br><span class=\"line\">Successfully installed ansible-base-2.10.9</span><br><span class=\"line\">WARNING: Running pip as root will break packages and permissions. You should install packages reliably by using venv: https://pip.pypa.io/warnings/venv</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible --version</span></span><br><span class=\"line\">ansible 2.10.9    # 版本信息</span><br><span class=\"line\">  config file = None  # 通过python安装，ansible没有配置文件</span><br><span class=\"line\">  configured module search path = [&#x27;/root/.ansible/plugins/modules&#x27;, &#x27;/usr/share/ansible/plugins/modules&#x27;]</span><br><span class=\"line\">  ansible python module location = /usr/local/python3/lib/python3.6/site-packages/ansible</span><br><span class=\"line\">  executable location = /usr/local/python3/bin/ansible  # 二进制文件位置</span><br><span class=\"line\">  python version = 3.6.8 (default, May 16 2021, 12:00:08) [GCC 4.8.5 20150623 (Red Hat 4.8.5-36)]</span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\"> 使用的python版本</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意，通过pip安装的ansible版本没有配置文件。</p>\n</blockquote>\n<h3 id=\"2-Ansible-配置文件解读\"><a href=\"#2-Ansible-配置文件解读\" class=\"headerlink\" title=\"2.Ansible 配置文件解读\"></a>2.Ansible 配置文件解读</h3><p>ansible主要文件：</p>\n<table>\n<thead>\n<tr>\n<th>配置文件或指令</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>/etc/ansible/ansible.cfg</td>\n<td>主配置文件，配置ansible工作特性</td>\n</tr>\n<tr>\n<td>/etc/ansible/hosts</td>\n<td>主机清单</td>\n</tr>\n<tr>\n<td>/etc/ansible/roles/</td>\n<td>存放角色的目录</td>\n</tr>\n<tr>\n<td>/usr/bin/ansible</td>\n<td>主程序，临时命令执行工具</td>\n</tr>\n<tr>\n<td>/usr/bin/ansible-doc</td>\n<td>查看配置文档，模块功能查看工具</td>\n</tr>\n<tr>\n<td>/usr/bin/ansible-galaxy</td>\n<td>下载/上传优秀代码或Roles模块的官网平台</td>\n</tr>\n<tr>\n<td>/usr/bin/ansible-playbook</td>\n<td>定制自动化任务，编排剧本工具</td>\n</tr>\n<tr>\n<td>/usr/bin/ansible-pull</td>\n<td>远程执行命令的工具</td>\n</tr>\n<tr>\n<td>/usr/bin/ansible-vault</td>\n<td>文件加密工具</td>\n</tr>\n<tr>\n<td>/usr/bin/ansible-console</td>\n<td>基于Console界面与用户交互的执行工具</td>\n</tr>\n</tbody></table>\n<h4 id=\"2-1-Ansible查找Ansible-cfg-文件遵循以下顺序：\"><a href=\"#2-1-Ansible查找Ansible-cfg-文件遵循以下顺序：\" class=\"headerlink\" title=\"2.1 Ansible查找Ansible.cfg 文件遵循以下顺序：\"></a>2.1 Ansible查找Ansible.cfg 文件遵循以下顺序：</h4><ul>\n<li>ANSIBLE_CONFIG环境变量指定的配置文件</li>\n<li>当前目录下的ansible.cfg文件</li>\n<li>当前用户home目录下的.ansible.cfg文件</li>\n<li>Ansible默认的/etc/ansible/ansible.cfg文件</li>\n</ul>\n<h4 id=\"2-2-Ansible-配置文件详解：\"><a href=\"#2-2-Ansible-配置文件详解：\" class=\"headerlink\" title=\"2.2 Ansible 配置文件详解：\"></a>2.2 <strong>Ansible</strong> <strong>配置文件详解：</strong></h4><p><strong>inventory</strong>：指定inventory文件的路径，默认是/etc/ansible/hosts</p>\n<p><strong>remote_user</strong>：SSH连接时使用的用户名</p>\n<p><strong>remote_port</strong>：SSH连接时使用的端口号</p>\n<p><strong>private_key_file</strong>：SSH连接时使用的私钥文件</p>\n<p><strong>roles_path</strong>：查找roles的路径，可以指定多个查找路径，多个路径之间用冒号分隔</p>\n<p><strong>log_path</strong>：Ansible的日志文件路径</p>\n<p><strong>host_key_checking</strong>：类似于ssh命令中的StrictHostKeyChecking选项，当等于False时，不检查远程主机是否存在于Konw_hosts文件中</p>\n<p><strong>forks</strong>：并行进程的数量</p>\n<p><strong>gathering</strong>：控制收集Facts变量的策略</p>\n<p><img src=\"./clip_image002.png\" alt=\"img\"></p>\n<p>权限提升相关：</p>\n<ul>\n<li><p><strong>become</strong>：是否进行权限提升</p>\n</li>\n<li><p><strong>become_method</strong>：权限提升的方式，默认为sudo</p>\n</li>\n<li><p><strong>become_user</strong>：提升为哪个用户的权限，默认为root</p>\n</li>\n<li><p><strong>become_ask_pass</strong>：默认为False，表示权限提升时不需要密码(设置为true时，手动输入密码，或者配置ansible_become_pass变量)</p>\n</li>\n</ul>\n<p><img src=\"./clip_image004.jpg\" alt=\"img\"></p>\n<h3 id=\"3-主机清单Inventory文件\"><a href=\"#3-主机清单Inventory文件\" class=\"headerlink\" title=\"3.主机清单Inventory文件\"></a>3.主机清单Inventory文件</h3><p>​        Ansible必须通过Inventory来管理主机。Ansible可同时操作属于一个组的多台主机，组和主机之间的关系通过inventory文件配置。</p>\n<h4 id=\"3-1-主机和主机组\"><a href=\"#3-1-主机和主机组\" class=\"headerlink\" title=\"3.1 主机和主机组\"></a>3.1 主机和主机组</h4><p>​        默认情况下，主机清单文件<code>/etc/ansible/hosts</code>中已经给出了语法提示，可以按照文件提示编写即可，一般情况下，可以分为以下几种情况</p>\n<h5 id=\"3-1-1-主机\"><a href=\"#3-1-1-主机\" class=\"headerlink\" title=\"3.1.1 主机\"></a>3.1.1 主机</h5><p>​        一般情况下，不建议使用该方式，应该对主机进行分组，再通过ansible对特定的组进行操作。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 1.域名或主机名，需要做解析</span></span><br><span class=\"line\">blue.example.com</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 2.IP地址</span></span><br><span class=\"line\">192.168.100.1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 3.支持正则表达式</span></span><br><span class=\"line\">192.168.[10:110]   # 表示从192.168.10-192.168.110之间的所有IP地址</span><br><span class=\"line\">blue[01:10].example.com  # 表示blue01.example.com、blue02.example.com···blue10.example.com</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-1-2-主机组\"><a href=\"#3-1-2-主机组\" class=\"headerlink\" title=\"3.1.2 主机组\"></a>3.1.2 主机组</h5><p>​        将主机分组之后，就可以直接对组中的所有主机进行操作。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[webservers]</span><br><span class=\"line\">alpha.example.org   # 一个组可以包含不定数个主机</span><br><span class=\"line\">192.168.1.110</span><br><span class=\"line\"></span><br><span class=\"line\">[dbservers]</span><br><span class=\"line\">db01.intranet.mydomain.net</span><br><span class=\"line\">10.25.1.56</span><br><span class=\"line\">192.168.1.110    # 同一个IP地址(主机)可以属于多个组</span><br><span class=\"line\"></span><br><span class=\"line\">[gp:children]   # 嵌套组，表示该组中包含下面的多个组</span><br><span class=\"line\">webservers      # 组名1</span><br><span class=\"line\">dbservers       # 组名2</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-1-3-隐藏组–all\"><a href=\"#3-1-3-隐藏组–all\" class=\"headerlink\" title=\"3.1.3 隐藏组–all\"></a>3.1.3 隐藏组–all</h5><p>​        最后还有一个隐藏的分组，那就是all，代表全部主机(组)，这个是隐式的，不需要写出来的。</p>\n<h4 id=\"3-2-Inventory-参数说明\"><a href=\"#3-2-Inventory-参数说明\" class=\"headerlink\" title=\"3.2 Inventory 参数说明\"></a>3.2 Inventory 参数说明</h4><ul>\n<li><strong>ansible_ssh_host</strong>：将要连接的远程主机名</li>\n<li><strong>ansible_ssh_port：</strong>通过ssh远程登陆的端口号，如果多台主机端口不一致，如192.168.1.18:10022、192.168.1.18:1033</li>\n<li><strong>ansible_ssh_user</strong>：通过ssh远程登陆的用户名</li>\n<li><strong>ansible_ssh_pass</strong>：通过ssh登陆远程主机的密码(不安全，建议使用–ask-pass或SSH 密钥)</li>\n<li><strong>ansible_sudo_pass</strong>：sudo密码(不安全，建议使用 –ask-sudo-pass)</li>\n<li><strong>ansible_connection</strong>：与主机的连接类型，比如local、ssh或者paramiko.</li>\n<li><strong>ansible_ssh_private_key_file</strong>：ssh使用的私钥文件.</li>\n<li><strong>ansible_shell_type</strong>：目标系统的shell类型，默认情况下命令的执行使用 ‘sh’ 语法，可设置为 ‘csh’ 或 ‘fish’.</li>\n<li><strong>ansible_python_interpreter</strong>：目标主机的python路径，适用于的情况: 系统中有多个Python，或者命令路径不是”/usr/bin/python”，比如*BSD， 或者/usr/bin/python不是2.X版本的 Python.,我们不使用”/usr/bin/env”机制，因为这要求远程用户的路径设置正确，且要求”python”可执行程序名不可为 python以外的名字(实际有可能名为python26、python3等)。与ansible_python_interpreter的工作方式相同，可设定如 ruby 或 perl 的路径….</li>\n</ul>\n<p>上面的参数用下面的例子来展示可能会更加直观</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">192.168.1.18 ansible_ssh_port=2222 ansible_ssh_user=manager</span><br><span class=\"line\">192.168.1.18:10022  ansible_ssh_private_key_file=/home/example/.ssh/aws.pem</span><br><span class=\"line\">freebsd_host ansible_python_interpreter=/usr/local/bin/python</span><br><span class=\"line\">ruby_module_host ansible_ruby_interpreter=/usr/bin/ruby.1.9.3</span><br></pre></td></tr></table></figure>\n\n<p>​        很重要的一点，主机清单必须要先配置，我的主机清单如下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cat hosts</span></span><br><span class=\"line\">[own]</span><br><span class=\"line\">192.168.1.171</span><br><span class=\"line\"></span><br><span class=\"line\">[node]</span><br><span class=\"line\">192.168.1.120</span><br><span class=\"line\">192.168.1.172</span><br><span class=\"line\"></span><br><span class=\"line\">[gp:children]   </span><br><span class=\"line\">own</span><br><span class=\"line\">node</span><br></pre></td></tr></table></figure>\n\n<p>​        配置完主机清单后，让我们来执行一个<code>ansible</code>的<code>ping</code>模块，正式开始我们的ansible学习之旅吧。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible all -m ping    <span class=\"comment\">#  使用ping模块测试主机连通性</span></span></span><br></pre></td></tr></table></figure>\n\n<p>​        如果ansible主机重来没有连接过远程主机的话，会首先建立认证，如下，会要求输入”yes/no“，并返回失败的结果。</p>\n<p><img src=\"./image-20210514163530920.png\" alt=\"image-20210514163530920\"></p>\n<p>​        为什么会失败呢？Ansible是基于ssh进行工作的，那么当ssh一台远程主要的时候，是不是需要输入密码呢？可是这一条指令并没有提示输入口令，也没有建立起连接。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> vim /etc/ansible/ansible.cfg   <span class=\"comment\"># 取消下面的注释，表示不检查</span></span></span><br><span class=\"line\">host_key_checking = False</span><br></pre></td></tr></table></figure>\n\n<p>​        此时，我们在来使用ping命令，还是失败，因为我们并没有输入远程主机的密码。</p>\n<p><img src=\"./image-20210514163944876.png\" alt=\"image-20210514163944876\"></p>\n<p>加上-k选项后，会提示输入ssh密码了。</p>\n<p><img src=\"./image-20210514164108001.png\" alt=\"image-20210514164108001\"></p>\n<p>​        我们可以发现一个有趣的事情，<code>ansible</code>的<code>ping</code>模块跟我们平常使用的<code>ping</code>命令好像有些不同。一般情况下，我们使用<code>ping</code>命令<code>ping</code>远程主机的时候，是通过本机<code>ping</code>远程主机，我们根本不需要输入远程主机的密码就能够得到回应，但是<code>ansible的ping模块确是登陆到远程主机去执行ping命令，这就是为什么只有在我们输入远程主机的密码后，ping模块才能返回远程主机的结果</code>，我们可以从下面的详细信息中查看ansible的执行过程。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible own -m ping -vvvv   <span class=\"comment\"># 后文会详细介绍ansible执行过程</span></span></span><br><span class=\"line\">ansible 2.9.18</span><br><span class=\"line\">  config file = /etc/ansible/ansible.cfg</span><br><span class=\"line\">  configured module search path = [u&#x27;/root/.ansible/plugins/modules&#x27;, u&#x27;/usr/share/ansible/plugins/modules&#x27;]</span><br><span class=\"line\">  ansible python module location = /usr/lib/python2.7/site-packages/ansible</span><br><span class=\"line\">  executable location = /usr/bin/ansible</span><br><span class=\"line\">  python version = 2.7.5 (default, Oct 30 2018, 23:45:53) [GCC 4.8.5 20150623 (Red Hat 4.8.5-36)]</span><br><span class=\"line\">Using /etc/ansible/ansible.cfg as config file  # 使用的配置文件</span><br><span class=\"line\">setting up inventory plugins</span><br><span class=\"line\">host_list declined parsing /etc/ansible/hosts as it did not pass its verify_file() method</span><br><span class=\"line\">script declined parsing /etc/ansible/hosts as it did not pass its verify_file() method</span><br><span class=\"line\">auto declined parsing /etc/ansible/hosts as it did not pass its verify_file() method</span><br><span class=\"line\">Parsed /etc/ansible/hosts inventory source with ini plugin</span><br><span class=\"line\">Loading callback plugin minimal of type stdout, v2.0 from /usr/lib/python2.7/site-packages/ansible/plugins/callback/minimal.pyc</span><br><span class=\"line\">Skipping callback &#x27;actionable&#x27;, as we already have a stdout callback.</span><br><span class=\"line\">Skipping callback &#x27;counter_enabled&#x27;, as we already have a stdout callback.</span><br><span class=\"line\">Skipping callback &#x27;debug&#x27;, as we already have a stdout callback.</span><br><span class=\"line\">Skipping callback &#x27;dense&#x27;, as we already have a stdout callback.</span><br><span class=\"line\">Skipping callback &#x27;dense&#x27;, as we already have a stdout callback.</span><br><span class=\"line\">Skipping callback &#x27;full_skip&#x27;, as we already have a stdout callback.</span><br><span class=\"line\">Skipping callback &#x27;json&#x27;, as we already have a stdout callback.</span><br><span class=\"line\">Skipping callback &#x27;minimal&#x27;, as we already have a stdout callback.</span><br><span class=\"line\">Skipping callback &#x27;null&#x27;, as we already have a stdout callback.</span><br><span class=\"line\">Skipping callback &#x27;oneline&#x27;, as we already have a stdout callback.</span><br><span class=\"line\">Skipping callback &#x27;selective&#x27;, as we already have a stdout callback.</span><br><span class=\"line\">Skipping callback &#x27;skippy&#x27;, as we already have a stdout callback.</span><br><span class=\"line\">Skipping callback &#x27;stderr&#x27;, as we already have a stdout callback.</span><br><span class=\"line\">Skipping callback &#x27;unixy&#x27;, as we already have a stdout callback.</span><br><span class=\"line\">Skipping callback &#x27;yaml&#x27;, as we already have a stdout callback.</span><br><span class=\"line\">META: ran handlers</span><br><span class=\"line\">&lt;192.168.1.171&gt; ESTABLISH LOCAL CONNECTION FOR USER: root</span><br><span class=\"line\">&lt;192.168.1.171&gt; EXEC /bin/sh -c &#x27;echo ~root &amp;&amp; sleep 0&#x27;</span><br><span class=\"line\">&lt;192.168.1.171&gt; EXEC /bin/sh -c &#x27;( umask 77 &amp;&amp; mkdir -p &quot;` echo /root/.ansible/tmp `&quot;&amp;&amp; mkdir &quot;` echo /root/.ansible/tmp/ansible-tmp-1621010684.41-21977-125206076339302 `&quot; &amp;&amp; echo ansible-tmp-1621010684.41-21977-125206076339302=&quot;` echo /root/.ansible/tmp/ansible-tmp-1621010684.41-21977-125206076339302 `&quot; ) &amp;&amp; sleep 0&#x27;</span><br><span class=\"line\">&lt;192.168.1.171&gt; Attempting python interpreter discovery</span><br><span class=\"line\">&lt;192.168.1.171&gt; EXEC /bin/sh -c &#x27;echo PLATFORM; uname; echo FOUND; command -v &#x27;&quot;&#x27;&quot;&#x27;/usr/bin/python&#x27;&quot;&#x27;&quot;&#x27;; command -v &#x27;&quot;&#x27;&quot;&#x27;python3.7&#x27;&quot;&#x27;&quot;&#x27;; command -v &#x27;&quot;&#x27;&quot;&#x27;python3.6&#x27;&quot;&#x27;&quot;&#x27;; command -v &#x27;&quot;&#x27;&quot;&#x27;python3.5&#x27;&quot;&#x27;&quot;&#x27;; command -v &#x27;&quot;&#x27;&quot;&#x27;python2.7&#x27;&quot;&#x27;&quot;&#x27;; command -v &#x27;&quot;&#x27;&quot;&#x27;python2.6&#x27;&quot;&#x27;&quot;&#x27;; command -v &#x27;&quot;&#x27;&quot;&#x27;/usr/libexec/platform-python&#x27;&quot;&#x27;&quot;&#x27;; command -v &#x27;&quot;&#x27;&quot;&#x27;/usr/bin/python3&#x27;&quot;&#x27;&quot;&#x27;; command -v &#x27;&quot;&#x27;&quot;&#x27;python&#x27;&quot;&#x27;&quot;&#x27;; echo ENDFOUND &amp;&amp; sleep 0&#x27;</span><br><span class=\"line\">&lt;192.168.1.171&gt; EXEC /bin/sh -c &#x27;/usr/bin/python &amp;&amp; sleep 0&#x27;</span><br><span class=\"line\">Using module file /usr/lib/python2.7/site-packages/ansible/modules/system/ping.py</span><br><span class=\"line\">&lt;192.168.1.171&gt; PUT /root/.ansible/tmp/ansible-local-21969JHUluE/tmpt8DtM0 TO /root/.ansible/tmp/ansible-tmp-1621010684.41-21977-125206076339302/AnsiballZ_ping.py</span><br><span class=\"line\">&lt;192.168.1.171&gt; EXEC /bin/sh -c &#x27;chmod u+x /root/.ansible/tmp/ansible-tmp-1621010684.41-21977-125206076339302/ /root/.ansible/tmp/ansible-tmp-1621010684.41-21977-125206076339302/AnsiballZ_ping.py &amp;&amp; sleep 0&#x27;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 此时显示在192.168.1.171主机上执行(EXEC)命令/bin/sh -c xx</span></span><br><span class=\"line\">&lt;192.168.1.171&gt; EXEC /bin/sh -c &#x27;/usr/bin/python /root/.ansible/tmp/ansible-tmp-1621010684.41-21977-125206076339302/AnsiballZ_ping.py &amp;&amp; sleep 0&#x27;</span><br><span class=\"line\">&lt;192.168.1.171&gt; EXEC /bin/sh -c &#x27;rm -f -r /root/.ansible/tmp/ansible-tmp-1621010684.41-21977-125206076339302/ &gt; /dev/null 2&gt;&amp;1 &amp;&amp; sleep 0&#x27;</span><br><span class=\"line\">192.168.1.171 | SUCCESS =&gt; &#123;</span><br><span class=\"line\">    &quot;ansible_facts&quot;: &#123;</span><br><span class=\"line\">        &quot;discovered_interpreter_python&quot;: &quot;/usr/bin/python&quot;</span><br><span class=\"line\">    &#125;, </span><br><span class=\"line\">    &quot;changed&quot;: false, </span><br><span class=\"line\">    &quot;invocation&quot;: &#123;</span><br><span class=\"line\">        &quot;module_args&quot;: &#123;</span><br><span class=\"line\">            &quot;data&quot;: &quot;pong&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;, </span><br><span class=\"line\">    &quot;ping&quot;: &quot;pong&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-ansible颜色标识\"><a href=\"#4-ansible颜色标识\" class=\"headerlink\" title=\"4 ansible颜色标识\"></a>4 ansible颜色标识</h3><p>​        上面，我们执行<code>ping</code>模块成功和失败时，ansible通过两种截然不同的颜色进行了标识，ansible主要使用下面三种颜色进行标识。</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>颜色</th>\n<th>含义</th>\n<th>执行结果</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>红色</td>\n<td>执行失败</td>\n<td>changed:false</td>\n<td>表示没有对远程主机进行更改</td>\n</tr>\n<tr>\n<td>2</td>\n<td>黄色</td>\n<td>执行成功并且对目标主机做变更</td>\n<td>changed:changed</td>\n<td>表示对远程主机进行更改</td>\n</tr>\n<tr>\n<td>3</td>\n<td>绿色</td>\n<td>执行成功并且不需要做改变的操作</td>\n<td>changed:SUCCESS</td>\n<td>表示对远程主机执行命令成功</td>\n</tr>\n</tbody></table>\n<p>​        当指令成功和失败都会有不同的颜色反映出来，配以changed:false、changed、SUCCESS，可以让我们非常清晰的知道执行的结果，这些不同的颜色可以通过<code>/etc/ansible/ansible.cfg</code>配置文件进行定义。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> vim /etc/ansible/ansible.cfg</span></span><br><span class=\"line\">[colors]   # 颜色可以在ansible.cfg文件中设置</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">highlight = white      <span class=\"comment\"># 高亮</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">verbose = blue         <span class=\"comment\"># 显示详细信息</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">warn = bright purple   <span class=\"comment\"># 警告</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">error = red           <span class=\"comment\"># 执行失败</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">debug = dark gray</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">deprecate = purple</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">skip = cyan</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">unreachable = red    <span class=\"comment\"># 不可达，连接不到被控端</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">ok = green           <span class=\"comment\"># 执行成功</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">changed = yellow     <span class=\"comment\"># 被控端被修改</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">diff_add = green</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">diff_remove = red</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">diff_lines = cyan</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-基于key的免密码登录\"><a href=\"#5-基于key的免密码登录\" class=\"headerlink\" title=\"5 基于key的免密码登录\"></a>5 基于key的免密码登录</h3><p>​        当主机数量多的时候，输入密码可不是一个好差事呢？有两种解决方案，第一种是将密码写入主机清单列表/etc/ansible/hosts文件中（该种方式将密码写在文件中不安全，不建议使用），另一种方法是通过配置主机之间基于密钥SSH链接。为了更方便的管理主机，接下来我们配置基于密钥认证。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ssh-keygen</span></span><br><span class=\"line\">Generating public/private rsa key pair.</span><br><span class=\"line\">Enter file in which to save the key (/root/.ssh/id_rsa): </span><br><span class=\"line\">Enter passphrase (empty for no passphrase): </span><br><span class=\"line\">Enter same passphrase again: </span><br><span class=\"line\">Your identification has been saved in /root/.ssh/id_rsa.</span><br><span class=\"line\">Your public key has been saved in /root/.ssh/id_rsa.pub.</span><br><span class=\"line\">The key fingerprint is:</span><br><span class=\"line\">SHA256:/yLyF2z0VK7rTr+ZUiHkfDr9mefxLTB8r3QUQ+oDuzc root@ansible</span><br><span class=\"line\">The key&#x27;s randomart image is:</span><br><span class=\"line\">+---[RSA 2048]----+</span><br><span class=\"line\">|               . |</span><br><span class=\"line\">|            . +  |</span><br><span class=\"line\">|           = + o |</span><br><span class=\"line\">|          . O + o|</span><br><span class=\"line\">|        So = O ..|</span><br><span class=\"line\">|         .+ X =. |</span><br><span class=\"line\">|         ..o.E.++|</span><br><span class=\"line\">|      . . oo+oo*B|</span><br><span class=\"line\">|       o.o ++.*==|</span><br><span class=\"line\">+----[SHA256]-----+</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ssh-copy-id root@192.168.1.120  -p 10022</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ssh-copy-id root@192.168.1.172  -p 10022</span></span><br></pre></td></tr></table></figure>\n\n<p>​        配置完密码认证之后，我们就可以直接使用<code>ansible</code>的模块而不需要输入远程主机的密码了。</p>\n<p><img src=\"./image-20210514170716560.png\" alt=\"image-20210514170716560\"></p>\n<h3 id=\"6-Ansible常用命令语法\"><a href=\"#6-Ansible常用命令语法\" class=\"headerlink\" title=\"6 Ansible常用命令语法\"></a>6 Ansible常用命令语法</h3><p>命令格式：<code>ansible &lt;host-pattern&gt; [-m module_name] [options]</code></p>\n<p><code>&lt;host-pattern&gt;</code>：指明要操作的主机或主机组</p>\n<p><code>[-m module_name]</code>：指定要使用的ansible模块，-m后跟模块名称，如果是Command模块，-m可省略。</p>\n<p><code>[options]</code>：是一些选项参数</p>\n<p>常用参数：</p>\n<ul>\n<li>–version：显示版本</li>\n<li>–list-hosts：显示主机列表，可简写–list</li>\n<li>-a：模块参数（如果有）</li>\n<li>-m module：指定模块，默认为command</li>\n<li>-v：详细过程 –vv -vvv更详细</li>\n<li>-k, –ask-pass：提示连接密码，默认Key验证</li>\n<li>-K，–ask-become-pass：提示使用sudo密码</li>\n<li>-C, –check：检查，并不执行</li>\n<li>-T, –timeout=TIMEOUT：执行命令的超时时间，默认10s</li>\n<li>-u, –user=REMOTE_USER：执行远程执行的用户</li>\n<li>-U， SUDO_USER, –sudo-user：指定sudu用户</li>\n<li>-b, –become：代替旧版的sudo 切换</li>\n</ul>\n<p>查看ansible版本信息</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible --version</span></span><br><span class=\"line\">ansible 2.9.18</span><br><span class=\"line\">  config file = /etc/ansible/ansible.cfg  # 配置文件路径</span><br><span class=\"line\">  configured module search path = [u&#x27;/root/.ansible/plugins/modules&#x27;, u&#x27;/usr/share/ansible/plugins/modules&#x27;]</span><br><span class=\"line\">  ansible python module location = /usr/lib/python2.7/site-packages/ansible</span><br><span class=\"line\">  executable location = /usr/bin/ansible  # ansible二进制文件的路径</span><br><span class=\"line\">  python version = 2.7.5 (default, Oct 30 2018, 23:45:53) [GCC 4.8.5 20150623 (Red Hat 4.8.5-36)]</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 使用的python的信息，如果我们使用python3安装ansible，此处会显示python3</span></span><br></pre></td></tr></table></figure>\n\n<p>查看指定组的主机清单信息：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible own  --list   <span class=\"comment\"># 获取own组的主机清单</span></span></span><br><span class=\"line\">  hosts (1):</span><br><span class=\"line\">    192.168.1.171</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible node --list   <span class=\"comment\"># 获取node组的主机清单</span></span></span><br><span class=\"line\">  hosts (2):</span><br><span class=\"line\">    192.168.1.120</span><br><span class=\"line\">    192.168.1.172</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible gp --list   <span class=\"comment\"># 获取gp组的主机清单</span></span></span><br><span class=\"line\">  hosts (3):</span><br><span class=\"line\">    192.168.1.171</span><br><span class=\"line\">    192.168.1.120</span><br><span class=\"line\">    192.168.1.172</span><br></pre></td></tr></table></figure>\n\n<p>ansible-doc命令：显示模块的帮助信息</p>\n<p>格式：<code>ansible-doc [options] [module...]</code></p>\n<p>常用参数：</p>\n<ul>\n<li>-a 显示所有模块的文档</li>\n<li>-l, –list 列出可用模块</li>\n<li>-s, –snippet 显示指定模块的简要说明</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible-doc -s hostname  <span class=\"comment\"># 查看hostname模块的简短帮助信息</span></span></span><br><span class=\"line\">- name: Manage hostname</span><br><span class=\"line\">  hostname:</span><br><span class=\"line\">      name:     # (required) Name of the host</span><br><span class=\"line\">      use:     # Which strategy to use to update the hostname. If not set we try to autodetect, but this can be problematic, specially with containers as they can present misleading information.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible-doc -s shell    <span class=\"comment\"># 查看shell模块的简短信息帮助信息</span></span></span><br><span class=\"line\">- name: Execute shell commands on targets</span><br><span class=\"line\">  shell:</span><br><span class=\"line\">      chdir:                 # Change into this directory before running the command.</span><br><span class=\"line\">      cmd:                   # The command to run followed by optional arguments.</span><br><span class=\"line\">      creates:               # A filename, when it already exists, this step will *not* be run.</span><br><span class=\"line\">      executable:            # Change the shell used to execute the command. This expects an absolute path to the executable.</span><br><span class=\"line\">      free_form:             # The shell module takes a free form command to run, as a string. There is no actual parameter named &#x27;free form&#x27;. See the examples on how</span><br><span class=\"line\">                               to use this module.</span><br><span class=\"line\">      removes:               # A filename, when it does not exist, this step will *not* be run.</span><br><span class=\"line\">      stdin:                 # Set the stdin of the command directly to the specified value.</span><br><span class=\"line\">      stdin_add_newline:     # Whether to append a newline to stdin data.</span><br><span class=\"line\">      warn:                  # Whether to enable task warnings.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible-doc -l | wc -l   <span class=\"comment\"># 截至2021年5月已存在的ansible模块共3387个</span></span></span><br><span class=\"line\">3387</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-Ansible-主机匹配列表\"><a href=\"#7-Ansible-主机匹配列表\" class=\"headerlink\" title=\"7 Ansible 主机匹配列表\"></a>7 Ansible 主机匹配列表</h3><p>通配符—注意用单引号</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cat /etc/ansible/hosts   <span class=\"comment\"># 为了方便展示，修改下主机清单中的主机ip地址</span></span></span><br><span class=\"line\">[own]</span><br><span class=\"line\">192.168.1.171 ansible_connection=local</span><br><span class=\"line\">192.168.1.20</span><br><span class=\"line\"></span><br><span class=\"line\">[node]</span><br><span class=\"line\">192.168.1.120</span><br><span class=\"line\">192.168.1.172</span><br><span class=\"line\">192.168.1.20</span><br><span class=\"line\"></span><br><span class=\"line\">[gp:children]</span><br><span class=\"line\">own</span><br><span class=\"line\">node</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>***** <strong>匹配任意字符</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible <span class=\"string\">&#x27;*&#x27;</span>  --list  <span class=\"comment\"># 此处的*等同于all</span></span></span><br><span class=\"line\">  hosts (4):</span><br><span class=\"line\">    192.168.1.120</span><br><span class=\"line\">    192.168.1.172</span><br><span class=\"line\">    192.168.1.20</span><br><span class=\"line\">    192.168.1.171</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible <span class=\"string\">&#x27;192.168.1.1*&#x27;</span>  --list    <span class=\"comment\"># 匹配所有的192.168.1.1开头的地址</span></span></span><br><span class=\"line\">  hosts (3):</span><br><span class=\"line\">    192.168.1.120</span><br><span class=\"line\">    192.168.1.171</span><br><span class=\"line\">    192.168.1.172</span><br></pre></td></tr></table></figure>\n\n<p><strong>?</strong> <strong>匹配单个字符</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible <span class=\"string\">&#x27;192.168.1.2?&#x27;</span>  --list   <span class=\"comment\"># &quot;?&quot;只能匹配一个字符</span></span></span><br><span class=\"line\">  hosts (1):</span><br><span class=\"line\">    192.168.1.20</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible <span class=\"string\">&#x27;192.168.1.1?&#x27;</span>  --list</span></span><br><span class=\"line\">[WARNING]: Could not match supplied host pattern, ignoring: 192.168.1.1?</span><br><span class=\"line\">[WARNING]: No hosts matched, nothing to do</span><br><span class=\"line\">  hosts (0):          # 没有192.168.1.1?的IP地址，因此此处显示为空</span><br></pre></td></tr></table></figure>\n\n<p><strong>:</strong> <strong>或者，只匹配主机清单中有的ip，并自动忽略主机清单中不存在的ip地址</strong></p>\n<p>​        注意此处的<code>:</code>并不是从某个IP地址开始到某个IP地址结束的意思，只是单纯的表示<code>:</code>两边的主机IP罢了</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible &#x27;192.168.1.120:192.168.1.172&#x27; --list   # 192.168.1.120:192.168.1.172</span><br><span class=\"line\">  hosts (2):</span><br><span class=\"line\">    192.168.1.120</span><br><span class=\"line\">    192.168.1.172</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible <span class=\"string\">&#x27;192.168.1.120:192.168.1.172:192.168.1.171&#x27;</span> --list</span></span><br><span class=\"line\">  hosts (3):</span><br><span class=\"line\">    192.168.1.120</span><br><span class=\"line\">    192.168.1.172</span><br><span class=\"line\">    192.168.1.171</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible <span class=\"string\">&#x27;192.168.1.120:192.168.1.172:192.168.1.200&#x27;</span> --list    <span class=\"comment\"># 主机清单中不存在的主机IP直接忽略掉</span></span></span><br><span class=\"line\">[WARNING]: Could not match supplied host pattern, ignoring: 192.168.1.200</span><br><span class=\"line\">  hosts (2):</span><br><span class=\"line\">    192.168.1.120</span><br><span class=\"line\">    192.168.1.172</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>:&amp;</strong> <strong>并且 (逻辑与)，同时存在与分组中的IP地址</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible <span class=\"string\">&#x27;own&#x27;</span>  --list   <span class=\"comment\"># 主机组own中的主机</span></span></span><br><span class=\"line\">  hosts (2):</span><br><span class=\"line\">    192.168.1.171</span><br><span class=\"line\">    192.168.1.20</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible <span class=\"string\">&#x27;node&#x27;</span>  --list   <span class=\"comment\"># 主机组node中的主机</span></span></span><br><span class=\"line\">  hosts (3):</span><br><span class=\"line\">    192.168.1.120</span><br><span class=\"line\">    192.168.1.172</span><br><span class=\"line\">    192.168.1.20</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible <span class=\"string\">&#x27;own:&amp;node&#x27;</span>  --list  <span class=\"comment\"># 主机组own和node中的共有的主机</span></span></span><br><span class=\"line\">  hosts (1):</span><br><span class=\"line\">    192.168.1.20</span><br></pre></td></tr></table></figure>\n\n<p><strong>:!</strong> <strong>逻辑非，’a:!b’存在与a分组中，不存在于b分组中的主机</strong></p>\n<p>值得注意的是，用到感叹号的时候，记得引号为单引号，否则会被bash解析为历史命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible <span class=\"string\">&#x27;own:!node&#x27;</span>  --list   <span class=\"comment\"># 在own中，不在node中的主机</span></span></span><br><span class=\"line\">  hosts (1):</span><br><span class=\"line\">    192.168.1.171</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible <span class=\"string\">&#x27;node:!own&#x27;</span>  --list  <span class=\"comment\"># 存在于node组，不在own组中的主机</span></span></span><br><span class=\"line\">  hosts (2):</span><br><span class=\"line\">    192.168.1.120</span><br><span class=\"line\">    192.168.1.172</span><br></pre></td></tr></table></figure>\n\n<p><strong>正则表达式–<del>表示后面是正则匹配，注意</del>后面不能有空格</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible <span class=\"string\">&#x27;~192.168.1.(120|100|172|200)&#x27;</span>  --list   <span class=\"comment\">#</span></span> </span><br><span class=\"line\">  hosts (2):</span><br><span class=\"line\">    192.168.1.120</span><br><span class=\"line\">    192.168.1.172</span><br></pre></td></tr></table></figure>\n\n<p>这里写一条正则的坑，我们在用bash脚本的时候，匹配数字可以使用[0-9]或[[:digit:]]，在用Ansible的时候，我们来看下不同的效果吧</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible <span class=\"string\">&#x27;~^[[:digit:]]&#x27;</span> --list   <span class=\"comment\"># 有时候匹配不出来</span></span></span><br><span class=\"line\">  hosts (4):</span><br><span class=\"line\">    192.168.1.171</span><br><span class=\"line\">    192.168.1.20</span><br><span class=\"line\">    192.168.1.120</span><br><span class=\"line\">    192.168.1.172</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible <span class=\"string\">&#x27;~^[0-9]&#x27;</span> --list</span></span><br><span class=\"line\">  hosts (4):</span><br><span class=\"line\">    192.168.1.120</span><br><span class=\"line\">    192.168.1.171</span><br><span class=\"line\">    192.168.1.20</span><br><span class=\"line\">    192.168.1.172</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible <span class=\"string\">&#x27;&#x27;</span>~^[[:digital:]]<span class=\"string\">&#x27;&#x27;</span> --list</span></span><br><span class=\"line\">  hosts (4):</span><br><span class=\"line\">    192.168.1.171</span><br><span class=\"line\">    192.168.1.20</span><br><span class=\"line\">    192.168.1.120</span><br><span class=\"line\">    192.168.1.172</span><br><span class=\"line\">    </span><br><span class=\"line\">   </span><br></pre></td></tr></table></figure>\n\n<p>​        分享1个正则表达式的网址–python2的<a href=\"https://docs.python.org/2/library/re.html\">https://docs.python.org/2/library/re.html</a></p>\n<p>​        不同软件对正则的表达都不一样，还是用那些通用性强的吧，比如：[0-9]纯数字、[a-zA-Z0-9]数字和字母</p>\n<h3 id=\"8-Ansible-的命令执行过程\"><a href=\"#8-Ansible-的命令执行过程\" class=\"headerlink\" title=\"8 Ansible 的命令执行过程\"></a>8 Ansible 的命令执行过程</h3><p>​        以 <code>ansible b -m command -a &#39;ls -l /&#39; -vvv</code>这条命令为例(此处采用之前的笔记)，根据显示的信息时行解读</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ansible 10.138.3.60 -m <span class=\"built_in\">command</span> -a <span class=\"string\">&#x27;ls -l /&#x27;</span> -vvv</span></span><br><span class=\"line\">ansible 2.9.18</span><br><span class=\"line\">  config file = /etc/ansible/ansible.cfg</span><br><span class=\"line\">  configured module search path = [u&#x27;/root/.ansible/plugins/modules&#x27;, u&#x27;/usr/share/ansible/plugins/modules&#x27;]</span><br><span class=\"line\">  ansible python module location = /usr/lib/python2.7/site-packages/ansible</span><br><span class=\"line\">  executable location = /usr/bin/ansible</span><br><span class=\"line\">  python version = 2.7.5 (default, Apr 11 2018, 07:36:10) [GCC 4.8.5 20150623 (Red Hat 4.8.5-28)]</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 1.不指定配置文件时，默认使用ansible.cfg作为配置文件</span></span><br><span class=\"line\">Using /etc/ansible/ansible.cfg as config file</span><br><span class=\"line\">host_list declined parsing /etc/ansible/hosts as it did not pass its verify_file() method</span><br><span class=\"line\">script declined parsing /etc/ansible/hosts as it did not pass its verify_file() method</span><br><span class=\"line\">auto declined parsing /etc/ansible/hosts as it did not pass its verify_file() method</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 2.未指定主机清单列表文件时默认使用/etc/ansible/hosts</span></span><br><span class=\"line\">Parsed /etc/ansible/hosts inventory source with ini plugin</span><br><span class=\"line\">Skipping callback &#x27;actionable&#x27;, as we already have a stdout callback.</span><br><span class=\"line\">Skipping callback &#x27;counter_enabled&#x27;, as we already have a stdout callback.</span><br><span class=\"line\">Skipping callback &#x27;debug&#x27;, as we already have a stdout callback.</span><br><span class=\"line\">Skipping callback &#x27;dense&#x27;, as we already have a stdout callback.</span><br><span class=\"line\">Skipping callback &#x27;dense&#x27;, as we already have a stdout callback.</span><br><span class=\"line\">Skipping callback &#x27;full_skip&#x27;, as we already have a stdout callback.</span><br><span class=\"line\">Skipping callback &#x27;json&#x27;, as we already have a stdout callback.</span><br><span class=\"line\">Skipping callback &#x27;minimal&#x27;, as we already have a stdout callback.</span><br><span class=\"line\">Skipping callback &#x27;null&#x27;, as we already have a stdout callback.</span><br><span class=\"line\">Skipping callback &#x27;oneline&#x27;, as we already have a stdout callback.</span><br><span class=\"line\">Skipping callback &#x27;selective&#x27;, as we already have a stdout callback.</span><br><span class=\"line\">Skipping callback &#x27;skippy&#x27;, as we already have a stdout callback.</span><br><span class=\"line\">Skipping callback &#x27;stderr&#x27;, as we already have a stdout callback.</span><br><span class=\"line\">Skipping callback &#x27;unixy&#x27;, as we already have a stdout callback.</span><br><span class=\"line\">Skipping callback &#x27;yaml&#x27;, as we already have a stdout callback.</span><br><span class=\"line\">META: ran handlers</span><br><span class=\"line\">&lt;10.138.3.60&gt; ESTABLISH SSH CONNECTION FOR USER: None</span><br><span class=\"line\">&lt;10.138.3.60&gt; SSH: EXEC ssh -C -o ControlMaster=auto -o ControlPersist=60s -o StrictHostKeyChecking=no -o Port=10022 -o KbdInteractiveAuthentication=no -o PreferredAuthentications=gssapi-with-mic,gssapi-keyex,hostbased,publickey -o PasswordAuthentication=no -o ConnectTimeout=10 -o ControlPath=/root/.ansible/cp/8b1177f851 10.138.3.60 &#x27;/bin/sh -c &#x27;&quot;&#x27;&quot;&#x27;echo ~ &amp;&amp; sleep 0&#x27;&quot;&#x27;&quot;&#x27;&#x27;</span><br><span class=\"line\">&lt;10.138.3.60&gt; (0, &#x27;/root\\n&#x27;, &#x27;&#x27;)</span><br><span class=\"line\">&lt;10.138.3.60&gt; ESTABLISH SSH CONNECTION FOR USER: None</span><br><span class=\"line\">&lt;10.138.3.60&gt; SSH: EXEC ssh -C -o ControlMaster=auto -o ControlPersist=60s -o StrictHostKeyChecking=no -o Port=10022 -o KbdInteractiveAuthentication=no -o PreferredAuthentications=gssapi-with-mic,gssapi-keyex,hostbased,publickey -o PasswordAuthentication=no -o ConnectTimeout=10 -o ControlPath=/root/.ansible/cp/8b1177f851 10.138.3.60 &#x27;/bin/sh -c &#x27;&quot;&#x27;&quot;&#x27;( umask 77 &amp;&amp; mkdir -p &quot;` echo /root/.ansible/tmp `&quot;&amp;&amp; mkdir &quot;` echo /root/.ansible/tmp/ansible-tmp-1616746001.01-89245-229355119551990 `&quot; &amp;&amp; echo ansible-tmp-1616746001.01-89245-229355119551990=&quot;` echo /root/.ansible/tmp/ansible-tmp-1616746001.01-89245-229355119551990 `&quot; ) &amp;&amp; sleep 0&#x27;&quot;&#x27;&quot;&#x27;&#x27;</span><br><span class=\"line\">&lt;10.138.3.60&gt; (0, &#x27;ansible-tmp-1616746001.01-89245-229355119551990=/root/.ansible/tmp/ansible-tmp-1616746001.01-89245-229355119551990\\n&#x27;, &#x27;&#x27;)</span><br><span class=\"line\">&lt;10.138.3.60&gt; Attempting python interpreter discovery</span><br><span class=\"line\">&lt;10.138.3.60&gt; ESTABLISH SSH CONNECTION FOR USER: None</span><br><span class=\"line\">&lt;10.138.3.60&gt; SSH: EXEC ssh -C -o ControlMaster=auto -o ControlPersist=60s -o StrictHostKeyChecking=no -o Port=10022 -o KbdInteractiveAuthentication=no -o PreferredAuthentications=gssapi-with-mic,gssapi-keyex,hostbased,publickey -o PasswordAuthentication=no -o ConnectTimeout=10 -o ControlPath=/root/.ansible/cp/8b1177f851 10.138.3.60 &#x27;/bin/sh -c &#x27;&quot;&#x27;&quot;&#x27;echo PLATFORM; uname; echo FOUND; command -v &#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;/usr/bin/python&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;; command -v &#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;python3.7&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;; command -v &#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;python3.6&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;; command -v &#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;python3.5&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;; command -v &#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;python2.7&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;; command -v &#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;python2.6&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;; command -v &#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;/usr/libexec/platform-python&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;; command -v &#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;/usr/bin/python3&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;; command -v &#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;python&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;&quot;&#x27;; echo ENDFOUND &amp;&amp; sleep 0&#x27;&quot;&#x27;&quot;&#x27;&#x27;</span><br><span class=\"line\">&lt;10.138.3.60&gt; (0, &#x27;PLATFORM\\nLinux\\nFOUND\\n/usr/bin/python\\n/usr/bin/python3.6\\n/usr/bin/python2.7\\n/usr/bin/python3\\n/usr/bin/python\\nENDFOUND\\n&#x27;, &#x27;&#x27;)</span><br><span class=\"line\">&lt;10.138.3.60&gt; ESTABLISH SSH CONNECTION FOR USER: None</span><br><span class=\"line\">&lt;10.138.3.60&gt; SSH: EXEC ssh -C -o ControlMaster=auto -o ControlPersist=60s -o StrictHostKeyChecking=no -o Port=10022 -o KbdInteractiveAuthentication=no -o PreferredAuthentications=gssapi-with-mic,gssapi-keyex,hostbased,publickey -o PasswordAuthentication=no -o ConnectTimeout=10 -o ControlPath=/root/.ansible/cp/8b1177f851 10.138.3.60 &#x27;/bin/sh -c &#x27;&quot;&#x27;&quot;&#x27;/usr/bin/python &amp;&amp; sleep 0&#x27;&quot;&#x27;&quot;&#x27;&#x27;</span><br><span class=\"line\">&lt;10.138.3.60&gt; (0, &#x27;&#123;&quot;osrelease_content&quot;: &quot;NAME=\\\\&quot;StarVE Linux\\\\&quot;\\\\nVERSION=\\\\&quot;\\\\&quot;\\\\nID=\\\\&quot;starve\\\\&quot;\\\\nID_LIKE=\\\\&quot;rhel fedora centos\\\\&quot;\\\\nVERSION_ID=\\\\&quot;4\\\\&quot;\\\\nPRETTY_NAME=\\\\&quot;StarVE Linux 4 (Core)\\\\&quot;\\\\nANSI_COLOR=\\\\&quot;0;31\\\\&quot;\\\\nCPE_NAME=\\\\&quot;cpe:/o:starve:starve:4\\\\&quot;\\\\n\\\\n&quot;, &quot;platform_dist_result&quot;: [&quot;redhat&quot;, &quot;4&quot;, &quot;core&quot;]&#125;\\n&#x27;, &#x27;&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 3.加载指令对应的模块文件，如<span class=\"built_in\">command</span>，生成.py的文件到本机的临时目录，这个目录就是在/etc/ansible/ansible.cfg定义的</span></span><br><span class=\"line\">Using module file /usr/lib/python2.7/site-packages/ansible/modules/commands/command.py</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 4.通过ansible将模块或命令生成对应的临时py文件，并将该文件传输至远程服务器的对应执行用户<span class=\"variable\">$HOME</span>/.ansible/tmp/ansible-tmp-数字/XXX.PY文件，这个目录就是在/etc/ansible/ansible.cfg定义的</span></span><br><span class=\"line\">&lt;10.138.3.60&gt; PUT /root/.ansible/tmp/ansible-local-89237dwwRAX/tmp2T_zMZ TO /root/.ansible/tmp/ansible-tmp-1616746001.01-89245-229355119551990/AnsiballZ_command.py</span><br><span class=\"line\">&lt;10.138.3.60&gt; SSH: EXEC sftp -b - -C -o ControlMaster=auto -o ControlPersist=60s -o StrictHostKeyChecking=no -o Port=10022 -o KbdInteractiveAuthentication=no -o PreferredAuthentications=gssapi-with-mic,gssapi-keyex,hostbased,publickey -o PasswordAuthentication=no -o ConnectTimeout=10 -o ControlPath=/root/.ansible/cp/8b1177f851 &#x27;[10.138.3.60]&#x27;</span><br><span class=\"line\">&lt;10.138.3.60&gt; (0, &#x27;sftp&gt; put /root/.ansible/tmp/ansible-local-89237dwwRAX/tmp2T_zMZ /root/.ansible/tmp/ansible-tmp-1616746001.01-89245-229355119551990/AnsiballZ_command.py\\n&#x27;, &#x27;&#x27;)</span><br><span class=\"line\">&lt;10.138.3.60&gt; ESTABLISH SSH CONNECTION FOR USER: None</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 5.给文件+x 权限，下午中的chmod u+x</span></span><br><span class=\"line\">&lt;10.138.3.60&gt; SSH: EXEC ssh -C -o ControlMaster=auto -o ControlPersist=60s -o StrictHostKeyChecking=no -o Port=10022 -o KbdInteractiveAuthentication=no -o PreferredAuthentications=gssapi-with-mic,gssapi-keyex,hostbased,publickey -o PasswordAuthentication=no -o ConnectTimeout=10 -o ControlPath=/root/.ansible/cp/8b1177f851 10.138.3.60 &#x27;/bin/sh -c &#x27;&quot;&#x27;&quot;&#x27;chmod u+x /root/.ansible/tmp/ansible-tmp-1616746001.01-89245-229355119551990/ /root/.ansible/tmp/ansible-tmp-1616746001.01-89245-229355119551990/AnsiballZ_command.py &amp;&amp; sleep 0&#x27;&quot;&#x27;&quot;&#x27;&#x27;</span><br><span class=\"line\">&lt;10.138.3.60&gt; (0, &#x27;&#x27;, &#x27;&#x27;)</span><br><span class=\"line\">&lt;10.138.3.60&gt; ESTABLISH SSH CONNECTION FOR USER: None</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 6.执行脚本文件，下文中的/bin/sh -c</span></span><br><span class=\"line\">&lt;10.138.3.60&gt; SSH: EXEC ssh -C -o ControlMaster=auto -o ControlPersist=60s -o StrictHostKeyChecking=no -o Port=10022 -o KbdInteractiveAuthentication=no -o PreferredAuthentications=gssapi-with-mic,gssapi-keyex,hostbased,publickey -o PasswordAuthentication=no -o ConnectTimeout=10 -o ControlPath=/root/.ansible/cp/8b1177f851 -tt 10.138.3.60 &#x27;/bin/sh -c &#x27;&quot;&#x27;&quot;&#x27;/usr/bin/python /root/.ansible/tmp/ansible-tmp-1616746001.01-89245-229355119551990/AnsiballZ_command.py &amp;&amp; sleep 0&#x27;&quot;&#x27;&quot;&#x27;&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 6.1.得到执行结果并返回给ansible主机</span></span><br><span class=\"line\">&lt;10.138.3.60&gt; (0, &#x27;\\r\\n&#123;&quot;changed&quot;: true, &quot;end&quot;: &quot;2021-03-27 00:06:41.007118&quot;, &quot;stdout&quot;: &quot;total 16\\\\nlrwxrwxrwx.   1 root  root     7 Dec 28 21:55 bin -&gt; usr/bin\\\\ndr-xr-xr-x.   6 root  root  4096 Dec 29 03:18 boot\\\\ndrwxr-xr-x    2 root  root     6 Dec 28 22:33 data\\\\ndrwxr-xr-x   20 root  root  3260 Mar 26 20:59 dev\\\\ndrwxr-xr-x. 113 root  root  8192 Mar 26 21:21 etc\\\\ndrwxr-xr-x.   4 root  root    49 Mar 26 23:40 home\\\\nlrwxrwxrwx.   1 root  root     7 Dec 28 21:55 lib -&gt; usr/lib\\\\nlrwxrwxrwx.   1 root  root     9 Dec 28 21:55 lib64 -&gt; usr/lib64\\\\ndrwxr-xr-x.   2 root  root     6 Apr 11  2018 media\\\\ndrwxr-xr-x.   2 root  root     6 Apr 11  2018 mnt\\\\ndrwxr-xr-x    5 mysql mysql   64 Mar 26 20:59 mysql\\\\ndrwxr-xr-x.   4 root  root    30 Dec 28 21:58 opt\\\\ndr-xr-xr-x  172 root  root     0 Mar 26 20:59 proc\\\\ndr-xr-x---.   5 root  root   191 Mar 26 23:36 root\\\\ndrwxr-xr-x   35 root  root  1220 Mar 27 00:06 run\\\\nlrwxrwxrwx.   1 root  root     8 Dec 28 21:55 sbin -&gt; usr/sbin\\\\ndrwxr-xr-x.   2 root  root     6 Apr 11  2018 srv\\\\ndr-xr-xr-x   13 root  root     0 Mar 27 00:06 sys\\\\ndrwxr-xr-x    3 root  root    21 Dec 28 22:26 temp\\\\ndrwxrwxrwt.  10 root  root   268 Mar 27 00:06 tmp\\\\ndrwxr-xr-x.  14 root  root   167 Dec 28 21:58 usr\\\\ndrwxr-xr-x.  20 root  root   282 Dec 28 22:04 var&quot;, &quot;cmd&quot;: [&quot;ls&quot;, &quot;-l&quot;, &quot;/&quot;], &quot;rc&quot;: 0, &quot;start&quot;: &quot;2021-03-27 00:06:41.004615&quot;, &quot;stderr&quot;: &quot;&quot;, &quot;delta&quot;: &quot;0:00:00.002503&quot;, &quot;invocation&quot;: &#123;&quot;module_args&quot;: &#123;&quot;creates&quot;: null, &quot;executable&quot;: null, &quot;_uses_shell&quot;: false, &quot;strip_empty_ends&quot;: true, &quot;_raw_params&quot;: &quot;ls -l /&quot;, &quot;removes&quot;: null, &quot;argv&quot;: null, &quot;warn&quot;: true, &quot;chdir&quot;: null, &quot;stdin_add_newline&quot;: true, &quot;stdin&quot;: null&#125;&#125;&#125;\\r\\n&#x27;, &#x27;Shared connection to 10.138.3.60 closed.\\r\\n&#x27;)</span><br><span class=\"line\">&lt;10.138.3.60&gt; ESTABLISH SSH CONNECTION FOR USER: None</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 7.删除临时py文件，sleep 0然后退出</span></span><br><span class=\"line\">&lt;10.138.3.60&gt; SSH: EXEC ssh -C -o ControlMaster=auto -o ControlPersist=60s -o StrictHostKeyChecking=no -o Port=10022 -o KbdInteractiveAuthentication=no -o PreferredAuthentications=gssapi-with-mic,gssapi-keyex,hostbased,publickey -o PasswordAuthentication=no -o ConnectTimeout=10 -o ControlPath=/root/.ansible/cp/8b1177f851 10.138.3.60 &#x27;/bin/sh -c &#x27;&quot;&#x27;&quot;&#x27;rm -f -r /root/.ansible/tmp/ansible-tmp-1616746001.01-89245-229355119551990/ &gt; /dev/null 2&gt;&amp;1 &amp;&amp; sleep 0&#x27;&quot;&#x27;&quot;&#x27;&#x27;</span><br><span class=\"line\">&lt;10.138.3.60&gt; (0, &#x27;&#x27;, &#x27;&#x27;)</span><br><span class=\"line\">10.138.3.60 | CHANGED | rc=0 &gt;&gt;</span><br><span class=\"line\">total 16</span><br><span class=\"line\">lrwxrwxrwx.   1 root  root     7 Dec 28 21:55 bin -&gt; usr/bin</span><br><span class=\"line\">dr-xr-xr-x.   6 root  root  4096 Dec 29 03:18 boot</span><br><span class=\"line\">drwxr-xr-x    2 root  root     6 Dec 28 22:33 data</span><br><span class=\"line\">drwxr-xr-x   20 root  root  3260 Mar 26 20:59 dev</span><br><span class=\"line\">drwxr-xr-x. 113 root  root  8192 Mar 26 21:21 etc</span><br><span class=\"line\">drwxr-xr-x.   4 root  root    49 Mar 26 23:40 home</span><br><span class=\"line\">lrwxrwxrwx.   1 root  root     7 Dec 28 21:55 lib -&gt; usr/lib</span><br><span class=\"line\">lrwxrwxrwx.   1 root  root     9 Dec 28 21:55 lib64 -&gt; usr/lib64</span><br><span class=\"line\">drwxr-xr-x.   2 root  root     6 Apr 11  2018 media</span><br><span class=\"line\">drwxr-xr-x.   2 root  root     6 Apr 11  2018 mnt</span><br><span class=\"line\">drwxr-xr-x    5 mysql mysql   64 Mar 26 20:59 mysql</span><br><span class=\"line\">drwxr-xr-x.   4 root  root    30 Dec 28 21:58 opt</span><br><span class=\"line\">dr-xr-xr-x  172 root  root     0 Mar 26 20:59 proc</span><br><span class=\"line\">dr-xr-x---.   5 root  root   191 Mar 26 23:36 root</span><br><span class=\"line\">drwxr-xr-x   35 root  root  1220 Mar 27 00:06 run</span><br><span class=\"line\">lrwxrwxrwx.   1 root  root     8 Dec 28 21:55 sbin -&gt; usr/sbin</span><br><span class=\"line\">drwxr-xr-x.   2 root  root     6 Apr 11  2018 srv</span><br><span class=\"line\">dr-xr-xr-x   13 root  root     0 Mar 27 00:06 sys</span><br><span class=\"line\">drwxr-xr-x    3 root  root    21 Dec 28 22:26 temp</span><br><span class=\"line\">drwxrwxrwt.  10 root  root   268 Mar 27 00:06 tmp</span><br><span class=\"line\">drwxr-xr-x.  14 root  root   167 Dec 28 21:58 usr</span><br><span class=\"line\">drwxr-xr-x.  20 root  root   282 Dec 28 22:04 var</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li> 加载自己的配置文件，默认/etc/ansible/ansible.cfg</li>\n</ol>\n<p><img src=\"./image-20210326161838448.png\" alt=\"image-20210326161838448\"></p>\n<ol start=\"2\">\n<li><p> 匹配主机清单(如上)</p>\n</li>\n<li><p> 加载指令对应的模块文件，如command，生成.py的文件到本机的临时目录，这个目录就是在/etc/ansible/ansible.cfg定义的</p>\n</li>\n</ol>\n<p><img src=\"./image-20210326162617696.png\" alt=\"image-20210326162617696\"></p>\n<ol start=\"4\">\n<li><p> 通过ansible将模块或命令生成对应的临时py文件，并将该文件传输至远程服务器的对应执行用户$HOME/.ansible/tmp/ansible-tmp-数字/XXX.PY文件，这个目录就是在/etc/ansible/ansible.cfg定义的</p>\n</li>\n<li><p> 给文件+x 权限</p>\n</li>\n<li><p> 执行并返回结果</p>\n</li>\n<li><p> 删除临时py文件，sleep 0退出</p>\n</li>\n<li><p> 断开远程主机连接</p>\n</li>\n</ol>\n","comments":true,"permalink":"https://qingdalf.github.io/2021-05/ansibleBase/","categories":[{"name":"DevOps","slug":"DevOps","permalink":"https://qingdalf.github.io/categories/DevOps/"}],"tags":[]},{"title":"k8s使用过程中的一些错误","date":"2021-05-11T15:19:27.000Z","path":"2021-05/kuberErr/","content":"<h2 id=\"错误1-使用kubeadm安装k8s时写错控制节点ip地址\"><a href=\"#错误1-使用kubeadm安装k8s时写错控制节点ip地址\" class=\"headerlink\" title=\"错误1 使用kubeadm安装k8s时写错控制节点ip地址\"></a>错误1 使用<code>kubeadm</code>安装k8s时写错控制节点ip地址</h2><p>​        准备新建一个k8s集群，直接复制了之前安装k8s的<code>kubeadm init</code>命令，将新建k8s集群的masterIP地址(限masterIP地址为192.168.1.161)复制错误(原集群masterIP地址为10.138.3.61)，导致<code>kubeadm init</code>执行时失败(报错信息为master not found)。</p>\n <span id=\"more\"></span>\n<h3 id=\"1-故障复现\"><a href=\"#1-故障复现\" class=\"headerlink\" title=\"1.故障复现\"></a>1.故障复现</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubeadm init    --apiserver-advertise-address=10.138.3.61    --image-repository registry.aliyuncs.com/google_containers    --kubernetes-version v1.20.0    --service-cidr=10.96.0.0/12    --pod-network-cidr=10.244.0.0/16    --ignore-preflight-errors=all</span></span><br><span class=\"line\">[init] Using Kubernetes version: v1.20.0</span><br><span class=\"line\">[preflight] Running pre-flight checks</span><br><span class=\"line\">\t[WARNING Port-10259]: Port 10259 is in use</span><br><span class=\"line\">\t[WARNING Port-10257]: Port 10257 is in use</span><br><span class=\"line\">\t[WARNING FileAvailable--etc-kubernetes-manifests-kube-apiserver.yaml]: /etc/kubernetes/manifests/kube-apiserver.yaml already exists</span><br><span class=\"line\">\t[WARNING FileAvailable--etc-kubernetes-manifests-kube-controller-manager.yaml]: /etc/kubernetes/manifests/kube-controller-manager.yaml already exists</span><br><span class=\"line\">\t[WARNING FileAvailable--etc-kubernetes-manifests-kube-scheduler.yaml]: /etc/kubernetes/manifests/kube-scheduler.yaml already exists</span><br><span class=\"line\">\t[WARNING FileAvailable--etc-kubernetes-manifests-etcd.yaml]: /etc/kubernetes/manifests/etcd.yaml already exists</span><br><span class=\"line\">\t[WARNING IsDockerSystemdCheck]: detected &quot;cgroupfs&quot; as the Docker cgroup driver. The recommended driver is &quot;systemd&quot;. Please follow the guide at https://kubernetes.io/docs/setup/cri/</span><br><span class=\"line\">\t[WARNING SystemVerification]: this Docker version is not on the list of validated versions: 20.10.6. Latest validated version: 19.03</span><br><span class=\"line\">\t[WARNING Port-10250]: Port 10250 is in use</span><br><span class=\"line\">[preflight] Pulling images required for setting up a Kubernetes cluster</span><br><span class=\"line\">[preflight] This might take a minute or two, depending on the speed of your internet connection</span><br><span class=\"line\">[preflight] You can also perform this action in beforehand using &#x27;kubeadm config images pull&#x27;</span><br><span class=\"line\">[certs] Using certificateDir folder &quot;/etc/kubernetes/pki&quot;</span><br><span class=\"line\">[certs] Using existing ca certificate authority</span><br><span class=\"line\">[certs] Using existing apiserver certificate and key on disk</span><br><span class=\"line\">[certs] Using existing apiserver-kubelet-client certificate and key on disk</span><br><span class=\"line\">[certs] Using existing front-proxy-ca certificate authority</span><br><span class=\"line\">[certs] Using existing front-proxy-client certificate and key on disk</span><br><span class=\"line\">[certs] Using existing etcd/ca certificate authority</span><br><span class=\"line\">[certs] Using existing etcd/server certificate and key on disk</span><br><span class=\"line\">[certs] Using existing etcd/peer certificate and key on disk</span><br><span class=\"line\">[certs] Using existing etcd/healthcheck-client certificate and key on disk</span><br><span class=\"line\">[certs] Using existing apiserver-etcd-client certificate and key on disk</span><br><span class=\"line\">[certs] Using the existing &quot;sa&quot; key</span><br><span class=\"line\">[kubeconfig] Using kubeconfig folder &quot;/etc/kubernetes&quot;</span><br><span class=\"line\">W0511 21:55:20.961995   23190 kubeconfig.go:246] a kubeconfig file &quot;/etc/kubernetes/admin.conf&quot; exists already but has an unexpected API Server URL: expected: https://192.168.1.161:6443, got: https://10.138.3.61:6443</span><br><span class=\"line\">[kubeconfig] Using existing kubeconfig file: &quot;/etc/kubernetes/admin.conf&quot;</span><br><span class=\"line\">W0511 21:55:21.413302   23190 kubeconfig.go:246] a kubeconfig file &quot;/etc/kubernetes/kubelet.conf&quot; exists already but has an unexpected API Server URL: expected: https://192.168.1.161:6443, got: https://10.138.3.61:6443</span><br><span class=\"line\">[kubeconfig] Using existing kubeconfig file: &quot;/etc/kubernetes/kubelet.conf&quot;</span><br><span class=\"line\">W0511 21:55:21.866478   23190 kubeconfig.go:246] a kubeconfig file &quot;/etc/kubernetes/controller-manager.conf&quot; exists already but has an unexpected API Server URL: expected: https://192.168.1.161:6443, got: https://10.138.3.61:6443</span><br><span class=\"line\">[kubeconfig] Using existing kubeconfig file: &quot;/etc/kubernetes/controller-manager.conf&quot;</span><br><span class=\"line\">W0511 21:55:22.071608   23190 kubeconfig.go:246] a kubeconfig file &quot;/etc/kubernetes/scheduler.conf&quot; exists already but has an unexpected API Server URL: expected: https://192.168.1.161:6443, got: https://10.138.3.61:6443</span><br><span class=\"line\">[kubeconfig] Using existing kubeconfig file: &quot;/etc/kubernetes/scheduler.conf&quot;</span><br><span class=\"line\">[kubelet-start] Writing kubelet environment file with flags to file &quot;/var/lib/kubelet/kubeadm-flags.env&quot;</span><br><span class=\"line\">[kubelet-start] Writing kubelet configuration to file &quot;/var/lib/kubelet/config.yaml&quot;</span><br><span class=\"line\">[kubelet-start] Starting the kubelet</span><br><span class=\"line\">[control-plane] Using manifest folder &quot;/etc/kubernetes/manifests&quot;</span><br><span class=\"line\">[control-plane] Creating static Pod manifest for &quot;kube-apiserver&quot;</span><br><span class=\"line\">[control-plane] Creating static Pod manifest for &quot;kube-controller-manager&quot;</span><br><span class=\"line\">[control-plane] Creating static Pod manifest for &quot;kube-scheduler&quot;</span><br><span class=\"line\">[etcd] Creating static Pod manifest for local etcd in &quot;/etc/kubernetes/manifests&quot;</span><br><span class=\"line\">[wait-control-plane] Waiting for the kubelet to boot up the control plane as static Pods from directory &quot;/etc/kubernetes/manifests&quot;. This can take up to 4m0s</span><br><span class=\"line\">[kubelet-check] Initial timeout of 40s passed.</span><br><span class=\"line\"></span><br><span class=\"line\">\tUnfortunately, an error has occurred:</span><br><span class=\"line\">\t\ttimed out waiting for the condition</span><br><span class=\"line\"></span><br><span class=\"line\">\tThis error is likely caused by:  # 显示故障原因的可能性</span><br><span class=\"line\">\t\t- The kubelet is not running</span><br><span class=\"line\">\t\t- The kubelet is unhealthy due to a misconfiguration of the node in some way (required cgroups disabled)</span><br><span class=\"line\"></span><br><span class=\"line\">\tIf you are on a systemd-powered system, you can try to troubleshoot the error with the following commands:</span><br><span class=\"line\">\t\t- &#x27;systemctl status kubelet&#x27;  # 提示通过这两个命令查看错误原因</span><br><span class=\"line\">\t\t- &#x27;journalctl -xeu kubelet&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">\tAdditionally, a control plane component may have crashed or exited when started by the container runtime.</span><br><span class=\"line\">\tTo troubleshoot, list all containers using your preferred container runtimes CLI.</span><br><span class=\"line\"></span><br><span class=\"line\">\tHere is one example how you may list all Kubernetes containers running in docker:</span><br><span class=\"line\">\t\t- &#x27;docker ps -a | grep kube | grep -v pause&#x27;</span><br><span class=\"line\">\t\tOnce you have found the failing container, you can inspect its logs with:</span><br><span class=\"line\">\t\t- &#x27;docker logs CONTAINERID&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">error execution phase wait-control-plane: couldn&#x27;t initialize a Kubernetes cluster</span><br><span class=\"line\">To see the stack trace of this error execute with --v=5 or higher</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-查看日志\"><a href=\"#2-查看日志\" class=\"headerlink\" title=\"2. 查看日志\"></a>2. 查看日志</h3><p>​        此时查看<code>/var/log/message</code>日志，会发现很多相同的报错信息</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> tailf /var/<span class=\"built_in\">log</span>/messages</span> </span><br><span class=\"line\">May 11 22:00:00 k8s-master kubelet: E0511 22:14:31.204553   28675 kubelet.go:2240] node &quot;k8s-master&quot; not found</span><br><span class=\"line\">May 11 22:00:00 k8s-master kubelet: E0511 22:14:31.304750   28675 kubelet.go:2240] node &quot;k8s-master&quot; not found</span><br><span class=\"line\">···</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-根据提示查看kubelet状态\"><a href=\"#3-根据提示查看kubelet状态\" class=\"headerlink\" title=\"3. 根据提示查看kubelet状态\"></a>3. 根据提示查看kubelet状态</h3><p>根据提示查看<code>systemctl status kubelet</code>状态信息，显示<code>k8s-master</code>未找到</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> systemctl status kubelet</span></span><br><span class=\"line\">● kubelet.service - kubelet: The Kubernetes Node Agent</span><br><span class=\"line\">   Loaded: loaded (/usr/lib/systemd/system/kubelet.service; enabled; vendor preset: disabled)</span><br><span class=\"line\">  Drop-In: /usr/lib/systemd/system/kubelet.service.d</span><br><span class=\"line\">           └─10-kubeadm.conf</span><br><span class=\"line\">   Active: active (running) since Tue 2021-05-11 21:55:22 CST; 5min ago</span><br><span class=\"line\">     Docs: https://kubernetes.io/docs/</span><br><span class=\"line\"> Main PID: 23436 (kubelet)</span><br><span class=\"line\">    Tasks: 13</span><br><span class=\"line\">   Memory: 39.6M</span><br><span class=\"line\">   CGroup: /system.slice/kubelet.service</span><br><span class=\"line\">           └─23436 /usr/bin/kubelet --bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf --config=/var/lib/kubele...</span><br><span class=\"line\"></span><br><span class=\"line\">May 11 22:00:26 k8s-master kubelet[23436]: E0511 22:00:26.184687   23436 kubelet_node_status.go:93] Unable to register node &quot;k8s-master&quot; with API server: .../o timeout</span><br><span class=\"line\">May 11 22:00:26 k8s-master kubelet[23436]: E0511 22:00:26.282237   23436 kubelet.go:2240] node &quot;k8s-master&quot; not found</span><br><span class=\"line\">···  # 此处全是node &quot;k8s-master&quot; not found报错</span><br><span class=\"line\">Hint: Some lines were ellipsized, use -l to show in full.</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-根据提示查看kubelet日志输出\"><a href=\"#3-根据提示查看kubelet日志输出\" class=\"headerlink\" title=\"3. 根据提示查看kubelet日志输出\"></a>3. 根据提示查看kubelet日志输出</h3><p>通过<code>journalctl -xeu kubelet</code>查看，显示结果一样。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> journalctl -xeu kubelet</span></span><br><span class=\"line\">···  # 此处全是node &quot;k8s-master&quot; not found报错</span><br><span class=\"line\">May 11 22:00:45 k8s-master kubelet[23436]: E0511 22:00:45.634037   23436 kubelet.go:2240] node &quot;k8s-master&quot; not found</span><br><span class=\"line\">May 11 22:00:45 k8s-master kubelet[23436]: E0511 22:00:45.734426   23436 kubelet.go:2240] node &quot;k8s-master&quot; not found</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-故障解决\"><a href=\"#4-故障解决\" class=\"headerlink\" title=\"4. 故障解决\"></a>4. 故障解决</h3><h4 id=\"4-1-修改kubeadm-init生成的配置文件中master的IP地址–失败\"><a href=\"#4-1-修改kubeadm-init生成的配置文件中master的IP地址–失败\" class=\"headerlink\" title=\"4.1 修改kubeadm init生成的配置文件中master的IP地址–失败\"></a>4.1 修改<code>kubeadm init</code>生成的配置文件中master的IP地址–失败</h4><p>​        通过上面的日志输出，主要原因时<code>k8s-master not found</code>，因此只要解决掉这个问题就可以了。首先想到的办法是将<code>kubeadm init</code>生成的配置文件中的<code>master ip </code>地址修改成正确的ip地址，想着<code>master</code>的IP地址已经被写入到<code>/etc/kubernets</code>目录下的配置文件中，因此修改已经被写入配置文件的<code>错误master</code>信息。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">cd</span> /etc/kubernetes/</span></span><br><span class=\"line\">[root@k8s-master kubernetes]# ls </span><br><span class=\"line\">admin.conf  controller-manager.conf  kubelet.conf  manifests  pki  scheduler.conf</span><br><span class=\"line\">[root@k8s-master kubernetes]# grep 10.138.3.61 ./*</span><br><span class=\"line\">./kubernetes/admin.conf:      server: https://10.138.3.61:6443</span><br><span class=\"line\">./controller-manager.conf:    server: https://10.138.3.61:6443</span><br><span class=\"line\">./kubelet.conf:    server: https://10.138.3.61:6443</span><br><span class=\"line\">grep: ./manifests: Is a directory</span><br><span class=\"line\">grep: ./pki: Is a directory</span><br><span class=\"line\">./scheduler.conf:    server: https://10.138.3.61:6443</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> vim controller-manager.conf</span> </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> vim kubelet.conf</span> </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> vim scheduler.conf</span> </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> vim /kubernetes/admin.conf</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> grep 192.168.1.161 ./*</span></span><br><span class=\"line\">./admin.conf:    server: https://192.168.1.161:6443</span><br><span class=\"line\">./controller-manager.conf:    server: https://192.168.1.161:6443</span><br><span class=\"line\">./kubelet.conf:    server: https://192.168.1.161:6443</span><br><span class=\"line\">grep: ./manifests: Is a directory</span><br><span class=\"line\">grep: ./pki: Is a directory</span><br><span class=\"line\">./scheduler.conf:    server: https://192.168.1.161:6443</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls pki/</span></span><br><span class=\"line\">apiserver.crt              apiserver-etcd-client.key  apiserver-kubelet-client.crt  ca.crt  etcd                front-proxy-ca.key      front-proxy-client.key  sa.pub</span><br><span class=\"line\">apiserver-etcd-client.crt  apiserver.key              apiserver-kubelet-client.key  ca.key  front-proxy-ca.crt  front-proxy-client.crt  sa.key</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">cd</span> manifests/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls</span> </span><br><span class=\"line\">etcd.yaml  kube-apiserver.yaml  kube-controller-manager.yaml  kube-scheduler.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> grep 10.138.3.61 ./*</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">cd</span> ..</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">cd</span> pki/</span></span><br><span class=\"line\">[root@k8s-master pki]# ls </span><br><span class=\"line\">apiserver.crt       apiserver-etcd-client.key  apiserver-kubelet-client.crt  ca.crt  etcd                front-proxy-ca.key  front-proxy-client.key  sa.pub   apiserver-etcd-client.crt  apiserver.key           apiserver-kubelet-client.key  ca.key  front-proxy-ca.crt  front-proxy-client.crt  sa.key</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> grep 10.138.3.61 ./*</span></span><br><span class=\"line\">grep: ./etcd: Is a directory</span><br></pre></td></tr></table></figure>\n\n<p>​        修改完成后重启kubelet，重新执行<code>kubeadm init</code>最后发现还是一样的报错。估计还是有些地方的master IP地址没有被完全修改过来。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> systemctl restart kubelet</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-2-通过kubeadm-reset对-kubeadm-init-执行的结果进行重置\"><a href=\"#4-2-通过kubeadm-reset对-kubeadm-init-执行的结果进行重置\" class=\"headerlink\" title=\"4.2 通过kubeadm reset对``kubeadm init`执行的结果进行重置\"></a>4.2 通过<code>kubeadm reset</code>对``kubeadm init`执行的结果进行重置</h4><p>​        修改完成后，最后在网上找了下，发现还有一个<code>kubeadm reset</code>命令，直接执行重置吧，重置后<code>/etc/kubernets/</code>目录下的文件都被清除了，然后重新执行<code>kubeadm init</code>执行，执行成功。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubeadm reset</span></span><br><span class=\"line\">[reset] Reading configuration from the cluster...</span><br><span class=\"line\">[reset] FYI: You can look at this config file with &#x27;kubectl -n kube-system get cm kubeadm-config -o yaml&#x27;</span><br><span class=\"line\">W0511 22:15:35.820560   29879 reset.go:99] [reset] Unable to fetch the kubeadm-config ConfigMap from cluster: failed to get config map: Get &quot;https://192.168.1.161:6443/api/v1/namespaces/kube-system/configmaps/kubeadm-config?timeout=10s&quot;: x509: certificate is valid for 10.96.0.1, 10.138.3.61, not 192.168.1.161</span><br><span class=\"line\">[reset] WARNING: Changes made to this host by &#x27;kubeadm init&#x27; or &#x27;kubeadm join&#x27; will be reverted.</span><br><span class=\"line\">[reset] Are you sure you want to proceed? [y/N]: y</span><br><span class=\"line\">[preflight] Running pre-flight checks</span><br><span class=\"line\">W0511 22:15:38.763187   29879 removeetcdmember.go:79] [reset] No kubeadm config, using etcd pod spec to get data directory</span><br><span class=\"line\">[reset] Stopping the kubelet service</span><br><span class=\"line\">[reset] Unmounting mounted directories in &quot;/var/lib/kubelet&quot;</span><br><span class=\"line\">[reset] Deleting contents of config directories: [/etc/kubernetes/manifests /etc/kubernetes/pki]</span><br><span class=\"line\">[reset] Deleting files: [/etc/kubernetes/admin.conf /etc/kubernetes/kubelet.conf /etc/kubernetes/bootstrap-kubelet.conf /etc/kubernetes/controller-manager.conf /etc/kubernetes/scheduler.conf]</span><br><span class=\"line\">[reset] Deleting contents of stateful directories: [/var/lib/etcd /var/lib/kubelet /var/lib/dockershim /var/run/kubernetes /var/lib/cni]</span><br><span class=\"line\"></span><br><span class=\"line\">The reset process does not clean CNI configuration. To do so, you must remove /etc/cni/net.d</span><br><span class=\"line\"></span><br><span class=\"line\">The reset process does not reset or clean up iptables rules or IPVS tables.</span><br><span class=\"line\">If you wish to reset iptables, you must do so manually by using the &quot;iptables&quot; command.</span><br><span class=\"line\"></span><br><span class=\"line\">If your cluster was setup to utilize IPVS, run ipvsadm --clear (or similar)</span><br><span class=\"line\">to reset your system&#x27;s IPVS tables.</span><br><span class=\"line\"></span><br><span class=\"line\">The reset process does not clean your kubeconfig files and you must remove them manually.</span><br><span class=\"line\">Please, check the contents of the $HOME/.kube/config file.</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>执行完成后，查看<code>/etc/kubernets</code>目录信息</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls /etc/kubernetes/</span></span><br><span class=\"line\">manifests  pki</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls /var/lib/kubelet</span></span><br><span class=\"line\"><span class=\"meta\">#</span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># ls /var/lib/kubelet/</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>再次执行<code>kubeadm init</code>指令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubeadm init    --apiserver-advertise-address=192.168.1.161    --image-repository registry.aliyuncs.com/google_containers    --kubernetes-version v1.20.0    --service-cidr=10.96.0.0/12    --pod-network-cidr=10.244.0.0/16    --ignore-preflight-errors=all</span></span><br><span class=\"line\">[init] Using Kubernetes version: v1.20.0</span><br><span class=\"line\">[preflight] Running pre-flight checks</span><br><span class=\"line\">\t[WARNING IsDockerSystemdCheck]: detected &quot;cgroupfs&quot; as the Docker cgroup driver. The recommended driver is &quot;systemd&quot;. Please follow the guide at https://kubernetes.io/docs/setup/cri/</span><br><span class=\"line\">\t[WARNING SystemVerification]: this Docker version is not on the list of validated versions: 20.10.6. Latest validated version: 19.03</span><br><span class=\"line\">[preflight] Pulling images required for setting up a Kubernetes cluster</span><br><span class=\"line\">[preflight] This might take a minute or two, depending on the speed of your internet connection</span><br><span class=\"line\">[preflight] You can also perform this action in beforehand using &#x27;kubeadm config images pull&#x27;</span><br><span class=\"line\">[certs] Using certificateDir folder &quot;/etc/kubernetes/pki&quot;</span><br><span class=\"line\">[certs] Generating &quot;ca&quot; certificate and key</span><br><span class=\"line\">[certs] Generating &quot;apiserver&quot; certificate and key</span><br><span class=\"line\">[certs] apiserver serving cert is signed for DNS names [k8s-master kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 192.168.1.161]</span><br><span class=\"line\">[certs] Generating &quot;apiserver-kubelet-client&quot; certificate and key</span><br><span class=\"line\">[certs] Generating &quot;front-proxy-ca&quot; certificate and key</span><br><span class=\"line\">[certs] Generating &quot;front-proxy-client&quot; certificate and key</span><br><span class=\"line\">[certs] Generating &quot;etcd/ca&quot; certificate and key</span><br><span class=\"line\">[certs] Generating &quot;etcd/server&quot; certificate and key</span><br><span class=\"line\">[certs] etcd/server serving cert is signed for DNS names [k8s-master localhost] and IPs [192.168.1.161 127.0.0.1 ::1]</span><br><span class=\"line\">[certs] Generating &quot;etcd/peer&quot; certificate and key</span><br><span class=\"line\">[certs] etcd/peer serving cert is signed for DNS names [k8s-master localhost] and IPs [192.168.1.161 127.0.0.1 ::1]</span><br><span class=\"line\">[certs] Generating &quot;etcd/healthcheck-client&quot; certificate and key</span><br><span class=\"line\">[certs] Generating &quot;apiserver-etcd-client&quot; certificate and key</span><br><span class=\"line\">[certs] Generating &quot;sa&quot; key and public key</span><br><span class=\"line\">[kubeconfig] Using kubeconfig folder &quot;/etc/kubernetes&quot;</span><br><span class=\"line\">[kubeconfig] Writing &quot;admin.conf&quot; kubeconfig file</span><br><span class=\"line\">[kubeconfig] Writing &quot;kubelet.conf&quot; kubeconfig file</span><br><span class=\"line\">[kubeconfig] Writing &quot;controller-manager.conf&quot; kubeconfig file</span><br><span class=\"line\">[kubeconfig] Writing &quot;scheduler.conf&quot; kubeconfig file</span><br><span class=\"line\">[kubelet-start] Writing kubelet environment file with flags to file &quot;/var/lib/kubelet/kubeadm-flags.env&quot;</span><br><span class=\"line\">[kubelet-start] Writing kubelet configuration to file &quot;/var/lib/kubelet/config.yaml&quot;</span><br><span class=\"line\">[kubelet-start] Starting the kubelet</span><br><span class=\"line\">[control-plane] Using manifest folder &quot;/etc/kubernetes/manifests&quot;</span><br><span class=\"line\">[control-plane] Creating static Pod manifest for &quot;kube-apiserver&quot;</span><br><span class=\"line\">[control-plane] Creating static Pod manifest for &quot;kube-controller-manager&quot;</span><br><span class=\"line\">[control-plane] Creating static Pod manifest for &quot;kube-scheduler&quot;</span><br><span class=\"line\">[etcd] Creating static Pod manifest for local etcd in &quot;/etc/kubernetes/manifests&quot;</span><br><span class=\"line\">[wait-control-plane] Waiting for the kubelet to boot up the control plane as static Pods from directory &quot;/etc/kubernetes/manifests&quot;. This can take up to 4m0s</span><br><span class=\"line\">[apiclient] All control plane components are healthy after 17.505569 seconds</span><br><span class=\"line\">[upload-config] Storing the configuration used in ConfigMap &quot;kubeadm-config&quot; in the &quot;kube-system&quot; Namespace</span><br><span class=\"line\">[kubelet] Creating a ConfigMap &quot;kubelet-config-1.20&quot; in namespace kube-system with the configuration for the kubelets in the cluster</span><br><span class=\"line\">[upload-certs] Skipping phase. Please see --upload-certs</span><br><span class=\"line\">[mark-control-plane] Marking the node k8s-master as control-plane by adding the labels &quot;node-role.kubernetes.io/master=&#x27;&#x27;&quot; and &quot;node-role.kubernetes.io/control-plane=&#x27;&#x27; (deprecated)&quot;</span><br><span class=\"line\">[mark-control-plane] Marking the node k8s-master as control-plane by adding the taints [node-role.kubernetes.io/master:NoSchedule]</span><br><span class=\"line\">[bootstrap-token] Using token: vinsmk.xbnjfgu6oinhaqhq</span><br><span class=\"line\">[bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles</span><br><span class=\"line\">[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to get nodes</span><br><span class=\"line\">[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials</span><br><span class=\"line\">[bootstrap-token] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token</span><br><span class=\"line\">[bootstrap-token] configured RBAC rules to allow certificate rotation for all node client certificates in the cluster</span><br><span class=\"line\">[bootstrap-token] Creating the &quot;cluster-info&quot; ConfigMap in the &quot;kube-public&quot; namespace</span><br><span class=\"line\">[kubelet-finalize] Updating &quot;/etc/kubernetes/kubelet.conf&quot; to point to a rotatable kubelet client certificate and key</span><br><span class=\"line\">[addons] Applied essential addon: CoreDNS</span><br><span class=\"line\">[addons] Applied essential addon: kube-proxy</span><br><span class=\"line\"></span><br><span class=\"line\">Your Kubernetes control-plane has initialized successfully!</span><br><span class=\"line\"></span><br><span class=\"line\">To start using your cluster, you need to run the following as a regular user:</span><br><span class=\"line\"></span><br><span class=\"line\">  mkdir -p $HOME/.kube</span><br><span class=\"line\">  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class=\"line\">  sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br><span class=\"line\"></span><br><span class=\"line\">Alternatively, if you are the root user, you can run:</span><br><span class=\"line\"></span><br><span class=\"line\">  export KUBECONFIG=/etc/kubernetes/admin.conf</span><br><span class=\"line\"></span><br><span class=\"line\">You should now deploy a pod network to the cluster.</span><br><span class=\"line\">Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:</span><br><span class=\"line\">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class=\"line\"></span><br><span class=\"line\">Then you can join any number of worker nodes by running the following on each as root:</span><br><span class=\"line\"></span><br><span class=\"line\">kubeadm join 192.168.1.161:6443 --token vinsmk.xbnjfgu6oinhaqhq \\</span><br><span class=\"line\">    --discovery-token-ca-cert-hash sha256:a8b0f1b5d0b4809ace84730405a5235a7dcb68595a037aacf78723bb704e8da5 </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-kubeadm命令\"><a href=\"#5-kubeadm命令\" class=\"headerlink\" title=\"5.kubeadm命令\"></a>5.<code>kubeadm</code>命令</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubeadm --<span class=\"built_in\">help</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    ┌──────────────────────────────────────────────────────────┐</span><br><span class=\"line\">    │ KUBEADM                                                  │</span><br><span class=\"line\">    │ Easily bootstrap a secure Kubernetes cluster             │</span><br><span class=\"line\">    │                                                          │</span><br><span class=\"line\">    │ Please give us feedback at:                              │</span><br><span class=\"line\">    │ https://github.com/kubernetes/kubeadm/issues             │</span><br><span class=\"line\">    └──────────────────────────────────────────────────────────┘</span><br><span class=\"line\"></span><br><span class=\"line\">Example usage:</span><br><span class=\"line\"></span><br><span class=\"line\">    Create a two-machine cluster with one control-plane node</span><br><span class=\"line\">    (which controls the cluster), and one worker node</span><br><span class=\"line\">    (where your workloads, like Pods and Deployments run).</span><br><span class=\"line\"></span><br><span class=\"line\">    ┌──────────────────────────────────────────────────────────┐</span><br><span class=\"line\">    │ On the first machine:                                    │</span><br><span class=\"line\">    ├──────────────────────────────────────────────────────────┤</span><br><span class=\"line\">    │ control-plane# kubeadm init                              │</span><br><span class=\"line\">    └──────────────────────────────────────────────────────────┘</span><br><span class=\"line\"></span><br><span class=\"line\">    ┌──────────────────────────────────────────────────────────┐</span><br><span class=\"line\">    │ On the second machine:                                   │</span><br><span class=\"line\">    ├──────────────────────────────────────────────────────────┤</span><br><span class=\"line\">    │ worker# kubeadm join &lt;arguments-returned-from-init&gt;      │</span><br><span class=\"line\">    └──────────────────────────────────────────────────────────┘</span><br><span class=\"line\"></span><br><span class=\"line\">    You can then repeat the second step on as many other machines as you like.</span><br><span class=\"line\"></span><br><span class=\"line\">Usage:</span><br><span class=\"line\">  kubeadm [command]</span><br><span class=\"line\"></span><br><span class=\"line\">Available Commands:</span><br><span class=\"line\">  alpha       Kubeadm experimental sub-commands</span><br><span class=\"line\">  certs       Commands related to handling kubernetes certificates</span><br><span class=\"line\">  completion  Output shell completion code for the specified shell (bash or zsh)</span><br><span class=\"line\">  config      Manage configuration for a kubeadm cluster persisted in a ConfigMap in the cluster</span><br><span class=\"line\">  help        Help about any command</span><br><span class=\"line\">  init        Run this command in order to set up the Kubernetes control plane</span><br><span class=\"line\">  join        Run this on any machine you wish to join an existing cluster</span><br><span class=\"line\">  reset       Performs a best effort revert of changes made to this host by &#x27;kubeadm init&#x27; or &#x27;kubeadm join&#x27;</span><br><span class=\"line\">  token       Manage bootstrap tokens</span><br><span class=\"line\">  upgrade     Upgrade your cluster smoothly to a newer version with this command</span><br><span class=\"line\">  version     Print the version of kubeadm</span><br><span class=\"line\"></span><br><span class=\"line\">Flags:</span><br><span class=\"line\">      --add-dir-header           If true, adds the file directory to the header of the log messages</span><br><span class=\"line\">  -h, --help                     help for kubeadm</span><br><span class=\"line\">      --log-file string          If non-empty, use this log file</span><br><span class=\"line\">      --log-file-max-size uint   Defines the maximum size a log file can grow to. Unit is megabytes. If the value is 0, the maximum file size is unlimited. (default 1800)</span><br><span class=\"line\">      --one-output               If true, only write logs to their native severity level (vs also writing to each lower severity level</span><br><span class=\"line\">      --rootfs string            [EXPERIMENTAL] The path to the &#x27;real&#x27; host root filesystem.</span><br><span class=\"line\">      --skip-headers             If true, avoid header prefixes in the log messages</span><br><span class=\"line\">      --skip-log-headers         If true, avoid headers when opening log files</span><br><span class=\"line\">  -v, --v Level                  number for the log level verbosity</span><br><span class=\"line\"></span><br><span class=\"line\">Use &quot;kubeadm [command] --help&quot; for more information about a command.</span><br></pre></td></tr></table></figure>\n\n<p>常用命令如下：</p>\n<p>官网地址：<a href=\"https://kubernetes.io/zh/docs/reference/setup-tools/kubeadm/%EF%BC%8C%E5%85%B7%E4%BD%93%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E5%8F%AF%E4%BB%A5%E5%8F%82%E8%80%83%E5%AE%98%E7%BD%91%E3%80%82\">https://kubernetes.io/zh/docs/reference/setup-tools/kubeadm/，具体使用方法可以参考官网。</a></p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm init           用于搭建控制平面节点</span><br><span class=\"line\">kubeadm join           用于搭建工作节点并将其加入到集群中</span><br><span class=\"line\">kubeadm upgrade        用于升级 Kubernetes 集群到新版本</span><br><span class=\"line\">kubeadm config 如果你使用了 v1.7.x 或更低版本的 kubeadm 版本初始化你的集群，则使用 kubeadm upgrade 来配置你的集群</span><br><span class=\"line\">kubeadm token          用于管理 kubeadm join 使用的令牌</span><br><span class=\"line\">kubeadm reset          用于恢复通过 kubeadm init 或者 kubeadm join 命令对节点进行的任何变更</span><br><span class=\"line\">kubeadm certs          用于管理 Kubernetes 证书</span><br><span class=\"line\">kubeadm kubeconfig     用于管理 kubeconfig 文件</span><br><span class=\"line\">kubeadm version        用于打印 kubeadm 的版本信息</span><br><span class=\"line\">kubeadm alpha          用于预览一组可用于收集社区反馈的特性</span><br></pre></td></tr></table></figure>\n","comments":true,"permalink":"https://qingdalf.github.io/2021-05/kuberErr/","categories":[{"name":"kubernets","slug":"kubernets","permalink":"https://qingdalf.github.io/categories/kubernets/"}],"tags":[]},{"title":"项目部署案例","date":"2021-05-09T16:47:24.000Z","path":"2021-05/kuberExample/","content":"<h2 id=\"实际项目部署案例\"><a href=\"#实际项目部署案例\" class=\"headerlink\" title=\"实际项目部署案例\"></a>实际项目部署案例</h2><h3 id=\"1-容器部署流程\"><a href=\"#1-容器部署流程\" class=\"headerlink\" title=\"1. 容器部署流程\"></a>1. 容器部署流程</h3><p><img src=\"../kuberPre/image-20210527002211216.png\" alt=\"image-20210527002211216\"></p>\n<h3 id=\"2-k8s部署流程\"><a href=\"#2-k8s部署流程\" class=\"headerlink\" title=\"2. k8s部署流程\"></a>2. k8s部署流程</h3><p><img src=\"../kuberPre/image-20210527002240497.png\" alt=\"image-20210527002240497\"></p>\n<span id=\"more\"></span>\n\n<h3 id=\"3-案例：在K8s平台部署Java网站项目\"><a href=\"#3-案例：在K8s平台部署Java网站项目\" class=\"headerlink\" title=\"3. 案例：在K8s平台部署Java网站项目\"></a>3. 案例：在K8s平台部署Java网站项目</h3><p>在k8s上部署项目的前提：</p>\n<ul>\n<li>了解项目代码的构成</li>\n<li>了解依赖的服务</li>\n<li>了解服务的端口</li>\n<li>了解配置文件路径和配置文件内容</li>\n<li>了解程序在运行中是否产生业务数据</li>\n</ul>\n<h4 id=\"3-1-制作镜像\"><a href=\"#3-1-制作镜像\" class=\"headerlink\" title=\"3.1 制作镜像\"></a>3.1 制作镜像</h4><p>​        为保证k8s环境的干净和整洁，建议在k8s集群外的机器上制作镜像，制作完成后再上传到k8s镜像仓库。</p>\n<ul>\n<li>按照依赖</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum -y install java-1.8.0-openjdk maven git</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 验证</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> java -version</span></span><br><span class=\"line\">openjdk version &quot;1.8.0_292&quot;</span><br><span class=\"line\">OpenJDK Runtime Environment (build 1.8.0_292-b10)</span><br><span class=\"line\">OpenJDK 64-Bit Server VM (build 25.292-b10, mixed mode)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> git --version</span></span><br><span class=\"line\">git version 1.8.3.1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> mvn --version</span></span><br><span class=\"line\">Apache Maven 3.0.5 (Red Hat 3.0.5-17)</span><br><span class=\"line\">Maven home: /usr/share/maven</span><br><span class=\"line\">Java version: 1.8.0_292, vendor: Red Hat, Inc.</span><br><span class=\"line\">Java home: /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.292.b10-1.el7_9.x86_64/jre</span><br><span class=\"line\">Default locale: en_US, platform encoding: UTF-8</span><br><span class=\"line\">OS name: &quot;linux&quot;, version: &quot;3.10.0-1160.21.1.el7.x86_64&quot;, arch: &quot;amd64&quot;, family: &quot;unix&quot;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>拉取代码</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> git <span class=\"built_in\">clone</span> https://github.com/lizhenliang/tomcat-java-demo</span></span><br><span class=\"line\">Cloning into &#x27;tomcat-java-demo&#x27;...</span><br><span class=\"line\">remote: Enumerating objects: 549, done.</span><br><span class=\"line\">remote: Counting objects: 100% (3/3), done.</span><br><span class=\"line\">remote: Compressing objects: 100% (3/3), done.</span><br><span class=\"line\">remote: Total 549 (delta 0), reused 2 (delta 0), pack-reused 546</span><br><span class=\"line\">Receiving objects: 100% (549/549), 5.08 MiB | 1.49 MiB/s, done.</span><br><span class=\"line\">Resolving deltas: 100% (213/213), done.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ll tomcat-java-demo/</span></span><br><span class=\"line\">total 24</span><br><span class=\"line\">drwxr-xr-x 2 root root    34 May 28 10:04 db</span><br><span class=\"line\">-rw-r--r-- 1 root root   148 May 28 10:04 Dockerfile</span><br><span class=\"line\">-rw-r--r-- 1 root root 11357 May 28 10:04 LICENSE</span><br><span class=\"line\">-rw-r--r-- 1 root root  1930 May 28 10:04 pom.xml</span><br><span class=\"line\">-rw-r--r-- 1 root root   100 May 28 10:04 README.md</span><br><span class=\"line\">drwxr-xr-x 3 root root    18 May 28 10:04 src</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>编译</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">cd</span> tomcat-java-demo/</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> vim src/main/resources/application.yml</span>   </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 修改数据库的连接配置文件，后期我们用comfigmap进行配置文件的管理，此处可不配置</span></span><br><span class=\"line\">server:</span><br><span class=\"line\">  port: 8080</span><br><span class=\"line\">spring:</span><br><span class=\"line\">  datasource:</span><br><span class=\"line\">    url: jdbc:mysql://java-demo-db:3306/test?characterEncoding=utf-8 </span><br><span class=\"line\">    # 将此处的localhost修改成数据库pod的svc，名称必须为后期定义的数据库的svc名称</span><br><span class=\"line\">    username: root</span><br><span class=\"line\">    password: 123456        # 修改用户名和密码，跟数据库的用户名和密码一致</span><br><span class=\"line\">    driver-class-name: com.mysql.jdbc.Driver</span><br><span class=\"line\">  freemarker:</span><br><span class=\"line\">    allow-request-override: false</span><br><span class=\"line\">    cache: true</span><br><span class=\"line\">    check-template-location: true</span><br><span class=\"line\">    charset: UTF-8</span><br><span class=\"line\">    content-type: text/html; charset=utf-8</span><br><span class=\"line\">    expose-request-attributes: false</span><br><span class=\"line\">    expose-session-attributes: false</span><br><span class=\"line\">    expose-spring-macro-helpers: false</span><br><span class=\"line\">    suffix: .ftl</span><br><span class=\"line\">    template-loader-path:</span><br><span class=\"line\">      - classpath:/templates/</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> mvn clean package -Dmaven.test.skip=<span class=\"literal\">true</span></span>      </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 代码编译构建，如果下载过程较慢，可修改maven仓库为阿里云，方法可参考下文</span></span><br><span class=\"line\">Downloaded: ········</span><br><span class=\"line\">[INFO] Packaging webapp</span><br><span class=\"line\">[INFO] Assembling webapp [ly-simple-tomcat] in [/root/tomcat-java-demo/target/ly-simple-tomcat-0.0.1-SNAPSHOT]</span><br><span class=\"line\">[INFO] Processing war project</span><br><span class=\"line\">[INFO] Webapp assembled in [116 msecs]  # 生产ly-simple-tomcat-0.0.1-SNAPSHOT.war包</span><br><span class=\"line\">[INFO] Building war: /root/tomcat-java-demo/target/ly-simple-tomcat-0.0.1-SNAPSHOT.war</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] BUILD SUCCESS</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] Total time: 2:48.945s</span><br><span class=\"line\">[INFO] Finished at: Fri May 28 10:15:07 CST 2021</span><br><span class=\"line\">[INFO] Final Memory: 25M/264M</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ll</span> </span><br><span class=\"line\">total 24</span><br><span class=\"line\">drwxr-xr-x 2 root root    34 May 28 10:04 db</span><br><span class=\"line\">-rw-r--r-- 1 root root   148 May 28 10:04 Dockerfile</span><br><span class=\"line\">-rw-r--r-- 1 root root 11357 May 28 10:04 LICENSE</span><br><span class=\"line\">-rw-r--r-- 1 root root  1930 May 28 10:04 pom.xml</span><br><span class=\"line\">-rw-r--r-- 1 root root   100 May 28 10:04 README.md</span><br><span class=\"line\">drwxr-xr-x 3 root root    18 May 28 10:04 src</span><br><span class=\"line\">drwxr-xr-x 7 root root   170 May 28 10:15 target     # 新生产的目录文件</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ll target/</span></span><br><span class=\"line\">total 17840</span><br><span class=\"line\">drwxr-xr-x 5 root root       95 May 28 10:14 classes</span><br><span class=\"line\">drwxr-xr-x 3 root root       25 May 28 10:14 generated-sources</span><br><span class=\"line\">drwxr-xr-x 4 root root       37 May 28 10:15 ly-simple-tomcat-0.0.1-SNAPSHOT</span><br><span class=\"line\">-rw-r--r-- 1 root root 18265402 May 28 10:15 ly-simple-tomcat-0.0.1-SNAPSHOT.war</span><br><span class=\"line\">drwxr-xr-x 2 root root       28 May 28 10:15 maven-archiver</span><br><span class=\"line\">drwxr-xr-x 3 root root       35 May 28 10:14 maven-status</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> unzip target/*.war -d target/ROOT       <span class=\"comment\"># 解压构建文件</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ll target/</span></span><br><span class=\"line\">total 17840</span><br><span class=\"line\">drwxr-xr-x 5 root root       95 May 28 10:14 classes</span><br><span class=\"line\">drwxr-xr-x 3 root root       25 May 28 10:14 generated-sources</span><br><span class=\"line\">drwxr-xr-x 4 root root       37 May 28 10:15 ly-simple-tomcat-0.0.1-SNAPSHOT</span><br><span class=\"line\">-rw-r--r-- 1 root root 18265402 May 28 10:15 ly-simple-tomcat-0.0.1-SNAPSHOT.war</span><br><span class=\"line\">drwxr-xr-x 2 root root       28 May 28 10:15 maven-archiver</span><br><span class=\"line\">drwxr-xr-x 3 root root       35 May 28 10:14 maven-status</span><br><span class=\"line\">drwxr-xr-x 4 root root       37 May 28 10:24 ROOT</span><br></pre></td></tr></table></figure>\n\n<p>附：如果使用maven构建代码时，下载较慢，可以使用国内阿里云镜像仓库</p>\n<p>配置方法：</p>\n<p>阿里云配置教程：<a href=\"https://maven.aliyun.com/mvn/guide\">https://maven.aliyun.com/mvn/guide</a></p>\n<p><img src=\"../kuberPre/image-20210528101714356.png\" alt=\"image-20210528101714356\"></p>\n<p>将下面的代码复制到maven配置文件settings.xml中的<mirrors></mirrors>标签中添加 mirror 子节点:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> vim  /etc/maven/settings.xml  <span class=\"comment\">#</span></span> </span><br><span class=\"line\">&lt;mirror&gt;</span><br><span class=\"line\">  &lt;id&gt;aliyunmaven&lt;/id&gt;</span><br><span class=\"line\">  &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;</span><br><span class=\"line\">  &lt;name&gt;阿里云公共仓库&lt;/name&gt;</span><br><span class=\"line\">  &lt;url&gt;https://maven.aliyun.com/repository/public&lt;/url&gt;</span><br><span class=\"line\">&lt;/mirror&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>编制dockerfile</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">cd</span></span> </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> mv /root/tomcat-java-demo/target/ROOT .</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> vim Dockerfile</span></span><br><span class=\"line\">FROM lizhenliang/tomcat</span><br><span class=\"line\">LABEL maintainer qingdalf</span><br><span class=\"line\">RUN rm -rf /usr/local/tomcat/webapps/*</span><br><span class=\"line\">COPY ./ROOT /usr/local/tomcat/webapps/ROOT</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>构建镜像</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker build -t tomcat:v1 .</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker image ls  | grep tomcat</span></span><br><span class=\"line\">tomcat           v1           fa690e7f1901   16 seconds ago   689MB</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 验证镜像可用性</span></span><br><span class=\"line\">docker run -d -p 8080:8080 tomcat:v1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker ps</span> </span><br><span class=\"line\">CONTAINER ID   IMAGE    COMMAND        CREATED        STATUS        PORTS                  NAMES</span><br><span class=\"line\">40f3d613527b tomcat:v1&quot;catalina.sh run&quot;21 seconds ago Up 20 seconds 0.0.0.0:8080-&gt;8080/tcp sweet_murdock</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> curl -I  10.138.3.130:8080</span> </span><br><span class=\"line\">HTTP/1.1 200    # 状态码为200，镜像制作成功，若访问失败，则重新制作镜像</span><br><span class=\"line\">Content-Type: text/html;charset=utf-8</span><br><span class=\"line\">Content-Language: en</span><br><span class=\"line\">Content-Length: 2538</span><br><span class=\"line\">Date: Fri, 28 May 2021 03:29:58 GMT</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>上传镜像到镜像仓库</li>\n</ul>\n<p>此处使用docker官方仓库，首先在docker官方参考中新建java-demo公共仓库，完成后在上传镜像到docker仓库中</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 打标签</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker tag tomcat:v1 qingdalf/java-demo:v1</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker image ls | grep java</span></span><br><span class=\"line\">qingdalf/java-demo              v1                  fa690e7f1901   5 minutes ago   689MB</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 登陆docker官方仓库</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker login</span> </span><br><span class=\"line\">Login with your Docker ID to push and pull images from Docker Hub. If you don&#x27;t have a Docker ID, head over to https://hub.docker.com to create one.</span><br><span class=\"line\">Username: qingdalf</span><br><span class=\"line\">Password: </span><br><span class=\"line\">WARNING! Your password will be stored unencrypted in /root/.docker/config.json.</span><br><span class=\"line\">Configure a credential helper to remove this warning. See</span><br><span class=\"line\">https://docs.docker.com/engine/reference/commandline/login/#credentials-store</span><br><span class=\"line\"></span><br><span class=\"line\">Login Succeeded</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 推送镜像</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker push qingdalf/java-demo:v1</span></span><br><span class=\"line\">····</span><br><span class=\"line\">v1: digest: sha256:d9e9f9faf4f5b960b988c7feb5ef2d7dea2eec66d9a34179f77e1975e1981460 size: 2633</span><br></pre></td></tr></table></figure>\n\n<p>推送完成后，docker官方仓库如下：</p>\n<p><img src=\"../kuberPre/image-20210528111009242.png\" alt=\"image-20210528111009242\"></p>\n<h4 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h4><h4 id=\"3-2-部署项目\"><a href=\"#3-2-部署项目\" class=\"headerlink\" title=\"3.2 部署项目\"></a>3.2 部署项目</h4><h5 id=\"3-2-1-认证凭据\"><a href=\"#3-2-1-认证凭据\" class=\"headerlink\" title=\"3.2.1 认证凭据\"></a>3.2.1 认证凭据</h5><p>​        如果是内网自建docker私有仓库，需要将镜像仓库认证凭据保存在K8s Secret中，指令如下，本文使用docker公共仓库，因此不需要配置该项。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl create secret docker-registry registry-auth --docker-username=xxx --docker-password=xxx --docker-server=xxx</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 在deployment.yaml文件中需要添加下面的参数使用该认证凭证(与yaml文件中的spec中的contianer同级)</span></span><br><span class=\"line\">imagePullSecrets:</span><br><span class=\"line\">- name: registry-auth</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-2-2-编制deployment、svc、configMap、igress等yaml文件\"><a href=\"#3-2-2-编制deployment、svc、configMap、igress等yaml文件\" class=\"headerlink\" title=\"3.2.2 编制deployment、svc、configMap、igress等yaml文件\"></a>3.2.2 编制deployment、svc、configMap、igress等yaml文件</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> vim deployment.yaml</span> </span><br><span class=\"line\">apiVersion: apps/v1</span><br><span class=\"line\">kind: Deployment</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app: java-demo</span><br><span class=\"line\">  name: java-demo</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  replicas: 1</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      app: java-demo</span><br><span class=\"line\">  strategy: &#123;&#125;</span><br><span class=\"line\">  template:</span><br><span class=\"line\">    metadata:</span><br><span class=\"line\">      labels:</span><br><span class=\"line\">        app: java-demo</span><br><span class=\"line\">    spec: </span><br><span class=\"line\">      containers:</span><br><span class=\"line\">      - image: qingdalf/java-demo:v1</span><br><span class=\"line\">        name: java-demo</span><br><span class=\"line\">        volumeMounts:</span><br><span class=\"line\">        - name: config</span><br><span class=\"line\">          mountPath: &quot;/usr/local/tomcat/webapps/ROOT/WEB-INF/classes/application.yml&quot;</span><br><span class=\"line\">          subPath: application.yml  </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 使用configmap存储配置文件，如果出现容器目标目录下的所有文件不可见（覆盖原有目录内容），可以使用subPath解决这个问题</span></span><br><span class=\"line\"></span><br><span class=\"line\">        resources: </span><br><span class=\"line\">          requests:</span><br><span class=\"line\">            cpu: 0.8</span><br><span class=\"line\">            memory: 500Mi</span><br><span class=\"line\">          limits:</span><br><span class=\"line\">            cpu: 1.2</span><br><span class=\"line\">            memory: 800Mi</span><br><span class=\"line\"></span><br><span class=\"line\">        livenessProbe:</span><br><span class=\"line\">          httpGet:</span><br><span class=\"line\">            path: /</span><br><span class=\"line\">            port: 8080</span><br><span class=\"line\">          initialDelaySeconds: 50</span><br><span class=\"line\">          periodSeconds: 10</span><br><span class=\"line\"></span><br><span class=\"line\">        readinessProbe:</span><br><span class=\"line\">          httpGet:</span><br><span class=\"line\">            path: /</span><br><span class=\"line\">            port: 8080</span><br><span class=\"line\">          initialDelaySeconds: 50</span><br><span class=\"line\">          periodSeconds: 10</span><br><span class=\"line\">        </span><br><span class=\"line\">      volumes:</span><br><span class=\"line\">      - name: config</span><br><span class=\"line\">        configMap:</span><br><span class=\"line\">          name: java-demo-config </span><br><span class=\"line\">          items:</span><br><span class=\"line\">          - key: &quot;application.yml&quot;</span><br><span class=\"line\">            path: &quot;application.yml&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> vim service.yaml</span></span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Service</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app: java-demo</span><br><span class=\"line\">  name: java-demo</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">  - port: 80</span><br><span class=\"line\">    protocol: TCP</span><br><span class=\"line\">    targetPort: 8080</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    app: java-demo</span><br><span class=\"line\">  type: NodePort</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cat ingress.yaml</span> </span><br><span class=\"line\">apiVersion: networking.k8s.io/v1</span><br><span class=\"line\">kind: Ingress</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: java-demo</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  rules:</span><br><span class=\"line\">  - host: java.ctnrs.com</span><br><span class=\"line\">    http:</span><br><span class=\"line\">      paths:</span><br><span class=\"line\">      - path: /</span><br><span class=\"line\">        pathType: Prefix</span><br><span class=\"line\">        backend:</span><br><span class=\"line\">          service:</span><br><span class=\"line\">            name: java-demo</span><br><span class=\"line\">            port:</span><br><span class=\"line\">              number: 80</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> vim comfigmap.yaml</span></span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: ConfigMap</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: java-demo-config</span><br><span class=\"line\">data:</span><br><span class=\"line\">    application.yml: |</span><br><span class=\"line\">        server:</span><br><span class=\"line\">          port: 8080</span><br><span class=\"line\">        spring:</span><br><span class=\"line\">          datasource:</span><br><span class=\"line\">            url: jdbc:mysql://java-demo-db:3306/test?characterEncoding=utf-8</span><br><span class=\"line\">            username: root</span><br><span class=\"line\">            password: 123456</span><br><span class=\"line\">            driver-class-name: com.mysql.jdbc.Driver</span><br><span class=\"line\">          freemarker:</span><br><span class=\"line\">            allow-request-override: false</span><br><span class=\"line\">            cache: true</span><br><span class=\"line\">            check-template-location: true</span><br><span class=\"line\">            charset: UTF-8</span><br><span class=\"line\">            content-type: text/html; charset=utf-8</span><br><span class=\"line\">            expose-request-attributes: false</span><br><span class=\"line\">            expose-session-attributes: false</span><br><span class=\"line\">            expose-spring-macro-helpers: false</span><br><span class=\"line\">            suffix: .ftl</span><br><span class=\"line\">            template-loader-path:</span><br><span class=\"line\">              - classpath:/templates/</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-4-部署项目\"><a href=\"#3-4-部署项目\" class=\"headerlink\" title=\"3.4 部署项目\"></a>3.4 部署项目</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl apply -f configmap.yaml</span> </span><br><span class=\"line\">configmap/java-demo-config created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get configmap</span> </span><br><span class=\"line\">NAME               DATA   AGE</span><br><span class=\"line\">configmap-demo     3      36d</span><br><span class=\"line\">java-demo-config   1      10s</span><br><span class=\"line\">kube-root-ca.crt   1      52d</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl apply -f deployment.yaml</span> </span><br><span class=\"line\">deployment.apps/java-demo created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pods -o wide  | grep java</span> </span><br><span class=\"line\">NAME   READY   STATUS    RESTARTS   AGE     IP              NODE       NOMINATED NODE   READINESS GATES</span><br><span class=\"line\">java-demo-c4f54b498-7wf99  1/1 Running 0   7m45s 10.244.154.221   k8s-node-01   &lt;none&gt;   &lt;none&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl describe pod java-demo-69ff7d5cd9-6kst7</span></span><br><span class=\"line\">····</span><br><span class=\"line\">Events:</span><br><span class=\"line\">  Type    Reason     Age   From               Message</span><br><span class=\"line\">  ----    ------     ----  ----               -------</span><br><span class=\"line\">  Normal  Scheduled  84s   default-scheduler  Successfully assigned default/java-demo-69ff7d5cd9-6kst7 to k8s-node-01</span><br><span class=\"line\">  Normal  Pulling  8m22s  kubelet  Pulling image &quot;qingdalf/java-demo:v1&quot;</span><br><span class=\"line\">  Normal  Pulled   2m6s   kubelet  Successfully pulled image &quot;qingdalf/java-demo:v1&quot; in 6m16.285297688s</span><br><span class=\"line\">  Normal  Created  2m6s   kubelet  Created container java-demo</span><br><span class=\"line\">  Normal  Started  2m6s   kubelet  Started container java-demo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl apply -f service.yaml</span> </span><br><span class=\"line\">service/java-demo created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get svc | grep java</span></span><br><span class=\"line\">java-demo    NodePort    10.106.154.141   &lt;none&gt;        80:32148/TCP   10s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl apply -f ingress.yaml</span> </span><br><span class=\"line\">ingress.networking.k8s.io/java-demo created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get ingress| grep java-demo</span></span><br><span class=\"line\">java-demo       &lt;none&gt;   java.ctnrs.com                                80        21s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 访问验证</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> curl -I 10.106.154.141  <span class=\"comment\"># 通过service访问</span></span></span><br><span class=\"line\">HTTP/1.1 200 </span><br><span class=\"line\">Content-Type: text/html;charset=utf-8</span><br><span class=\"line\">Content-Language: en-US</span><br><span class=\"line\">Content-Length: 2538</span><br><span class=\"line\">Date: Mon, 31 May 2021 07:12:26 GMT</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> curl -I 10.138.3.61:32148   <span class=\"comment\"># 通过宿主机访问</span></span></span><br><span class=\"line\">HTTP/1.1 200 </span><br><span class=\"line\">Content-Type: text/html;charset=utf-8</span><br><span class=\"line\">Content-Language: en-US</span><br><span class=\"line\">Content-Length: 2538</span><br><span class=\"line\">Date: Mon, 31 May 2021 07:12:40 GMT</span><br></pre></td></tr></table></figure>\n\n<p>通过浏览器访问(此时由于还没有配置数据库，还不能使用“添加美女”和“今晚翻盘哪个”功能)：</p>\n<p><img src=\"../kuberPre/image-20210528121720843.png\" alt=\"image-20210528121720843\"></p>\n<p>验证ingress功能：</p>\n<p>​        由于实验环境没有搭建DNS服务器，因此此处我们将域名解析写入访问机的hosts文件(windows系统hosts文件路径：<code>C:\\Windows\\System32\\drivers\\etc\\hosts</code>)，然后通过域名访问，结果如下：</p>\n<p><img src=\"../kuberPre/image-20210531154430281.png\" alt=\"image-20210531154430281\"></p>\n<h4 id=\"3-5-部署数据库\"><a href=\"#3-5-部署数据库\" class=\"headerlink\" title=\"3.5 部署数据库\"></a>3.5 部署数据库</h4><p>​        为完善java应用功能，使其可以连接数据库，接下来配置数据库。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cat mysql.yaml </span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Secret</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">java-demo-db</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">default</span></span><br><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">Opaque</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">mysql-root-password:</span> <span class=\"string\">&quot;MTIzNDU2&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">mysql-password:</span> <span class=\"string\">&quot;MTIzNDU2&quot;</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">java-demo-db</span> </span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">default</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">project:</span> <span class=\"string\">www</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">project:</span> <span class=\"string\">www</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">db</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">mysql:5.7.30</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">500m</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">512Mi</span></span><br><span class=\"line\">          <span class=\"attr\">limits:</span> </span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">500m</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">512Mi</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MYSQL_ROOT_PASSWORD</span></span><br><span class=\"line\">          <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">            <span class=\"attr\">secretKeyRef:</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">java-demo-db</span></span><br><span class=\"line\">              <span class=\"attr\">key:</span> <span class=\"string\">mysql-root-password</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MYSQL_PASSWORD</span></span><br><span class=\"line\">          <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">            <span class=\"attr\">secretKeyRef:</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">java-demo-db</span></span><br><span class=\"line\">              <span class=\"attr\">key:</span> <span class=\"string\">mysql-password</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MYSQL_USER</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">&quot;aliang&quot;</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MYSQL_DATABASE</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">&quot;k8s&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">          <span class=\"attr\">containerPort:</span> <span class=\"number\">3306</span></span><br><span class=\"line\">        <span class=\"attr\">livenessProbe:</span></span><br><span class=\"line\">          <span class=\"attr\">exec:</span></span><br><span class=\"line\">            <span class=\"attr\">command:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">sh</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">-c</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">&quot;mysqladmin ping -u root -p$&#123;MYSQL_ROOT_PASSWORD&#125;&quot;</span></span><br><span class=\"line\">          <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">30</span></span><br><span class=\"line\">          <span class=\"attr\">periodSeconds:</span> <span class=\"number\">10</span></span><br><span class=\"line\">        <span class=\"attr\">readinessProbe:</span></span><br><span class=\"line\">          <span class=\"attr\">exec:</span></span><br><span class=\"line\">            <span class=\"attr\">command:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">sh</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">-c</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">&quot;mysqladmin ping -u root -p$&#123;MYSQL_ROOT_PASSWORD&#125;&quot;</span></span><br><span class=\"line\">          <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">5</span></span><br><span class=\"line\">          <span class=\"attr\">periodSeconds:</span> <span class=\"number\">10</span></span><br><span class=\"line\">        <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">data</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/var/lib/mysql</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">data</span></span><br><span class=\"line\">        <span class=\"attr\">persistentVolumeClaim:</span></span><br><span class=\"line\">          <span class=\"attr\">claimName:</span> <span class=\"string\">java-demo-db</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolumeClaim</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">java-demo-db</span> </span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">default</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">storageClassName:</span> <span class=\"string\">&quot;managed-nfs-storage&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&quot;ReadWriteOnce&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">    <span class=\"attr\">requests:</span></span><br><span class=\"line\">      <span class=\"attr\">storage:</span> <span class=\"string\">&quot;8Gi&quot;</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">java-demo-db</span>   <span class=\"comment\"># 这里的名称要跟编译前写到MySQL数据库的连接配置文件中url中的名称一致</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">default</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">3306</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">project:</span> <span class=\"string\">www</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">mysql</span> </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># kubectl apply -f mysql.yaml </span></span><br><span class=\"line\"><span class=\"string\">secret/java-demo-db</span> <span class=\"string\">created</span></span><br><span class=\"line\"><span class=\"string\">deployment.apps/java-demo-db</span> <span class=\"string\">created</span></span><br><span class=\"line\"><span class=\"string\">persistentvolumeclaim/java-demo-db</span> <span class=\"string\">created</span></span><br><span class=\"line\"><span class=\"string\">service/java-demo-db</span> <span class=\"string\">created</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># kubectl get pods -o wide | grep java-demo-db</span></span><br><span class=\"line\"><span class=\"string\">java-demo-db-6c775c4d4b-kxhcf</span>  <span class=\"number\">1</span><span class=\"string\">/1</span>   <span class=\"string\">Running</span>   <span class=\"number\">1</span>  <span class=\"string\">47h</span>   <span class=\"number\">10.244</span><span class=\"number\">.154</span><span class=\"number\">.217</span>   <span class=\"string\">k8s-node-01</span>   <span class=\"string\">&lt;none&gt;</span>  <span class=\"string\">&lt;none&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># kubectl exec -it java-demo-db-6c775c4d4b-kxhcf -- bash</span></span><br><span class=\"line\"><span class=\"string\">root@java-demo-db-6c775c4d4b-kxhcf:/#</span>  <span class=\"string\">mysql</span> <span class=\"string\">-uroot</span> <span class=\"string\">-p123456</span></span><br><span class=\"line\"><span class=\"string\">mysql&gt;</span> <span class=\"string\">CREATE</span> <span class=\"string\">DATABASE</span> <span class=\"string\">IF</span> <span class=\"string\">NOT</span> <span class=\"string\">EXISTS</span> <span class=\"string\">`test`</span>  <span class=\"string\">DEFAULT</span> <span class=\"string\">CHARACTER</span> <span class=\"string\">SET</span> <span class=\"string\">utf8</span> <span class=\"string\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">mysql&gt;</span> <span class=\"string\">show</span> <span class=\"string\">databases;</span></span><br><span class=\"line\"><span class=\"string\">+--------------------+</span></span><br><span class=\"line\"><span class=\"string\">|</span> <span class=\"string\">Database</span>           <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">+--------------------+</span></span><br><span class=\"line\"><span class=\"string\">|</span> <span class=\"string\">information_schema</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">|</span> <span class=\"string\">k8s</span>                <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">|</span> <span class=\"string\">mysql</span>              <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">|</span> <span class=\"string\">performance_schema</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">|</span> <span class=\"string\">sys</span>                <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">|</span> <span class=\"string\">test</span>               <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">+--------------------+</span></span><br><span class=\"line\"><span class=\"number\">6</span> <span class=\"string\">rows</span> <span class=\"string\">in</span> <span class=\"string\">set</span> <span class=\"string\">(0.01</span> <span class=\"string\">sec)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">mysql&gt;</span> <span class=\"string\">use</span> <span class=\"string\">test</span></span><br><span class=\"line\"><span class=\"string\">Database</span> <span class=\"string\">changed</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">mysql&gt;</span> <span class=\"string\">show</span> <span class=\"string\">tables;</span></span><br><span class=\"line\"><span class=\"string\">Empty</span> <span class=\"string\">set</span> <span class=\"string\">(0.00</span> <span class=\"string\">sec)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">mysql&gt;</span> <span class=\"string\">CREATE</span> <span class=\"string\">TABLE</span> <span class=\"string\">`user`</span> <span class=\"string\">(</span></span><br><span class=\"line\">    <span class=\"string\">-&gt;</span>   <span class=\"string\">`id`</span> <span class=\"string\">INT(11)</span> <span class=\"string\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"string\">AUTO_INCREMENT,</span></span><br><span class=\"line\">    <span class=\"string\">-&gt;</span>   <span class=\"string\">`name`</span> <span class=\"string\">VARCHAR(100)</span> <span class=\"string\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"string\">COMMENT</span> <span class=\"string\">&#x27;&#x27;</span><span class=\"string\">,</span></span><br><span class=\"line\">    <span class=\"string\">-&gt;</span>   <span class=\"string\">`age`</span> <span class=\"string\">INT(3)</span> <span class=\"string\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"string\">COMMENT</span> <span class=\"string\">&#x27;&#x27;</span><span class=\"string\">,</span></span><br><span class=\"line\">    <span class=\"string\">-&gt;</span>   <span class=\"string\">`sex`</span> <span class=\"string\">CHAR(1)</span> <span class=\"string\">DEFAULT</span> <span class=\"literal\">NULL</span> <span class=\"string\">COMMENT</span> <span class=\"string\">&#x27;&#x27;</span><span class=\"string\">,</span></span><br><span class=\"line\">    <span class=\"string\">-&gt;</span>   <span class=\"string\">PRIMARY</span> <span class=\"string\">KEY</span> <span class=\"string\">(`id`)</span></span><br><span class=\"line\">    <span class=\"string\">-&gt;</span> <span class=\"string\">)</span> <span class=\"string\">ENGINE=INNODB</span> <span class=\"string\">DEFAULT</span> <span class=\"string\">CHARSET=utf8;</span></span><br><span class=\"line\"><span class=\"string\">Query</span> <span class=\"string\">OK,</span> <span class=\"number\">0</span> <span class=\"string\">rows</span> <span class=\"string\">affected</span> <span class=\"string\">(0.01</span> <span class=\"string\">sec)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">mysql&gt;</span> <span class=\"string\">show</span> <span class=\"string\">tables;</span></span><br><span class=\"line\"><span class=\"string\">+----------------+</span></span><br><span class=\"line\"><span class=\"string\">|</span> <span class=\"string\">Tables_in_test</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">+----------------+</span></span><br><span class=\"line\"><span class=\"string\">|</span> <span class=\"string\">user</span>           <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">+----------------+</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"string\">row</span> <span class=\"string\">in</span> <span class=\"string\">set</span> <span class=\"string\">(0.00</span> <span class=\"string\">sec)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">mysql&gt;</span> <span class=\"string\">desc</span> <span class=\"string\">user;</span></span><br><span class=\"line\"><span class=\"string\">+-------+--------------+------+-----+---------+----------------+</span></span><br><span class=\"line\"><span class=\"string\">|</span> <span class=\"string\">Field</span> <span class=\"string\">|</span> <span class=\"string\">Type</span>         <span class=\"string\">|</span> <span class=\"literal\">Null</span> <span class=\"string\">|</span> <span class=\"string\">Key</span> <span class=\"string\">|</span> <span class=\"string\">Default</span> <span class=\"string\">|</span> <span class=\"string\">Extra</span>          <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">+-------+--------------+------+-----+---------+----------------+</span></span><br><span class=\"line\"><span class=\"string\">|</span> <span class=\"string\">id</span>    <span class=\"string\">|</span> <span class=\"string\">int(11)</span>      <span class=\"string\">|</span> <span class=\"literal\">NO</span>   <span class=\"string\">|</span> <span class=\"string\">PRI</span> <span class=\"string\">|</span> <span class=\"literal\">NULL</span>    <span class=\"string\">|</span> <span class=\"string\">auto_increment</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">|</span> <span class=\"string\">name</span>  <span class=\"string\">|</span> <span class=\"string\">varchar(100)</span> <span class=\"string\">|</span> <span class=\"literal\">NO</span>   <span class=\"string\">|</span>     <span class=\"string\">|</span> <span class=\"literal\">NULL</span>    <span class=\"string\">|</span>                <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">|</span> <span class=\"string\">age</span>   <span class=\"string\">|</span> <span class=\"string\">int(3)</span>       <span class=\"string\">|</span> <span class=\"literal\">NO</span>   <span class=\"string\">|</span>     <span class=\"string\">|</span> <span class=\"literal\">NULL</span>    <span class=\"string\">|</span>                <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">|</span> <span class=\"string\">sex</span>   <span class=\"string\">|</span> <span class=\"string\">char(1)</span>      <span class=\"string\">|</span> <span class=\"literal\">YES</span>  <span class=\"string\">|</span>     <span class=\"string\">|</span> <span class=\"literal\">NULL</span>    <span class=\"string\">|</span>                <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">+-------+--------------+------+-----+---------+----------------+</span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"string\">rows</span> <span class=\"string\">in</span> <span class=\"string\">set</span> <span class=\"string\">(0.00</span> <span class=\"string\">sec)</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-6-验证：\"><a href=\"#3-6-验证：\" class=\"headerlink\" title=\"3.6 验证：\"></a>3.6 验证：</h4><p>验证“添加美女”功能：添加四大美女</p>\n<p><img src=\"../kuberPre/image-20210531154713610.png\" alt=\"image-20210531154713610\"></p>\n<p>验证“今晚翻盘哪个”功能，检查是否将四大美女都添加上。</p>\n<p><img src=\"../kuberPre/image-20210531154741392.png\" alt=\"image-20210531154741392\"></p>\n<h4 id=\"3-7-增加公网负载均衡器-以nginx为例\"><a href=\"#3-7-增加公网负载均衡器-以nginx为例\" class=\"headerlink\" title=\"3.7 增加公网负载均衡器(以nginx为例)\"></a>3.7 增加公网负载均衡器(以nginx为例)</h4><p>​        将ingress controller通过负载均衡器进行代理，将负载均衡器暴露在公网上，此处以nginx做演示。</p>\n<p><img src=\"../kuberPre/image-20210531154912748.png\" alt=\"image-20210531154912748\"></p>\n<p>我们添加集群外的一台机器用来做负载均衡器。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum -y install epel-release nginx</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> vim  /etc/nginx/nginx.conf</span></span><br><span class=\"line\">user nginx;</span><br><span class=\"line\">worker_processes auto;</span><br><span class=\"line\">error_log /var/log/nginx/error.log;</span><br><span class=\"line\">pid /run/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\">include /usr/share/nginx/modules/*.conf;</span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections 1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class=\"line\">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class=\"line\">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">    access_log  /var/log/nginx/access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    sendfile            on;</span><br><span class=\"line\">    tcp_nopush          on;</span><br><span class=\"line\">    tcp_nodelay         on;</span><br><span class=\"line\">    keepalive_timeout   65;</span><br><span class=\"line\">    types_hash_max_size 2048;</span><br><span class=\"line\"></span><br><span class=\"line\">    include             /etc/nginx/mime.types;</span><br><span class=\"line\">    default_type        application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    include /etc/nginx/conf.d/*.conf;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 添加下面的内容，将server中的内容继续修改</span></span><br><span class=\"line\">    upstream ingress-controller &#123;</span><br><span class=\"line\">        server 10.138.3.62:80;</span><br><span class=\"line\">        server 10.138.3.63:80;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen 99;   # 为了更好的展示，此处使用除80以外的其他端口</span><br><span class=\"line\">        server_name _;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass http://ingress-controller;</span><br><span class=\"line\">            proxy_set_header Host $Host;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> systemctl restart nginx</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> netstat -lntp | grep nginx</span></span><br><span class=\"line\">tcp        0      0 0.0.0.0:99              0.0.0.0:*               LISTEN      2396/nginx: master  </span><br></pre></td></tr></table></figure>\n\n<p>​        我们再次修改windows中hosts文件，将之前添加与<code>java.ctnrs.com</code>相关的域名解析都删除，重新将<code>java.ctnrs.com</code>与nginx主机进行域名绑定，即在hosts文件中只保留<code>10.138.3.130 java.ctnrs.com</code>这一段关于<code>java.ctnrs.com</code>的解析，然后通过浏览器访问</p>\n<p><img src=\"../kuberPre/image-20210531163302772.png\" alt=\"image-20210531163302772\"></p>\n<p>此时nginx日志如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> tailf /var/<span class=\"built_in\">log</span>/nginx/access.log</span> </span><br><span class=\"line\">·····</span><br><span class=\"line\">10.138.3.1 - - [31/May/2021:16:32:38 +0800] &quot;GET / HTTP/1.1&quot; 200 2550 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.77 Safari/537.36&quot; &quot;-&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">10.138.3.1 - - [31/May/2021:16:32:38 +0800] &quot;GET /favicon.ico HTTP/1.1&quot; 200 946 </span><br><span class=\"line\">&quot;http://java.ctnrs.com:99/&quot; &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.77 Safari/537.36&quot; &quot;-&quot;</span><br></pre></td></tr></table></figure>\n","comments":true,"permalink":"https://qingdalf.github.io/2021-05/kuberExample/","categories":[{"name":"kubernets","slug":"kubernets","permalink":"https://qingdalf.github.io/categories/kubernets/"}],"tags":[]},{"title":"Kubernets安全框架","date":"2021-05-09T16:26:23.000Z","path":"2021-05/kuberSecretArch/","content":"<h2 id=\"Kubernets安全框架\"><a href=\"#Kubernets安全框架\" class=\"headerlink\" title=\"Kubernets安全框架\"></a>Kubernets安全框架</h2><h3 id=\"1-kubernets安全框架\"><a href=\"#1-kubernets安全框架\" class=\"headerlink\" title=\"1.kubernets安全框架\"></a>1.kubernets安全框架</h3><p>​        K8S安全控制框架主要由下面3个阶段进行控制，每一个阶段都支持插件方式，通过API Server配置来启用插件。</p>\n<span id=\"more\"></span>\n<ul>\n<li><p>Authentication（鉴权）：</p>\n<ul>\n<li>HTTPS证书认证：基于CA证书签名的数字证书认证</li>\n<li>HTTP Token认证：通过一个Token来识别用户</li>\n<li>HTTP Base认证：用户名+密码的认证方式</li>\n</ul>\n</li>\n<li><p>Authorization（授权）：</p>\n<ul>\n<li>RBAC（Role-Based Access Control，基于角色的访问控制）：负责完成授权（Authorization）工作，RBAC根据API请求属性，决定允许还是拒绝，比较常见的授权维度有如下：<ul>\n<li>user：用户名</li>\n<li>group：用户分组</li>\n<li>资源，例如pod、deployment</li>\n<li>资源操作方法：get，list，create，update，patch，watch，delete</li>\n<li>命名空间</li>\n<li>API组</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Admission Control（准入控制）：AdminssionControl实际上是一个准入控制器插件列表，发送到APIServer的请求都需要经过这个列表中的每个准入控制器插件的检查，检查不通过，则拒绝请求。</p>\n</li>\n</ul>\n<p>​        举个简单的例子来说，比如我所在的企业进入机房的手续就很好解释这三个词语，进入机房首先需要进行备案，即将申请人信息发送给机房走流程，各方领导审批了之后才能带着身份证去机房，出示身份证门卫，门卫查询到该身份证已经进行了备案，将扣留我的身份证，并给我一个临时的门禁卡，该卡只可以进入我备案上申请的机房大楼(其他楼进不去)，但不能直接进入机房，进入大楼后，需要过安检(人和背包)，通过安检后，才能进入机房。</p>\n<ul>\n<li>在这个过程中，门卫首先通过后台系统检查我的备案信息，这就是一个鉴权的过程，即我是否有权限进入，如果我没有提前备案，门卫将直接拒绝我的进入请求，只有我申请了进入机房，门卫看到了申请单后才能允许我进入机房；</li>\n<li>当门卫鉴别我可以进入机房后，给我一张进入指定机房大楼的临时卡(该卡不能进入其他机房大楼，可以刷大楼门禁和电梯)，这个过程就是授权</li>\n<li>进入大楼后，过安检的过程就是准入控制，如果在这里发现了违带品，如打火机、饮用水等，此处的安检人员将拒绝该类物品被禁止带入机房内。</li>\n<li>当上面三个过程都通过后，我们才能进入机房干活。</li>\n</ul>\n<p>客户端要想访问K8s集群API Server，一般需要证书、Token或者用户名+密码；如果Pod访问，需要ServiceAccount</p>\n<img src=\"../kuberPre/image-20210524215428755.png\" alt=\"image-20210524215428755\"  />\n\n\n\n<h3 id=\"3-基于角色的权限访问控制：RBAC\"><a href=\"#3-基于角色的权限访问控制：RBAC\" class=\"headerlink\" title=\"3.基于角色的权限访问控制：RBAC\"></a>3.基于角色的权限访问控制：RBAC</h3><p>RBAC（Role-Based Access Control，基于角色的访问控制），允许通过Kubernetes API动态配置策略。</p>\n<ul>\n<li>主体（subject）<ul>\n<li>User：用户</li>\n<li>Group：用户组</li>\n<li>ServiceAccount：服务账号</li>\n</ul>\n</li>\n<li>角色<ul>\n<li>Role：授权<strong>特定命名空间</strong>的访问权限</li>\n<li>ClusterRole：授权<strong>所有命名空间</strong>的访问权限</li>\n</ul>\n</li>\n<li>角色绑定<ul>\n<li>RoleBinding：将角色绑定到主体（即subject）</li>\n<li>ClusterRoleBinding：将<strong>集群角色绑定到主体</strong></li>\n</ul>\n</li>\n</ul>\n<p><img src=\"../kuberPre/image-20210524223155064.png\" alt=\"image-20210524223155064\"></p>\n<h3 id=\"4-案例：为指定用户授权访问不同命名空间权限\"><a href=\"#4-案例：为指定用户授权访问不同命名空间权限\" class=\"headerlink\" title=\"4.案例：为指定用户授权访问不同命名空间权限\"></a>4.案例：为指定用户授权访问不同命名空间权限</h3><p>示例：为指定用户(John)授权default命名空间Pod读取权限<br>1.用K8SCA签发客户端证书<br>2.生成kubeconfig授权文件<br>3.创建RBAC权限策略</p>\n<p>上传生产证书工具-cfssl：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> mkdir ssl &amp;&amp; <span class=\"built_in\">cd</span> ssl</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ll -h   <span class=\"comment\"># 上次cfss工具包</span></span></span><br><span class=\"line\">total 5.6M</span><br><span class=\"line\">-rw-r--r-- 1 root root 5.6M Nov 25  2019 cfssl.tar.gz</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> tar zxf cfssl.tar.gz  -C /usr/bin/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cfssl -h    <span class=\"comment\"># 检查，确保cfssl工具能够使用</span></span></span><br><span class=\"line\">Usage:</span><br><span class=\"line\">Available commands:</span><br><span class=\"line\">\tcertinfo</span><br><span class=\"line\">\tsign</span><br><span class=\"line\">\tgenkey</span><br><span class=\"line\">\tgencert</span><br><span class=\"line\">\tprint-defaults</span><br><span class=\"line\">\tbundle</span><br><span class=\"line\">\tgencrl</span><br><span class=\"line\">\tocspsign</span><br><span class=\"line\">\tselfsign</span><br><span class=\"line\">\trevoke</span><br><span class=\"line\">\tocspdump</span><br><span class=\"line\">\tocspserve</span><br><span class=\"line\">\tinfo</span><br><span class=\"line\">\tserve</span><br><span class=\"line\">\tversion</span><br><span class=\"line\">\tocsprefresh</span><br><span class=\"line\">\tscan</span><br><span class=\"line\">Top-level flags:</span><br><span class=\"line\">  -allow_verification_with_non_compliant_keys</span><br><span class=\"line\">    \tAllow a SignatureVerifier to use keys which are technically non-compliant with RFC6962.</span><br><span class=\"line\">  -loglevel int</span><br><span class=\"line\">    \tLog level (0 = DEBUG, 5 = FATAL) (default 1)</span><br></pre></td></tr></table></figure>\n\n<p>用k8s CA签发客户端证书：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ll   <span class=\"comment\"># 上传</span></span></span><br><span class=\"line\">total 5720</span><br><span class=\"line\">-rw-r--r-- 1 root root 5850685 Nov 25  2019 cfssl.tar.gz</span><br><span class=\"line\">-rw-r--r-- 1 root root    1400 Jul 17  2020 rbac.zip</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> unzip rbac.zip</span> </span><br><span class=\"line\">Archive:  rbac.zip</span><br><span class=\"line\">   creating: rbac/</span><br><span class=\"line\">  inflating: rbac/cert.sh            </span><br><span class=\"line\">  inflating: rbac/kubeconfig.sh      </span><br><span class=\"line\">  inflating: rbac/rbac.yaml          </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">cd</span> rbac &amp;&amp; ls</span> </span><br><span class=\"line\">cert.sh  kubeconfig.sh  rbac.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cat cert.sh</span> </span><br><span class=\"line\"></span><br><span class=\"line\">cat &gt; ca-config.json &lt;&lt;EOF   # 为ca证书生成配置文件</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;signing&quot;: &#123;</span><br><span class=\"line\">    &quot;default&quot;: &#123;</span><br><span class=\"line\">      &quot;expiry&quot;: &quot;87600h&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;profiles&quot;: &#123;</span><br><span class=\"line\">      &quot;kubernetes&quot;: &#123;</span><br><span class=\"line\">        &quot;usages&quot;: [</span><br><span class=\"line\">            &quot;signing&quot;,</span><br><span class=\"line\">            &quot;key encipherment&quot;,</span><br><span class=\"line\">            &quot;server auth&quot;,</span><br><span class=\"line\">            &quot;client auth&quot;</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        &quot;expiry&quot;: &quot;87600h&quot;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">cat &gt; John-csr.json &lt;&lt;EOF  # 为用户John用户生成证书文件</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;CN&quot;: &quot;John&quot;,</span><br><span class=\"line\">  &quot;hosts&quot;: [],</span><br><span class=\"line\">  &quot;key&quot;: &#123;</span><br><span class=\"line\">    &quot;algo&quot;: &quot;rsa&quot;,</span><br><span class=\"line\">    &quot;size&quot;: 2048</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;names&quot;: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;C&quot;: &quot;CN&quot;,</span><br><span class=\"line\">      &quot;ST&quot;: &quot;BeiJing&quot;,</span><br><span class=\"line\">      &quot;L&quot;: &quot;BeiJing&quot;,</span><br><span class=\"line\">      &quot;O&quot;: &quot;k8s&quot;,</span><br><span class=\"line\">      &quot;OU&quot;: &quot;System&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">cfssl gencert -ca=/etc/kubernetes/pki/ca.crt -ca-key=/etc/kubernetes/pki/ca.key -config=ca-config.json -profile=kubernetes John-csr.json | cfssljson -bare John</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">source</span> cert.sh</span> </span><br><span class=\"line\">2021/05/24 22:54:54 [INFO] generate received request</span><br><span class=\"line\">2021/05/24 22:54:54 [INFO] received CSR</span><br><span class=\"line\">2021/05/24 22:54:54 [INFO] generating key: rsa-2048</span><br><span class=\"line\">2021/05/24 22:54:54 [INFO] encoded CSR</span><br><span class=\"line\">2021/05/24 22:54:54 [INFO] signed certificate with serial number 234605555614761262630898602470758695869535347141</span><br><span class=\"line\">2021/05/24 22:54:54 [WARNING] This certificate lacks a &quot;hosts&quot; field. This makes it unsuitable for</span><br><span class=\"line\">websites. For more information see the Baseline Requirements for the Issuance and Management</span><br><span class=\"line\">of Publicly-Trusted Certificates, v.1.1.6, from the CA/Browser Forum (https://cabforum.org);</span><br><span class=\"line\">specifically, section 10.2.3 (&quot;Information Requirements&quot;).</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ll -h   <span class=\"comment\"># 生成了John.*文件</span></span></span><br><span class=\"line\">total 32K</span><br><span class=\"line\">-rw-r--r-- 1 root root  292 May 24 22:54 ca-config.json</span><br><span class=\"line\">-rw-r--r-- 1 root root  733 May 24 22:54 cert.sh</span><br><span class=\"line\">-rw-r--r-- 1 root root  993 May 24 22:54 John.csr</span><br><span class=\"line\">-rw-r--r-- 1 root root  217 May 24 22:54 John-csr.json</span><br><span class=\"line\">-rw------- 1 root root 1.7K May 24 22:54 John-key.pem</span><br><span class=\"line\">-rw-r--r-- 1 root root 1.3K May 24 22:54 John.pem</span><br><span class=\"line\">-rw-r--r-- 1 root root  622 Sep  1  2019 kubeconfig.sh</span><br><span class=\"line\">-rw-r--r-- 1 root root  477 Aug 25  2019 rbac.yaml</span><br></pre></td></tr></table></figure>\n\n<p>生成kubeconfig授权文件</p>\n<p>kubeconfig文件格式：</p>\n<img src=\"../kuberPre/image-20210410214949332.png\" alt=\"image-20210410214949332\" style=\"zoom:67%;\" />\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cat kubeconfig.sh</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 设置集群</span></span><br><span class=\"line\">kubectl config set-cluster kubernetes \\</span><br><span class=\"line\">  --certificate-authority=/etc/kubernetes/pki/ca.crt \\</span><br><span class=\"line\">  --embed-certs=true \\  # 将根证书/etc/kubernetes/pki/ca.crt的内容写入配置文件中</span><br><span class=\"line\">  --server=https://10.138.3.61:6443 \\</span><br><span class=\"line\">  --kubeconfig=John.kubeconfig  # 将上面的所有参数内容写入到该文件中</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 设置客户端认证</span></span><br><span class=\"line\">kubectl config set-credentials John \\</span><br><span class=\"line\">  --client-key=John-key.pem \\</span><br><span class=\"line\">  --client-certificate=John.pem \\</span><br><span class=\"line\">  --embed-certs=true \\</span><br><span class=\"line\">  --kubeconfig=John.kubeconfig</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 设置默认上下文</span></span><br><span class=\"line\">kubectl config set-context kubernetes \\</span><br><span class=\"line\">  --cluster=kubernetes \\</span><br><span class=\"line\">  --user=John \\</span><br><span class=\"line\">  --kubeconfig=John.kubeconfig</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 设置当前使用配置</span></span><br><span class=\"line\">kubectl config use-context kubernetes --kubeconfig=John.kubeconfig</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">source</span> kubeconfig.sh</span> </span><br><span class=\"line\">Cluster &quot;kubernetes&quot; set.</span><br><span class=\"line\">User &quot;John&quot; set.</span><br><span class=\"line\">Context &quot;kubernetes&quot; created.</span><br><span class=\"line\">Switched to context &quot;kubernetes&quot;.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ll</span> </span><br><span class=\"line\">total 40</span><br><span class=\"line\">-rw-r--r-- 1 root root  292 May 24 22:54 ca-config.json</span><br><span class=\"line\">-rw-r--r-- 1 root root  733 May 24 22:54 cert.sh</span><br><span class=\"line\">-rw-r--r-- 1 root root  993 May 24 22:54 John.csr</span><br><span class=\"line\">-rw-r--r-- 1 root root  217 May 24 22:54 John-csr.json</span><br><span class=\"line\">-rw------- 1 root root 1675 May 24 22:54 John-key.pem</span><br><span class=\"line\">-rw------- 1 root root 5705 May 24 23:03 John.kubeconfig   # 生成了该文件</span><br><span class=\"line\">-rw-r--r-- 1 root root 1277 May 24 22:54 John.pem</span><br><span class=\"line\">-rw-r--r-- 1 root root  604 May 24 23:02 kubeconfig.sh</span><br><span class=\"line\">-rw-r--r-- 1 root root  477 Aug 25  2019 rbac.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cat John.kubeconfig</span> </span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">clusters:</span><br><span class=\"line\">- cluster:</span><br><span class=\"line\">    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM1ekNDQWMrZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJeE1EUXdPVEF6TkRVMU0xb1hEVE14TURRd056QXpORFUxTTFvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTW40CitLQklXeTVQQUVrOW11cG9mbDUxRTlBczE0NHJhZUYyVXlneDB4MnlVWTB2eE1SYlFxajFUYUlTTWhNR1BlYXYKbjN4WDNZak9aSDNyM0thbmp2dkJVeXh0TU9CRk5DTG5QOFZBcjVmblQxRjh0Y2U1YnBDMXRKSk1hT3g1TE1KbQpiS3pOODJkb3N3Q2hoOVV0NlJoZXZIL2VudG1VVnhzZ1NnTUdHSnNtbEpkOVVBcmM0dGhXQk1JcUlQMEs4dFc5Cm1OZlNvamFaeU9HRmsxVGtRS2pRQngzMTd1MGpFWFFmZDFwVkt1c2JMN205Lzh4dmh1c3dlVjBMWUxXdi9TWTAKU0lZbHAvdDFjdk1rL1VPR2RBcGdFZGV4S1NsKzlEalBmd09HLzZ4REFoL0ZIbXY2MHJ2U2FEK09uemVSZy9rUQpuQzRUczdkRWMvR3lvaVNlQ2ZrQ0F3RUFBYU5DTUVBd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZFc1NUeGRLY3BVQmNWc24yRHJoallRL0lQWVhNQTBHQ1NxR1NJYjMKRFFFQkN3VUFBNElCQVFDRlNra1FDUjRLNEp2L1JlVWZvTjM1d01VS2lRUTlCTzlLQnd3RXVwUndkVXJ3TFZDTApKUWNJbEtHSWRyQ2hJNUt5Q1ZQUkdyZm5teVpoNWZmdkpTZk42VU5wV0c5TGk4OXI5ak5qZ2psVjE4SE9kYjdCCi9ObE1sdzJ6ellxcDZSRG16K0RDbXY3cmgzOHBpdk00S2dOdjd5VENrakZwYmQ1VjZaaUdsZWNRWlMwcVhxQlMKdVlpZk9DdFBVUGVsSWxwOHI5Mmp1cGVXWDE2SnVhWDNnTU9DRGxuOGUwa3c4VFBJM0lRRGQzYmlqa2pOb3VLdQprZG96UTF4Zk1LLzMzN2VZWHlxbWZSK1Bmd0ljaW9Kd3ZIOHpTeGREV29mZjhnYXF5SW4yK0hTVHhpQVdXOGZ3CkF2V20wODFnbUNndnBSM2M0Zy9SdVE2UU1WVmdXazEybTk5OAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==</span><br><span class=\"line\">    server: https://10.138.3.61:6443</span><br><span class=\"line\">  name: kubernetes</span><br><span class=\"line\">contexts:</span><br><span class=\"line\">- context:</span><br><span class=\"line\">    cluster: kubernetes</span><br><span class=\"line\">    user: John</span><br><span class=\"line\">  name: kubernetes</span><br><span class=\"line\">current-context: kubernetes</span><br><span class=\"line\">kind: Config</span><br><span class=\"line\">preferences: &#123;&#125;</span><br><span class=\"line\">users:</span><br><span class=\"line\">- name: John   # 用户名称</span><br><span class=\"line\">  user:</span><br><span class=\"line\">    client-certificate-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURnVENDQW1tZ0F3SUJBZ0lVS1JnVHN6M2ZYMloyd2RGTzZmc295NndONGNVd0RRWUpLb1pJaHZjTkFRRUwKQlFBd0ZURVRNQkVHQTFVRUF4TUthM1ZpWlhKdVpYUmxjekFlRncweU1UQTFNalF4TkRVd01EQmFGdzB6TVRBMQpNakl4TkRVd01EQmFNRjh4Q3pBSkJnTlZCQVlUQWtOT01SQXdEZ1lEVlFRSUV3ZENaV2xLYVc1bk1SQXdEZ1lEClZRUUhFd2RDWldsS2FXNW5NUXd3Q2dZRFZRUUtFd05yT0hNeER6QU5CZ05WQkFzVEJsTjVjM1JsYlRFTk1Bc0cKQTFVRUF4TUVTbTlvYmpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBSzdPNkxYdApybjFOeXdjRklSTEx1aVlma21vVDRLUDhmV2xQVC9BeDhsTWttbDY2NGNUYWczc1B6bSs4SjAyaDJWTjRlTFluClZxTzRlSG1OeGl3OE5TVHdHOWM5blhwZGhJS3hVY0p0L1licFM5U1dxZ0pvdUMyNHByc3ZtdU9VRFltcWo4RWsKaDZCcUtqTjN5VEpEcmU5emx2eFUraTRqMzY2VktrdldWaDRJVlVMV2w3ZzdMZ0VwSmJoRlc0a1FOMGk1NXRhUwpWRkdtUUNPQUozZWNnencvU004L2lkeFRITzFUT3IwNm1ZU0xmRHZlTnByV1pMb2RuR2sxa1JZb0tUQzZRYzlUCnpsa1hiL0xRdFE1eGp0VGJibEdJS05GYVhrYTZLMUZzWlNXYlQ4TUZYeXNCckhSak9RcThvMjZCZEgvWWM2TmIKOGcrZU53RWR3UWo5bXhVQ0F3RUFBYU4vTUgwd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRRwpDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1CMEdBMVVkRGdRV0JCUlczSTRUCjdaVFhpQ2hMMHVWdVdLRDl1SG80R0RBZkJnTlZIU01FR0RBV2dCUkxFazhYU25LVkFYRmJKOWc2NFkyRVB5RDIKRnpBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQWdKMms0NENvcGRwVVl4N082ZEtGaFh4aS8wZ0VxbkJla1BXKwpienhFWHFmdXhtT0UxK1dSalJOTFZSRmlJQkZSb0pGR1NYWThlVkZUY09LalJrZXBBTTk3WjAwM1BHdVJDUW1JCkVLc0ZYU1J1UmZsV3FuNUJpVkFhZ1lFbm5VQitxSnUzQVpRRklSRUZ4MXhuT3FQd254a2lCUU9ZaWVxRDhDSlUKRU5xcmhSWEdMbFJZWHJ1QzBiOGY4bjYzOWMrQnd2TU1FZW9yNTBCb2d5SE04Z0NtNHlhVTQzRlN6Rk1Hdzk4aQpGbzBJeVRDa2xEeGJlVnB5UDVrZURESmR4RDU5WVA2RVE3L0ZaL1FFa1plMDlDWGliWnpNc3ErcnVhazJTdFg4CkVRY1JHU3JZQ1N0SExBMFNFTmljeTRlNDhKTjFwelJ6bWQxdUpxNzg1dkE0M0lLaEdBPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=</span><br><span class=\"line\">    client-key-data: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBcnM3b3RlMnVmVTNMQndVaEVzdTZKaCtTYWhQZ28veDlhVTlQOERIeVV5U2FYcnJoCnhOcURldy9PYjd3blRhSFpVM2g0dGlkV283aDRlWTNHTER3MUpQQWIxejJkZWwyRWdyRlJ3bTM5aHVsTDFKYXEKQW1pNExiaW11eSthNDVRTmlhcVB3U1NIb0dvcU0zZkpNa090NzNPVy9GVDZMaVBmcnBVcVM5WldIZ2hWUXRhWAp1RHN1QVNrbHVFVmJpUkEzU0xubTFwSlVVYVpBSTRBbmQ1eURQRDlJenorSjNGTWM3Vk02dlRxWmhJdDhPOTQyCm10Wmt1aDJjYVRXUkZpZ3BNTHBCejFQT1dSZHY4dEMxRG5HTzFOdHVVWWdvMFZwZVJyb3JVV3hsSlp0UHd3VmYKS3dHc2RHTTVDcnlqYm9GMGY5aHpvMXZ5RDU0M0FSM0JDUDJiRlFJREFRQUJBb0lCQUdnMFNUNmlCK0VFTGFIcQpxZE9GaEZyVGVUa296a0dTOHNPREZ2anRIVEg0NE5qVmVGNGJrRU1jb2dlelZvNk5pM3FabHdPbW9ad0pEREFSCmxtK3FHRmdEbGVVU0Fyejk0RTcwR3ZQWEUwbUg2cjg0YlBId3NOSDRmOU9YeGpJaGdJeHZFekNrY1FEc0tHbnoKM3dqS2xYWG5KcnNXZ09oZVZDbkRHNnFIZzJCMHhKZXZvQ3BiKzkwTnlvZ3NDbEtzMDh5Q24zL0wvaVQyUzZ6SQptZnRsSEFKZ1hkNGZUOXQ5RlJsL2tqbG9BcWFQejJTaUk3SDB3cCtaVHFIVXBEK0c5SHUyQmJvUHZabkRGZktUCnhXdWg1U0JZZEIzM0Y3TFR0UXlWUzZzc2oyZEk1ekF1Z3d5MXVGUVQ2TWFQdnFKVVpWZ2tBc3p6UDM0QnlFbWUKYVpHYXI4VUNnWUVBeDgyM1g2N0hEaXJtWG1rcTRjYnpKM0dqOHBORmVwYWoyMCttUXErc0hGdUZhZFBQTFAxbQpXWFN2eGdmY1lNSjlIYVVQL1draEUyWFNtUkR3cmlreGEyOHFZdW04M2srTDUwblBLeUd4QVVHSEhPeGJ2T0FVCnVrRURxWE1kam9JeFYxQUlkM3NQQjVlbW1UcGhDMmFJZjZsRU9RMDhtQWNYQmd3RVhHVTRRT2NDZ1lFQTMvbDUKa2d3Q0hDVy94dHRxYmlENll6NFpxMmZWN0YzNXlTb0lTR1c3SVpKZkNLeTdSTHMrdVFKVU85c3JmVHp4OXBSVQo1dUlkUzJCK3IvSWllR29pakFRQktQTXlZVUVKWHJsajFOcWNvQmVlOXdXdGN3b3JrVmhGRzlGZkEzeXRsaEljCjFEZWpuQ0R1UTFaSnVSVk0vNitxZURkWGdBZ1dWaEh5WUZKQWVLTUNnWUIvMnByYUJveG4rM200dGxGemNvek0KRThNV2lianZEaEJDV1lDSnNjSlB6eHpiTUdlbFlXMnFGcW9YN1pYTzhRV0EvOHZ3bStKSGVHUEFBUUFTWWxlMgphTWRWemo1R2Y5NkZuVXlOVEJ6cE1kWlU0c1o5WVdMQ0lMSklMMXFkZzZBeFFBeDY4R3NZcjZreTZoR0phdzR6CnFzdjJPZ3NwT1hnNUxWMXBCbmh0eHdLQmdRQ21MSUoyU1ZLSGI3cUozK0ZuTkRDUjBWRmFTdi85RHZ4MHRDclIKRENsN0R3NVRjVlMvK2V6ZmQwcm4zZ1MyTnJHUE1SNk03dGF0UmpxNGIvNERPVHZJaG5BVjRkcFBMZUcxMWZhcgp4a2JPd0xmQXJ3V3hoS291ZkQ5S0ZGMWFTUGJCa1U2eVpWV09VU0IxOVY5ZFl1QnVFL2QybWhqaGRSNmRYVk5uCkE1K3g0UUtCZ0NaRU45QzNNd0RwZjM1ZE1WWXFqZ25scWNKbmk4QU9ETHBIVEpzZkdHYlZyeVhvSm9TckFBYUoKYytqeXBpNDVzNEVTNzVBVG9DV0JuZTJTMUQzMWNnaVFGdHhGZklNVlc3YXQwQW85VFBoNVMwMFhuQ2taVWpqSApYNW8vSm9sNllxZEN6WDRiODdFWFRzTVNKMUkrSEEwblZCVGtYZXZ3R0hsYzNKaUFJa2lzCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>RBAC授权：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 默认情况下，我们执行kubectl get pod使用的配置文件是/root/.kube/conf</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pods --kubeconfig=/root/.kube/config</span>  </span><br><span class=\"line\">NAME                                     READY   STATUS             RESTARTS   AGE</span><br><span class=\"line\">java-demo-56d54df448-xnppg               1/1     Running            0          26h</span><br><span class=\"line\">nfs-client-provisioner-fc7d496b4-p4r5b   0/1     CrashLoopBackOff   16         26h</span><br><span class=\"line\">nfs-web-66cbdc486b-rj9xv                 1/1     Running            0          26h</span><br><span class=\"line\">nfs-web-66cbdc486b-srlqx                 1/1     Running            0          26h</span><br><span class=\"line\">nfs-web-66cbdc486b-t95dt                 1/1     Running            0          26h</span><br><span class=\"line\">nginx-0                                  1/1     Running            0          25h</span><br><span class=\"line\">···</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 当我们指定John.kubeconfig作为配置文件查询时</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pods --kubeconfig=John.kubeconfig   <span class=\"comment\"># 提示用户John没有列出pod的权限</span></span></span><br><span class=\"line\">Error from server (Forbidden): pods is forbidden: User &quot;John&quot; cannot list resource &quot;pods&quot; in API group &quot;&quot; in the namespace &quot;default&quot;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>认证过程如下：</p>\n<p><img src=\"../kuberPre/image-20210524231652863.png\" alt=\"image-20210524231652863\"></p>\n<p>配置RBAC</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cat rbac.yaml</span> </span><br><span class=\"line\">kind: Role</span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  namespace: default</span><br><span class=\"line\">  name: pod-reader</span><br><span class=\"line\">rules:</span><br><span class=\"line\">- apiGroups: [&quot;&quot;]                  # api组，没有写具体的组名时表示核心组</span><br><span class=\"line\">  resources: [&quot;pods&quot;]              # 资源类型，多个资源用逗号隔开</span><br><span class=\"line\">  verbs: [&quot;get&quot;, &quot;watch&quot;, &quot;list&quot;]  # 可对资源执行的操作，如增删改查等</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">kind: RoleBinding</span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: read-pods</span><br><span class=\"line\">  namespace: default</span><br><span class=\"line\">subjects:</span><br><span class=\"line\">- kind: User   # 主体类型，三种类型之一：User、Group、ServiceAccount</span><br><span class=\"line\">  name: John   # 用户</span><br><span class=\"line\">  apiGroup: rbac.authorization.k8s.io</span><br><span class=\"line\">roleRef:</span><br><span class=\"line\">  kind: Role   # 绑定的角色</span><br><span class=\"line\">  name: pod-reader   # 绑定的角色名称</span><br><span class=\"line\">  apiGroup: rbac.authorization.k8s.io</span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl apply -f rbac.yaml</span> </span><br><span class=\"line\">role.rbac.authorization.k8s.io/pod-reader created</span><br><span class=\"line\">rolebinding.rbac.authorization.k8s.io/read-pods created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pods --kubeconfig=John.kubeconfig   <span class=\"comment\"># 可以访问pod了</span></span></span><br><span class=\"line\">NAME                                     READY   STATUS             RESTARTS   AGE</span><br><span class=\"line\">java-demo-56d54df448-xnppg               1/1     Running            0          27h</span><br><span class=\"line\">nfs-client-provisioner-fc7d496b4-p4r5b   0/1     CrashLoopBackOff   19         26h</span><br><span class=\"line\">nfs-web-66cbdc486b-rj9xv                 1/1     Running            0          27h</span><br><span class=\"line\">nfs-web-66cbdc486b-srlqx                 1/1     Running            0          27h</span><br><span class=\"line\">nfs-web-66cbdc486b-t95dt                 1/1     Running            0          27h</span><br><span class=\"line\">···</span><br></pre></td></tr></table></figure>\n\n<p>通过John用户访问deploy和svc</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 使用John用户访问其他资源，均访问失败</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get deployment --kubeconfig=John.kubeconfig   <span class=\"comment\"># 注意，我们可以通过这里的error输出，更改用户rbac的格式</span></span></span><br><span class=\"line\">Error from server (Forbidden): deployments.apps is forbidden: User &quot;John&quot; cannot list resource &quot;deployments&quot; in API group &quot;apps&quot; in the namespace &quot;default&quot;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 这里的resource <span class=\"string\">&quot;deployments&quot;</span> <span class=\"keyword\">in</span> API group <span class=\"string\">&quot;apps&quot;</span>表示如果要加<span class=\"string\">&quot;deployments&quot;</span>应该在resource中添加<span class=\"string\">&quot;deployments&quot;</span>字段，并在group中添加<span class=\"string\">&quot;apps&quot;</span>字段</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get svc --kubeconfig=John.kubeconfig</span> </span><br><span class=\"line\">Error from server (Forbidden): services is forbidden: User &quot;John&quot; cannot list resource &quot;services&quot; in API group &quot;&quot; in the namespace &quot;default&quot;   # 此处的group &quot;&quot;表示核心组</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 这里的resource <span class=\"string\">&quot;services&quot;</span> <span class=\"keyword\">in</span> API group <span class=\"string\">&quot;&quot;</span>，表示要在resource中添加<span class=\"string\">&quot;services&quot;</span>字段，在group中添加<span class=\"string\">&quot;&quot;</span>(核心组)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 给John用户添加上访问deployment和svc的权限</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cat rbac.yaml</span> </span><br><span class=\"line\">kind: Role</span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  namespace: default</span><br><span class=\"line\">  name: pod-reader</span><br><span class=\"line\">rules:</span><br><span class=\"line\">- apiGroups: [&quot;&quot;,&quot;apps&quot;]            # 添加上了&quot;apps&quot;</span><br><span class=\"line\">  resources: [&quot;pods&quot;,&quot;deployments&quot;]  # 添加上了&quot;deployments&quot;</span><br><span class=\"line\">  verbs: [&quot;get&quot;, &quot;watch&quot;, &quot;list&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">kind: RoleBinding</span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: read-pods</span><br><span class=\"line\">  namespace: default</span><br><span class=\"line\">subjects:</span><br><span class=\"line\">- kind: User</span><br><span class=\"line\">  name: John</span><br><span class=\"line\">  apiGroup: rbac.authorization.k8s.io</span><br><span class=\"line\">roleRef:</span><br><span class=\"line\">  kind: Role</span><br><span class=\"line\">  name: pod-reader</span><br><span class=\"line\">  apiGroup: rbac.authorization.k8s.io</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl apply -f rbac.yaml</span> </span><br><span class=\"line\">role.rbac.authorization.k8s.io/pod-reader configured</span><br><span class=\"line\">rolebinding.rbac.authorization.k8s.io/read-pods unchanged</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 再次访问svc和deploy</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get svc --kubeconfig=John.kubeconfig</span> </span><br><span class=\"line\">NAME         TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)        AGE</span><br><span class=\"line\">java-demo    ClusterIP   10.111.238.127   &lt;none&gt;        80/TCP         34d</span><br><span class=\"line\">kubernetes   ClusterIP   10.96.0.1        &lt;none&gt;        443/TCP        45d</span><br><span class=\"line\">nginx        NodePort    10.99.5.83       &lt;none&gt;        80:31031/TCP   34d</span><br><span class=\"line\">web-02       ClusterIP   None             &lt;none&gt;        80/TCP         24h</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get deployment --kubeconfig=John.kubeconfig</span> </span><br><span class=\"line\">NAME                     READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class=\"line\">java-demo                1/1     1            1           34d</span><br><span class=\"line\">nfs-client-provisioner   0/1     1            0           26h</span><br><span class=\"line\">nfs-web                  3/3     3            3           27d</span><br><span class=\"line\">nginx                    3/3     3            3           45d</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>添加组(group)的信息是根据<code>kubectl api-resources</code>中的<code>APIVERSION</code>中的信息来定义的</p>\n<p><img src=\"../kuberPre/image-20210524234039783.png\" alt=\"image-20210524234039783\"></p>\n<p>在部署dashboard时，我们创建了用户，用户授权、获取Token的步骤，也是按照RBAC的步骤进行操作的，如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 创建用户</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl create serviceaccount dashboard-admin -n kube-system</span></span><br><span class=\"line\">serviceaccount/dashboard-admin created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 用户授权</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl create clusterrolebinding dashboard-admin --clusterrole=cluster-admin --serviceaccount=kube-system:dashboard-admin</span></span><br><span class=\"line\">clusterrolebinding.rbac.authorization.k8s.io/dashboard-admin created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 获取用户Token</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl describe secrets -n kube-system $(kubectl -n kube-system get secret | awk <span class=\"string\">&#x27;/dashboard-admin/&#123;print $1&#125;&#x27;</span>)</span></span><br><span class=\"line\">Name:         dashboard-admin-token-qz9b5</span><br><span class=\"line\">Namespace:    kube-system</span><br><span class=\"line\">Labels:       &lt;none&gt;</span><br><span class=\"line\">Annotations:  kubernetes.io/service-account.name: dashboard-admin</span><br><span class=\"line\">              kubernetes.io/service-account.uid: 3888e789-beec-45a8-a04e-1d03d3dc645e</span><br><span class=\"line\"></span><br><span class=\"line\">Type:  kubernetes.io/service-account-token</span><br><span class=\"line\"></span><br><span class=\"line\">Data</span><br><span class=\"line\">====</span><br><span class=\"line\">ca.crt:     1066 bytes</span><br><span class=\"line\">namespace:  11 bytes</span><br><span class=\"line\">token:      eyJhbGciOiJSUzI1NiIsImtpZCI6IldsZjlGaGZmcjNiekJOaTRCQjM4WEpDTXc0UXlhSF9nUC1ETlAzbVlvQk0ifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJkYXNoYm9hcmQtYWRtaW4tdG9rZW4tcXo5YjUiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZGFzaGJvYXJkLWFkbWluIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiMzg4OGU3ODktYmVlYy00NWE4LWEwNGUtMWQwM2QzZGM2NDVlIiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50Omt1YmUtc3lzdGVtOmRhc2hib2FyZC1hZG1pbiJ9.mVNJ7T8a7we8lza5bGsYrst-TuL5lTS7_Ef8kmORXwytknMkLYc34dYUB_NvuV8QBd9E7bGVka_ff6ihtmnxRVQ74Aq4Cj-Y5__Vqvy9BoAxAPTuYXPxyP88sC0GujIqfKnH369h0bfETuiTlaLW3WU4bIOH7O27T3n8JNICV7xAvAWrEX1KypVEWHROUFYGbv0-UzCGZxD9TRalaZi7EiIXCY2RH5bmpKsV3X0NfEsKtcUWHcXkonwjlawoi3IXBUzkTuw_FoAAL2qWMvGMi_XOQ1qyS4zcB18y4mhqt9lDKFDaNxUBA_RY-9JIOSTaHn4Co1Cq35-wjNKoPjSbTw</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 复制上面的token到浏览器中，注意不要多复制空格</span></span><br></pre></td></tr></table></figure>\n","comments":true,"permalink":"https://qingdalf.github.io/2021-05/kuberSecretArch/","categories":[{"name":"kubernets","slug":"kubernets","permalink":"https://qingdalf.github.io/categories/kubernets/"}],"tags":[]},{"title":"数据、数据卷和动态供给","date":"2021-05-09T16:07:33.000Z","path":"2021-05/kuberStorage/","content":"<h2 id=\"数据卷与持续存储\"><a href=\"#数据卷与持续存储\" class=\"headerlink\" title=\"数据卷与持续存储\"></a>数据卷与持续存储</h2><h2 id=\"1-为什么需要数据卷\"><a href=\"#1-为什么需要数据卷\" class=\"headerlink\" title=\"1.为什么需要数据卷\"></a>1.为什么需要数据卷</h2><p>容器部署过程中一般有以下三种数据：</p>\n<ul>\n<li>启动时需要的初始数据，例如配置文件</li>\n<li>启动过程中产生的临时数据，该临时数据需要多个容器间共享</li>\n<li>启动过程中产生的业务数据，例如mysql的data目录</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"2-数据卷概念\"><a href=\"#2-数据卷概念\" class=\"headerlink\" title=\"2.数据卷概念\"></a>2.数据卷概念</h2><ul>\n<li>Kubernetes中的Volume提供了在容器中挂载外部存储的能力</li>\n<li>Pod需要设置<strong>卷来源</strong>（spec.volume）和<strong>挂载点</strong>（spec.containers.volumeMounts）两个信息后才可以使用相应的Volume</li>\n</ul>\n<p>数据卷类型大致分类：</p>\n<ul>\n<li>本地（hostPath，emptyDir等）：数据存储在Pod所在节点</li>\n<li>网络（NFS，Ceph，GlusterFS等）：数据存储在远程存储服务器</li>\n<li>公有云（AWS EBS等）：数据存储在云存储产品上</li>\n<li>K8S资源（configmap，secret等）：数据存储在K8s中</li>\n</ul>\n<h2 id=\"3-数据卷：emptyDir、hostPath、NFS\"><a href=\"#3-数据卷：emptyDir、hostPath、NFS\" class=\"headerlink\" title=\"3.数据卷：emptyDir、hostPath、NFS\"></a>3.数据卷：emptyDir、hostPath、NFS</h2><h3 id=\"3-1-emptyDir\"><a href=\"#3-1-emptyDir\" class=\"headerlink\" title=\"3.1 emptyDir\"></a>3.1 emptyDir</h3><p>​        是一个临时存储卷，与Pod生命周期绑定在一起，如果Pod删除，卷也会被删除。</p>\n<blockquote>\n<p><strong>说明：</strong> 容器崩溃并<strong>不</strong>会导致 Pod 被从节点上移除，因此容器崩溃期间 <code>emptyDir</code> 卷中的数据是安全的</p>\n</blockquote>\n<p>应用场景：</p>\n<ul>\n<li>Pod容器间的数据共享</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># vim my-pod-emptyDir.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-pod</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">write</span>     <span class=\"comment\"># 通过command命令往emptyDir中写入数据</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">centos</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> [<span class=\"string\">&quot;bash&quot;</span>,<span class=\"string\">&quot;-c&quot;</span>,<span class=\"string\">&quot;for i in &#123;1..100&#125;;do echo $i&gt;&gt; /data/hello;sleep1;done&quot;</span>]</span><br><span class=\"line\">    <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">data</span></span><br><span class=\"line\">      <span class=\"attr\">mountPath:</span> <span class=\"string\">/data</span></span><br><span class=\"line\">        </span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">read</span>      <span class=\"comment\"># 读取卷中的数据</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">centos</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> [<span class=\"string\">&quot;bash&quot;</span>,<span class=\"string\">&quot;-c&quot;</span>,<span class=\"string\">&quot;tail -f /data/hello&quot;</span>]</span><br><span class=\"line\">    <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">data</span></span><br><span class=\"line\">      <span class=\"attr\">mountPath:</span> <span class=\"string\">/data</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">volumes:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">data</span></span><br><span class=\"line\">    <span class=\"attr\">emptyDir:</span> &#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># kubectl apply -f my-pod-emptyDir.yaml </span></span><br><span class=\"line\"><span class=\"string\">pod/my-pod</span> <span class=\"string\">created</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># kubectl get pods | grep my-pod</span></span><br><span class=\"line\"><span class=\"string\">my-pod</span>         <span class=\"number\">2</span><span class=\"string\">/2</span>     <span class=\"string\">Running</span>   <span class=\"number\">0</span>          <span class=\"string\">37s</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># kubectl logs my-pod</span></span><br><span class=\"line\"><span class=\"attr\">error:</span> <span class=\"string\">a</span> <span class=\"string\">container</span> <span class=\"string\">name</span> <span class=\"string\">must</span> <span class=\"string\">be</span> <span class=\"string\">specified</span> <span class=\"string\">for</span> <span class=\"string\">pod</span> <span class=\"string\">my-pod,</span> <span class=\"attr\">choose one of:</span> [<span class=\"string\">write</span> <span class=\"string\">read</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># kubectl logs my-pod -c write</span></span><br><span class=\"line\">[<span class=\"string\">root@k8s-Node-02</span> <span class=\"string\">~</span>]<span class=\"comment\"># kubectl logs my-pod -c read</span></span><br><span class=\"line\"><span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 文件存储位置在/var/lib/kubelet/pods/podid/volumes/下</span></span><br><span class=\"line\"><span class=\"comment\"># 查看pod的id</span></span><br><span class=\"line\"><span class=\"comment\"># kubectl  get pod my-pod -o yaml | grep -i uid </span></span><br><span class=\"line\">  <span class=\"attr\">uid:</span> <span class=\"string\">4bb4938e-1632-4d0f-b8a2-3d4af87cf89f</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># tailf  /var/lib/kubelet/pods/4bb4938e-1632-4d0f-b8a2-3d4af87cf89f/volumes/kubernetes.io~empty-dir/data/hello </span></span><br><span class=\"line\"><span class=\"number\">98</span></span><br><span class=\"line\"><span class=\"number\">99</span></span><br><span class=\"line\"><span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span>   <span class=\"comment\"># 一直在循环输出1-100</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通过kubectl describe pods my-pod可以查看pod的信息，但是这个信息里面没有pod的id信息</span></span><br><span class=\"line\"><span class=\"comment\"># kubectl describe pods my-pod</span></span><br><span class=\"line\"><span class=\"attr\">Name:</span>         <span class=\"string\">my-pod</span></span><br><span class=\"line\"><span class=\"attr\">Namespace:</span>    <span class=\"string\">default</span></span><br><span class=\"line\"><span class=\"attr\">Priority:</span>     <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"attr\">Node:</span>         <span class=\"string\">k8s-node-02/10.138.3.63</span></span><br><span class=\"line\"><span class=\"attr\">Start Time:</span>   <span class=\"string\">Mon,</span> <span class=\"number\">26</span> <span class=\"string\">Apr</span> <span class=\"number\">2021 21:27:29</span> <span class=\"string\">+0800</span></span><br><span class=\"line\"><span class=\"attr\">Labels:</span>       <span class=\"string\">&lt;none&gt;</span></span><br><span class=\"line\"><span class=\"attr\">Annotations:  cni.projectcalico.org/podIP:</span> <span class=\"number\">10.244</span><span class=\"number\">.44</span><span class=\"number\">.230</span><span class=\"string\">/32</span></span><br><span class=\"line\">              <span class=\"attr\">cni.projectcalico.org/podIPs:</span> <span class=\"number\">10.244</span><span class=\"number\">.44</span><span class=\"number\">.230</span><span class=\"string\">/32</span></span><br><span class=\"line\"><span class=\"attr\">Status:</span>       <span class=\"string\">Running</span></span><br><span class=\"line\"><span class=\"attr\">IP:</span>           <span class=\"number\">10.244</span><span class=\"number\">.44</span><span class=\"number\">.230</span></span><br><span class=\"line\"><span class=\"attr\">IPs:</span></span><br><span class=\"line\">  <span class=\"attr\">IP:</span>  <span class=\"number\">10.244</span><span class=\"number\">.44</span><span class=\"number\">.230</span></span><br><span class=\"line\"><span class=\"attr\">Containers:</span></span><br><span class=\"line\">  <span class=\"attr\">write:</span></span><br><span class=\"line\">    <span class=\"attr\">Container ID:</span>  <span class=\"string\">containerd://b548fddf8b491dd849b5624fc05b22d8fbdd97c8ff36768fb72394d558c18ed1</span></span><br><span class=\"line\">    <span class=\"attr\">Image:</span>         <span class=\"string\">centos</span></span><br><span class=\"line\">    <span class=\"attr\">Image ID:</span>      <span class=\"string\">docker.io/library/centos@sha256:5528e8b1b1719d34604c87e11dcd1c0a20bedf46e83b5632cdeac91b8c04efc1</span></span><br><span class=\"line\">    <span class=\"attr\">Port:</span>          <span class=\"string\">&lt;none&gt;</span></span><br><span class=\"line\">    <span class=\"attr\">Host Port:</span>     <span class=\"string\">&lt;none&gt;</span></span><br><span class=\"line\">    <span class=\"attr\">Command:</span></span><br><span class=\"line\">      <span class=\"string\">bash</span></span><br><span class=\"line\">      <span class=\"string\">-c</span></span><br><span class=\"line\">      <span class=\"string\">for</span> <span class=\"string\">i</span> <span class=\"string\">in</span> &#123;<span class=\"number\">1</span><span class=\"string\">..100</span>&#125;<span class=\"string\">;do</span> <span class=\"string\">echo</span> <span class=\"string\">$i</span> <span class=\"string\">&gt;&gt;</span> <span class=\"string\">/data/hello;sleep</span> <span class=\"number\">1</span><span class=\"string\">;done</span></span><br><span class=\"line\">    <span class=\"attr\">State:</span>          <span class=\"string\">Waiting</span></span><br><span class=\"line\">      <span class=\"attr\">Reason:</span>       <span class=\"string\">CrashLoopBackOff</span></span><br><span class=\"line\">    <span class=\"attr\">Last State:</span>     <span class=\"string\">Terminated</span></span><br><span class=\"line\">      <span class=\"attr\">Reason:</span>       <span class=\"string\">Completed</span></span><br><span class=\"line\">      <span class=\"attr\">Exit Code:</span>    <span class=\"number\">0</span></span><br><span class=\"line\">      <span class=\"attr\">Started:</span>      <span class=\"string\">Mon,</span> <span class=\"number\">26</span> <span class=\"string\">Apr</span> <span class=\"number\">2021 21:29:41</span> <span class=\"string\">+0800</span></span><br><span class=\"line\">      <span class=\"attr\">Finished:</span>     <span class=\"string\">Mon,</span> <span class=\"number\">26</span> <span class=\"string\">Apr</span> <span class=\"number\">2021 21:31:21</span> <span class=\"string\">+0800</span></span><br><span class=\"line\">    <span class=\"attr\">Ready:</span>          <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"attr\">Restart Count:</span>  <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"attr\">Environment:</span>    <span class=\"string\">&lt;none&gt;</span></span><br><span class=\"line\">    <span class=\"attr\">Mounts:</span></span><br><span class=\"line\">      <span class=\"string\">/data</span> <span class=\"string\">from</span> <span class=\"string\">data</span> <span class=\"string\">(rw)</span></span><br><span class=\"line\">      <span class=\"string\">/var/run/secrets/kubernetes.io/serviceaccount</span> <span class=\"string\">from</span> <span class=\"string\">default-token-bq4pj</span> <span class=\"string\">(ro)</span></span><br><span class=\"line\">  <span class=\"attr\">read:</span></span><br><span class=\"line\">    <span class=\"attr\">Container ID:</span>  <span class=\"string\">containerd://218b6eccb348386c0e8e4f3ec02b24301ceb8f56c9e9e9cac5049cf35672ce4d</span></span><br><span class=\"line\">    <span class=\"attr\">Image:</span>         <span class=\"string\">centos</span></span><br><span class=\"line\">    <span class=\"attr\">Image ID:</span>      <span class=\"string\">docker.io/library/centos@sha256:5528e8b1b1719d34604c87e11dcd1c0a20bedf46e83b5632cdeac91b8c04efc1</span></span><br><span class=\"line\">    <span class=\"attr\">Port:</span>          <span class=\"string\">&lt;none&gt;</span></span><br><span class=\"line\">    <span class=\"attr\">Host Port:</span>     <span class=\"string\">&lt;none&gt;</span></span><br><span class=\"line\">    <span class=\"attr\">Command:</span></span><br><span class=\"line\">      <span class=\"string\">bash</span></span><br><span class=\"line\">      <span class=\"string\">-c</span></span><br><span class=\"line\">      <span class=\"string\">tail</span> <span class=\"string\">-f</span> <span class=\"string\">/data/hello</span></span><br><span class=\"line\">    <span class=\"attr\">State:</span>          <span class=\"string\">Running</span></span><br><span class=\"line\">      <span class=\"attr\">Started:</span>      <span class=\"string\">Mon,</span> <span class=\"number\">26</span> <span class=\"string\">Apr</span> <span class=\"number\">2021 21:28:01</span> <span class=\"string\">+0800</span></span><br><span class=\"line\">    <span class=\"attr\">Ready:</span>          <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"attr\">Restart Count:</span>  <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"attr\">Environment:</span>    <span class=\"string\">&lt;none&gt;</span></span><br><span class=\"line\">    <span class=\"attr\">Mounts:</span></span><br><span class=\"line\">      <span class=\"string\">/data</span> <span class=\"string\">from</span> <span class=\"string\">data</span> <span class=\"string\">(rw)</span></span><br><span class=\"line\">      <span class=\"string\">/var/run/secrets/kubernetes.io/serviceaccount</span> <span class=\"string\">from</span> <span class=\"string\">default-token-bq4pj</span> <span class=\"string\">(ro)</span></span><br><span class=\"line\"><span class=\"attr\">Conditions:</span></span><br><span class=\"line\">  <span class=\"string\">Type</span>              <span class=\"string\">Status</span></span><br><span class=\"line\">  <span class=\"string\">Initialized</span>       <span class=\"literal\">True</span> </span><br><span class=\"line\">  <span class=\"string\">Ready</span>             <span class=\"literal\">False</span> </span><br><span class=\"line\">  <span class=\"string\">ContainersReady</span>   <span class=\"literal\">False</span> </span><br><span class=\"line\">  <span class=\"string\">PodScheduled</span>      <span class=\"literal\">True</span> </span><br><span class=\"line\"><span class=\"attr\">Volumes:</span></span><br><span class=\"line\">  <span class=\"attr\">data:</span></span><br><span class=\"line\">    <span class=\"attr\">Type:</span>       <span class=\"string\">EmptyDir</span> <span class=\"string\">(a</span> <span class=\"string\">temporary</span> <span class=\"string\">directory</span> <span class=\"string\">that</span> <span class=\"string\">shares</span> <span class=\"string\">a</span> <span class=\"string\">pod&#x27;s</span> <span class=\"string\">lifetime)</span></span><br><span class=\"line\">    <span class=\"attr\">Medium:</span>     </span><br><span class=\"line\">    <span class=\"attr\">SizeLimit:</span>  <span class=\"string\">&lt;unset&gt;</span></span><br><span class=\"line\">  <span class=\"attr\">default-token-bq4pj:</span></span><br><span class=\"line\">    <span class=\"attr\">Type:</span>        <span class=\"string\">Secret</span> <span class=\"string\">(a</span> <span class=\"string\">volume</span> <span class=\"string\">populated</span> <span class=\"string\">by</span> <span class=\"string\">a</span> <span class=\"string\">Secret)</span></span><br><span class=\"line\">    <span class=\"attr\">SecretName:</span>  <span class=\"string\">default-token-bq4pj</span></span><br><span class=\"line\">    <span class=\"attr\">Optional:</span>    <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">QoS Class:</span>       <span class=\"string\">BestEffort</span></span><br><span class=\"line\"><span class=\"attr\">Node-Selectors:</span>  <span class=\"string\">&lt;none&gt;</span></span><br><span class=\"line\"><span class=\"attr\">Tolerations:</span>     <span class=\"string\">node.kubernetes.io/not-ready:NoExecute</span> <span class=\"string\">op=Exists</span> <span class=\"string\">for</span> <span class=\"string\">300s</span></span><br><span class=\"line\">                 <span class=\"string\">node.kubernetes.io/unreachable:NoExecute</span> <span class=\"string\">op=Exists</span> <span class=\"string\">for</span> <span class=\"string\">300s</span></span><br><span class=\"line\"><span class=\"attr\">Events:</span></span><br><span class=\"line\">  <span class=\"string\">Type</span>     <span class=\"string\">Reason</span>     <span class=\"string\">Age</span>                   <span class=\"string\">From</span>               <span class=\"string\">Message</span></span><br><span class=\"line\">  <span class=\"string\">----</span>     <span class=\"string\">------</span>     <span class=\"string\">----</span>                  <span class=\"string\">----</span>               <span class=\"string\">-------</span></span><br><span class=\"line\">  <span class=\"string\">Normal</span>   <span class=\"string\">Scheduled</span>  <span class=\"string\">4m11s</span>                 <span class=\"string\">default-scheduler</span>  <span class=\"string\">Successfully</span> <span class=\"string\">assigned</span> <span class=\"string\">default/my-pod</span> <span class=\"string\">to</span> <span class=\"string\">k8s-node-02</span></span><br><span class=\"line\">  <span class=\"string\">Normal</span>   <span class=\"string\">Pulled</span>     <span class=\"string\">3m55s</span>                 <span class=\"string\">kubelet</span>            <span class=\"string\">Successfully</span> <span class=\"string\">pulled</span> <span class=\"string\">image</span> <span class=\"string\">&quot;centos&quot;</span> <span class=\"string\">in</span> <span class=\"number\">15.</span><span class=\"string\">962786822s</span></span><br><span class=\"line\">  <span class=\"string\">Normal</span>   <span class=\"string\">Pulling</span>    <span class=\"string\">3m55s</span>                 <span class=\"string\">kubelet</span>            <span class=\"string\">Pulling</span> <span class=\"string\">image</span> <span class=\"string\">&quot;centos&quot;</span></span><br><span class=\"line\">  <span class=\"string\">Normal</span>   <span class=\"string\">Created</span>    <span class=\"string\">3m40s</span>                 <span class=\"string\">kubelet</span>            <span class=\"string\">Created</span> <span class=\"string\">container</span> <span class=\"string\">read</span></span><br><span class=\"line\">  <span class=\"string\">Normal</span>   <span class=\"string\">Pulled</span>     <span class=\"string\">3m40s</span>                 <span class=\"string\">kubelet</span>            <span class=\"string\">Successfully</span> <span class=\"string\">pulled</span> <span class=\"string\">image</span> <span class=\"string\">&quot;centos&quot;</span> <span class=\"string\">in</span> <span class=\"number\">15.</span><span class=\"string\">278309973s</span></span><br><span class=\"line\">  <span class=\"string\">Normal</span>   <span class=\"string\">Started</span>    <span class=\"string\">3m39s</span>                 <span class=\"string\">kubelet</span>            <span class=\"string\">Started</span> <span class=\"string\">container</span> <span class=\"string\">read</span></span><br><span class=\"line\">  <span class=\"string\">Normal</span>   <span class=\"string\">Created</span>    <span class=\"string\">119s</span> <span class=\"string\">(x2</span> <span class=\"string\">over</span> <span class=\"string\">3m55s)</span>  <span class=\"string\">kubelet</span>            <span class=\"string\">Created</span> <span class=\"string\">container</span> <span class=\"string\">write</span></span><br><span class=\"line\">  <span class=\"string\">Normal</span>   <span class=\"string\">Started</span>    <span class=\"string\">119s</span> <span class=\"string\">(x2</span> <span class=\"string\">over</span> <span class=\"string\">3m55s)</span>  <span class=\"string\">kubelet</span>            <span class=\"string\">Started</span> <span class=\"string\">container</span> <span class=\"string\">write</span></span><br><span class=\"line\">  <span class=\"string\">Normal</span>   <span class=\"string\">Pulled</span>     <span class=\"string\">119s</span>                  <span class=\"string\">kubelet</span>            <span class=\"string\">Successfully</span> <span class=\"string\">pulled</span> <span class=\"string\">image</span> <span class=\"string\">&quot;centos&quot;</span> <span class=\"string\">in</span> <span class=\"number\">15.</span><span class=\"string\">25888533s</span></span><br><span class=\"line\">  <span class=\"string\">Warning</span>  <span class=\"string\">BackOff</span>    <span class=\"string\">18s</span>                   <span class=\"string\">kubelet</span>            <span class=\"string\">Back-off</span> <span class=\"string\">restarting</span> <span class=\"string\">failed</span> <span class=\"string\">container</span></span><br><span class=\"line\">  <span class=\"string\">Normal</span>   <span class=\"string\">Pulling</span>    <span class=\"string\">5s</span> <span class=\"string\">(x3</span> <span class=\"string\">over</span> <span class=\"string\">4m11s)</span>    <span class=\"string\">kubelet</span>            <span class=\"string\">Pulling</span> <span class=\"string\">image</span> <span class=\"string\">&quot;centos&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-hostPath\"><a href=\"#3-2-hostPath\" class=\"headerlink\" title=\"3.2 hostPath\"></a>3.2 hostPath</h3><p>​        <code>hostPath</code> 卷能将主机节点(Pod所在节点)文件系统上的文件或目录挂载到 Pod 中，<strong>解决了Pod需要访问宿主机文件的问题</strong>。</p>\n<p>例如，<code>hostPath</code> 的一些用法有：</p>\n<ul>\n<li>运行一个需要访问Docker内部机制的容器；可使用 <code>hostPath</code> 挂载 <code>/var/lib/docker</code> 路径。</li>\n<li>在容器中运行 cAdvisor 时，以 <code>hostPath</code> 方式挂载 <code>/sys</code>。</li>\n<li>允许 Pod 指定给定的 <code>hostPath</code> 在运行 Pod 之前是否应该存在，是否应该创建以及应该以什么方式存在。</li>\n</ul>\n<p>除了必需的 <code>path</code> 属性之外，用户可以选择性地为 <code>hostPath</code> 卷指定 <code>type</code>。</p>\n<p>支持的 <code>type</code> 值如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">取值</th>\n<th align=\"left\">行为</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"></td>\n<td align=\"left\">空字符串（默认）用于向后兼容，这意味着在安装 hostPath 卷之前不会执行任何检查。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>DirectoryOrCreate</code></td>\n<td align=\"left\">如果在给定路径上什么都不存在，那么将<strong>根据需要创建空目录</strong>，权限设置为 0755，具有与 kubelet 相同的组和属主信息。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>Directory</code></td>\n<td align=\"left\">在给定路径上<strong>必须</strong>存在的目录。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>FileOrCreate</code></td>\n<td align=\"left\">如果在给定路径上什么都不存在，那么将在那里<strong>根据需要创建空文件</strong>，权限设置为 0644，具有与 kubelet 相同的组和所有权。注意：<strong>文件所在目录必须存在，否则容器将启动失败</strong></td>\n</tr>\n<tr>\n<td align=\"left\"><code>File</code></td>\n<td align=\"left\">在给定路径上<strong>必须</strong>存在的文件。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>Socket</code></td>\n<td align=\"left\">在给定路径上<strong>必须</strong>存在的 UNIX 套接字。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>CharDevice</code></td>\n<td align=\"left\">在给定路径上<strong>必须</strong>存在的字符设备。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>BlockDevice</code></td>\n<td align=\"left\">在给定路径上<strong>必须</strong>存在的块设备。</td>\n</tr>\n</tbody></table>\n<p>当使用这种类型的卷时要小心，因为：</p>\n<ul>\n<li><strong>配置问题</strong>：具有相同配置（例如基于同一 PodTemplate 创建）的多个 Pod 会由于节点上文件的不同而在不同节点上有不同的行为。</li>\n<li><strong>权限问题</strong>：宿主机上创建的文件或目录只能由 root 用户写入时，需要在 <a href=\"https://kubernetes.io/zh/docs/tasks/configure-pod-container/security-context/\">特权容器</a> 中以 root 身份运行进程，或者修改主机上的文件权限以便容器能够写入 <code>hostPath</code> 卷。</li>\n</ul>\n<p>示例：将宿主机/tmp目录挂载到容器/data目录</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># vim my-pod2-hostpath.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">my-pod2</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">busybox</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">busybox</span></span><br><span class=\"line\">    <span class=\"attr\">args:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">/bin/sh</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">-c</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">sleep</span> <span class=\"number\">36000</span></span><br><span class=\"line\">    <span class=\"attr\">volumeMounts:</span>      <span class=\"comment\"># 挂载到容器中的卷的名称和路径</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">data</span></span><br><span class=\"line\">      <span class=\"attr\">mountPath:</span> <span class=\"string\">/data</span></span><br><span class=\"line\">  <span class=\"attr\">volumes:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">data</span></span><br><span class=\"line\">    <span class=\"attr\">hostPath:</span></span><br><span class=\"line\">      <span class=\"attr\">path:</span> <span class=\"string\">/tmp</span>         <span class=\"comment\"># 宿主机中的目录</span></span><br><span class=\"line\">      <span class=\"attr\">type:</span> <span class=\"string\">Directory</span>    <span class=\"comment\"># 类型：目录，/tmp目录必须存在</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># kubectl apply -f my-pod2-hostpath.yaml </span></span><br><span class=\"line\"><span class=\"string\">pod/my-pod2</span> <span class=\"string\">created</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># kubectl get pods -o wide| grep my-pod2  # pod在node2上，因此挂载的是node2上的目录</span></span><br><span class=\"line\"><span class=\"string\">my-pod2</span>    <span class=\"number\">1</span><span class=\"string\">/1</span>     <span class=\"string\">Running</span>    <span class=\"number\">0</span>      <span class=\"string\">2m8s</span>   <span class=\"number\">10.244</span><span class=\"number\">.44</span><span class=\"number\">.231</span>    <span class=\"string\">k8s-node-02</span>   <span class=\"string\">&lt;none&gt;</span>   <span class=\"string\">&lt;none&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># kubectl exec -it my-pod2 -- sh</span></span><br><span class=\"line\"><span class=\"string\">/</span> <span class=\"comment\"># cd /data/</span></span><br><span class=\"line\"><span class=\"string\">/data</span> <span class=\"comment\"># ls </span></span><br><span class=\"line\"><span class=\"string\">systemd-private-0e90913e2a2647e18a2249d86b6d2c9c-chronyd.service-4BZvQR</span>  <span class=\"string\">vmware-root_680-2689143817</span></span><br><span class=\"line\"><span class=\"string\">systemd-private-dff35498f1f849c28295faa9cd55bcd3-chronyd.service-q022tl</span>  <span class=\"string\">vmware-root_685-4013788754</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在node2中查看/tmp目录下的文件，跟容器my-pod2中一模一样，即容器中的目录和宿主机的/tmp是同一个目录映射</span></span><br><span class=\"line\"><span class=\"comment\"># ls /tmp/</span></span><br><span class=\"line\"><span class=\"string\">systemd-private-0e90913e2a2647e18a2249d86b6d2c9c-chronyd.service-4BZvQR</span>  <span class=\"string\">vmware-root_680-2689143817</span></span><br><span class=\"line\"><span class=\"string\">systemd-private-dff35498f1f849c28295faa9cd55bcd3-chronyd.service-q022tl</span>  <span class=\"string\">vmware-root_685-4013788754</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-3-NFS\"><a href=\"#3-3-NFS\" class=\"headerlink\" title=\"3.3 NFS\"></a>3.3 NFS</h3><p>​        <code>nfs</code> 卷能将 NFS (网络文件系统) 挂载到 Pod 中。 不像 <code>emptyDir</code> 那样会在删除 Pod 的同时也会被删除，<code>nfs</code> 卷的内容在删除 Pod 时会被保存，卷只是被卸载。 这意味着 <code>nfs</code> 卷可以被预先填充数据，并且这些数据可以在 Pod 之间共享。</p>\n<blockquote>\n<p><strong>注意：</strong> 在使用 NFS 卷之前，你必须运行自己的 NFS 服务器并将目标 share 导出备用。</p>\n</blockquote>\n<p>环境规划：</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>IP地址</th>\n<th>主机名</th>\n<th>操作系统版本</th>\n<th>在集群中地位</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>10.138.3.61</td>\n<td>k8s-master</td>\n<td>CentOS7.6.1810</td>\n<td>master</td>\n</tr>\n<tr>\n<td>2</td>\n<td>10.138.3.62</td>\n<td>k8s-node-01</td>\n<td>CentOS7.6.1810</td>\n<td>node</td>\n</tr>\n<tr>\n<td>3</td>\n<td>10.138.3.63</td>\n<td>k8s-node-01</td>\n<td>CentOS7.6.1810</td>\n<td>node、nfs存储</td>\n</tr>\n</tbody></table>\n<h4 id=\"3-3-1-搭建nfs网络文件系统\"><a href=\"#3-3-1-搭建nfs网络文件系统\" class=\"headerlink\" title=\"3.3.1 搭建nfs网络文件系统\"></a>3.3.1 搭建nfs网络文件系统</h4><p>​        在nfs服务器上安装nfs服务</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum -y install nfs-utils</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> vi /etc/exports  <span class=\"comment\"># 将所有的k8s节点都放进来，不要使用*号，这样其他客户端也能挂载</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cat /etc/exports</span></span><br><span class=\"line\">/ifs/kubernetes 10.138.3.61(rw,no_root_squash)</span><br><span class=\"line\">/ifs/kubernetes 10.138.3.62(rw,no_root_squash)</span><br><span class=\"line\">/ifs/kubernetes 10.138.3.63(rw,no_root_squash)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> mkdir -p /jx/kubernetes</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> systemctl start nfs &amp;&amp; systemctl <span class=\"built_in\">enable</span> nfs</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">echo</span> <span class=\"string\">&quot;hello kubernets&quot;</span> &gt; /jx/kubernetes/index.html</span></span><br></pre></td></tr></table></figure>\n\n<p>​        在k8s集群节点安装nfs客户端工具，并在每台节点上检查nfs挂载情况</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum -y install nfs-utils</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 在客户端节点上，查看nfs可以被哪些机器挂载使用</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> showmount  -e 10.138.3.63</span></span><br><span class=\"line\">Export list for 10.138.3.63:</span><br><span class=\"line\">/ifs/kubernetes 10.138.3.63,10.138.3.62,10.138.3.61</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 验证，不用挂载，只做验证，建议每一台节点都验证</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> mount -t nfs 10.138.3.63:/ifs/kubernetes /mnt/</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"comment\"># df -h | grep 10.138.3.63</span></span></span><br><span class=\"line\">10.138.3.63:/ifs/kubernetes   45G  5.9G   40G  13% /mnt</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> umount /mnt</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注：每个Node上都要安装nfs-utils包</p>\n</blockquote>\n<h4 id=\"3-3-2-创建使用nfs存储的容器\"><a href=\"#3-3-2-创建使用nfs存储的容器\" class=\"headerlink\" title=\"3.3.2 创建使用nfs存储的容器\"></a>3.3.2 创建使用nfs存储的容器</h4><p>​        yaml文件如下</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># vim nfs-deploy.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nfs-web</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">     <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">www</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/usr/share/nginx/html</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">www</span></span><br><span class=\"line\">        <span class=\"attr\">nfs:</span></span><br><span class=\"line\">          <span class=\"attr\">server:</span> <span class=\"number\">10.138</span><span class=\"number\">.3</span><span class=\"number\">.63</span></span><br><span class=\"line\">          <span class=\"attr\">path:</span> <span class=\"string\">/ifs/kubernetes</span></span><br></pre></td></tr></table></figure>\n\n<p>执行yaml文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl apply -f nfs-deploy.yaml</span> </span><br><span class=\"line\">deployment.apps/nfs-web created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get deploy | grep nfs</span></span><br><span class=\"line\">nfs-web   3/3     3            3           81s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pods -o wide | grep nfs</span></span><br><span class=\"line\">nfs-web-6ddcb5d55-24cgl   1/1  Running   0  87s   10.244.44.197    k8s-node-02   &lt;none&gt;     &lt;none&gt;</span><br><span class=\"line\">nfs-web-6ddcb5d55-fb7v9   1/1  Running   0  88s   10.244.154.195   k8s-node-01   &lt;none&gt;     &lt;none&gt;</span><br><span class=\"line\">nfs-web-6ddcb5d55-zsm2r   1/1  Running   0  87s   10.244.154.196   k8s-node-01   &lt;none&gt;      &lt;none&gt;</span><br></pre></td></tr></table></figure>\n\n<p>访问容器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 直接通过curl访问pod的ip，结果如下</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> curl 10.244.44.197</span></span><br><span class=\"line\">hello kubernets</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> curl 10.244.154.195</span></span><br><span class=\"line\">hello kubernets</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> curl 10.244.154.196</span></span><br><span class=\"line\">hello kubernets</span><br></pre></td></tr></table></figure>\n\n<p>进入容器，并在容器内新建文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl <span class=\"built_in\">exec</span> -it nfs-web-6ddcb5d55-24cgl -- bash</span></span><br><span class=\"line\">root@nfs-web-6ddcb5d55-24cgl:/# cd /usr/share/nginx/html/</span><br><span class=\"line\">root@nfs-web-6ddcb5d55-24cgl:/usr/share/nginx/html# ls </span><br><span class=\"line\">index.html</span><br><span class=\"line\">root@nfs-web-6ddcb5d55-24cgl:/usr/share/nginx/html# cat index.html </span><br><span class=\"line\">hello kubernets</span><br><span class=\"line\">root@nfs-web-6ddcb5d55-24cgl:/usr/share/nginx/html# echo &quot;welcome nginx pods&quot; &gt; welcome.html</span><br><span class=\"line\">root@nfs-web-6ddcb5d55-24cgl:/usr/share/nginx/html# ls </span><br><span class=\"line\">index.html  welcome.html</span><br></pre></td></tr></table></figure>\n\n<p>在pod中新建文件后，查看nfs服务端根目录下文件的变化</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看nfs服务端</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">pwd</span></span> </span><br><span class=\"line\">/ifs/kubernetes</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls</span> </span><br><span class=\"line\">index.html  welcome.html    # 在nginx pod中新建的welcome.html文件已经存在</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cat welcome.html</span> </span><br><span class=\"line\">welcome nginx pods</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cat index.html</span> </span><br><span class=\"line\">hello kubernets</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cat welcome.html</span> </span><br><span class=\"line\">welcome nginx pods</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-数据持久卷–pv和pvc\"><a href=\"#4-数据持久卷–pv和pvc\" class=\"headerlink\" title=\"4.数据持久卷–pv和pvc\"></a>4.数据持久卷–pv和pvc</h2><p>​        上面使用nfs是的一个缺点是，每个pod都能访问nfs根目录中的所有文件，这样是有安全隐患的。</p>\n<p>​        PV 卷是集群中的资源。PVC 申领是对这些资源的请求，也被用来执行对资源的申领检查。 </p>\n<ul>\n<li>PersistentVolume（PV）：对存储资源创建和使用的抽象，使得存储作为集群中的资源管理</li>\n<li>PersistentVolumeClaim（PVC）：让用户不需要关心具体的Volume实现细节</li>\n</ul>\n<p>关于pv和pvc的几个重要的概念：</p>\n<p><strong>ACCESS MODES（访问模式）：</strong></p>\n<p>AccessModes 是用来对 PV 进行访问模式的设置，用于描述用户应用对存储资源的访问权限，访问权限包括下面几种方式：</p>\n<ul>\n<li><p>ReadWriteOnce（RWO）：读写权限，但是只能被单个节点挂载</p>\n</li>\n<li><p>ReadOnlyMany（ROX）：只读权限，可以被多个节点挂载</p>\n</li>\n<li><p>ReadWriteMany（RWX）：读写权限，可以被多个节点挂载</p>\n</li>\n</ul>\n<p><strong>RECLAIM POLICY（回收策略）：</strong></p>\n<p>目前 PV 支持的策略有三种：</p>\n<ul>\n<li><p>Retain（保留）： 保留数据，需要管理员手工清理数据</p>\n</li>\n<li><p>Recycle（回收）：清除 PV 中的数据，效果相当于执行 rm -rf </p>\n</li>\n<li><p>Delete（删除）：与 PV 相连的后端存储同时删除</p>\n</li>\n</ul>\n<p>修改回收策略：persistentVolumeReclaimPolicy: Retain</p>\n<p><strong>STATUS（状态）：</strong></p>\n<p>一个 PV 的生命周期中，可能会处于4中不同的阶段：</p>\n<ul>\n<li>Available（可用）：表示可用状态，还未被任何 PVC 绑定</li>\n<li>Bound（已绑定）：表示 PV 已经被 PVC 绑定</li>\n<li>Released（已释放）：PVC 被删除，但是资源还未被集群重新声明</li>\n<li>Failed（失败）： 表示该 PV 的自动回收失败</li>\n</ul>\n<blockquote>\n<p>pv与pvc是一对一的关系，即pvc将占用pv的所有容量，<strong>pv和pvc默认使用容量和访问模式进行匹配</strong></p>\n</blockquote>\n<h4 id=\"1-新建pv并查看pv的详细信息\"><a href=\"#1-新建pv并查看pv的详细信息\" class=\"headerlink\" title=\"1 新建pv并查看pv的详细信息\"></a>1 新建pv并查看pv的详细信息</h4><ul>\n<li>创建一个pv，本案例中，我们使用nfs作为后端存储</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># vim my-pv-01.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolume</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-pv-01</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">capacity:</span></span><br><span class=\"line\">    <span class=\"attr\">storage:</span> <span class=\"string\">5Gi</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteMany</span></span><br><span class=\"line\">  <span class=\"attr\">nfs:</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">/ifs/kubernetes</span></span><br><span class=\"line\">    <span class=\"attr\">server:</span> <span class=\"number\">10.138</span><span class=\"number\">.3</span><span class=\"number\">.63</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建pv</span></span><br><span class=\"line\"><span class=\"comment\"># kubectl apply -f my-pv-01.yaml </span></span><br><span class=\"line\"><span class=\"string\">persistentvolume/my-pv-01</span> <span class=\"string\">created</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># kubectl get pv </span></span><br><span class=\"line\"><span class=\"string\">NAME</span>       <span class=\"string\">CAPACITY</span>   <span class=\"string\">ACCESS</span> <span class=\"string\">MODES</span>   <span class=\"string\">RECLAIM</span> <span class=\"string\">POLICY</span>   <span class=\"string\">STATUS</span>   <span class=\"string\">CLAIM</span>   <span class=\"string\">STORAGECLASS</span>   <span class=\"string\">REASON</span>   <span class=\"string\">AGE</span></span><br><span class=\"line\"><span class=\"string\">my-pv-01</span>   <span class=\"string\">5Gi</span>        <span class=\"string\">RWX</span>            <span class=\"string\">Retain</span>           <span class=\"string\">Available</span>                                <span class=\"string\">5s</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看pv的详细信息，主要包括pv状态、回收策略、访问模式、后端存储信息和事件等</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl describe pv my-pv-01</span></span><br><span class=\"line\">Name:            my-pv-01</span><br><span class=\"line\">Labels:          &lt;none&gt;</span><br><span class=\"line\">Annotations:     &lt;none&gt;</span><br><span class=\"line\">Finalizers:      [kubernetes.io/pv-protection]</span><br><span class=\"line\">StorageClass:    </span><br><span class=\"line\">Status:          Available     # 状态</span><br><span class=\"line\">Claim:                         # 被关联的pvc的名称</span><br><span class=\"line\">Reclaim Policy:  Retain        # 回收策略，默认策略保留数据，需要管理员手工清理数据</span><br><span class=\"line\">Access Modes:    RWX           # 访问模式</span><br><span class=\"line\">VolumeMode:      Filesystem</span><br><span class=\"line\">Capacity:        5Gi</span><br><span class=\"line\">Node Affinity:   &lt;none&gt;</span><br><span class=\"line\">Message:         </span><br><span class=\"line\">Source:</span><br><span class=\"line\">    Type:      NFS (an NFS mount that lasts the lifetime of a pod)  # 后端存储类型</span><br><span class=\"line\">    Server:    10.138.3.63   # nfs服务端的地址</span><br><span class=\"line\">    Path:      /ifs/kubernetes  # nfs服务器根目录</span><br><span class=\"line\">    ReadOnly:  false    # 是否只读</span><br><span class=\"line\">Events:        &lt;none&gt;   # 被使用信息</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-新建pvc并查看pvc的详细信息\"><a href=\"#2-新建pvc并查看pvc的详细信息\" class=\"headerlink\" title=\"2 新建pvc并查看pvc的详细信息\"></a>2 新建pvc并查看pvc的详细信息</h4><ul>\n<li>新建pvc</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># vim my-pvc-01.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolumeClaim</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-pvc-01</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteMany</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">    <span class=\"attr\">requests:</span></span><br><span class=\"line\">      <span class=\"attr\">storage:</span> <span class=\"string\">5Gi</span></span><br><span class=\"line\">      </span><br><span class=\"line\"><span class=\"comment\"># 新建pvs</span></span><br><span class=\"line\"><span class=\"comment\"># kubectl apply -f my-pvc-01.yaml </span></span><br><span class=\"line\"><span class=\"string\">persistentvolumeclaim/my-pvc-01</span> <span class=\"string\">created</span></span><br><span class=\"line\"><span class=\"comment\"># kubectl get pvc</span></span><br><span class=\"line\"><span class=\"string\">NAME</span>        <span class=\"string\">STATUS</span>   <span class=\"string\">VOLUME</span>     <span class=\"string\">CAPACITY</span>   <span class=\"string\">ACCESS</span> <span class=\"string\">MODES</span>   <span class=\"string\">STORAGECLASS</span>   <span class=\"string\">AGE</span></span><br><span class=\"line\"><span class=\"string\">my-pvc-01</span>   <span class=\"string\">Bound</span>    <span class=\"string\">my-pv-01</span>   <span class=\"string\">5Gi</span>        <span class=\"string\">RWX</span>                           <span class=\"string\">5s</span></span><br><span class=\"line\"><span class=\"comment\"># 名称       状态      使用的pv    大小       访问模式         存储类型      </span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看pvc的详细信息</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl describe pvc my-pvc-01</span></span><br><span class=\"line\">Name:          my-pvc-01</span><br><span class=\"line\">Namespace:     default</span><br><span class=\"line\">StorageClass:  </span><br><span class=\"line\">Status:        Bound             # pvc的状态</span><br><span class=\"line\">Volume:        my-pv-01          # 关联的pv信息</span><br><span class=\"line\">Labels:        &lt;none&gt;</span><br><span class=\"line\">Annotations:   pv.kubernetes.io/bind-completed: yes</span><br><span class=\"line\">               pv.kubernetes.io/bound-by-controller: yes</span><br><span class=\"line\">Finalizers:    [kubernetes.io/pvc-protection]</span><br><span class=\"line\">Capacity:      5Gi            # 大小</span><br><span class=\"line\">Access Modes:  RWX            # 访问模式</span><br><span class=\"line\">VolumeMode:    Filesystem</span><br><span class=\"line\">Used By:       &lt;none&gt;         # 使用信息，如果被pod关联，此处将显示pod名称</span><br><span class=\"line\">Events:        &lt;none&gt;         # 详细使用信息</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>pvc关联pv后，pv的状态变化</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl describe pv  my-pv-01</span></span><br><span class=\"line\">Name:            my-pv-01</span><br><span class=\"line\">Labels:          &lt;none&gt;</span><br><span class=\"line\">Annotations:     pv.kubernetes.io/bound-by-controller: yes</span><br><span class=\"line\">Finalizers:      [kubernetes.io/pv-protection]</span><br><span class=\"line\">StorageClass:    </span><br><span class=\"line\">Status:          Bound     # 状态由Available变成了bound</span><br><span class=\"line\">Claim:           default/my-pvc-01   # 被关联的pvc的名称</span><br><span class=\"line\">Reclaim Policy:  Retain      # 回收策略</span><br><span class=\"line\">Access Modes:    RWX</span><br><span class=\"line\">VolumeMode:      Filesystem</span><br><span class=\"line\">Capacity:        5Gi</span><br><span class=\"line\">Node Affinity:   &lt;none&gt;</span><br><span class=\"line\">Message:         </span><br><span class=\"line\">Source:</span><br><span class=\"line\">    Type:      NFS (an NFS mount that lasts the lifetime of a pod)</span><br><span class=\"line\">    Server:    10.138.3.63</span><br><span class=\"line\">    Path:      /ifs/kubernetes</span><br><span class=\"line\">    ReadOnly:  false</span><br><span class=\"line\">Events:        &lt;none&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-新建一个使用pv和pvc的Pod\"><a href=\"#3-新建一个使用pv和pvc的Pod\" class=\"headerlink\" title=\"3.新建一个使用pv和pvc的Pod\"></a>3.新建一个使用pv和pvc的Pod</h4><ul>\n<li>yaml文件</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># vim pod-pvc-5g.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-pod-with-pvc</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nginx:latest</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">    <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">www</span></span><br><span class=\"line\">        <span class=\"attr\">mountPath:</span> <span class=\"string\">/usr/share/nginx/html</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"attr\">volumes:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">www</span></span><br><span class=\"line\">    <span class=\"attr\">persistentVolumeClaim:</span></span><br><span class=\"line\">      <span class=\"attr\">claimName:</span> <span class=\"string\">my-pvc-01</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>执行并访问容器</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl apply -f pod-pvc-5g.yaml</span> </span><br><span class=\"line\">pod/my-pod-with-pvc created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pods -o wide | grep with-pvc</span></span><br><span class=\"line\">my-pod-with-pvc  1/1  Running   0   39s   10.244.44.198    k8s-node-02   &lt;none&gt;   &lt;none&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> curl -I 10.244.44.198</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> curl -I 10.244.44.198</span></span><br><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">Server: nginx/1.19.10</span><br><span class=\"line\">Date: Wed, 12 May 2021 02:17:50 GMT</span><br><span class=\"line\">Content-Type: text/html</span><br><span class=\"line\">Content-Length: 16</span><br><span class=\"line\">Last-Modified: Wed, 12 May 2021 09:35:18 GMT</span><br><span class=\"line\">Connection: keep-alive</span><br><span class=\"line\">ETag: &quot;609ba156-10&quot;</span><br><span class=\"line\">Accept-Ranges: bytes</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>进入容器查看</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl <span class=\"built_in\">exec</span> -it my-pod-with-pvc -- bash</span></span><br><span class=\"line\">root@my-pod-with-pvc:/# df -h </span><br><span class=\"line\">Filesystem                         Size  Used Avail Use% Mounted on</span><br><span class=\"line\">overlay                             27G  3.0G   24G  12% /</span><br><span class=\"line\">tmpfs                               64M     0   64M   0% /dev</span><br><span class=\"line\">tmpfs                              920M     0  920M   0% /sys/fs/cgroup</span><br><span class=\"line\">/dev/mapper/centos-root             27G  3.0G   24G  12% /etc/hosts</span><br><span class=\"line\">shm                                 64M     0   64M   0% /dev/shm</span><br><span class=\"line\">192.168.1.120:/data/jx/kubernetes   76G   33M   76G   1% /usr/share/nginx/html</span><br><span class=\"line\">tmpfs                              920M   12K  920M   1% /run/secrets/kubernetes.io/serviceaccount</span><br><span class=\"line\">tmpfs                              920M     0  920M   0% /proc/acpi</span><br><span class=\"line\">tmpfs                              920M     0  920M   0% /proc/scsi</span><br><span class=\"line\">tmpfs                              920M     0  920M   0% /sys/firmware</span><br><span class=\"line\"></span><br><span class=\"line\">root@my-pod-with-pvc:/# cd /usr/share/nginx/html/</span><br><span class=\"line\">root@my-pod-with-pvc:/usr/share/nginx/html# ls </span><br><span class=\"line\">index.html  welcome.html</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看此时pvc的详细信息</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl describe pvc my-pvc-01</span></span><br><span class=\"line\">Name:          my-pvc-01</span><br><span class=\"line\">Namespace:     default</span><br><span class=\"line\">StorageClass:  </span><br><span class=\"line\">Status:        Bound</span><br><span class=\"line\">Volume:        my-pv-01</span><br><span class=\"line\">Labels:        &lt;none&gt;</span><br><span class=\"line\">Annotations:   pv.kubernetes.io/bind-completed: yes</span><br><span class=\"line\">               pv.kubernetes.io/bound-by-controller: yes</span><br><span class=\"line\">Finalizers:    [kubernetes.io/pvc-protection]</span><br><span class=\"line\">Capacity:      5Gi</span><br><span class=\"line\">Access Modes:  RWX</span><br><span class=\"line\">VolumeMode:    Filesystem</span><br><span class=\"line\">Used By:       my-pod-with-pvc   # 显示被关联的pod对的名称</span><br><span class=\"line\">Events:        &lt;none&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-分别删除pod、pvc、pv查看nfs文件状态\"><a href=\"#4-分别删除pod、pvc、pv查看nfs文件状态\" class=\"headerlink\" title=\"4. 分别删除pod、pvc、pv查看nfs文件状态\"></a>4. 分别删除pod、pvc、pv查看nfs文件状态</h4><p>​        分别查看删除pod、pvc、pv对nfs上文件的影响</p>\n<h5 id=\"4-1-删除pod，查看pvc、pv、nfs文件状态\"><a href=\"#4-1-删除pod，查看pvc、pv、nfs文件状态\" class=\"headerlink\" title=\"4.1 删除pod，查看pvc、pv、nfs文件状态\"></a>4.1 删除pod，查看pvc、pv、nfs文件状态</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl delete -f pod-pvc-5g.yaml</span> </span><br><span class=\"line\">pod &quot;my-pod-with-pvc&quot; deleted</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pv,pvc</span></span><br><span class=\"line\">NAME        CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM      STORAGECLASS   REASON   AGE</span><br><span class=\"line\">persistentvolume/my-pv-01   5Gi  RWX  Retain           Bound    default/my-pvc-01                  55m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pvc</span></span><br><span class=\"line\">NAME                              STATUS   VOLUME     CAPACITY   ACCESS MODES   STORAGECLASS   AGE</span><br><span class=\"line\">persistentvolumeclaim/my-pvc-01   Bound    my-pv-01   5Gi        RWX                           49m</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl describe pv  my-pv-01  <span class=\"comment\"># pv没有变化，因为pv仍旧被pvc关联着</span></span></span><br><span class=\"line\">Name:            my-pv-01</span><br><span class=\"line\">Labels:          &lt;none&gt;</span><br><span class=\"line\">Annotations:     pv.kubernetes.io/bound-by-controller: yes</span><br><span class=\"line\">Finalizers:      [kubernetes.io/pv-protection]</span><br><span class=\"line\">StorageClass:    </span><br><span class=\"line\">Status:          Bound</span><br><span class=\"line\">Claim:           default/my-pvc-01  # pvc仍然关联着pv</span><br><span class=\"line\">Reclaim Policy:  Retain     # 回收策略</span><br><span class=\"line\">Access Modes:    RWX</span><br><span class=\"line\">VolumeMode:      Filesystem</span><br><span class=\"line\">Capacity:        5Gi</span><br><span class=\"line\">Node Affinity:   &lt;none&gt;</span><br><span class=\"line\">Message:         </span><br><span class=\"line\">Source:</span><br><span class=\"line\">    Type:      NFS (an NFS mount that lasts the lifetime of a pod)</span><br><span class=\"line\">    Server:    10.138.3.63</span><br><span class=\"line\">    Path:      /ifs/kubernetes</span><br><span class=\"line\">    ReadOnly:  false</span><br><span class=\"line\">Events:        &lt;none&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl describe pvc  my-pvc-01   <span class=\"comment\"># pvc状态有变化，pvc未关联pod</span></span></span><br><span class=\"line\">Name:          my-pvc-01</span><br><span class=\"line\">Namespace:     default</span><br><span class=\"line\">StorageClass:  </span><br><span class=\"line\">Status:        Bound</span><br><span class=\"line\">Volume:        my-pv-01</span><br><span class=\"line\">Labels:        &lt;none&gt;</span><br><span class=\"line\">Annotations:   pv.kubernetes.io/bind-completed: yes</span><br><span class=\"line\">               pv.kubernetes.io/bound-by-controller: yes</span><br><span class=\"line\">Finalizers:    [kubernetes.io/pvc-protection]</span><br><span class=\"line\">Capacity:      5Gi</span><br><span class=\"line\">Access Modes:  RWX</span><br><span class=\"line\">VolumeMode:    Filesystem</span><br><span class=\"line\">Used By:       &lt;none&gt;    # 删除pod后，显示目前未被pod使用</span><br><span class=\"line\">Events:        &lt;none&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除pod后，查看nfs上的文件，依旧存在</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls</span> </span><br><span class=\"line\">index.html  welcome.html</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4-2-删除pvc，查看pv和nfs文件状态\"><a href=\"#4-2-删除pvc，查看pv和nfs文件状态\" class=\"headerlink\" title=\"4.2 删除pvc，查看pv和nfs文件状态\"></a>4.2 删除pvc，查看pv和nfs文件状态</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pv</span></span><br><span class=\"line\">NAME       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM    STORAGECLASS   REASON   AGE</span><br><span class=\"line\">my-pv-01   5Gi        RWX            Retain           Bound    default/my-pvc-01                74m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pvc</span></span><br><span class=\"line\">NAME        STATUS   VOLUME     CAPACITY   ACCESS MODES   STORAGECLASS   AGE</span><br><span class=\"line\">my-pvc-01   Bound    my-pv-01   5Gi        RWX                           69m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl delete -f my-pvc-01.yaml</span></span><br><span class=\"line\">persistentvolumeclaim &quot;my-pvc-01&quot; deleted</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看pv的状态</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl describe pv  my-pv-01</span></span><br><span class=\"line\">Name:            my-pv-01</span><br><span class=\"line\">Labels:          &lt;none&gt;</span><br><span class=\"line\">Annotations:     pv.kubernetes.io/bound-by-controller: yes</span><br><span class=\"line\">Finalizers:      [kubernetes.io/pv-protection]</span><br><span class=\"line\">StorageClass:    </span><br><span class=\"line\">Status:          Released   # 由bound变成了Released</span><br><span class=\"line\">Claim:           default/my-pvc-01</span><br><span class=\"line\">Reclaim Policy:  Retain</span><br><span class=\"line\">Access Modes:    RWX</span><br><span class=\"line\">VolumeMode:      Filesystem</span><br><span class=\"line\">Capacity:        5Gi</span><br><span class=\"line\">Node Affinity:   &lt;none&gt;</span><br><span class=\"line\">Message:         </span><br><span class=\"line\">Source:</span><br><span class=\"line\">    Type:      NFS (an NFS mount that lasts the lifetime of a pod)</span><br><span class=\"line\">    Server:    10.138.3.63</span><br><span class=\"line\">    Path:      /ifs/kubernetes</span><br><span class=\"line\">    ReadOnly:  false</span><br><span class=\"line\">Events:        &lt;none&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> nfs上文件状态，依旧存在</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls</span> </span><br><span class=\"line\">index.html  welcome.html</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4-3-删除pv查看nfs文件状态\"><a href=\"#4-3-删除pv查看nfs文件状态\" class=\"headerlink\" title=\"4.3 删除pv查看nfs文件状态\"></a>4.3 删除pv查看nfs文件状态</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl delete -f my-pv-01.yaml</span> </span><br><span class=\"line\">persistentvolume &quot;my-pv-01&quot; deleted</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls</span> </span><br><span class=\"line\">index.html  welcome.html</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：数据是否被删除是根据pv的回收策略确定的，默认策略会保留数据，并不是所有的策略删除pv后，都保留数据</p>\n</blockquote>\n<h4 id=\"5-通过子目录分开各项目文件\"><a href=\"#5-通过子目录分开各项目文件\" class=\"headerlink\" title=\"5. 通过子目录分开各项目文件\"></a>5. 通过子目录分开各项目文件</h4><p>​        我们发现通过上面的容器是使用的nfs服务的根目录，我们可以通过在nfs服务根目录下创建子目录将不同项目的pod存储分开。</p>\n<h5 id=\"5-1-在nfs服务器上新建各项目目录\"><a href=\"#5-1-在nfs服务器上新建各项目目录\" class=\"headerlink\" title=\"5.1 在nfs服务器上新建各项目目录\"></a>5.1 在nfs服务器上新建各项目目录</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> mkdir /data/jx/kubernetes/&#123;a,b,c&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls /data/jx/kubernetes</span></span><br><span class=\"line\">a  b c index.html  welcome.html</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"5-2-分别创建使用a、b、c子目录的pv和pvc\"><a href=\"#5-2-分别创建使用a、b、c子目录的pv和pvc\" class=\"headerlink\" title=\"5.2 分别创建使用a、b、c子目录的pv和pvc\"></a>5.2 分别创建使用a、b、c子目录的pv和pvc</h5><p>​        接下来，我们分别用a、b、c项目测试pvc的请求容量大小分别小于a、大于b项、等于c目的pv时的情况</p>\n<ul>\n<li><p><strong>a项目</strong></p>\n<p>​    pvc的请求容量小于pv定义的容量大小时，新建pvc后，得到的pvc实际容量大小等于pv的容量大小</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> vim a.yaml</span></span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: PersistentVolume</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: my-pv-a</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  capacity:</span><br><span class=\"line\">    storage: 20Gi</span><br><span class=\"line\">  accessModes:</span><br><span class=\"line\">  - ReadWriteMany</span><br><span class=\"line\">  nfs:</span><br><span class=\"line\">    path: /ifs/kubernetes/a</span><br><span class=\"line\">    server: 10.138.3.63</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: PersistentVolumeClaim</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: my-pvc-a</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  accessModes:</span><br><span class=\"line\">  - ReadWriteMany</span><br><span class=\"line\">  resources:</span><br><span class=\"line\">    requests:</span><br><span class=\"line\">      storage: 10Gi  # 小于pv  </span><br></pre></td></tr></table></figure>\n\n<p>​        新建a项目的pv和pvc</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pv</span></span><br><span class=\"line\">No resources found</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pvc</span></span><br><span class=\"line\">No resources found in default namespace.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl apply -f a.yaml</span> </span><br><span class=\"line\">persistentvolume/my-pv-a created</span><br><span class=\"line\">persistentvolumeclaim/my-pvc-a created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pv</span></span><br><span class=\"line\">NAME      CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM     STORAGECLASS   REASON   AGE</span><br><span class=\"line\">my-pv-a   20Gi       RWX            Retain           Bound    default/my-pvc-a                  5s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pvc  <span class=\"comment\"># pvc的容量是pv的整个容量，并不是我们定义的容量</span></span></span><br><span class=\"line\">NAME       STATUS   VOLUME    CAPACITY   ACCESS MODES   STORAGECLASS   AGE</span><br><span class=\"line\">my-pvc-a   Bound    my-pv-a   20Gi       RWX                           8s</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong>b项目</strong></p>\n<p>​    pvc的请求容量大于pv定义的容量大小时，新建pvc将失败。</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> vim b.yaml</span></span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: PersistentVolume</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: my-pv-b</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  capacity:</span><br><span class=\"line\">    storage: 10Gi</span><br><span class=\"line\">  accessModes:</span><br><span class=\"line\">  - ReadWriteMany</span><br><span class=\"line\">  nfs:</span><br><span class=\"line\">    path: /ifs/kubernetes/b</span><br><span class=\"line\">    server: 10.138.3.63</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: PersistentVolumeClaim</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: my-pvc-b</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  accessModes:</span><br><span class=\"line\">  - ReadWriteMany</span><br><span class=\"line\">  resources:</span><br><span class=\"line\">    requests:</span><br><span class=\"line\">      storage: 12Gi    # 比pv大</span><br></pre></td></tr></table></figure>\n\n<p>​        新建b项目的pv和pvc</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 此时集群中存在的pv和pvc信息</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pv</span> </span><br><span class=\"line\">NAME      CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM     STORAGECLASS   REASON   AGE</span><br><span class=\"line\">my-pv-a   20Gi       RWX            Retain           Bound    default/my-pvc-a                  20m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pvc</span></span><br><span class=\"line\">NAME       STATUS   VOLUME    CAPACITY   ACCESS MODES   STORAGECLASS   AGE</span><br><span class=\"line\">my-pvc-a   Bound    my-pv-a   20Gi       RWX                           20m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 新建b项目的pv和pvc</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl apply -f b.yaml</span> </span><br><span class=\"line\">persistentvolume/my-pv-b created</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pv</span> </span><br><span class=\"line\">NAME      CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS     CLAIM  STORAGECLASS   REASON   AGE</span><br><span class=\"line\">my-pv-a   20Gi       RWX            Retain           Bound      default/my-pvc-a               21m</span><br><span class=\"line\">my-pv-b   10Gi       RWX            Retain           Available                                 4s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pvc</span></span><br><span class=\"line\">NAME       STATUS    VOLUME    CAPACITY   ACCESS MODES   STORAGECLASS   AGE</span><br><span class=\"line\">my-pvc-a   Bound     my-pv-a   20Gi       RWX                           21m</span><br><span class=\"line\">my-pvc-b   Pending                                                      10s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl describe pvc my-pvc-b</span></span><br><span class=\"line\">Name:          my-pvc-b</span><br><span class=\"line\">Namespace:     default</span><br><span class=\"line\">StorageClass:  </span><br><span class=\"line\">Status:        Pending</span><br><span class=\"line\">Volume:        </span><br><span class=\"line\">Labels:        &lt;none&gt;</span><br><span class=\"line\">Annotations:   &lt;none&gt;</span><br><span class=\"line\">Finalizers:    [kubernetes.io/pvc-protection]</span><br><span class=\"line\">Capacity:      </span><br><span class=\"line\">Access Modes:  </span><br><span class=\"line\">VolumeMode:    Filesystem</span><br><span class=\"line\">Used By:       &lt;none&gt;</span><br><span class=\"line\">Events:</span><br><span class=\"line\">  Type    Reason         Age                From                         Message</span><br><span class=\"line\">  ----    ------         ----               ----                         -------</span><br><span class=\"line\">  Normal  FailedBinding  12s (x2 over 27s)  persistentvolume-controller  no persistent volumes available for this claim and no storage class is set          # 提示没有可被满足的pv</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>c项目</p>\n<p>​    c项目的pv和pvc容量相等</p>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># vim c.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolume</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-pv-c</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">capacity:</span></span><br><span class=\"line\">    <span class=\"attr\">storage:</span> <span class=\"string\">100Gi</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteMany</span></span><br><span class=\"line\">  <span class=\"attr\">nfs:</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">/ifs/kubernetes/c</span></span><br><span class=\"line\">    <span class=\"attr\">server:</span> <span class=\"number\">10.138</span><span class=\"number\">.3</span><span class=\"number\">.63</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolumeClaim</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-pvc-c</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteMany</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">    <span class=\"attr\">requests:</span></span><br><span class=\"line\">      <span class=\"attr\">storage:</span> <span class=\"string\">100Gi</span>    <span class=\"comment\"># 跟pv一样大</span></span><br></pre></td></tr></table></figure>\n\n<p>​        新建c项目使用的pv和pvc</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl apply -f c.yaml</span> </span><br><span class=\"line\">persistentvolume/my-pv-c created</span><br><span class=\"line\">persistentvolumeclaim/my-pvc-c created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pv</span> </span><br><span class=\"line\">NAME      CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS    CLAIM    STORAGECLASS   REASON   AGE</span><br><span class=\"line\">my-pv-a   20Gi       RWX            Retain           Bound     default/my-pvc-a                 23m</span><br><span class=\"line\">my-pv-b   10Gi       RWX            Retain           Available                                  2m29s</span><br><span class=\"line\">my-pv-c   100Gi      RWX            Retain           Bound     default/my-pvc-c                 4s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pvc</span></span><br><span class=\"line\">NAME       STATUS    VOLUME    CAPACITY   ACCESS MODES   STORAGECLASS   AGE</span><br><span class=\"line\">my-pvc-a   Bound     my-pv-a   20Gi       RWX                           23m</span><br><span class=\"line\">my-pvc-b   Pending                                                      2m32s</span><br><span class=\"line\">my-pvc-c   Bound     my-pv-c   100Gi      RWX                           7s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 注意：</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> nfs服务端的大小只有76G大小，但是pv目前已经被分配出130G了，因此分配pv的容量并不受限于实际存储容量，可以超分</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> df -h | grep /data</span></span><br><span class=\"line\">/dev/mapper/centos-data   76G   33M   76G   1% /data</span><br></pre></td></tr></table></figure>\n\n<p>​        值得注意的是，pvc对集群中pv的请求并不是如同我们上面写的yaml文件一一对应的，而是根据大小去请求，只要有符合的就可以分配，比上面案例中，集群中目前没有<code>pv</code>能够满足名称为<code>my-pvc-b</code>的<code>pvc</code>，但是如果一旦有满足<code>my-pvc-b</code>资源要求的<code>pv</code>出现，<code>my-pvc-b</code>将会直接关联到该<code>pv</code>。</p>\n<p>​        新建能满足<code>my-pvc-b</code>资源要求(容量和访问模式)的pv，<code>my-pvc-b</code>将自动关联到pv</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> vim d.yaml</span> </span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: PersistentVolume</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: my-pv-d</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  capacity:</span><br><span class=\"line\">    storage: 200Gi</span><br><span class=\"line\">  accessModes:</span><br><span class=\"line\">  - ReadWriteMany</span><br><span class=\"line\">  nfs:</span><br><span class=\"line\">    path: /ifs/kubernetes/d</span><br><span class=\"line\">    server: 10.138.3.63</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl apply -f d.yaml</span> </span><br><span class=\"line\">persistentvolume/my-pv-d created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pv</span> </span><br><span class=\"line\">NAME      CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS    CLAIM    STORAGECLASS   REASON   AGE</span><br><span class=\"line\">my-pv-a   20Gi       RWX            Retain           Bound     default/my-pvc-a                 30m</span><br><span class=\"line\">my-pv-b   10Gi       RWX            Retain           Available                                  9m10s</span><br><span class=\"line\">my-pv-c   100Gi      RWX            Retain           Bound     default/my-pvc-c                 6m45s</span><br><span class=\"line\">my-pv-d   200Gi      RWX            Retain           Bound     default/my-pvc-b                 22s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pvc</span></span><br><span class=\"line\">NAME       STATUS   VOLUME    CAPACITY   ACCESS MODES   STORAGECLASS   AGE</span><br><span class=\"line\">my-pvc-a   Bound    my-pv-a   20Gi       RWX                           30m</span><br><span class=\"line\">my-pvc-b   Bound    my-pv-d   200Gi      RWX                           9m4s  # 直接使用了my-pv-d的空间</span><br><span class=\"line\">my-pvc-c   Bound    my-pv-c   100Gi      RWX                           6m39s</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-pv的动态供给\"><a href=\"#5-pv的动态供给\" class=\"headerlink\" title=\"5 pv的动态供给\"></a>5 pv的动态供给</h3><p>​        现在PV使用方式称为静态供给，需要K8s运维工程师提前创建一堆PV，供开发者使用。</p>\n<img src=\"../kuberPre/image-20210513132310184.png\" alt=\"image-20210513132310184\" style=\"zoom:67%;\" />\n\n<p>​        PV静态供给明显的缺点是维护成本太高了！因此，K8s开始支持PV动态供给，使用StorageClass对象实现。</p>\n<img src=\"../kuberPre/image-20210513132346059.png\" alt=\"image-20210513132346059\" style=\"zoom: 67%;\" />\n\n<p>接下来我们基于nfs实现pv的动态供给，流程图如下：</p>\n<img src=\"../kuberPre/image-20210513132431099.png\" alt=\"image-20210513132431099\" style=\"zoom: 80%;\" />\n\n\n\n<p>​        K8s默认不支持NFS动态供给(查看地址：<a href=\"https://kubernetes.io/docs/concepts/storage/storage-classes/%EF%BC%8C%E5%A6%82%E4%B8%8B%E5%9B%BE%E6%89%80%E7%A4%BA)%EF%BC%8C%E9%9C%80%E8%A6%81%E5%8D%95%E7%8B%AC%E9%83%A8%E7%BD%B2%E7%A4%BE%E5%8C%BA%E5%BC%80%E5%8F%91%E7%9A%84%E6%8F%92%E4%BB%B6%E3%80%82\">https://kubernetes.io/docs/concepts/storage/storage-classes/，如下图所示)，需要单独部署社区开发的插件。</a></p>\n<p><img src=\"../kuberPre/image-20210513133434958.png\" alt=\"image-20210513133434958\"></p>\n<p>kubernetes官网给出的插件下载地址：</p>\n<p><img src=\"../kuberPre/image-20210513134113382.png\" alt=\"image-20210513134113382\"></p>\n<p>通过上图中的网址连接到github上，项目说明中，给出了nfs插件下载地址</p>\n<p><img src=\"../kuberPre/image-20210513134321040.png\" alt=\"image-20210513134321040\"></p>\n<p>点击链接就跳转到了nfs插件地址：<a href=\"https://github.com/kubernetes-sigs/nfs-subdir-external-provisioner\">https://github.com/kubernetes-sigs/nfs-subdir-external-provisioner</a></p>\n<blockquote>\n<p>附：百度网盘下载地址</p>\n<p>链接：<a href=\"https://pan.baidu.com/s/1Dbsou9iUvVeix3wQRpT0kg\">https://pan.baidu.com/s/1Dbsou9iUvVeix3wQRpT0kg</a><br>提取码：56sh </p>\n</blockquote>\n<p><img src=\"../kuberPre/image-20210513134734743.png\" alt=\"image-20210513134734743\"></p>\n<p>​        下载插件项目地址<code>deploy</code>目录下的指定yaml文件，然后上传到k8s主控节点，如果下载不下来，可以直接复制下面的文件内容，主要修改内容为<code>deployment.yaml</code>文件中的<code>nfs服务器IP地址</code>和<code>nfs根目录</code></p>\n<h5 id=\"1-部署nfs插件\"><a href=\"#1-部署nfs插件\" class=\"headerlink\" title=\"1.部署nfs插件\"></a>1.部署nfs插件</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ll -h</span> </span><br><span class=\"line\">total 12K</span><br><span class=\"line\">-rw-r--r-- 1 root root  255 Mar 27 20:04 class.yaml</span><br><span class=\"line\">-rw-r--r-- 1 root root 1.1K Mar 29 14:36 deployment.yaml</span><br><span class=\"line\">-rw-r--r-- 1 root root 1.8K Mar 27 20:04 rbac.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 文件内容</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cat class.yaml   <span class=\"comment\"># 创建存储类</span></span></span><br><span class=\"line\">apiVersion: storage.k8s.io/v1</span><br><span class=\"line\">kind: StorageClass</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: managed-nfs-storage</span><br><span class=\"line\">provisioner: k8s-sigs.io/nfs-subdir-external-provisioner # or choose another name, must match deployment&#x27;s env PROVISIONER_NAME&#x27;  </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 这里的名称如果要更改，需要跟deployment.yaml文件中的PROVISIONER_NAME变量保持一致</span></span><br><span class=\"line\">parameters:</span><br><span class=\"line\">  archiveOnDelete: &quot;false&quot;   # 归档删除，默认是删除pvc，数据会被删除，建议修改成true，删除pvc后，保留nfs中的数据</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cat deployment.yaml   <span class=\"comment\"># 修改镜像地址、nfs服务器IP和nfs根目录</span></span></span><br><span class=\"line\">apiVersion: apps/v1</span><br><span class=\"line\">kind: Deployment</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: nfs-client-provisioner</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app: nfs-client-provisioner</span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\"> replace with namespace <span class=\"built_in\">where</span> provisioner is deployed</span></span><br><span class=\"line\">  namespace: default</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  replicas: 1</span><br><span class=\"line\">  strategy:</span><br><span class=\"line\">    type: Recreate</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      app: nfs-client-provisioner</span><br><span class=\"line\">  template:</span><br><span class=\"line\">    metadata:</span><br><span class=\"line\">      labels:</span><br><span class=\"line\">        app: nfs-client-provisioner</span><br><span class=\"line\">    spec:</span><br><span class=\"line\">      serviceAccountName: nfs-client-provisioner</span><br><span class=\"line\">      containers:</span><br><span class=\"line\">        - name: nfs-client-provisioner</span><br><span class=\"line\">          image: lizhenliang/nfs-subdir-external-provisioner:v4.0.1  # 修改此处的镜像地址</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">         image: k8s.gcr.io/sig-storage/nfs-subdir-external-provisioner:v4.0.2  <span class=\"comment\"># 默认镜像地址</span></span></span><br><span class=\"line\">          volumeMounts:</span><br><span class=\"line\">            - name: nfs-client-root</span><br><span class=\"line\">              mountPath: /persistentvolumes</span><br><span class=\"line\">          env:</span><br><span class=\"line\">            - name: PROVISIONER_NAME</span><br><span class=\"line\">              value: k8s-sigs.io/nfs-subdir-external-provisioner</span><br><span class=\"line\">            - name: NFS_SERVER</span><br><span class=\"line\">              value: 10.138.3.63    # 修改ip地址为nfs的服务器地址</span><br><span class=\"line\">            - name: NFS_PATH</span><br><span class=\"line\">              value: /ifs/kubernetes    # 设置nfs的根目录</span><br><span class=\"line\">      volumes:</span><br><span class=\"line\">        - name: nfs-client-root</span><br><span class=\"line\">          nfs:</span><br><span class=\"line\">            server: 10.138.3.63      # 修改nfs服务器地址和根目录</span><br><span class=\"line\">            path: /ifs/kubernetes</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cat rbac.yaml   <span class=\"comment\"># 授权访问apiserver</span></span></span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: ServiceAccount</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: nfs-client-provisioner</span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\"> replace with namespace <span class=\"built_in\">where</span> provisioner is deployed</span></span><br><span class=\"line\">  namespace: default</span><br><span class=\"line\">---</span><br><span class=\"line\">kind: ClusterRole</span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: nfs-client-provisioner-runner</span><br><span class=\"line\">rules:</span><br><span class=\"line\">  - apiGroups: [&quot;&quot;]</span><br><span class=\"line\">    resources: [&quot;persistentvolumes&quot;]</span><br><span class=\"line\">    verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;, &quot;create&quot;, &quot;delete&quot;]</span><br><span class=\"line\">  - apiGroups: [&quot;&quot;]</span><br><span class=\"line\">    resources: [&quot;persistentvolumeclaims&quot;]</span><br><span class=\"line\">    verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;, &quot;update&quot;]</span><br><span class=\"line\">  - apiGroups: [&quot;storage.k8s.io&quot;]</span><br><span class=\"line\">    resources: [&quot;storageclasses&quot;]</span><br><span class=\"line\">    verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;]</span><br><span class=\"line\">  - apiGroups: [&quot;&quot;]</span><br><span class=\"line\">    resources: [&quot;events&quot;]</span><br><span class=\"line\">    verbs: [&quot;create&quot;, &quot;update&quot;, &quot;patch&quot;]</span><br><span class=\"line\">---</span><br><span class=\"line\">kind: ClusterRoleBinding</span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: run-nfs-client-provisioner</span><br><span class=\"line\">subjects:</span><br><span class=\"line\">  - kind: ServiceAccount</span><br><span class=\"line\">    name: nfs-client-provisioner</span><br><span class=\"line\">    # replace with namespace where provisioner is deployed</span><br><span class=\"line\">    namespace: default</span><br><span class=\"line\">roleRef:</span><br><span class=\"line\">  kind: ClusterRole</span><br><span class=\"line\">  name: nfs-client-provisioner-runner</span><br><span class=\"line\">  apiGroup: rbac.authorization.k8s.io</span><br><span class=\"line\">---</span><br><span class=\"line\">kind: Role</span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: leader-locking-nfs-client-provisioner</span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\"> replace with namespace <span class=\"built_in\">where</span> provisioner is deployed</span></span><br><span class=\"line\">  namespace: default</span><br><span class=\"line\">rules:</span><br><span class=\"line\">  - apiGroups: [&quot;&quot;]</span><br><span class=\"line\">    resources: [&quot;endpoints&quot;]</span><br><span class=\"line\">    verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;, &quot;create&quot;, &quot;update&quot;, &quot;patch&quot;]</span><br><span class=\"line\">---</span><br><span class=\"line\">kind: RoleBinding</span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: leader-locking-nfs-client-provisioner</span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\"> replace with namespace <span class=\"built_in\">where</span> provisioner is deployed</span></span><br><span class=\"line\">  namespace: default</span><br><span class=\"line\">subjects:</span><br><span class=\"line\">  - kind: ServiceAccount</span><br><span class=\"line\">    name: nfs-client-provisioner</span><br><span class=\"line\">    # replace with namespace where provisioner is deployed</span><br><span class=\"line\">    namespace: default</span><br><span class=\"line\">roleRef:</span><br><span class=\"line\">  kind: Role</span><br><span class=\"line\">  name: leader-locking-nfs-client-provisioner</span><br><span class=\"line\">  apiGroup: rbac.authorization.k8s.io</span><br></pre></td></tr></table></figure>\n\n<p>部署nfs插件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls</span> </span><br><span class=\"line\">class.yaml  deployment.yaml  rbac.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl apply -f .</span>    </span><br><span class=\"line\">storageclass.storage.k8s.io/managed-nfs-storage created</span><br><span class=\"line\">deployment.apps/nfs-client-provisioner created</span><br><span class=\"line\">serviceaccount/nfs-client-provisioner created</span><br><span class=\"line\">clusterrole.rbac.authorization.k8s.io/nfs-client-provisioner-runner created</span><br><span class=\"line\">clusterrolebinding.rbac.authorization.k8s.io/run-nfs-client-provisioner created</span><br><span class=\"line\">role.rbac.authorization.k8s.io/leader-locking-nfs-client-provisioner created</span><br><span class=\"line\">rolebinding.rbac.authorization.k8s.io/leader-locking-nfs-client-provisioner created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pods</span> </span><br><span class=\"line\">NAME                                      READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">nfs-client-provisioner-86bc655c46-x74bn   1/1     Running   0          86s   # 新建该容器</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get sc   <span class=\"comment\"># 查看存储类</span></span></span><br><span class=\"line\">NAME                  PROVISIONER                                   RECLAIMPOLICY   VOLUMEBINDINGMODE   ALLOWVOLUMEEXPANSION   AGE</span><br><span class=\"line\">managed-nfs-storage   k8s-sigs.io/nfs-subdir-external-provisioner   Delete          Immediate           false                  3m6s</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-创建动态供给的Pod\"><a href=\"#2-创建动态供给的Pod\" class=\"headerlink\" title=\"2.创建动态供给的Pod\"></a>2.创建动态供给的Pod</h5><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># vim sc.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolumeClaim</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">test-claim</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">storageClassName:</span> <span class=\"string\">&quot;managed-nfs-storage&quot;</span>  <span class=\"comment\"># 此处的名称需要跟kubectl get sc指令执行的结果中显示的名称一致</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">   <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteMany</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">    <span class=\"attr\">requests:</span></span><br><span class=\"line\">      <span class=\"attr\">storage:</span> <span class=\"string\">10Gi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">test-pod</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">test-pod</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nfs-pvc</span></span><br><span class=\"line\">      <span class=\"attr\">mountPath:</span> <span class=\"string\">&quot;/usr/share/nginx/html&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">volumes:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nfs-pvc</span></span><br><span class=\"line\">    <span class=\"attr\">persistentVolumeClaim:</span></span><br><span class=\"line\">      <span class=\"attr\">claimName:</span> <span class=\"string\">test-claim</span></span><br></pre></td></tr></table></figure>\n\n<p>执行yaml文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 删除系统上目前存在的pv和pvc</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl delete pvc $(kubectl get pvc | awk <span class=\"string\">&#x27;&#123;print$1&#125;&#x27;</span> | grep -vi name)</span></span><br><span class=\"line\">persistentvolumeclaim &quot;my-pvc-a&quot; deleted</span><br><span class=\"line\">persistentvolumeclaim &quot;my-pvc-b&quot; deleted</span><br><span class=\"line\">persistentvolumeclaim &quot;my-pvc-c&quot; deleted</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl delete pv $(kubectl get pv | awk <span class=\"string\">&#x27;&#123;print$1&#125;&#x27;</span> | grep -vi name)</span></span><br><span class=\"line\">persistentvolume &quot;my-pv-a&quot; deleted</span><br><span class=\"line\">persistentvolume &quot;my-pv-b&quot; deleted</span><br><span class=\"line\">persistentvolume &quot;my-pv-c&quot; deleted</span><br><span class=\"line\">persistentvolume &quot;my-pv-d&quot; deleted</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pod | grep test-pod</span></span><br><span class=\"line\">test-pod     1/1     Running   0        40s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pv   <span class=\"comment\"># 默认策略是delete，即删除pv(或者pvc)，后端存储中的文件也会被删除</span></span></span><br><span class=\"line\">NAME       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM     STORAGECLASS    REASON   AGE</span><br><span class=\"line\">pvc-f9992ebe-7faa-4094-bad2-a04afeb42167   10Gi RWX Delete Bound  default/test-claim   managed-nfs-storage    22s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pvc</span></span><br><span class=\"line\">NAME      STATUS   VOLUME                                     CAPACITY  ACCESS MODES STORAGECLASS   AGE</span><br><span class=\"line\">test-claim  Bound  pvc-f9992ebe-7faa-4094-bad2-a04afeb42167   10Gi       RWX   managed-nfs-storage  26s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 此时共享存储上的文件如下：</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ll -h</span> </span><br><span class=\"line\">total 8.0K</span><br><span class=\"line\">drwxr-xr-x 2 root root  6 May 12 18:29 a</span><br><span class=\"line\">drwxr-xr-x 2 root root  6 May 12 18:29 b</span><br><span class=\"line\">drwxr-xr-x 2 root root  6 May 12 18:29 c</span><br><span class=\"line\">drwxrwxrwx 2 root root  6 May 13 22:18 default-test-claim-pvc-f9992ebe-7faa-4094-bad2-a04afeb42167</span><br><span class=\"line\">-rw-r--r-- 1 root root 16 May 12 17:35 index.html</span><br><span class=\"line\">-rw-r--r-- 1 root root 19 May 12 17:38 welcome.html</span><br></pre></td></tr></table></figure>\n\n<p>由于<code>pv</code>的默认策略是<code>delete</code>，因此现在删除<code>pvc</code>，后端nfs中<code>pod</code>对应的文件也会被删除</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl delete -f sc.yaml</span> </span><br><span class=\"line\">persistentvolumeclaim &quot;test-claim&quot; deleted</span><br><span class=\"line\">pod &quot;test-pod&quot; deleted</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看nfs服务器上的根文件下的目录，结果如下</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ll</span> </span><br><span class=\"line\">total 8</span><br><span class=\"line\">drwxr-xr-x 2 root root  6 May 12 18:29 a</span><br><span class=\"line\">drwxr-xr-x 2 root root  6 May 12 18:29 b</span><br><span class=\"line\">drwxr-xr-x 2 root root  6 May 12 18:29 c</span><br><span class=\"line\">-rw-r--r-- 1 root root 16 May 12 17:35 index.html</span><br><span class=\"line\">-rw-r--r-- 1 root root 19 May 12 17:38 welcome.html</span><br></pre></td></tr></table></figure>\n\n<p>要解决上面的问题只需要将class.yaml中的默认策略修改</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> vim class.yaml</span> </span><br><span class=\"line\">apiVersion: storage.k8s.io/v1</span><br><span class=\"line\">kind: StorageClass</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: managed-nfs-storage</span><br><span class=\"line\">provisioner: k8s-sigs.io/nfs-subdir-external-provisioner # or choose another name, must match deployment&#x27;s env PROVISIONER_NAME&#x27;</span><br><span class=\"line\">parameters:</span><br><span class=\"line\">  archiveOnDelete: &quot;true&quot;   # 将false修改成true</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl apply -f class.yaml</span> </span><br><span class=\"line\">The StorageClass &quot;managed-nfs-storage&quot; is invalid: parameters: Forbidden: updates to parameters are forbidden.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl delete -f class.yaml</span> </span><br><span class=\"line\">storageclass.storage.k8s.io &quot;managed-nfs-storage&quot; deleted</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl apply -f class.yaml</span> </span><br><span class=\"line\">storageclass.storage.k8s.io/managed-nfs-storage created</span><br></pre></td></tr></table></figure>\n\n<p>验证：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 重新通过sc.yaml文件新建pod和pvc</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl apply -f sc.yaml</span> </span><br><span class=\"line\">persistentvolumeclaim/test-claim created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pods| grep <span class=\"built_in\">test</span></span></span><br><span class=\"line\">test-pod              1/1     Running   0          38s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pv</span></span><br><span class=\"line\">NAME    CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM     STORAGECLASS      REASON   AGE</span><br><span class=\"line\">pvc-244e48f3-e454-4c1b-ae8a-7304d508dd72   10Gi       RWX            Delete           Bound    default/test-claim   managed-nfs-storage       13s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pvc</span></span><br><span class=\"line\">NAME         STATUS   VOLUME                            CAPACITY ACCESS MODES   STORAGECLASS   AGE</span><br><span class=\"line\">test-claim  Bound  pvc-244e48f3-e454-4c1b-ae8a-7304d508dd72   10Gi RWX  managed-nfs-storage   16s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> nfs上的数据</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ll</span> </span><br><span class=\"line\">total 8</span><br><span class=\"line\">drwxr-xr-x 2 root root  6 May 12 18:29 a</span><br><span class=\"line\">drwxr-xr-x 2 root root  6 May 12 18:29 b</span><br><span class=\"line\">drwxr-xr-x 2 root root  6 May 12 18:29 c</span><br><span class=\"line\">drwxrwxrwx 2 root root  6 May 13 23:04 default-test-claim-pvc-244e48f3-e454-4c1b-ae8a-7304d508dd72</span><br><span class=\"line\">-rw-r--r-- 1 root root 16 May 12 17:35 index.html</span><br><span class=\"line\">-rw-r--r-- 1 root root 19 May 12 17:38 welcome.html</span><br></pre></td></tr></table></figure>\n\n<p>删除<code>pvc</code>，检查nfs后端存储是否保留了pod的数据</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl delete -f sc.yaml</span> </span><br><span class=\"line\">persistentvolumeclaim &quot;test-claim&quot; deleted</span><br><span class=\"line\">pod &quot;test-pod&quot; deleted</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> nfs服务器上的数据</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ll</span> </span><br><span class=\"line\">total 8</span><br><span class=\"line\">drwxr-xr-x 2 root root  6 May 12 18:29 a</span><br><span class=\"line\">drwxrwxrwx 2 root root  6 May 13 23:04 archived-default-test-claim-pvc-244e48f3-e454-4c1b-ae8a-7304d508dd72</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 重新做了归档操作，名称发生了变化</span></span><br><span class=\"line\">drwxr-xr-x 2 root root  6 May 12 18:29 b</span><br><span class=\"line\">drwxr-xr-x 2 root root  6 May 12 18:29 c</span><br><span class=\"line\">-rw-r--r-- 1 root root 16 May 12 17:35 index.html</span><br><span class=\"line\">-rw-r--r-- 1 root root 19 May 12 17:38 welcome.html</span><br></pre></td></tr></table></figure>\n","comments":true,"permalink":"https://qingdalf.github.io/2021-05/kuberStorage/","categories":[{"name":"kubernets","slug":"kubernets","permalink":"https://qingdalf.github.io/categories/kubernets/"}],"tags":[]},{"title":"Kubernetes 有状态应用部署","date":"2021-05-08T16:22:11.000Z","path":"2021-05/kuberStatefulSet/","content":"<h2 id=\"Kubernetes-有状态应用部署\"><a href=\"#Kubernetes-有状态应用部署\" class=\"headerlink\" title=\"Kubernetes 有状态应用部署\"></a>Kubernetes 有状态应用部署</h2><h3 id=\"1-无状态与有状态\"><a href=\"#1-无状态与有状态\" class=\"headerlink\" title=\"1.无状态与有状态\"></a>1.无状态与有状态</h3><p>​        Deployment控制器设计原则：管理的所有Pod一模一样，提供同一个服务，也不考虑在哪台Node运行，可随意扩容和缩容。这种应用称为“无状态”，例如Web服务。<br>​        在实际的场景中，并不能满足所有应用，尤其是分布式应用，会部署多个实例，这些实例之间往往有依赖关系(如启动顺序)，例如主从关系、主备关系，这种应用称为“有状态”，例如MySQL主从、Etcd集群</p>\n<span id=\"more\"></span>\n\n<h3 id=\"2-StatefulSet控制器概述\"><a href=\"#2-StatefulSet控制器概述\" class=\"headerlink\" title=\"2.StatefulSet控制器概述\"></a>2.StatefulSet控制器概述</h3><p>StatefulSet控制器用于部署有状态应用，满足一些有状态应用的需求：</p>\n<ul>\n<li><strong>Pod有序的部署、扩容、删除和停止</strong></li>\n<li><strong>Pod分配一个稳定的且唯一的网络标识</strong></li>\n<li><strong>Pod分配一个独享的存储</strong></li>\n</ul>\n<h4 id=\"2-1-StatefulSet控制器管理机制：网络标识\"><a href=\"#2-1-StatefulSet控制器管理机制：网络标识\" class=\"headerlink\" title=\"2.1 StatefulSet控制器管理机制：网络标识\"></a>2.1 StatefulSet控制器管理机制：网络标识</h4><p>​        我们知道service具有负载均衡的能力，可以将访问请求通过分发给后端pod去处理，那么如果有状态的应用也使用service的这个功能的话，是不是用户的写入操作就分别写入到了主备两个pod中了呢(svc的调度功能)，这样就造成了数据的不一致了，我们想要达到的功能是数据只写入到主库，备库同步主库的数据。</p>\n<p>​        使用Headless Service（相比普通Service只是将spec.clusterIP定义为None）来维护Pod网络身份，会为每个Pod分配一个数字编号并且按照编号顺序部署。还需要在StatefulSet添加serviceName: “xx”字段指定StatefulSet控制器要使用这个Headless Service。<br>稳定主要体现在主机名和Pod A记录：</p>\n<ul>\n<li>主机名：&lt;statefulset名称&gt;-&lt;编号&gt;</li>\n<li>Pod DNS A记录：&lt;statefulset名称-编号&gt;.<service-name> .<namespace>.svc.cluster.local</li>\n</ul>\n<h5 id=\"2-1-1-创建Headless-Service\"><a href=\"#2-1-1-创建Headless-Service\" class=\"headerlink\" title=\"2.1.1 创建Headless Service\"></a>2.1.1 创建Headless Service</h5><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cat svc.yaml </span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">web-01</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">clusterIP:</span> <span class=\"string\">None</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nginx-01</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># kubectl apply -f svc.yaml </span></span><br><span class=\"line\"><span class=\"string\">service/web-01</span> <span class=\"string\">created</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># kubectl get svc</span></span><br><span class=\"line\"><span class=\"string\">NAME</span>         <span class=\"string\">TYPE</span>        <span class=\"string\">CLUSTER-IP</span>      <span class=\"string\">EXTERNAL-IP</span>   <span class=\"string\">PORT(S)</span>        <span class=\"string\">AGE</span></span><br><span class=\"line\"><span class=\"string\">kubernetes</span>   <span class=\"string\">ClusterIP</span>   <span class=\"number\">10.96</span><span class=\"number\">.0</span><span class=\"number\">.1</span>       <span class=\"string\">&lt;none&gt;</span>        <span class=\"number\">443</span><span class=\"string\">/TCP</span>        <span class=\"string\">42h</span></span><br><span class=\"line\"><span class=\"string\">nginx</span>        <span class=\"string\">NodePort</span>    <span class=\"number\">10.101</span><span class=\"number\">.73</span><span class=\"number\">.189</span>   <span class=\"string\">&lt;none&gt;</span>        <span class=\"number\">80</span><span class=\"string\">:32168/TCP</span>   <span class=\"string\">42h</span></span><br><span class=\"line\"><span class=\"string\">web-01</span>       <span class=\"string\">ClusterIP</span>   <span class=\"string\">None</span>            <span class=\"string\">&lt;none&gt;</span>        <span class=\"number\">80</span><span class=\"string\">/TCP</span>         <span class=\"string\">4s</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># kubectl describe svc web-01</span></span><br><span class=\"line\"><span class=\"attr\">Name:</span>              <span class=\"string\">web-01</span></span><br><span class=\"line\"><span class=\"attr\">Namespace:</span>         <span class=\"string\">default</span></span><br><span class=\"line\"><span class=\"attr\">Labels:</span>            <span class=\"string\">&lt;none&gt;</span></span><br><span class=\"line\"><span class=\"attr\">Annotations:</span>       <span class=\"string\">&lt;none&gt;</span></span><br><span class=\"line\"><span class=\"attr\">Selector:</span>          <span class=\"string\">app=nginx-01</span></span><br><span class=\"line\"><span class=\"attr\">Type:</span>              <span class=\"string\">ClusterIP</span></span><br><span class=\"line\"><span class=\"attr\">IP Families:</span>       <span class=\"string\">&lt;none&gt;</span></span><br><span class=\"line\"><span class=\"attr\">IP:</span>                <span class=\"string\">None</span></span><br><span class=\"line\"><span class=\"attr\">IPs:</span>               <span class=\"string\">None</span></span><br><span class=\"line\"><span class=\"attr\">Port:</span>              <span class=\"string\">&lt;unset&gt;</span>  <span class=\"number\">80</span><span class=\"string\">/TCP</span></span><br><span class=\"line\"><span class=\"attr\">TargetPort:</span>        <span class=\"number\">80</span><span class=\"string\">/TCP</span></span><br><span class=\"line\"><span class=\"attr\">Endpoints:</span>         <span class=\"string\">&lt;none&gt;</span></span><br><span class=\"line\"><span class=\"attr\">Session Affinity:</span>  <span class=\"string\">None</span></span><br><span class=\"line\"><span class=\"attr\">Events:</span>            <span class=\"string\">&lt;none&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-2-2-创建使用Headless-Service的StatefulSet应用\"><a href=\"#2-2-2-创建使用Headless-Service的StatefulSet应用\" class=\"headerlink\" title=\"2.2.2 创建使用Headless Service的StatefulSet应用\"></a>2.2.2 创建使用Headless Service的StatefulSet应用</h5><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># vim statfulset.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">StatefulSet</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">serviceName:</span> <span class=\"string\">&quot;web-01&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">         <span class=\"attr\">image:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">         <span class=\"attr\">ports:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">          </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># kubectl get pods | grep nginx   # 创建pod是先后顺序创建的，nginx-0建好后在新建nginx-1</span></span><br><span class=\"line\"><span class=\"string\">nginx-0</span>                               <span class=\"number\">1</span><span class=\"string\">/1</span>     <span class=\"string\">Running</span>             <span class=\"number\">0</span>          <span class=\"string\">25s</span></span><br><span class=\"line\"><span class=\"string\">nginx-1</span>                               <span class=\"number\">0</span><span class=\"string\">/1</span>     <span class=\"string\">ContainerCreating</span>   <span class=\"number\">0</span>          <span class=\"string\">7s</span></span><br><span class=\"line\"><span class=\"string\">nginx-6799fc88d8-sfsjw</span>                <span class=\"number\">1</span><span class=\"string\">/1</span>     <span class=\"string\">Running</span>             <span class=\"number\">0</span>          <span class=\"string\">42h</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># kubectl get sts   # 已经有一个pod新建完成 </span></span><br><span class=\"line\"><span class=\"string\">NAME</span>    <span class=\"string\">READY</span>   <span class=\"string\">AGE</span></span><br><span class=\"line\"><span class=\"string\">nginx</span>   <span class=\"number\">1</span><span class=\"string\">/3</span>     <span class=\"string\">31s</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># kubectl get pods | grep nginx  # nginx-1新建好后，再新建nginx-2</span></span><br><span class=\"line\"><span class=\"string\">nginx-0</span>                                <span class=\"number\">1</span><span class=\"string\">/1</span>     <span class=\"string\">Running</span>             <span class=\"number\">0</span>          <span class=\"string\">37s</span></span><br><span class=\"line\"><span class=\"string\">nginx-1</span>                                <span class=\"number\">1</span><span class=\"string\">/1</span>     <span class=\"string\">Running</span>             <span class=\"number\">0</span>          <span class=\"string\">19s</span></span><br><span class=\"line\"><span class=\"string\">nginx-2</span>                                <span class=\"number\">0</span><span class=\"string\">/1</span>     <span class=\"string\">ContainerCreating</span>   <span class=\"number\">0</span>          <span class=\"string\">1s</span></span><br><span class=\"line\"><span class=\"string\">nginx-6799fc88d8-sfsjw</span>                 <span class=\"number\">1</span><span class=\"string\">/1</span>     <span class=\"string\">Running</span>             <span class=\"number\">0</span>          <span class=\"string\">42h</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># kubectl get sts</span></span><br><span class=\"line\"><span class=\"string\">NAME</span>    <span class=\"string\">READY</span>   <span class=\"string\">AGE</span></span><br><span class=\"line\"><span class=\"string\">nginx</span>   <span class=\"number\">3</span><span class=\"string\">/3</span>     <span class=\"string\">54s</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># kubectl get pods | grep nginx</span></span><br><span class=\"line\"><span class=\"string\">nginx-0</span>                                <span class=\"number\">1</span><span class=\"string\">/1</span>     <span class=\"string\">Running</span>   <span class=\"number\">0</span>          <span class=\"string\">58s</span></span><br><span class=\"line\"><span class=\"string\">nginx-1</span>                                <span class=\"number\">1</span><span class=\"string\">/1</span>     <span class=\"string\">Running</span>   <span class=\"number\">0</span>          <span class=\"string\">40s</span></span><br><span class=\"line\"><span class=\"string\">nginx-2</span>                                <span class=\"number\">1</span><span class=\"string\">/1</span>     <span class=\"string\">Running</span>   <span class=\"number\">0</span>          <span class=\"string\">22s</span></span><br><span class=\"line\"><span class=\"string\">nginx-6799fc88d8-sfsjw</span>                 <span class=\"number\">1</span><span class=\"string\">/1</span>     <span class=\"string\">Running</span>   <span class=\"number\">0</span>          <span class=\"string\">42h</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看主机名</span></span><br><span class=\"line\"><span class=\"comment\"># kubectl exec nginx-0 -- hostname </span></span><br><span class=\"line\"><span class=\"string\">nginx-0</span></span><br><span class=\"line\"><span class=\"comment\"># kubectl exec nginx-1 -- hostname </span></span><br><span class=\"line\"><span class=\"string\">nginx-1</span></span><br><span class=\"line\"><span class=\"comment\"># kubectl exec nginx-2 -- hostname </span></span><br><span class=\"line\"><span class=\"string\">nginx-2</span></span><br></pre></td></tr></table></figure>\n\n<p>验证通过主机名访问：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl run -it  --rm dns-test --image=busybox:1.28.4 -- sh</span></span><br><span class=\"line\">If you don&#x27;t see a command prompt, try pressing enter.</span><br><span class=\"line\">/ # nslookup nginx   # 解析普通的service</span><br><span class=\"line\">Server:    10.96.0.10</span><br><span class=\"line\">Address 1: 10.96.0.10 kube-dns.kube-system.svc.cluster.local</span><br><span class=\"line\"></span><br><span class=\"line\">Name:      nginx</span><br><span class=\"line\">Address 1: 10.101.73.189 nginx.default.svc.cluster.local</span><br><span class=\"line\">/ # </span><br><span class=\"line\">/ # nslookup web-01   # 没有clusterIp的service</span><br><span class=\"line\">Server:    10.96.0.10</span><br><span class=\"line\">Address 1: 10.96.0.10 kube-dns.kube-system.svc.cluster.local</span><br><span class=\"line\"></span><br><span class=\"line\">Name:      web-01</span><br><span class=\"line\">Address 1: 10.244.154.205 nginx-0.web-01.default.svc.cluster.local</span><br><span class=\"line\">Address 2: 10.244.154.206 nginx-2.web-01.default.svc.cluster.local</span><br><span class=\"line\">Address 3: 10.244.44.202 nginx-1.web-01.default.svc.cluster.local</span><br><span class=\"line\">/ # </span><br><span class=\"line\">/ # nslookup nginx-01-1.web-01.default.svc.cluster.local  # 解析其中的一个pod</span><br><span class=\"line\">Server:    10.96.0.10</span><br><span class=\"line\">Address 1: 10.96.0.10 kube-dns.kube-system.svc.cluster.local</span><br><span class=\"line\"></span><br><span class=\"line\">Name:      nginx-1.web-01.default.svc.cluster.local</span><br><span class=\"line\">Address 1: 10.244.44.202 nginx-1.web-01.default.svc.cluster.local</span><br><span class=\"line\">/ # </span><br><span class=\"line\">/ # nslookup nginx-01-2.web-01.default.svc.cluster.local</span><br><span class=\"line\">Server:    10.96.0.10</span><br><span class=\"line\">Address 1: 10.96.0.10 kube-dns.kube-system.svc.cluster.local</span><br><span class=\"line\"></span><br><span class=\"line\">Name:      nginx-2.web-01.default.svc.cluster.local</span><br><span class=\"line\">Address 1: 10.244.154.206 nginx-2.web-01.default.svc.cluster.local</span><br></pre></td></tr></table></figure>\n\n<p>​        上文中由于都是通过主机名进行解析的，所以即使pod重启了，主机名并不会发生变化，所以还是能解析出来，我们可以删除一个pod进行测试。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl delete pod nginx-01-1</span></span><br><span class=\"line\">pod &quot;nginx-01-1&quot; deleted</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pods | grep nginx-0</span> </span><br><span class=\"line\">nginx-01-0                                1/1     Running   0          21m</span><br><span class=\"line\">nginx-01-1                                1/1     Running   0          2m19s</span><br><span class=\"line\">nginx-01-2                                1/1     Running   0          21m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 此时通过busybox容器再次解析nginx-01-1，IP地址发送了变化，但是通过主机名还是能解析出来</span></span><br><span class=\"line\">/ # nslookup nginx-01-1.web-01.default.svc.cluster.local</span><br><span class=\"line\">Server:    10.96.0.10</span><br><span class=\"line\">Address 1: 10.96.0.10 kube-dns.kube-system.svc.cluster.local</span><br><span class=\"line\"></span><br><span class=\"line\">Name:      nginx-1.web-01.default.svc.cluster.local</span><br><span class=\"line\">Address 1: 10.244.44.203 nginx-1.web-01.default.svc.cluster.local</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>扩容pod</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 修改statfulset.yaml中的副本数为4个</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl apply -f statfulset.yaml</span> </span><br><span class=\"line\">statefulset.apps/nginx-01 configured</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pods | grep nginx-0</span></span><br><span class=\"line\">nginx-0                                1/1     Running   0          49m</span><br><span class=\"line\">nginx-1                                1/1     Running   0          29m</span><br><span class=\"line\">nginx-2                                1/1     Running   0          48m</span><br><span class=\"line\">nginx-3                                1/1     Running   0          3m22s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get sts</span></span><br><span class=\"line\">NAME    READY   AGE</span><br><span class=\"line\">nginx   4/4     49</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 再次进行域名解析</span></span><br><span class=\"line\">/ # nslookup web-01</span><br><span class=\"line\">Server:    10.96.0.10</span><br><span class=\"line\">Address 1: 10.96.0.10 kube-dns.kube-system.svc.cluster.local</span><br><span class=\"line\"></span><br><span class=\"line\">Name:      web-01</span><br><span class=\"line\">Address 1: 10.244.154.206 nginx-2.web-01.default.svc.cluster.local</span><br><span class=\"line\">Address 2: 10.244.154.205 nginx-0.web-01.default.svc.cluster.local</span><br><span class=\"line\">Address 3: 10.244.44.203 nginx-1.web-01.default.svc.cluster.local</span><br><span class=\"line\">Address 4: 10.244.154.208 nginx-3.web-01.default.svc.cluster.local</span><br><span class=\"line\"></span><br><span class=\"line\">/ # nslookup nginx-3.web-01.default.svc.cluster.local</span><br><span class=\"line\">Server:    10.96.0.10</span><br><span class=\"line\">Address 1: 10.96.0.10 kube-dns.kube-system.svc.cluster.local</span><br><span class=\"line\"></span><br><span class=\"line\">Name:      nginx-3.web-01.default.svc.cluster.local</span><br><span class=\"line\">Address 1: 10.244.154.208 nginx-3.web-01.default.svc.cluster.local</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除pod，也是按照顺序删除，此时我们通过<code>kubectl delete</code>直接删除四个pod，观察删除顺序和删除后的重建顺序</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl delete pod nginx-0 nginx-1 nginx-2 nginx-3  <span class=\"comment\"># 删除pod</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 在集群中的其他节点上观察执行删除后的变化情况</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pods -w    <span class=\"comment\"># 未执行删除命令前</span></span></span><br><span class=\"line\">NAME                                     READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">java-demo-56d54df448-xnppg               1/1     Running   0          96m</span><br><span class=\"line\">nfs-client-provisioner-fc7d496b4-p4r5b   1/1     Running   0          65m</span><br><span class=\"line\">nfs-web-66cbdc486b-rj9xv                 1/1     Running   0          96m</span><br><span class=\"line\">nfs-web-66cbdc486b-srlqx                 1/1     Running   0          96m</span><br><span class=\"line\">nfs-web-66cbdc486b-t95dt                 1/1     Running   0          96m</span><br><span class=\"line\">nginx-0                                  1/1     Running   0          9m14s</span><br><span class=\"line\">nginx-1                                  1/1     Running   0          8m57s</span><br><span class=\"line\">nginx-2                                  1/1     Running   0          8m40s</span><br><span class=\"line\">nginx-3                                  1/1     Running   0          4m14s</span><br><span class=\"line\">nginx-6799fc88d8-5nz5v                   1/1     Running   0          96m</span><br><span class=\"line\">nginx-6799fc88d8-9srh6                   1/1     Running   0          96m</span><br><span class=\"line\">nginx-6799fc88d8-t9dqc                   1/1     Running   0          96m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 执行删除命令后</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pods   <span class=\"comment\"># 删除无先后顺序</span></span></span><br><span class=\"line\">NAME                                     READY   STATUS        RESTARTS   AGE</span><br><span class=\"line\">java-demo-56d54df448-xnppg               1/1     Running       0          97m</span><br><span class=\"line\">nfs-client-provisioner-fc7d496b4-p4r5b   1/1     Running       0          65m</span><br><span class=\"line\">nfs-web-66cbdc486b-rj9xv                 1/1     Running       0          97m</span><br><span class=\"line\">nfs-web-66cbdc486b-srlqx                 1/1     Running       0          97m</span><br><span class=\"line\">nfs-web-66cbdc486b-t95dt                 1/1     Running       0          97m</span><br><span class=\"line\">nginx-0                                  0/1     Terminating   0          9m56s</span><br><span class=\"line\">nginx-1                                  0/1     Terminating   0          9m39s</span><br><span class=\"line\">nginx-2                                  0/1     Terminating   0          9m22s</span><br><span class=\"line\">nginx-3                                  0/1     Terminating   0          4m56s</span><br><span class=\"line\">nginx-6799fc88d8-5nz5v                   1/1     Running       0          97m</span><br><span class=\"line\">nginx-6799fc88d8-9srh6                   1/1     Running       0          97m</span><br><span class=\"line\">nginx-6799fc88d8-t9dqc                   1/1     Running       0          97m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pods   <span class=\"comment\"># 按照nginx-0、nginx-1、nginx-2、nginx-3的顺序依次新建pod</span></span></span><br><span class=\"line\">NAME                                     READY   STATUS              RESTARTS   AGE</span><br><span class=\"line\">java-demo-56d54df448-xnppg               1/1     Running             0          97m</span><br><span class=\"line\">nfs-client-provisioner-fc7d496b4-p4r5b   1/1     Running             0          66m</span><br><span class=\"line\">nfs-web-66cbdc486b-rj9xv                 1/1     Running             0          97m</span><br><span class=\"line\">nfs-web-66cbdc486b-srlqx                 1/1     Running             0          97m</span><br><span class=\"line\">nfs-web-66cbdc486b-t95dt                 1/1     Running             0          97m</span><br><span class=\"line\">nginx-0                                  1/1     Running             0          34s</span><br><span class=\"line\">nginx-1                                  0/1     ContainerCreating   0          17s</span><br><span class=\"line\">nginx-6799fc88d8-5nz5v                   1/1     Running             0          97m</span><br><span class=\"line\">nginx-6799fc88d8-9srh6                   1/1     Running             0          97m</span><br><span class=\"line\">nginx-6799fc88d8-t9dqc                   1/1     Running             0          97m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pods</span></span><br><span class=\"line\">NAME                                     READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">java-demo-56d54df448-xnppg               1/1     Running   0          99m</span><br><span class=\"line\">nfs-client-provisioner-fc7d496b4-p4r5b   1/1     Running   0          67m</span><br><span class=\"line\">nfs-web-66cbdc486b-rj9xv                 1/1     Running   0          99m</span><br><span class=\"line\">nfs-web-66cbdc486b-srlqx                 1/1     Running   0          99m</span><br><span class=\"line\">nfs-web-66cbdc486b-t95dt                 1/1     Running   0          99m</span><br><span class=\"line\">nginx-0                                  1/1     Running   0          111s # 从时间也可以看出新建的先后顺序</span><br><span class=\"line\">nginx-1                                  1/1     Running   0          94s</span><br><span class=\"line\">nginx-2                                  1/1     Running   0          77s</span><br><span class=\"line\">nginx-3                                  1/1     Running   0          60s</span><br><span class=\"line\">nginx-6799fc88d8-5nz5v                   1/1     Running   0          99m</span><br><span class=\"line\">nginx-6799fc88d8-9srh6                   1/1     Running   0          99m</span><br><span class=\"line\">nginx-6799fc88d8-t9dqc                   1/1     Running   0          99m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 通过<span class=\"string\">&quot;kubectl get pods -w&quot;</span>指令查看容器变化的完整过程如下</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pods -w   <span class=\"comment\"># 此处只截取了nginx-0、nginx-1、nginx-2、nginx-3四个容器的状态变化</span></span></span><br><span class=\"line\">nginx-2                                  0/1     Terminating   0          9m30s</span><br><span class=\"line\">nginx-1                                  0/1     Terminating   0          9m30s</span><br><span class=\"line\">nginx-3                                  0/1     Terminating   0          5m4s</span><br><span class=\"line\">nginx-0                                  0/1     Terminating   0          10m</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ------nginx-0容器从pending-&gt;ContainerCreating-&gt;到Running的状态变化</span></span><br><span class=\"line\">nginx-0                                  0/1     Pending       0          0s</span><br><span class=\"line\">nginx-0                                  0/1     Pending       0          0s </span><br><span class=\"line\">nginx-0                                  0/1     Pending       0          1s </span><br><span class=\"line\">nginx-0                                  0/1     ContainerCreating   0          1s</span><br><span class=\"line\">nginx-0                                  1/1     Running             0          17s</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ------nginx-1容器从pending-&gt;ContainerCreating-&gt;到Running的状态变化</span></span><br><span class=\"line\">nginx-1                                  0/1     Pending             0          0s</span><br><span class=\"line\">nginx-1                                  0/1     Pending             0          0s</span><br><span class=\"line\">nginx-1                                  0/1     ContainerCreating   0          0s</span><br><span class=\"line\">nginx-1                                  0/1     ContainerCreating   0          1s</span><br><span class=\"line\">nginx-1                                  1/1     Running             0          17s</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ------nginx-2容器从pending-&gt;ContainerCreating-&gt;到Running的状态变化</span></span><br><span class=\"line\">nginx-2                                  0/1     Pending             0          0s</span><br><span class=\"line\">nginx-2                                  0/1     Pending             0          0s</span><br><span class=\"line\">nginx-2                                  0/1     ContainerCreating   0          0s</span><br><span class=\"line\">nginx-2                                  0/1     ContainerCreating   0          1s</span><br><span class=\"line\">nginx-2                                  1/1     Running             0          17s</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ------nginx-3容器从pending-&gt;ContainerCreating-&gt;到Running的状态变化</span></span><br><span class=\"line\">nginx-3                                  0/1     Pending             0          0s</span><br><span class=\"line\">nginx-3                                  0/1     Pending             0          0s</span><br><span class=\"line\">nginx-3                                  0/1     ContainerCreating   0          1s</span><br><span class=\"line\">nginx-3                                  0/1     ContainerCreating   0          1s</span><br><span class=\"line\">nginx-3                                  1/1     Running             0          17s</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>升级，按照从后往前的顺序一个个升级</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 将镜像修改成nginx:1.17</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl apply -f svc.ymal</span> </span><br><span class=\"line\">statefulset.apps/nginx configured</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pods</span></span><br><span class=\"line\">NAME                                     READY   STATUS              RESTARTS   AGE</span><br><span class=\"line\">java-demo-56d54df448-xnppg               1/1     Running             0          118m</span><br><span class=\"line\">nfs-client-provisioner-fc7d496b4-p4r5b   1/1     Running             0          86m</span><br><span class=\"line\">nfs-web-66cbdc486b-rj9xv                 1/1     Running             0          118m</span><br><span class=\"line\">nfs-web-66cbdc486b-srlqx                 1/1     Running             0          118m</span><br><span class=\"line\">nfs-web-66cbdc486b-t95dt                 1/1     Running             0          118m</span><br><span class=\"line\">nginx-0                                  0/1     ContainerCreating   0          16s  # 新建第四个容器</span><br><span class=\"line\">nginx-1                                  1/1     Running             0          46s  # 新建第三个容器</span><br><span class=\"line\">nginx-2                                  1/1     Running             0          76s  # 新建第二个容器</span><br><span class=\"line\">nginx-3                                  1/1     Running             0          2m6s # 新建第一个完成</span><br><span class=\"line\">nginx-6799fc88d8-5nz5v                   1/1     Running             0          118m</span><br><span class=\"line\">nginx-6799fc88d8-9srh6                   1/1     Running             0          118m</span><br><span class=\"line\">nginx-6799fc88d8-t9dqc                   1/1     Running             0          118m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 通过<span class=\"string\">&quot;kubectl get pods -w&quot;</span>指令查看容器变化的完整过程如下</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pods -w  <span class=\"comment\"># 此处只截取相关容器的状态变化</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ------nginx-3容器从Terminating-&gt;pending-&gt;ContainerCreating-&gt;Running的状态变化</span></span><br><span class=\"line\">nginx-3                                  1/1     Terminating         0          17m</span><br><span class=\"line\">nginx-3                                  0/1     Pending             0          0s</span><br><span class=\"line\">nginx-3                                  0/1     ContainerCreating   0          0s</span><br><span class=\"line\">nginx-3                                  1/1     Running             0          43s</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ------nginx-2容器从Terminating-&gt;pending-&gt;ContainerCreating-&gt;Running的状态变化</span></span><br><span class=\"line\">nginx-2                                  1/1     Terminating         0          18m</span><br><span class=\"line\">nginx-2                                  0/1     Pending             0          0s</span><br><span class=\"line\">nginx-2                                  0/1     ContainerCreating   0          0s</span><br><span class=\"line\">nginx-2                                  1/1     Running             0          18s</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ------nginx-1容器从Terminating-&gt;pending-&gt;ContainerCreating-&gt;Running的状态变化</span></span><br><span class=\"line\">nginx-1                                  0/1     Terminating         0          19m</span><br><span class=\"line\">nginx-1                                  0/1     Pending             0          0s</span><br><span class=\"line\">nginx-1                                  0/1     ContainerCreating   0          0s</span><br><span class=\"line\">nginx-1                                  1/1     Running             0          18s</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ------nginx-0容器从Terminating-&gt;pending-&gt;ContainerCreating-&gt;Running的状态变化</span></span><br><span class=\"line\">nginx-0                                  1/1     Terminating         0          20m</span><br><span class=\"line\">nginx-0                                  0/1     Pending             0          0s</span><br><span class=\"line\">nginx-0                                  0/1     ContainerCreating   0          0s</span><br><span class=\"line\">nginx-0                                  1/1     Running             0          18s</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-StatefulSet控制器管理机制：独享存储\"><a href=\"#2-3-StatefulSet控制器管理机制：独享存储\" class=\"headerlink\" title=\"2.3 StatefulSet控制器管理机制：独享存储\"></a>2.3 StatefulSet控制器管理机制：独享存储</h4><p>​        StatefulSet的存储卷使用<code>VolumeClaimTemplate</code>创建，称为<code>卷申请模板</code>，当StatefulSet使用<code>VolumeClaimTemplate</code>创建一个<code>PersistentVolume</code>时，同样也会为每个Pod分配并创建一个编号的PVC，每个PVC绑定对应的PV，从而保证每个Pod都拥有独立的存储。</p>\n<p>​        新建关于svc、StatefulSet的yaml文件</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># vim svc2.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">web-02</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">clusterIP:</span> <span class=\"string\">None</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nginx-02</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># kubectl apply -f svc2.yaml </span></span><br><span class=\"line\"><span class=\"string\">service/web-02</span> <span class=\"string\">created</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># kubectl get svc | grep web-02</span></span><br><span class=\"line\"><span class=\"string\">web-02</span>       <span class=\"string\">ClusterIP</span>   <span class=\"string\">None</span>             <span class=\"string\">&lt;none&gt;</span>        <span class=\"number\">80</span><span class=\"string\">/TCP</span>         <span class=\"string\">26s</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># vim svc.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">StatefulSet</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">webserver</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">serviceName:</span> <span class=\"string\">&quot;web-02&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">         <span class=\"attr\">image:</span> <span class=\"string\">nginx:1.17</span></span><br><span class=\"line\">         <span class=\"attr\">ports:</span></span><br><span class=\"line\">         <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">           <span class=\"attr\">name:</span> <span class=\"string\">web</span></span><br><span class=\"line\">         <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">         <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">www</span></span><br><span class=\"line\">           <span class=\"attr\">mountPath:</span> <span class=\"string\">/usr/share/nginx/html/</span></span><br><span class=\"line\">           </span><br><span class=\"line\">  <span class=\"attr\">volumeClaimTemplates:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">www</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">storageClassName:</span> <span class=\"string\">&quot;managed-nfs-storage&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteOnce</span></span><br><span class=\"line\">      <span class=\"attr\">resources:</span></span><br><span class=\"line\">        <span class=\"attr\">requests:</span></span><br><span class=\"line\">          <span class=\"attr\">storage:</span> <span class=\"string\">5Gi</span>          </span><br></pre></td></tr></table></figure>\n\n<p>​        执行yaml文件，并查看pv和pvc的信息</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 执行yaml文件前</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pv</span></span><br><span class=\"line\">No resources found</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pvc</span></span><br><span class=\"line\">No resources found in default namespace.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 执行yaml文件后</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl apply -f sts.yaml</span> </span><br><span class=\"line\">statefulset.apps/webserver created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pods | grep webserver</span></span><br><span class=\"line\">webserver-0                              1/1     Running   0          21s</span><br><span class=\"line\">webserver-1                              1/1     Running   0          18s</span><br><span class=\"line\">webserver-2                              1/1     Running   0          14s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pv  <span class=\"comment\"># 按照pod新建的顺序依次新建</span></span></span><br><span class=\"line\">NAME    CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM    STORAGECLASS          REASON   AGE</span><br><span class=\"line\">pvc-7bb8995f-47ca-4003-bf56-d8850b814873   5Gi   RWO   Delete  Bound    default/www-webserver-0   managed-nfs-storage            113s</span><br><span class=\"line\">pvc-9caa7ee0-e998-4880-ae6e-469ed0e86838   5Gi  RWO    Delete   Bound    default/www-webserver-1   managed-nfs-storage            110s</span><br><span class=\"line\">pvc-b365f76a-a36f-402a-b0b9-fdd0d33286cc   5Gi  RWO    Delete   Bound    default/www-webserver-2   managed-nfs-storage            106s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pvc  <span class=\"comment\"># 按照pod新建的顺序依次新建</span></span></span><br><span class=\"line\">NAME             STATUS       VOLUME                           CAPACITY  ACCESS MODES STORAGECLASS  AGE</span><br><span class=\"line\">www-webserver-0 Bound pvc-7bb8995f-47ca-4003-bf56-d8850b814873  5Gi     RWO    managed-nfs-storage  8s</span><br><span class=\"line\">www-webserver-1 Bound pvc-9caa7ee0-e998-4880-ae6e-469ed0e86838  5Gi     RWO    managed-nfs-storage  5s</span><br><span class=\"line\">www-webserver-2 Bound pvc-b365f76a-a36f-402a-b0b9-fdd0d33286cc  5Gi     RWO   managed-nfs-storage  1s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> nfs服务器上的根文件夹中的文件如下</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ll -h</span> </span><br><span class=\"line\">total 12K</span><br><span class=\"line\">-rw-r--r-- 1 root root  8 Apr 27 17:23 a.txt</span><br><span class=\"line\">drwxrwxrwx 2 root root  6 May 23 22:34 default-www-webserver-0-pvc-1884bb67-ff54-4bd5-bbaf-e0c349080349</span><br><span class=\"line\">drwxrwxrwx 2 root root  6 May 23 22:34 default-www-webserver-1-pvc-e397aae1-f85c-46fc-a91e-b66540a4f195</span><br><span class=\"line\">drwxrwxrwx 2 root root  6 May 23 22:34 default-www-webserver-2-pvc-0531d703-7014-405e-a4d8-efd6ae4e264b</span><br><span class=\"line\">-rw-r--r-- 1 root root 16 May 23 20:17 index.html</span><br><span class=\"line\">-rw-r--r-- 1 root root 19 May 23 20:20 welcome.html</span><br></pre></td></tr></table></figure>\n\n<p>​        分别往三个容器中写入文件并查看nfs服务器上根文件目录中的信息</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl <span class=\"built_in\">exec</span> -it  webserver-0   -- /bin/bash</span></span><br><span class=\"line\">root@webserver-0 :/# echo &quot;welcome webserver-0&quot; &gt;  /usr/share/nginx/html/welcome.html</span><br><span class=\"line\">root@webserver-0 :/# ls /usr/share/nginx/html/</span><br><span class=\"line\">welcome.html</span><br><span class=\"line\">root@webserver-0 :/# exit</span><br><span class=\"line\">exit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl <span class=\"built_in\">exec</span> -it webserver-1  -- /bin/bash</span></span><br><span class=\"line\">root@webserver-1:/# echo &quot;welcome webserver-1&quot; &gt;  /usr/share/nginx/html/welcome.html</span><br><span class=\"line\">root@webserver-1:/# ls /usr/share/nginx/html/</span><br><span class=\"line\">welcome.html</span><br><span class=\"line\">root@webserver-1:/# exit</span><br><span class=\"line\">exit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl <span class=\"built_in\">exec</span> -it webserver-2  -- /bin/bash</span></span><br><span class=\"line\">root@webserver-2:/# echo &quot;welcome webserver-2&quot; &gt;  /usr/share/nginx/html/welcome.html</span><br><span class=\"line\">root@webserver-2:/# ls /usr/share/nginx/html/</span><br><span class=\"line\">welcome.html</span><br><span class=\"line\">root@webserver-2:/# exit</span><br><span class=\"line\">exit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> nfs服务器上的根文件夹中的文件如下</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ll</span> </span><br><span class=\"line\">total 12</span><br><span class=\"line\">-rw-r--r-- 1 root root  8 Apr 27 17:23 a.txt</span><br><span class=\"line\">drwxrwxrwx 2 root root 26 May 23 23:12 default-www-webserver-0-pvc-7bb8995f-47ca-4003-bf56-d8850b814873</span><br><span class=\"line\">drwxrwxrwx 2 root root 26 May 23 23:14 default-www-webserver-1-pvc-9caa7ee0-e998-4880-ae6e-469ed0e86838</span><br><span class=\"line\">drwxrwxrwx 2 root root 26 May 23 23:14 default-www-webserver-2-pvc-b365f76a-a36f-402a-b0b9-fdd0d33286cc</span><br><span class=\"line\">-rw-r--r-- 1 root root 16 May 23 20:17 index.html</span><br><span class=\"line\">-rw-r--r-- 1 root root 19 May 23 20:20 welcome.html</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls default-www-webserver-0-pvc-7bb8995f-47ca-4003-bf56-d8850b814873/</span></span><br><span class=\"line\">welcome.html</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls default-www-webserver-1-pvc-9caa7ee0-e998-4880-ae6e-469ed0e86838/</span></span><br><span class=\"line\">welcome.html</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls default-www-webserver-2-pvc-b365f76a-a36f-402a-b0b9-fdd0d33286cc/</span></span><br><span class=\"line\">welcome.html</span><br></pre></td></tr></table></figure>\n\n<p>​        通过pod的ip地址访问</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pods -o wide| grep webserver</span></span><br><span class=\"line\">webserver-0    1/1     Running   0   5m36s   10.244.44.234   k8s-node-02   &lt;none&gt;     &lt;none&gt;</span><br><span class=\"line\">webserver-1    1/1     Running   0   5m34s   10.244.44.238   k8s-node-02   &lt;none&gt;     &lt;none&gt;</span><br><span class=\"line\">webserver-2    1/1     Running   0   5m32s   10.244.44.241   k8s-node-02   &lt;none&gt;     &lt;none&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> curl 10.244.44.234/welcome.html</span></span><br><span class=\"line\">welcome webserver-0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> curl 10.244.44.238/welcome.html</span></span><br><span class=\"line\">welcome webserver-1</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> curl 10.244.44.241/welcome.html</span></span><br><span class=\"line\">welcome webserver-2</span><br></pre></td></tr></table></figure>\n\n<p>StatefulSet与Deployment区别：<strong>有身份的！</strong><br>身份三要素：</p>\n<ul>\n<li>域名</li>\n<li>主机名</li>\n<li>存储（PVC）</li>\n</ul>\n<p>在K8s里部署应用集群参考资料：<br>•<a href=\"https://kubernetes.io/zh/docs/tutorials/stateful-application/zookeeper/\">https://kubernetes.io/zh/docs/tutorials/stateful-application/zookeeper/</a><br>•<a href=\"https://kubernetes.io/zh/docs/tutorials/stateful-application/cassandra/\">https://kubernetes.io/zh/docs/tutorials/stateful-application/cassandra/</a><br>•<a href=\"https://github.com/lizhenliang/k8s-statefulset/\">https://github.com/lizhenliang/k8s-statefulset/</a></p>\n","comments":true,"permalink":"https://qingdalf.github.io/2021-05/kuberStatefulSet/","categories":[{"name":"kubernets","slug":"kubernets","permalink":"https://qingdalf.github.io/categories/kubernets/"}],"tags":[]},{"title":"管理应用程序配置","date":"2021-05-08T16:03:54.000Z","path":"2021-05/kuberMangerConfig/","content":"<h2 id=\"管理应用程序配置\"><a href=\"#管理应用程序配置\" class=\"headerlink\" title=\"管理应用程序配置\"></a>管理应用程序配置</h2><p>目前主流应用程序配置管理方案：</p>\n<ul>\n<li>使用配置管理系统，例如apollo、disconf</li>\n<li>采用k8s configmap存储配置</li>\n<li>不同环境配置存储在项目里，启动时候根据参数选择不同配置<span id=\"more\"></span>\n<h3 id=\"1-Configmap\"><a href=\"#1-Configmap\" class=\"headerlink\" title=\"1. Configmap\"></a>1. Configmap</h3></li>\n</ul>\n<p>​        创建ConfigMap后，数据实际会存储在K8s中Etcd，然后通过创建Pod时引用该数据。<br>​        应用场景：应用程序配置<br>​        Pod使用configmap数据有两种方式：</p>\n<ul>\n<li>变量注入：将键值数据(k: v)类型注入到容器系统变量，程序读取系统变量获取到值</li>\n<li>数据卷挂载：将数据挂载到容器某个目录，程序读取文件，如果是配置文件的话，挂载到程序的指定目录即可</li>\n</ul>\n<p>定义一个configmap和Pod</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cat configmap-demo.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">configmap-demo</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">abc:</span> <span class=\"string\">&quot;123&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">cde:</span> <span class=\"string\">&quot;456&quot;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"attr\">redis.properties:</span> <span class=\"string\">|</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">6379</span></span><br><span class=\"line\">    <span class=\"attr\">host:</span> <span class=\"number\">10.138</span><span class=\"number\">.3</span><span class=\"number\">.100</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># 定义一个Pod</span></span><br><span class=\"line\"><span class=\"comment\"># cat configmap-demo-pod.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">configmap-demo-pod</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">demo</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">env:</span>           <span class=\"comment\"># 方法1.变量注入</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ABCD</span>             <span class=\"comment\"># 容器中变量的名称</span></span><br><span class=\"line\">      <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">        <span class=\"attr\">configMapKeyRef:</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">configmap-demo</span>    <span class=\"comment\"># configmap的名称</span></span><br><span class=\"line\">          <span class=\"attr\">key:</span> <span class=\"string\">abc</span>                <span class=\"comment\"># configmap中的键abc，此处abc对应的值就是变量ABCD的值</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">CDEF</span>              <span class=\"comment\"># 容器中变量的名称</span></span><br><span class=\"line\">      <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">        <span class=\"attr\">configMapKeyRef:</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">configmap-demo</span></span><br><span class=\"line\">          <span class=\"attr\">key:</span> <span class=\"string\">cde</span></span><br><span class=\"line\">          </span><br><span class=\"line\">    <span class=\"attr\">volumeMounts:</span>         <span class=\"comment\"># 方法2.数据卷挂载</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">config</span></span><br><span class=\"line\">      <span class=\"attr\">mountPath:</span> <span class=\"string\">&quot;/config&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">readOnly:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      </span><br><span class=\"line\">  <span class=\"attr\">volumes:</span>              </span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">config</span></span><br><span class=\"line\">    <span class=\"attr\">configMap:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">configmap-demo</span></span><br><span class=\"line\">      <span class=\"attr\">items:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">&quot;redis.properties&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">path:</span> <span class=\"string\">&quot;redis.properties&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>环境变量定义的三种方法：</p>\n<ul>\n<li>自定义值</li>\n<li>pod属性引用值</li>\n<li>从configmap、secret引用值</li>\n</ul>\n<p>执行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 1.创建configmap</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl apply -f configmap-demo.yaml</span> </span><br><span class=\"line\">configmap/configmap-demo created</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get configmap</span></span><br><span class=\"line\">NAME               DATA   AGE</span><br><span class=\"line\">configmap-demo     3      10s</span><br><span class=\"line\">kube-root-ca.crt   1      16d</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 2.创建pod</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl apply -f configmap-demo-pod.yaml</span> </span><br><span class=\"line\">pod/configmap-demo-pod created</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pods| grep  configmap</span></span><br><span class=\"line\">configmap-demo-pod           1/1     Running   0          24s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 3.进入pod查看变量是否存在</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl  <span class=\"built_in\">exec</span> -it configmap-demo-pod -- bash</span></span><br><span class=\"line\">root@configmap-demo-pod:/# echo $ABCD</span><br><span class=\"line\">123</span><br><span class=\"line\">root@configmap-demo-pod:/# echo $CDEF</span><br><span class=\"line\">456</span><br><span class=\"line\">root@configmap-demo-pod:/# ls /config/</span><br><span class=\"line\">redis.properties             </span><br><span class=\"line\">root@configmap-demo-pod:/# cat /config/redis.properties </span><br><span class=\"line\">port: 6379</span><br><span class=\"line\">host: 10.138.3.100</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-secret\"><a href=\"#2-secret\" class=\"headerlink\" title=\"2.secret\"></a>2.secret</h3><p>​        与ConfigMap类似，区别在于<strong>Secret主要存储敏感数据，所有的数据要经过base64编码</strong>。<br>​        应用场景：凭据<br><code>kubectl create secret 支持三种数据类型</code></p>\n<ul>\n<li><code>docker-registry（kubernetes.io/dockerconfigjson）</code>：存储镜像仓库认证信息</li>\n<li><code>generic（Opaque）</code>：存储密码、密钥等</li>\n<li><code>tls（kubernetes.io/tls）</code>：存储TLS证书</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl create secret  --<span class=\"built_in\">help</span></span></span><br><span class=\"line\">Create a secret using specified subcommand.</span><br><span class=\"line\"></span><br><span class=\"line\">Available Commands:</span><br><span class=\"line\">  docker-registry Create a secret for use with a Docker registry  # 存储镜像仓库认证信息</span><br><span class=\"line\">  generic         Create a secret from a local file, directory or literal value  # 存储密码、密钥等</span><br><span class=\"line\">  tls             Create a TLS secret  # 存储TLS证书</span><br><span class=\"line\"></span><br><span class=\"line\">Usage:</span><br><span class=\"line\">  kubectl create secret [flags] [options]</span><br><span class=\"line\"></span><br><span class=\"line\">Use &quot;kubectl &lt;command&gt; --help&quot; for more information about a given command.</span><br><span class=\"line\">Use &quot;kubectl options&quot; for a list of global command-line options (applies to all commands).</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-1-获取编码\"><a href=\"#2-1-获取编码\" class=\"headerlink\" title=\"2.1 获取编码\"></a>2.1 获取编码</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">echo</span> -n <span class=\"string\">&#x27;adminman&#x27;</span> | base64</span></span><br><span class=\"line\">YWRtaW5tYW4=</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">echo</span> -n <span class=\"string\">&#x27;!QAZ@wsx#123&#x27;</span> | base64</span></span><br><span class=\"line\">IVFBWkB3c3gjMTIz</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-编写secret的yaml文件\"><a href=\"#2-2-编写secret的yaml文件\" class=\"headerlink\" title=\"2.2 编写secret的yaml文件\"></a>2.2 编写secret的yaml文件</h4><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># vim db-user-pass.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Secret</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">db-user-pass</span></span><br><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">Opaque</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">username:</span> <span class=\"string\">YWRtaW5tYW4=</span></span><br><span class=\"line\">  <span class=\"attr\">password:</span> <span class=\"string\">IVFBWkB3c3gjMTIz</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\"># 新建secret</span></span><br><span class=\"line\"><span class=\"comment\"># kubectl apply -f db-user-pass.yaml </span></span><br><span class=\"line\"><span class=\"string\">secret/db-user-pass</span> <span class=\"string\">created</span></span><br><span class=\"line\"><span class=\"comment\"># kubectl get secret</span></span><br><span class=\"line\"><span class=\"string\">NAME</span>                  <span class=\"string\">TYPE</span>                                  <span class=\"string\">DATA</span>   <span class=\"string\">AGE</span></span><br><span class=\"line\"><span class=\"string\">blog-ctnrs-com</span>        <span class=\"string\">kubernetes.io/tls</span>                     <span class=\"number\">2</span>      <span class=\"string\">4d15h</span></span><br><span class=\"line\"><span class=\"string\">db-user-pass</span>          <span class=\"string\">Opaque</span>                                <span class=\"number\">2</span>      <span class=\"string\">11s</span>    <span class=\"comment\"># 刚刚新建的secret</span></span><br><span class=\"line\"><span class=\"string\">default-token-bq4pj</span>   <span class=\"string\">kubernetes.io/service-account-token</span>   <span class=\"number\">3</span>      <span class=\"string\">16d</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-新建Pod的yaml文件\"><a href=\"#2-3-新建Pod的yaml文件\" class=\"headerlink\" title=\"2.3 新建Pod的yaml文件\"></a>2.3 新建Pod的yaml文件</h4><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># vim secret-pod.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">secret-demo-pod</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">demo</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">env:</span>        <span class=\"comment\"># 方法1.变量注入</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">USER</span></span><br><span class=\"line\">      <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">        <span class=\"attr\">secretKeyRef:</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">db-user-pass</span></span><br><span class=\"line\">          <span class=\"attr\">key:</span> <span class=\"string\">username</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">PASS</span>              <span class=\"comment\"># 容器中的变量名称</span></span><br><span class=\"line\">      <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">        <span class=\"attr\">secretKeyRef:</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">db-user-pass</span>     <span class=\"comment\"># configmap的名称</span></span><br><span class=\"line\">          <span class=\"attr\">key:</span> <span class=\"string\">password</span>          <span class=\"comment\"># 容器中的变量值对应的configmap的键</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">volumeMounts:</span>    <span class=\"comment\"># 方法2.数据卷挂载</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">config</span></span><br><span class=\"line\">      <span class=\"attr\">mountPath:</span> <span class=\"string\">&quot;/config&quot;</span>   <span class=\"comment\"># 挂载目录</span></span><br><span class=\"line\">      <span class=\"attr\">readOnly:</span> <span class=\"literal\">true</span>     <span class=\"comment\"># 只读，不允许修改</span></span><br><span class=\"line\">      </span><br><span class=\"line\">  <span class=\"attr\">volumes:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">config</span></span><br><span class=\"line\">    <span class=\"attr\">secret:</span></span><br><span class=\"line\">      <span class=\"attr\">secretName:</span> <span class=\"string\">db-user-pass</span></span><br><span class=\"line\">      <span class=\"attr\">items:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">username</span></span><br><span class=\"line\">        <span class=\"attr\">path:</span> <span class=\"string\">my-username</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建容器并进入容器</span></span><br><span class=\"line\"><span class=\"comment\"># kubectl apply -f secret-pod.yaml </span></span><br><span class=\"line\"><span class=\"string\">pod/secret-demo-pod</span> <span class=\"string\">created</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># kubectl get pods | grep secret</span></span><br><span class=\"line\"><span class=\"string\">secret-demo-pod</span>              <span class=\"number\">1</span><span class=\"string\">/1</span>     <span class=\"string\">Running</span>   <span class=\"number\">0</span>          <span class=\"string\">44s</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># kubectl exec -it secret-demo-pod -- bash</span></span><br><span class=\"line\"><span class=\"string\">root@secret-demo-pod:/#</span> <span class=\"string\">echo</span> <span class=\"string\">$USER</span></span><br><span class=\"line\"><span class=\"string\">adminman</span></span><br><span class=\"line\"><span class=\"string\">root@secret-demo-pod:/#</span> <span class=\"string\">echo</span> <span class=\"string\">$PASS</span></span><br><span class=\"line\"><span class=\"type\">!QAZ@wsx#123</span></span><br><span class=\"line\"><span class=\"string\">root@secret-demo-pod:/#</span> <span class=\"string\">ls</span> <span class=\"string\">/config/</span> </span><br><span class=\"line\"><span class=\"string\">..2021_04_25_07_06_22.652475628/</span> <span class=\"string\">..data/</span>                          <span class=\"string\">my-username</span>                      </span><br><span class=\"line\"><span class=\"string\">root@secret-demo-pod:/#</span> <span class=\"string\">ls</span> <span class=\"string\">/config/</span></span><br><span class=\"line\"><span class=\"string\">my-username</span></span><br><span class=\"line\"><span class=\"string\">root@secret-demo-pod:/#</span> <span class=\"string\">cat</span> <span class=\"string\">/config/my-username</span> </span><br><span class=\"line\"><span class=\"string\">adminman</span></span><br><span class=\"line\"><span class=\"string\">root@secret-demo-pod:/#</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;1&quot;</span> <span class=\"string\">&gt;&gt;</span> <span class=\"string\">/config/my-username</span> </span><br><span class=\"line\"><span class=\"attr\">bash: /config/my-username:</span> <span class=\"string\">Read-only</span> <span class=\"string\">file</span> <span class=\"string\">system</span>   <span class=\"comment\"># 写入文件失败</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-应用程序如何动态更新配置\"><a href=\"#3-应用程序如何动态更新配置\" class=\"headerlink\" title=\"3.应用程序如何动态更新配置\"></a>3.应用程序如何动态更新配置</h3><p>应用程序动态更新配置方案：</p>\n<ul>\n<li>当ConfigMap发生变更时，应用程序自动感知动态加载（需要程序自身支持）</li>\n<li>触发滚动更新，即重启服务</li>\n<li>给程序预留一个接口，用于通知动态加载配置，例如<code>nginx -s reload</code></li>\n<li>采用配置管理系统，如appollo、disconf</li>\n</ul>\n","comments":true,"permalink":"https://qingdalf.github.io/2021-05/kuberMangerConfig/","categories":[{"name":"kubernets","slug":"kubernets","permalink":"https://qingdalf.github.io/categories/kubernets/"}],"tags":[]},{"title":"kuberIngress","date":"2021-05-06T15:36:08.000Z","path":"2021-05/kuberIngress/","content":"<h1 id=\"Ingress\"><a href=\"#Ingress\" class=\"headerlink\" title=\"Ingress\"></a>Ingress</h1><p>负载均衡器分类：</p>\n<ul>\n<li>硬件负载均衡器：F5</li>\n<li>软件负载均衡器：<ul>\n<li>四层：工作中OSI七层模型的第四层，基于IP和端口转发，常见技术：LVS</li>\n<li>七层：工作中OSI七层模型的第四层，基于应用层协议转发，例如基于http，url，cookie，域名做控制，常见技术：nginx<span id=\"more\"></span>\n<h2 id=\"1-ingress最佳方式对外暴露应用\"><a href=\"#1-ingress最佳方式对外暴露应用\" class=\"headerlink\" title=\"1. ingress最佳方式对外暴露应用\"></a>1. ingress最佳方式对外暴露应用</h2></li>\n</ul>\n</li>\n</ul>\n<p>​        NodePort存在的不足：</p>\n<ul>\n<li>一个端口只能一个服务使用，端口需要提前规划</li>\n<li>只支持4层的负载均衡(采用iptables和ipvs，基于ip+port转发，工作在osi七层模型的第四层–传输层)</li>\n</ul>\n<h3 id=\"1-1-ingress和ingress-controller\"><a href=\"#1-1-ingress和ingress-controller\" class=\"headerlink\" title=\"1.1 ingress和ingress controller\"></a>1.1 ingress和ingress controller</h3><p>​        ingress是k8s中一个抽象的资源，给管理员<strong>提供一个暴露应用的入口定义方法</strong>，ingress公开了从集群外部到集群内部服务的http和https路由的规则集合</p>\n<p>​        ingress controller是根据ingress<strong>生成具体的路由规则</strong>，并对Pod负载均衡。ingress controller实现方法有很多，我们这里采用官方维护的nginx控制器。<br>项目地址：<a href=\"https://github.com/kubernetes/ingress-nginx\">https://github.com/kubernetes/ingress-nginx</a><br>YAML文件：<a href=\"https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.30.0/deploy/static/mandatory.yaml\">https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.30.0/deploy/static/mandatory.yaml</a><br>注意事项：</p>\n<ul>\n<li>镜像地址修改成国内的：lizhenliang/nginx-ingress-controller:0.30.0</li>\n<li>将Ingress Controller暴露，一般使用宿主机网络（hostNetwork: true）或者使用NodePort</li>\n</ul>\n<p>下面是一个将所有流量都发送到同一 Service 的简单 Ingress 示例：</p>\n<p><img src=\"../kuberPre/image-20210420211319129.png\" alt=\"image-20210420211319129\"></p>\n<p>​        可以将 Ingress 配置为服务提供外部可访问的 URL、负载均衡流量、终止 SSL/TLS，以及提供基于名称的虚拟主机等能力。 <a href=\"https://kubernetes.io/zh/docs/concepts/services-networking/ingress-controllers\">Ingress 控制器</a> 通常负责通过负载均衡器来实现 Ingress，尽管它也可以配置边缘路由器或其他前端来帮助处理流量。</p>\n<p>Ingress 不会公开任意端口或协议。 将 HTTP 和 HTTPS 以外的服务公开到 Internet 时，通常使用 <a href=\"https://kubernetes.io/zh/docs/concepts/services-networking/service/#nodeport\">Service.Type=NodePort</a> 或 <a href=\"https://kubernetes.io/zh/docs/concepts/services-networking/service/#loadbalancer\">Service.Type=LoadBalancer</a> 类型的服务。</p>\n<p>​        你必须具有 <a href=\"https://kubernetes.io/zh/docs/concepts/services-networking/ingress-controllers\">Ingress 控制器</a> 才能满足 Ingress 的要求。 仅创建 Ingress 资源本身没有任何效果。</p>\n<p>​        你可能需要部署 Ingress 控制器，例如 <a href=\"https://kubernetes.github.io/ingress-nginx/deploy/\">ingress-nginx</a>。 你可以从许多 <a href=\"https://kubernetes.io/zh/docs/concepts/services-networking/ingress-controllers\">Ingress 控制器</a> 中进行选择。</p>\n<p>​        理想情况下，所有 Ingress 控制器都应符合参考规范。但实际上，不同的 Ingress 控制器操作略有不同。</p>\n<blockquote>\n<p><strong>说明：</strong> 确保你查看了 Ingress 控制器的文档，以了解选择它的注意事项。</p>\n</blockquote>\n<p>常见的ingress controller</p>\n<p>其他控制器：<a href=\"https://kubernetes.io/docs/concepts/services-networking/ingress-controllers/\">https://kubernetes.io/docs/concepts/services-networking/ingress-controllers/</a></p>\n<p><img src=\"../kuberPre/image-20210420190208755.png\" alt=\"image-20210420190208755\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls ingress-controller.yaml</span> </span><br><span class=\"line\">ingress-controller.yaml</span><br><span class=\"line\">···</span><br><span class=\"line\">172 apiVersion: rbac.authorization.k8s.io/v1beta1 # 可以删除该文件中的beta1，消除apply执行中的警告信息</span><br></pre></td></tr></table></figure>\n\n<p>主要修改以下两个地方：</p>\n<p><img src=\"../kuberPre/image-20210420190950834.png\" alt=\"image-20210420190950834\"></p>\n<p>创建ingress</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl apply -f ingress-controller.yaml</span> </span><br><span class=\"line\">namespace/ingress-nginx created</span><br><span class=\"line\">configmap/nginx-configuration created</span><br><span class=\"line\">configmap/tcp-services created</span><br><span class=\"line\">configmap/udp-services created</span><br><span class=\"line\">serviceaccount/nginx-ingress-serviceaccount created  # 此处的警告信息，可以通过删除上面的bate1消除</span><br><span class=\"line\">Warning: rbac.authorization.k8s.io/v1beta1 ClusterRole is deprecated in v1.17+, unavailable in v1.22+; use rbac.authorization.k8s.io/v1 ClusterRole</span><br><span class=\"line\">clusterrole.rbac.authorization.k8s.io/nginx-ingress-clusterrole created</span><br><span class=\"line\">Warning: rbac.authorization.k8s.io/v1beta1 Role is deprecated in v1.17+, unavailable in v1.22+; use rbac.authorization.k8s.io/v1 Role</span><br><span class=\"line\">role.rbac.authorization.k8s.io/nginx-ingress-role created</span><br><span class=\"line\">Warning: rbac.authorization.k8s.io/v1beta1 RoleBinding is deprecated in v1.17+, unavailable in v1.22+; use rbac.authorization.k8s.io/v1 RoleBinding</span><br><span class=\"line\">rolebinding.rbac.authorization.k8s.io/nginx-ingress-role-nisa-binding created</span><br><span class=\"line\">Warning: rbac.authorization.k8s.io/v1beta1 ClusterRoleBinding is deprecated in v1.17+, unavailable in v1.22+; use rbac.authorization.k8s.io/v1 ClusterRoleBinding</span><br><span class=\"line\">clusterrolebinding.rbac.authorization.k8s.io/nginx-ingress-clusterrole-nisa-binding created</span><br><span class=\"line\">daemonset.apps/nginx-ingress-controller created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pods -n ingress-nginx -o wide</span></span><br><span class=\"line\">NAME    READY   STATUS       RESTARTS   AGE    IP     NODE     NOMINATED NODE   READINESS GATES</span><br><span class=\"line\">nginx-ingress-controller-fqfcf  1/1  Running   0  107s 10.138.3.63  k8s-node-02 &lt;none&gt;  &lt;none&gt;</span><br><span class=\"line\">nginx-ingress-controller-kxlw6  1/1  Running   0  107s 10.138.3.62  k8s-node-01 &lt;none&gt;  &lt;none&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>新建ingress yaml文件</p>\n<p>官方文档：<a href=\"https://kubernetes.io/zh/docs/concepts/services-networking/ingress/\">https://kubernetes.io/zh/docs/concepts/services-networking/ingress/</a></p>\n<p>yaml文件可以直接从官网复制，然后修改：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># vim nginx-ingress.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">networking.k8s.io/v1</span>  <span class=\"comment\"># 1.9版本之前的apiVersion有所不同，可通过kubectl api-versions查看</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Ingress</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx-ingress</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">rules:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">host:</span> <span class=\"string\">nginx.ctnrs.com</span></span><br><span class=\"line\">    <span class=\"attr\">http:</span></span><br><span class=\"line\">      <span class=\"attr\">paths:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">path:</span> <span class=\"string\">/</span>          <span class=\"comment\"># 相当于负载均衡nginx配置文件中的location</span></span><br><span class=\"line\">        <span class=\"attr\">pathType:</span> <span class=\"string\">Prefix</span></span><br><span class=\"line\">        <span class=\"attr\">backend:</span></span><br><span class=\"line\">          <span class=\"attr\">service:</span>      <span class=\"comment\"># 相当于负载均衡nginx配置文件中的proxy_pass</span></span><br><span class=\"line\">            <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">            <span class=\"attr\">port:</span></span><br><span class=\"line\">              <span class=\"attr\">number:</span> <span class=\"number\">80</span></span><br><span class=\"line\">              </span><br><span class=\"line\"><span class=\"comment\"># kubectl apply -f nginx-ingress.yaml </span></span><br><span class=\"line\"><span class=\"string\">ingress.networking.k8s.io/nginx-ingress</span> <span class=\"string\">created</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># kubectl get ingress -o wide</span></span><br><span class=\"line\"><span class=\"string\">NAME</span>            <span class=\"string\">CLASS</span>    <span class=\"string\">HOSTS</span>             <span class=\"string\">ADDRESS</span>   <span class=\"string\">PORTS</span>   <span class=\"string\">AGE</span></span><br><span class=\"line\"><span class=\"string\">nginx-ingress</span>   <span class=\"string\">&lt;none&gt;</span>   <span class=\"string\">nginx.ctnrs.com</span>             <span class=\"number\">80</span>      <span class=\"string\">23s</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># kubectl get pods -n ingress-nginx -o wide</span></span><br><span class=\"line\"><span class=\"string\">NAME</span>    <span class=\"string\">READY</span>   <span class=\"string\">STATUS</span>       <span class=\"string\">RESTARTS</span>   <span class=\"string\">AGE</span>    <span class=\"string\">IP</span>     <span class=\"string\">NODE</span>     <span class=\"string\">NOMINATED</span> <span class=\"string\">NODE</span>   <span class=\"string\">READINESS</span> <span class=\"string\">GATES</span></span><br><span class=\"line\"><span class=\"string\">nginx-ingress-controller-fqfcf</span>  <span class=\"number\">1</span><span class=\"string\">/1</span>  <span class=\"string\">Running</span>   <span class=\"number\">0</span>  <span class=\"string\">25m</span> <span class=\"number\">10.138</span><span class=\"number\">.3</span><span class=\"number\">.63</span>  <span class=\"string\">k8s-node-02</span> <span class=\"string\">&lt;none&gt;</span>  <span class=\"string\">&lt;none&gt;</span></span><br><span class=\"line\"><span class=\"string\">nginx-ingress-controller-kxlw6</span>  <span class=\"number\">1</span><span class=\"string\">/1</span>  <span class=\"string\">Running</span>   <span class=\"number\">0</span>  <span class=\"string\">25m</span> <span class=\"number\">10.138</span><span class=\"number\">.3</span><span class=\"number\">.62</span>  <span class=\"string\">k8s-node-01</span> <span class=\"string\">&lt;none&gt;</span>  <span class=\"string\">&lt;none&gt;</span></span><br><span class=\"line\"><span class=\"comment\"># ingress-controller现在在10.138.3.62/63上，因此我们的请求必须达到这两个节点才能进行转发到后端pod</span></span><br></pre></td></tr></table></figure>\n\n<p>如何访问？</p>\n<p>​        本地电脑绑定hosts记录并对应ingress里面配置的域名(个人测试时)，生产环境直接配置dns即可</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> windows电脑hosts文件路径，路径地址为--C:\\Windows\\System32\\drivers\\etc\\hosts</span></span><br><span class=\"line\">10.138.3.62 nginx.ctnrs.com   # 此处的IP地址是有ingress-controller的节点的IP都可以</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 测试，直接ping以下域名</span></span><br><span class=\"line\">[c:\\~]$ ping nginx.ctnrs.com</span><br><span class=\"line\"></span><br><span class=\"line\">正在 Ping nginx.ctnrs.com [10.138.3.62] 具有 32 字节的数据:</span><br><span class=\"line\">来自 10.138.3.62 的回复: 字节=32 时间&lt;1ms TTL=64</span><br><span class=\"line\">来自 10.138.3.62 的回复: 字节=32 时间&lt;1ms TTL=64</span><br><span class=\"line\"></span><br><span class=\"line\">10.138.3.62 的 Ping 统计信息:</span><br><span class=\"line\">    数据包: 已发送 = 2，已接收 = 2，丢失 = 0 (0% 丢失)，</span><br><span class=\"line\">往返行程的估计时间(以毫秒为单位):</span><br><span class=\"line\">    最短 = 0ms，最长 = 0ms，平均 = 0ms</span><br><span class=\"line\">^C</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在浏览器中访问：</p>\n<p><img src=\"../kuberPre/image-20210420213729188.png\" alt=\"image-20210420213729188\"></p>\n<p>查看nginx容器的访问日志</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pods</span> </span><br><span class=\"line\">NAME                     READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">nginx-6799fc88d8-825ps   1/1     Running   1          10d</span><br><span class=\"line\">nginx-6799fc88d8-j8srg   1/1     Running   0          5h16m</span><br><span class=\"line\">nginx-6799fc88d8-qqjsk   1/1     Running   0          5h16m</span><br><span class=\"line\">sh                       1/1     Running   0          3h1m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl logs nginx-6799fc88d8-j8srg</span>   </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 此处需要查看3个nginx容器的日志，因为我们不清楚浏览器中访问的请求被转发给了哪一个pod</span></span><br><span class=\"line\">···</span><br><span class=\"line\">10.244.154.192 - - [20/Apr/2021:13:37:11 +0000] &quot;GET / HTTP/1.1&quot; 200 612 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.128 Safari/537.36&quot; &quot;10.138.3.1&quot;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-2-ingress常用规则\"><a href=\"#1-2-ingress常用规则\" class=\"headerlink\" title=\"1.2 ingress常用规则\"></a>1.2 ingress常用规则</h3><h4 id=\"1-2-1-基于url路由多个服务\"><a href=\"#1-2-1-基于url路由多个服务\" class=\"headerlink\" title=\"1.2.1 基于url路由多个服务\"></a>1.2.1 基于url路由多个服务</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 启动一个java-dome容器并通过svc暴露端口</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">  kubectl create deployment java-demo --image=lizhenliang/java-demo</span></span><br><span class=\"line\">deployment.apps/java-demo created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pod | grep java</span></span><br><span class=\"line\">java-demo-56d54df448-bccxx   1/1     Running   0          2m10s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl  expose deployment java-demo --port=80 --target-port=8080</span> </span><br><span class=\"line\">service/java-demo exposed</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get svc | grep java</span></span><br><span class=\"line\">java-demo    ClusterIP   10.111.238.127   &lt;none&gt;        80/TCP         17s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 测试：返回状态码200，访问成功</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> curl -I 10.111.238.127</span></span><br><span class=\"line\">HTTP/1.1 200 </span><br><span class=\"line\">Content-Type: text/html;charset=utf-8</span><br><span class=\"line\">Content-Language: en-US</span><br><span class=\"line\">Content-Length: 2538</span><br><span class=\"line\">Date: Tue, 20 Apr 2021 14:00:34 GMT</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 将java-dome通过ingress暴露</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> vim java-nginx-ingress.yaml</span></span><br><span class=\"line\">apiVersion: networking.k8s.io/v1  # 1.9版本之前的apiVersion有所不同，可通过kubectl api-versions查看</span><br><span class=\"line\">kind: Ingress</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: java-nginx-ingress</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  rules:</span><br><span class=\"line\">  - host: web.ctnrs.com</span><br><span class=\"line\">    http:</span><br><span class=\"line\">      paths:</span><br><span class=\"line\">      - path: /foo          # 通过访问web.ctnrs.com/foo，转发到nginx容器上</span><br><span class=\"line\">        pathType: Prefix</span><br><span class=\"line\">        backend:</span><br><span class=\"line\">          service:     </span><br><span class=\"line\">            name: nginx</span><br><span class=\"line\">            port:</span><br><span class=\"line\">              number: 80</span><br><span class=\"line\">      - path: /bar          # 通过访问web.ctnrs.com/bar，转发到java-demo容器上</span><br><span class=\"line\">        pathType: Prefix</span><br><span class=\"line\">        backend:</span><br><span class=\"line\">          service:      </span><br><span class=\"line\">            name: java-demo</span><br><span class=\"line\">            port:</span><br><span class=\"line\">              number: 80</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl apply -f java-nginx-ingress.yaml</span> </span><br><span class=\"line\">ingress.networking.k8s.io/java-nginx-ingress created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get ingress</span> </span><br><span class=\"line\">NAME                 CLASS    HOSTS             ADDRESS   PORTS   AGE</span><br><span class=\"line\">java-nginx-ingress   &lt;none&gt;   web.ctnrs.com               80      16s</span><br><span class=\"line\">nginx-ingress        &lt;none&gt;   nginx.ctnrs.com             80      39m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 将域名解析写入windows主机配置文件中</span></span><br><span class=\"line\">10.138.3.62 nginx.ctnrs.com web.ctnrs.com</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 由于我们创建的nginx容器和java-dome容器都没有对应的foo和bar目录，因此我们首先进入nginx和java-dome容器创建这个两个目录</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pods | grep nginx</span></span><br><span class=\"line\">nginx-6799fc88d8-825ps       1/1     Running   1          10d</span><br><span class=\"line\">nginx-6799fc88d8-j8srg       1/1     Running   0          5h49m</span><br><span class=\"line\">nginx-6799fc88d8-qqjsk       1/1     Running   0          5h49m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 进入第一个nginx容器，新建foo目录</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl <span class=\"built_in\">exec</span> -it nginx-6799fc88d8-825ps -- bash</span>   </span><br><span class=\"line\">root@nginx-6799fc88d8-825ps:/# cd /usr/share/nginx/html/</span><br><span class=\"line\">root@nginx-6799fc88d8-825ps:/usr/share/nginx/html# mkdir foo</span><br><span class=\"line\">root@nginx-6799fc88d8-825ps:/usr/share/nginx/html# echo &quot;hello, this is nginx pod for foo1&quot; &gt; foo/index.html </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 进入第二个nginx容器，新建foo目录</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl <span class=\"built_in\">exec</span> -it nginx-6799fc88d8-j8srg -- bash</span> </span><br><span class=\"line\">root@nginx-6799fc88d8-j8srg:/# cd /usr/share/nginx/html/</span><br><span class=\"line\">root@nginx-6799fc88d8-j8srg:/usr/share/nginx/html# mkdir foo</span><br><span class=\"line\">root@nginx-6799fc88d8-j8srg:/usr/share/nginx/html# echo &quot;hello, this is nginx pod for foo2&quot; &gt; foo/index.html</span><br><span class=\"line\">root@nginx-6799fc88d8-j8srg:/usr/share/nginx/html# exit</span><br><span class=\"line\">exit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 进入第三个nginx容器，新建foo目录</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl <span class=\"built_in\">exec</span> -it nginx-6799fc88d8-qqjsk -- bash</span> </span><br><span class=\"line\">root@nginx-6799fc88d8-qqjsk:/# cd /usr/share/nginx/html/</span><br><span class=\"line\">root@nginx-6799fc88d8-qqjsk:/usr/share/nginx/html# mkdir foo</span><br><span class=\"line\">root@nginx-6799fc88d8-qqjsk:/usr/share/nginx/html# echo &quot;hello, this is nginx pod for foo3&quot; &gt; foo/index.html</span><br><span class=\"line\">root@nginx-6799fc88d8-qqjsk:/usr/share/nginx/html# exit</span><br><span class=\"line\">exit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> java-dome方法雷同</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pod | grep java</span></span><br><span class=\"line\">java-demo-56d54df448-bccxx   1/1     Running   0          23m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl <span class=\"built_in\">exec</span> -it java-demo-56d54df448-bccxx  -- bash</span></span><br><span class=\"line\">[root@java-demo-56d54df448-bccxx tomcat]# mkdir webapps/bar</span><br><span class=\"line\">[root@java-demo-56d54df448-bccxx tomcat]# echo &quot;this is java-demo pod &quot; &gt;  webapps/bar/index.html</span><br><span class=\"line\">[root@java-demo-56d54df448-bccxx tomcat]# ls webapps/</span><br><span class=\"line\">ROOT  ROOT.war  bar</span><br></pre></td></tr></table></figure>\n\n<p>访问结果如下：</p>\n<img src=\"../kuberPre/image-20210420222853047.png\" alt=\"image-20210420222853047\" style=\"zoom:67%;\" />\n\n<h4 id=\"1-2-2-基于名称的虚拟机\"><a href=\"#1-2-2-基于名称的虚拟机\" class=\"headerlink\" title=\"1.2.2 基于名称的虚拟机\"></a>1.2.2 基于名称的虚拟机</h4><img src=\"../kuberPre/image-20210420214721063.png\" alt=\"image-20210420214721063\" style=\"zoom: 67%;\" />\n\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在一个ingress文件中新建两个ingress，即在一个ingress文件中声明两个域名</span></span><br><span class=\"line\"><span class=\"comment\"># vim web1-ingress.yaml </span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">networking.k8s.io/v1</span>  <span class=\"comment\"># 1.9版本之前的apiVersion有所不同，可通过kubectl api-versions查看</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Ingress</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">web1</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">rules:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">host:</span> <span class=\"string\">web1-1.ctnrs.com</span>  <span class=\"comment\"># 通过web1-1.ctnrs.com可以访问nginx容器</span></span><br><span class=\"line\">    <span class=\"attr\">http:</span></span><br><span class=\"line\">      <span class=\"attr\">paths:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">pathType:</span> <span class=\"string\">Prefix</span></span><br><span class=\"line\">        <span class=\"attr\">path:</span> <span class=\"string\">&#x27;/&#x27;</span></span><br><span class=\"line\">        <span class=\"attr\">backend:</span></span><br><span class=\"line\">          <span class=\"attr\">service:</span>     </span><br><span class=\"line\">            <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">            <span class=\"attr\">port:</span></span><br><span class=\"line\">              <span class=\"attr\">number:</span> <span class=\"number\">80</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">host:</span> <span class=\"string\">web1-2.ctnrs.com</span>   <span class=\"comment\"># 通过web1-2.ctnrs.com可以访问java-demo容器</span></span><br><span class=\"line\">    <span class=\"attr\">http:</span></span><br><span class=\"line\">      <span class=\"attr\">paths:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">pathType:</span> <span class=\"string\">Prefix</span></span><br><span class=\"line\">        <span class=\"attr\">path:</span> <span class=\"string\">&quot;/&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">backend:</span></span><br><span class=\"line\">          <span class=\"attr\">service:</span>      </span><br><span class=\"line\">            <span class=\"attr\">name:</span> <span class=\"string\">java-demo</span></span><br><span class=\"line\">            <span class=\"attr\">port:</span></span><br><span class=\"line\">              <span class=\"attr\">number:</span> <span class=\"number\">80</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># kubectl apply -f web1-ingress.yaml </span></span><br><span class=\"line\"><span class=\"string\">ingress.networking.k8s.io/web1</span> <span class=\"string\">created</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># kubectl get ingress</span></span><br><span class=\"line\"><span class=\"string\">NAME</span>                 <span class=\"string\">CLASS</span>    <span class=\"string\">HOSTS</span>                               <span class=\"string\">ADDRESS</span>   <span class=\"string\">PORTS</span>   <span class=\"string\">AGE</span></span><br><span class=\"line\"><span class=\"string\">java-nginx-ingress</span>   <span class=\"string\">&lt;none&gt;</span>   <span class=\"string\">web.ctnrs.com</span>                                 <span class=\"number\">80</span>      <span class=\"string\">34m</span></span><br><span class=\"line\"><span class=\"string\">nginx-ingress</span>        <span class=\"string\">&lt;none&gt;</span>   <span class=\"string\">nginx.ctnrs.com</span>                               <span class=\"number\">80</span>      <span class=\"string\">74m</span></span><br><span class=\"line\"><span class=\"string\">web1</span>                 <span class=\"string\">&lt;none&gt;</span>   <span class=\"string\">web1-1.ctnrs.com,web1-2.ctnrs.com</span>             <span class=\"number\">80</span>      <span class=\"string\">71s</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改windows笔记本的hosts文件，将web1-1.ctnrs.com,web1-2.ctnrs.com写入hosts文件</span></span><br></pre></td></tr></table></figure>\n\n<p>访问结果如下：</p>\n<img src=\"../kuberPre/image-20210420224546757.png\" alt=\"image-20210420224546757\" style=\"zoom:67%;\" />\n\n<h4 id=\"1-2-3-配置https访问\"><a href=\"#1-2-3-配置https访问\" class=\"headerlink\" title=\"1.2.3 配置https访问\"></a>1.2.3 配置https访问</h4><p>配置HTTPS步骤：</p>\n<ul>\n<li>准备域名证书文件（来自：openssl/cfssl工具自签或者权威机构颁发）</li>\n<li>将证书文件保存到Secret<br>kubectl create secret tls blog-ctnrs-com –cert=blog.ctnrs.com.pem –key=blog.ctnrs.com-key.pem</li>\n<li>Ingress规则配置tls</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 下载cfssl命令</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> wget https://pkg.cfssl.org/R1.2/cfssl_linux-amd64</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> wget https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> wget https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> chmod +x cfssl*</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> mv cfssl_linux-amd64 /usr/bin/cfssl</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> mv cfssljson_linux-amd64 /usr/bin/cfssljson</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> mv cfssl-certinfo_linux-amd64 /usr/bin/cfssl-certinfo</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 生产证书</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> vim ./certs/certs.sh   <span class=\"comment\"># 使用时删除代码中的注释信息</span></span></span><br><span class=\"line\">cat &gt; ca-config.json &lt;&lt;EOF</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;signing&quot;: &#123;</span><br><span class=\"line\">    &quot;default&quot;: &#123;</span><br><span class=\"line\">      &quot;expiry&quot;: &quot;87600h&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;profiles&quot;: &#123;</span><br><span class=\"line\">      &quot;kubernetes&quot;: &#123;</span><br><span class=\"line\">         &quot;expiry&quot;: &quot;87600h&quot;,</span><br><span class=\"line\">         &quot;usages&quot;: [</span><br><span class=\"line\">            &quot;signing&quot;,</span><br><span class=\"line\">            &quot;key encipherment&quot;,</span><br><span class=\"line\">            &quot;server auth&quot;,</span><br><span class=\"line\">            &quot;client auth&quot;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">cat &gt; ca-csr.json &lt;&lt;EOF</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;CN&quot;: &quot;kubernetes&quot;, </span><br><span class=\"line\">    &quot;key&quot;: &#123;</span><br><span class=\"line\">        &quot;algo&quot;: &quot;rsa&quot;,</span><br><span class=\"line\">        &quot;size&quot;: 2048</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;names&quot;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;C&quot;: &quot;CN&quot;,</span><br><span class=\"line\">            &quot;L&quot;: &quot;Beijing&quot;,</span><br><span class=\"line\">            &quot;ST&quot;: &quot;Beijing&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">cfssl gencert -initca ca-csr.json | cfssljson -bare ca -</span><br><span class=\"line\"></span><br><span class=\"line\">cat &gt; blog.ctnrs.com-csr.json &lt;&lt;EOF   # 名称，使用”域名-csr.json“</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;CN&quot;: &quot;blog.ctnrs.com&quot;,   # 域名，跟ingress中的host保持一致</span><br><span class=\"line\">  &quot;hosts&quot;: [],</span><br><span class=\"line\">  &quot;key&quot;: &#123;</span><br><span class=\"line\">    &quot;algo&quot;: &quot;rsa&quot;,</span><br><span class=\"line\">    &quot;size&quot;: 2048</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;names&quot;: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;C&quot;: &quot;CN&quot;,</span><br><span class=\"line\">      &quot;L&quot;: &quot;BeiJing&quot;,</span><br><span class=\"line\">      &quot;ST&quot;: &quot;BeiJing&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes blog.ctnrs.com-csr.json | cfssljson -bare blog.ctnrs.com   # 修改名称信息</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 执行脚本，生成证书</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> bash certs.sh</span> </span><br><span class=\"line\">2021/04/20 23:14:31 [INFO] generating a new CA key and certificate from CSR</span><br><span class=\"line\">2021/04/20 23:14:31 [INFO] generate received request</span><br><span class=\"line\">2021/04/20 23:14:31 [INFO] received CSR</span><br><span class=\"line\">2021/04/20 23:14:31 [INFO] generating key: rsa-2048</span><br><span class=\"line\">2021/04/20 23:14:31 [INFO] encoded CSR</span><br><span class=\"line\">2021/04/20 23:14:31 [INFO] signed certificate with serial number 248131424505315814599984431761282667907862483060</span><br><span class=\"line\">2021/04/20 23:14:31 [INFO] generate received request</span><br><span class=\"line\">2021/04/20 23:14:31 [INFO] received CSR</span><br><span class=\"line\">2021/04/20 23:14:31 [INFO] generating key: rsa-2048</span><br><span class=\"line\">2021/04/20 23:14:31 [INFO] encoded CSR</span><br><span class=\"line\">2021/04/20 23:14:31 [INFO] signed certificate with serial number 454008954440416740270526547382053661960988488636</span><br><span class=\"line\">2021/04/20 23:14:31 [WARNING] This certificate lacks a &quot;hosts&quot; field. This makes it unsuitable for</span><br><span class=\"line\">websites. For more information see the Baseline Requirements for the Issuance and Management</span><br><span class=\"line\">of Publicly-Trusted Certificates, v.1.1.6, from the CA/Browser Forum (https://cabforum.org);</span><br><span class=\"line\">specifically, section 10.2.3 (&quot;Information Requirements&quot;).</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 将证书文件保存到Secret</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl create secret tls blog-ctnrs-com --cert=blog.ctnrs.com.pem --key=blog.ctnrs.com-key.pem</span></span><br><span class=\"line\">secret/blog-ctnrs-com created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get secret    <span class=\"comment\"># 查看secret</span></span></span><br><span class=\"line\">NAME                  TYPE                                  DATA   AGE</span><br><span class=\"line\">blog-ctnrs-com        kubernetes.io/tls                     2      28s  # 刚刚生成的secret</span><br><span class=\"line\">default-token-bq4pj   kubernetes.io/service-account-token   3      11d</span><br></pre></td></tr></table></figure>\n\n<p>执行yaml文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> vim https.yaml</span></span><br><span class=\"line\">apiVersion: networking.k8s.io/v1  # 1.9版本之前的apiVersion有所不同，可通过kubectl api-versions查看</span><br><span class=\"line\">kind: Ingress</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: blog-https</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  tls: </span><br><span class=\"line\">  - hosts:</span><br><span class=\"line\">     - blog.ctnrs.com</span><br><span class=\"line\">    secretName: blog-crnts-com</span><br><span class=\"line\">  rules:</span><br><span class=\"line\">  - host: blog.ctnrs.com  # 通过blog.ctnrs.com可以访问nginx容器</span><br><span class=\"line\">    http:</span><br><span class=\"line\">      paths:</span><br><span class=\"line\">      - pathType: Prefix</span><br><span class=\"line\">        path: &#x27;/&#x27;</span><br><span class=\"line\">        backend:</span><br><span class=\"line\">          service:     </span><br><span class=\"line\">            name: nginx</span><br><span class=\"line\">            port:</span><br><span class=\"line\">              number: 80</span><br><span class=\"line\">              </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl apply -f https.yaml</span> </span><br><span class=\"line\">ingress.networking.k8s.io/blog-https created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get ingress | grep http</span></span><br><span class=\"line\">blog-https           &lt;none&gt;   blog.ctnrs.com        80, 443   17s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 绑定hosts</span></span><br><span class=\"line\">10.138.3.62 blog.ctnrs.com</span><br></pre></td></tr></table></figure>\n\n<p>通过浏览器访问(自签证书，默认还是不安全的，有提示)：</p>\n<img src=\"../kuberPre/image-20210420232545936.png\" alt=\"image-20210420232545936\" style=\"zoom:50%;\" />\n\n\n\n<h4 id=\"1-2-4-ingress个性化配置–有问题\"><a href=\"#1-2-4-ingress个性化配置–有问题\" class=\"headerlink\" title=\"1.2.4 ingress个性化配置–有问题\"></a>1.2.4 ingress个性化配置–有问题</h4><p>​        重定向：我们知道在nginx配置中，我们可以通过<code>rewrite</code>将网站指向另外的url，例如，在下面的<code>rewrite.yaml</code>中，名称叫<code>nginx</code>的svc对应的后端容器不存在对应的<code>pic</code>目录，因此直接访问肯定会返回访问失败的页面，因此我们要么进入后端容器中添加<code>pic</code>目录，要么通过<code>rewrite</code>将<code>pic</code>目录指向其他url(rewrite写法很多，此处只做一般性展示)</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cat rewrite.yaml </span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">networking.k8s.io/v1</span>  <span class=\"comment\"># 1.9版本之前的apiVersion有所不同，可通过kubectl api-versions查看</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Ingress</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">rewrite</span></span><br><span class=\"line\">  <span class=\"attr\">annotations:</span></span><br><span class=\"line\">    <span class=\"attr\">nginx.ingress.kubernets.io/rewrite-target:</span> <span class=\"string\">http://web.ctnrs.com/foo/</span>  </span><br><span class=\"line\">    <span class=\"comment\"># 表示把rw.ctnrs.com/foo的请求重定向到http://web.ctnrs.com/foo/  </span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">rules:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">host:</span> <span class=\"string\">rw.ctnrs.com</span></span><br><span class=\"line\">    <span class=\"attr\">http:</span></span><br><span class=\"line\">      <span class=\"attr\">paths:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">path:</span> <span class=\"string\">/foo</span>    <span class=\"comment\"># 表示匹配rw.ctnrs.com/foo</span></span><br><span class=\"line\">        <span class=\"attr\">pathType:</span> <span class=\"string\">Prefix</span></span><br><span class=\"line\">        <span class=\"attr\">backend:</span></span><br><span class=\"line\">          <span class=\"attr\">service:</span>      <span class=\"comment\"># 相当于负载均衡nginx配置文件中的proxy_pass</span></span><br><span class=\"line\">            <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">            <span class=\"attr\">port:</span></span><br><span class=\"line\">              <span class=\"attr\">number:</span> <span class=\"number\">80</span></span><br><span class=\"line\">              </span><br><span class=\"line\"><span class=\"comment\"># 执行应用</span></span><br><span class=\"line\"><span class=\"comment\"># </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># kubectl get ingress | grep rewrite</span></span><br><span class=\"line\"><span class=\"string\">NAME</span>          <span class=\"string\">CLASS</span>    <span class=\"string\">HOSTS</span>            <span class=\"string\">ADDRESS</span>   <span class=\"string\">PORTS</span>     <span class=\"string\">AGE</span></span><br><span class=\"line\"><span class=\"string\">rewrite</span>      <span class=\"string\">&lt;none&gt;</span>   <span class=\"string\">rw.ctnrs.com</span>                <span class=\"number\">80</span>        <span class=\"string\">17s</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改windows系统中的hosts文件，完成后在浏览器中访问</span></span><br><span class=\"line\"><span class=\"number\">10.138</span><span class=\"number\">.3</span><span class=\"number\">.62</span> <span class=\"string\">rw.ctnrs.com</span></span><br></pre></td></tr></table></figure>\n\n<p>浏览器访问结果如下：</p>\n<img src=\"../kuberPre/image-20210421160257877.png\" alt=\"image-20210421160257877\" style=\"zoom:67%;\" />\n\n<p><strong>实验未成功，需进一步实验</strong></p>\n<p>如果原网页中带有js、css、图片等资源，在重定向的时候也都需要重定向，否则，重定向后的页面将显示不全，案例如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cat rewrite_java.yaml </span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">networking.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Ingress</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">rewrite-java</span></span><br><span class=\"line\">  <span class=\"attr\">annotations:</span></span><br><span class=\"line\">    <span class=\"attr\">nginx.ingress.kubernets.io/rewrite-target:</span> <span class=\"string\">/$2</span></span><br><span class=\"line\">    <span class=\"attr\">nginx.ingress.kubernetes.io/server-snippet:</span> <span class=\"string\">|</span></span><br><span class=\"line\">      <span class=\"string\">rewrite</span> <span class=\"string\">^/css/(.*)$</span> <span class=\"string\">/bar/css/$1</span> <span class=\"string\">redirect;</span>  <span class=\"comment\"># 表示临时将原页面上的css文件重定向到/bar/css目录中</span></span><br><span class=\"line\">      <span class=\"string\">rewrite</span> <span class=\"string\">^/js/(.*)$</span> <span class=\"string\">/bar/js/$1</span> <span class=\"string\">redirect;</span>    <span class=\"comment\"># 表示临时将原页面上的js文件重定向到/bar/js目录中</span></span><br><span class=\"line\">      <span class=\"string\">rewrite</span> <span class=\"string\">^/images/(.*)$</span> <span class=\"string\">/bar/images/$1</span> <span class=\"string\">redirect;</span> <span class=\"comment\"># 表示临时将原页面上的images文件重定向到/bar/images目录中</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">rules:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">host:</span> <span class=\"string\">rwj.ctnrs.com</span></span><br><span class=\"line\">    <span class=\"attr\">http:</span></span><br><span class=\"line\">      <span class=\"attr\">paths:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">path:</span> <span class=\"string\">/bar(/|$)(.*)</span>    <span class=\"comment\"># 表示匹配rw.ctnrs.com/bar或者rw.ctnrs.com/bar/或者rw.ctnrs.com/bar/*</span></span><br><span class=\"line\">        <span class=\"attr\">pathType:</span> <span class=\"string\">Prefix</span></span><br><span class=\"line\">        <span class=\"attr\">backend:</span></span><br><span class=\"line\">          <span class=\"attr\">service:</span>      <span class=\"comment\"># 相当于负载均衡nginx配置文件中的proxy_pass</span></span><br><span class=\"line\">            <span class=\"attr\">name:</span> <span class=\"string\">java-demo</span></span><br><span class=\"line\">            <span class=\"attr\">port:</span></span><br><span class=\"line\">              <span class=\"attr\">number:</span> <span class=\"number\">80</span></span><br><span class=\"line\">              </span><br><span class=\"line\"><span class=\"comment\"># kubectl apply -f rewrite_java.yaml </span></span><br><span class=\"line\"><span class=\"string\">ingress.networking.k8s.io/rewrite-java</span> <span class=\"string\">created</span></span><br><span class=\"line\"><span class=\"comment\"># kubectl get ingress</span></span><br><span class=\"line\"><span class=\"string\">NAME</span>                 <span class=\"string\">CLASS</span>    <span class=\"string\">HOSTS</span>          <span class=\"string\">ADDRESS</span>   <span class=\"string\">PORTS</span>     <span class=\"string\">AGE</span></span><br><span class=\"line\"><span class=\"string\">rewrite-java</span>         <span class=\"string\">&lt;none&gt;</span>   <span class=\"string\">rwj.ctnrs.com</span>              <span class=\"number\">80</span>        <span class=\"string\">9s</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改windows系统中的hosts文件</span></span><br><span class=\"line\"><span class=\"number\">10.138</span><span class=\"number\">.3</span><span class=\"number\">.62</span>  <span class=\"string\">rwj.ctnrs.com</span></span><br></pre></td></tr></table></figure>\n\n<p>访问结果如下：</p>\n<p>浏览器截图</p>\n<p>我们登陆到ingress-controller Pod中查看容器中的nginx配置文件，就可以看到我们配置的ingress规则</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get ingress   <span class=\"comment\"># 目前集群中新建了如下的ingress Pod</span></span></span><br><span class=\"line\">NAME            CLASS    HOSTS                               ADDRESS   PORTS     AGE</span><br><span class=\"line\">blog-https      &lt;none&gt;   blog.ctnrs.com                                80, 443   35h</span><br><span class=\"line\">nginx-ingress   &lt;none&gt;   nginx.ctnrs.com                               80        37h</span><br><span class=\"line\">rewrite         &lt;none&gt;   rw.ctnrs.com                                  80        19h</span><br><span class=\"line\">rewrite-java    &lt;none&gt;   rwj.ctnrs.com                                 80        18h</span><br><span class=\"line\">web1            &lt;none&gt;   web1-1.ctnrs.com,web1-2.ctnrs.com             80        36h</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pods -n ingress-nginx  <span class=\"comment\"># 集群中存在如下两个ingress-controller</span></span></span><br><span class=\"line\">NAME                             READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">nginx-ingress-controller-fqfcf   1/1     Running   1          37h</span><br><span class=\"line\">nginx-ingress-controller-kxlw6   1/1     Running   1          37h</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl <span class=\"built_in\">exec</span> -it  nginx-ingress-controller-fqfcf -n ingress-nginx -- bash  <span class=\"comment\"># 进入其中的一个ingress控制器</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">bash-5.0$ ps -ef    # 进程信息，主要包括ingress控制器进程，nginx的master和worker进程</span><br><span class=\"line\">PID   USER     TIME  COMMAND</span><br><span class=\"line\">    1 www-data  0:00 /usr/bin/dumb-init -- /nginx-ingress-controller --configmap=ingress-nginx/nginx-configuration --tcp-services-configmap=ingress-nginx/tcp-services</span><br><span class=\"line\">    7 www-data  0:01 /nginx-ingress-controller --configmap=ingress-nginx/nginx-configuration --tcp-services-configmap=ingress-nginx/tcp-services --udp-services-config</span><br><span class=\"line\">   27 www-data  0:00 nginx: master process /usr/local/nginx/sbin/nginx -c /etc/nginx/nginx.conf</span><br><span class=\"line\">   38 www-data  0:00 nginx: worker process</span><br><span class=\"line\">   39 www-data  0:00 nginx: worker process</span><br><span class=\"line\">   40 www-data  0:00 nginx: cache manager process</span><br><span class=\"line\">  113 www-data  0:00 bash</span><br><span class=\"line\">  121 www-data  0:00 ps -ef</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看nginx配置文件</span></span><br></pre></td></tr></table></figure>\n\n<p>截取部分nginx.conf文件(下图中截取了<code>blog.ctnrs.com</code>的部分信息，图中的整个server块都是<code>blog.ctnrs.com</code>的信息)</p>\n<p><img src=\"../kuberPre/image-20210422110730574.png\" alt=\"image-20210422110730574\"></p>\n<p>​        通过nginx配置文件，我们可以知道，当我们在集群中新建一个ingress容器时，ingress控制器将ingress的配置添加到了ingress控制器的nginx.cong文件中，跟使用传统场景中nginx做负载均衡配置nginx.conf文件一样的操作原理</p>\n<h3 id=\"1-4-ingress-controller-高可用\"><a href=\"#1-4-ingress-controller-高可用\" class=\"headerlink\" title=\"1.4 ingress controller 高可用\"></a>1.4 ingress controller 高可用</h3><p>Ingress Contronler怎么工作的？</p>\n<p>​        Ingress Contronler通过与Kubernetes API 交互，动态的去感知集群中Ingress 规则变化，然后读取它，按照自定义的规则，规则就是写明了哪个域名对应哪个service，生成一段Nginx 配置，应用到管理的Nginx服务，然后热加载生效。以此来达到Nginx负载均衡器配置及动态更新的问题。</p>\n<p>​        流程包流程：客户端-&gt;Ingress Controller（nginx）-&gt; 分布在各节点Pod</p>\n<p>​        ingress controller会以DaemonSet + NodeSelector的方式部署到几台特定的服务器然后挂载到公网负载均衡器对外提供服务。</p>\n<img src=\"../kuberPre/image-20210425142508266.png\" alt=\"image-20210425142508266\" style=\"zoom:67%;\" />\n\n","comments":true,"permalink":"https://qingdalf.github.io/2021-05/kuberIngress/","categories":[{"name":"kubernets","slug":"kubernets","permalink":"https://qingdalf.github.io/categories/kubernets/"}],"tags":[]},{"title":"Service","date":"2021-05-05T11:18:55.000Z","path":"2021-05/kuberService/","content":"<h1 id=\"Service对外暴露应用\"><a href=\"#Service对外暴露应用\" class=\"headerlink\" title=\"Service对外暴露应用\"></a>Service对外暴露应用</h1><h2 id=\"1-Service是什么\"><a href=\"#1-Service是什么\" class=\"headerlink\" title=\"1. Service是什么\"></a>1. Service是什么</h2><p>Q1:如何让前端连接后端？</p>\n<p>​        物理服务器/虚拟机都是通过IP地址相互访问的，IP地址是固定的，那么为啥kubernets不能通过ip访问呢</p>\n<ul>\n<li>Pod的IP地址是随机分配的</li>\n<li>Pod的IP随着Pod的启动而变化<span id=\"more\"></span>\n​        容器的IP地址是临时的(随着容器的启动随机进行分配)，且多个pod有多个IP地址，因此我们不能通过IP地址进行连接，我们需要使用一个统一的访问入口，这个统一的访问入口就等同于一个负载均衡器，这时Service就排上了用场。</li>\n</ul>\n<p>Q2：后端程序多个Pod如何同时提供服务？</p>\n<p>​        通过<strong>统一的访问入口</strong>，让Service统一将请求分发(<strong>负载均衡</strong>)到后端程序提供服务，并且Service拥有动态感知Pod的能力，Pod的IP发生变化或者有新的Pod加入，Service能自动将流量分发到这些变化和新加入的Pod上</p>\n<p>总结：</p>\n<p>​         前端用户(user)–连接LB的IP地址，LB将用户流量分发到后端pod，并随时感知pod的状态变化，自动更新负载策略(如，pod故障就不转发流量到故障pod上；又新加入的pod，自动将podip加入负载策略中)</p>\n<h2 id=\"2-Service存在的意义\"><a href=\"#2-Service存在的意义\" class=\"headerlink\" title=\"2. Service存在的意义\"></a>2. Service存在的意义</h2><p>Service引入主要是解决了Pod的动态变化，提供统一的访问入口：</p>\n<ul>\n<li>防止Pod失联，准备找到提供同一个服务器的Pod(服务发现)</li>\n<li>定义一组Pod的访问策略(负载均衡)</li>\n</ul>\n<p>Pod与Service的关系：</p>\n<ul>\n<li>Service通过标签关联Pod</li>\n<li>Service使用iptables或者ipvs为一组Pod提供负载均衡能力</li>\n</ul>\n<p><img src=\"../kuberPre/image-20210420151118927.png\" alt=\"image-20210420151118927\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl  get pod --show-labels   <span class=\"comment\"># 通过--show-labels查看标签</span></span></span><br><span class=\"line\">NAME                        READY STATUS    RESTARTS  AGE  LABELS</span><br><span class=\"line\">java-demo-56d54df448-7mhg8  1/1   Running   0         11h  app=java-demo,pod-template-hash=56d54df448</span><br><span class=\"line\">java-demo-56d54df448-dx767  1/1   Running   0         11h  app=java-demo,pod-template-hash=56d54df448</span><br><span class=\"line\">java-demo-56d54df448-flh48  1/1   Running   0         11h  app=java-demo,pod-template-hash=56d54df448</span><br><span class=\"line\">nginx-6799fc88d8-825ps      1/1   Running   0         34h  app=nginx,pod-template-hash=6799fc88d8</span><br><span class=\"line\">web-86cd4d65b9-554kq        1/1   Running   0         11h  app=web,pod-template-hash=86cd4d65b9</span><br><span class=\"line\">web-86cd4d65b9-65nkq        1/1   Running   0         11h  app=web,pod-template-hash=86cd4d65b9</span><br><span class=\"line\">web-86cd4d65b9-7zml9        1/1   Running   0         11h  app=web,pod-template-hash=86cd4d65b9</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl  get pod -l app=web    <span class=\"comment\"># 通过-l过滤标签</span></span></span><br><span class=\"line\">NAME                   READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">web-86cd4d65b9-554kq   1/1     Running   0          11h</span><br><span class=\"line\">web-86cd4d65b9-65nkq   1/1     Running   0          11h</span><br><span class=\"line\">web-86cd4d65b9-7zml9   1/1     Running   0          11h</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-Service的定义与创建\"><a href=\"#3-Service的定义与创建\" class=\"headerlink\" title=\"3. Service的定义与创建\"></a>3. Service的定义与创建</h2><h3 id=\"3-1-命令行创建\"><a href=\"#3-1-命令行创建\" class=\"headerlink\" title=\"3.1 命令行创建\"></a>3.1 命令行创建</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 此处我们不做创建，只做检查</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl expose deployment web --port=80 --target-port=80 --dry-run=client</span></span><br><span class=\"line\">service/web exposed (dry run)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-yaml文件创建\"><a href=\"#3-2-yaml文件创建\" class=\"headerlink\" title=\"3.2 yaml文件创建\"></a>3.2 yaml文件创建</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 如果不会写yaml，我们仍然可以通过--dry-run=client -o yaml将yaml文件导出</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl expose deployment web --port=80 --target-port=80 --dry-run=client -o yaml &gt; web_service.yaml</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-Service的三种类型\"><a href=\"#4-Service的三种类型\" class=\"headerlink\" title=\"4.Service的三种类型\"></a>4.Service的三种类型</h2><h3 id=\"4-1-ClusterIP\"><a href=\"#4-1-ClusterIP\" class=\"headerlink\" title=\"4.1  ClusterIP\"></a>4.1  ClusterIP</h3><p>​        默认，分配一个稳定的IP地址，即VIP，<strong>只能在集群内部访问</strong>。用户不能直接访问，只是解决了如何在集群内部访问，即node和pod，pod和pod之间的访问。</p>\n<img src=\"../kuberPre/image-20210420153150362.png\" alt=\"image-20210420153150362\" style=\"zoom:67%;\" />\n\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cat web_service.yaml   # 通过是上面的命令生成的yaml文件。默认类型为clusterIP</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">creationTimestamp:</span> <span class=\"literal\">null</span>         <span class=\"comment\"># 删除创建时间戳</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span>                  <span class=\"comment\"># svc的标签</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">web</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">web</span>                <span class=\"comment\"># svc的名称</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">80</span>           <span class=\"comment\"># Service暴露的端口</span></span><br><span class=\"line\">    <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">80</span>     <span class=\"comment\"># 容器使用的端口，即将容器的80端口与Service的80端口做关联</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span> <span class=\"comment\"># 关联后端的Pod的标签，即通过这个标签去找到对应的pod，跟资源(如pod,deploy)类型中的metadata.labels一致</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">web</span></span><br><span class=\"line\"><span class=\"attr\">status:</span>                <span class=\"comment\"># 删除该字段</span></span><br><span class=\"line\">  <span class=\"attr\">loadBalancer:</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"4-2-NodePort\"><a href=\"#4-2-NodePort\" class=\"headerlink\" title=\"4.2 NodePort\"></a>4.2 NodePort</h3><p>​        在<strong>每个节点上启用一个端口来暴露服务</strong>，可以在<strong>集群外部访问</strong>，但也会创建一个稳定的ClusterIP，端口在30000-32767(端口可指定，默认自动分配)之间，访问地址为&lt;任意NodeIP&gt;:<NodePort>，这样会在每台Node上监听端口接收用户流量，在实际情况下，对用户暴露的只会有一个IP和端口，那这么多台用哪台让用户访问呢？一般的做法是加一个公网负载均衡器，让项目提供统一的访问入口</p>\n<img src=\"../kuberPre/image-20210420153303109.png\" alt=\"image-20210420153303109\" style=\"zoom:67%;\" />\n\n<p>企业常见用法：</p>\n<img src=\"../kuberPre/image-20210420154944811.png\" alt=\"image-20210420154944811\" style=\"zoom:67%;\" />\n\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cat web_service.yaml   # 指定端口和类型</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">creationTimestamp:</span> <span class=\"literal\">null</span>         <span class=\"comment\"># 删除创建时间戳</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span>                </span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">web</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">web</span>               </span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">NodePort</span>      <span class=\"comment\"># 指定类型为NodePort,可在集群外访问</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">80</span>           </span><br><span class=\"line\">    <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">80</span>    </span><br><span class=\"line\">    <span class=\"attr\">nodePort:</span> <span class=\"number\">30023</span>    <span class=\"comment\"># 如果想指定端口，可添加该字段，不指定端口则自动分配，范围在30000-32767</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span> </span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">web</span></span><br><span class=\"line\"><span class=\"attr\">status:</span>                <span class=\"comment\"># 删除该字段</span></span><br><span class=\"line\">  <span class=\"attr\">loadBalancer:</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-3-LoadBalancer-LB\"><a href=\"#4-3-LoadBalancer-LB\" class=\"headerlink\" title=\"4.3 LoadBalancer (LB)\"></a>4.3 LoadBalancer (LB)</h3><p>​        与NodePort类似，<strong>适用于公有云</strong>，在每个节点启用一个端口来暴露服务，除此之外，<strong>k8s会请求底层云平台(如阿里云，aws等)上的负载均衡器</strong>，<strong>自动将每个Node</strong>(&lt;任意NodeIP&gt;:<NodePort>)作为后端添加进去，可查阅云厂商相关文档</p>\n<img src=\"../kuberPre/image-20210420155108729.png\" alt=\"image-20210420155108729\" style=\"zoom:67%;\" />\n\n\n\n<h2 id=\"5-Service代理模式\"><a href=\"#5-Service代理模式\" class=\"headerlink\" title=\"5. Service代理模式\"></a>5. Service代理模式</h2><ul>\n<li>iptables(默认规则)<ul>\n<li>灵活，功能强大</li>\n<li>规则遍历匹配和更新，呈线性时延，不适用于大集群(建议service小于100，pod副本数跟service比例在1:3-5可使用iptables)</li>\n<li>查看iptables规则：iptables-save |grep <SERVICE-NAME></li>\n</ul>\n</li>\n</ul>\n<img src=\"../kuberPre/image-20210420155534541.png\" alt=\"image-20210420155534541\" style=\"zoom: 50%;\" />\n\n<p>查看规则的方法：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 1. 通过kube-proxy的配置文件</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 2. 通过kube-proxy的日志，我们是通过容器启动的，因此就通过该方法查看</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pods -n kube-system | grep proxy</span></span><br><span class=\"line\">kube-proxy-bzhts                           1/1     Running   1          11d</span><br><span class=\"line\">kube-proxy-fd5q2                           1/1     Running   1          11d</span><br><span class=\"line\">kube-proxy-p6hmt                           1/1     Running   1          11d</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl logs kube-proxy-p6hmt -n kube-system  <span class=\"comment\"># 查看任意一个proxy Pod的日志</span></span></span><br><span class=\"line\">I0420 06:35:30.109968       1 node.go:172] Successfully retrieved node IP: 10.138.3.61</span><br><span class=\"line\">I0420 06:35:30.110014       1 server_others.go:142] kube-proxy node IP is an IPv4 address (10.138.3.61), assume IPv4 operation</span><br><span class=\"line\">W0420 06:35:30.134968       1 server_others.go:578] Unknown proxy mode &quot;&quot;, assuming iptables proxy</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 此处的<span class=\"string\">&quot;proxy mode &quot;</span><span class=\"string\">&quot;, assuming iptables proxy&quot;</span>表示，如果模式为空，则使用iptables规则</span></span><br><span class=\"line\">I0420 06:35:30.135048       1 server_others.go:185] Using iptables Proxier.</span><br><span class=\"line\">I0420 06:35:30.135559       1 server.go:650] Version: v1.20.0</span><br><span class=\"line\">I0420 06:35:30.135919       1 conntrack.go:100] Set sysctl &#x27;net/netfilter/nf_conntrack_max&#x27; to 131072</span><br><span class=\"line\">····</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>ipvs<ul>\n<li>工作在内核，有更好的性能，适合于大集群，建议使用</li>\n<li>调度算法丰富：rr，wrr，lc，wlc，ip hash···</li>\n<li>查看ipvs规则：ipvsadm -L -n</li>\n</ul>\n</li>\n</ul>\n<img src=\"../kuberPre/image-20210420155545734.png\" alt=\"image-20210420155545734\" style=\"zoom: 50%;\" />\n\n\n\n<h3 id=\"5-1-iptables\"><a href=\"#5-1-iptables\" class=\"headerlink\" title=\"5.1 iptables\"></a>5.1 iptables</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 获取容器IP，iptables规则一定会将流量转发到容器IP</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pods -o wide | grep nginx   <span class=\"comment\"># 记住容器IP，iptables规则一定会将流量转发到容器IP</span></span></span><br><span class=\"line\">nginx-6799fc88d8-825ps   1/1     Running   1   10d   10.244.154.198   k8s-node-01   &lt;none&gt;  &lt;none&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 获取svc IP，svc IP一定会去关联后端的容器IP，才能让用户访问到应用信息</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get svc -o wide | grep nginx</span>  </span><br><span class=\"line\">nginx        NodePort    10.103.247.121   &lt;none&gt;        80:32561/TCP   11d   app=nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 端点信息</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get ep  | grep nginx</span></span><br><span class=\"line\">nginx        10.244.154.198:80   11d</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ss -lntp | grep proxy</span></span><br><span class=\"line\">LISTEN     0      128    127.0.0.1:10249       *:*   users:((&quot;kube-proxy&quot;,pid=2994,fd=18))</span><br><span class=\"line\">LISTEN     0      128          *:32561         *:*   users:((&quot;kube-proxy&quot;,pid=2994,fd=13))</span><br><span class=\"line\">LISTEN     0      128          *:30001         *:*   users:((&quot;kube-proxy&quot;,pid=2994,fd=10))</span><br><span class=\"line\">LISTEN     0      128       [::]:10256      [::]:*   users:((&quot;kube-proxy&quot;,pid=2994,fd=19))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> iptables规则</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> iptables-save  | grep nginx   <span class=\"comment\"># 此处的nginx是service的名称</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 1.访问nodePort，端口是32561时，将流量转发到KUBE-SVC-2CMXP7HKUVJN7L6M链</span></span></span><br><span class=\"line\">-A KUBE-NODEPORTS -p tcp -m comment --comment &quot;default/nginx&quot; -m tcp --dport 32561 -j KUBE-MARK-MASQ</span><br><span class=\"line\">-A KUBE-NODEPORTS -p tcp -m comment --comment &quot;default/nginx&quot; -m tcp --dport 32561 -j KUBE-SVC-2CMXP7HKUVJN7L6M   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 3.将来自KUBE-SEP-FIC36SCPQQINK7HE链的规则，通过DNAT(目标地址转换)转发到10.244.154.198:80(容器IP和端口)容器中</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 如果有多个容器，会添加多条相同的规则和负载规则策略，只是--to-destination的IP地址不同</span></span></span><br><span class=\"line\">-A KUBE-SEP-FIC36SCPQQINK7HE -s 10.244.154.198/32 -m comment --comment &quot;default/nginx&quot; -j KUBE-MARK-MASQ</span><br><span class=\"line\">-A KUBE-SEP-FIC36SCPQQINK7HE -p tcp -m comment --comment &quot;default/nginx&quot; -m tcp -j DNAT --to-destination 10.244.154.198:80</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-A KUBE-SERVICES ! -s 10.244.0.0/16 -d 10.103.247.121/32 -p tcp -m comment --comment &quot;default/nginx cluster IP&quot; -m tcp --dport 80 -j KUBE-MARK-MASQ</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 1.访问clusterIP的转发，目标地址是10.103.247.121/32(svc地址)，目标端口是80 ，协议是tcp的流量，转发到KUBE-SVC-2CMXP7HKUVJN7L6M链中</span></span></span><br><span class=\"line\">-A KUBE-SERVICES -d 10.103.247.121/32 -p tcp -m comment --comment &quot;default/nginx cluster IP&quot; -m tcp --dport 80 -j KUBE-SVC-2CMXP7HKUVJN7L6M</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 2.从nodeport和clusterIP两种类型来的流量，都来匹配这条规则</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 含义是：把所有从KUBE-SVC-2CMXP7HKUVJN7L6M链来的规则都交给KUBE-SEP-FIC36SCPQQINK7HE链去处理</span></span></span><br><span class=\"line\">-A KUBE-SVC-2CMXP7HKUVJN7L6M -m comment --comment &quot;default/nginx&quot; -j KUBE-SEP-FIC36SCPQQINK7HE</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 我们将集群nginx容器扩容到3个pod</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl scale deployment nginx --replicas=3</span> </span><br><span class=\"line\">deployment.apps/nginx scaled</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 等待创建完所有pod</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get ep  | grep nginx   <span class=\"comment\"># 这里是所有nginx容器的IP地址和端口</span></span></span><br><span class=\"line\">nginx     10.244.154.198:80,10.244.44.209:80,10.244.44.210:80   11d</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 我们再次来查看iptables规则</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> iptables-save  | grep nginx</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 1. 从nodeport来的流量</span></span></span><br><span class=\"line\">-A KUBE-NODEPORTS -p tcp -m comment --comment &quot;default/nginx&quot; -m tcp --dport 32561 -j KUBE-MARK-MASQ</span><br><span class=\"line\">-A KUBE-NODEPORTS -p tcp -m comment --comment &quot;default/nginx&quot; -m tcp --dport 32561 -j KUBE-SVC-2CMXP7HKUVJN7L6M</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 3.上文中存在的转发规则</span></span><br><span class=\"line\">-A KUBE-SEP-FIC36SCPQQINK7HE -s 10.244.154.198/32 -m comment --comment &quot;default/nginx&quot; -j KUBE-MARK-MASQ</span><br><span class=\"line\">-A KUBE-SEP-FIC36SCPQQINK7HE -p tcp -m comment --comment &quot;default/nginx&quot; -m tcp -j DNAT --to-destination 10.244.154.198:80</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 3.多出来的第一个规则，转发到第二个pod</span></span></span><br><span class=\"line\">-A KUBE-SEP-FU7B2O7TL4BNEJXI -s 10.244.44.210/32 -m comment --comment &quot;default/nginx&quot; -j KUBE-MARK-MASQ</span><br><span class=\"line\">-A KUBE-SEP-FU7B2O7TL4BNEJXI -p tcp -m comment --comment &quot;default/nginx&quot; -m tcp -j DNAT --to-destination 10.244.44.210:80</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 3.多出来的第二个规则，转发到第三个pod</span></span><br><span class=\"line\">-A KUBE-SEP-HJU6P624NH7ZFLEO -s 10.244.44.209/32 -m comment --comment &quot;default/nginx&quot; -j KUBE-MARK-MASQ</span><br><span class=\"line\">-A KUBE-SEP-HJU6P624NH7ZFLEO -p tcp -m comment --comment &quot;default/nginx&quot; -m tcp -j DNAT --to-destination 10.244.44.209:80</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 1.从clusterIP来的流量</span></span><br><span class=\"line\">-A KUBE-SERVICES ! -s 10.244.0.0/16 -d 10.103.247.121/32 -p tcp -m comment --comment &quot;default/nginx cluster IP&quot; -m tcp --dport 80 -j KUBE-MARK-MASQ</span><br><span class=\"line\">-A KUBE-SERVICES -d 10.103.247.121/32 -p tcp -m comment --comment &quot;default/nginx cluster IP&quot; -m tcp --dport 80 -j KUBE-SVC-2CMXP7HKUVJN7L6M</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 下面的三条策略，从上倒下匹配--Iptables使用概率来保障pod负载均衡分配</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 多出来的转发策略--</span></span><br><span class=\"line\">-A KUBE-SVC-2CMXP7HKUVJN7L6M -m comment --comment &quot;default/nginx&quot; -m statistic --mode random --probability 0.33333333349 -j KUBE-SEP-FIC36SCPQQINK7HE</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 多出来的转发策略--</span></span><br><span class=\"line\">-A KUBE-SVC-2CMXP7HKUVJN7L6M -m comment --comment &quot;default/nginx&quot; -m statistic --mode random --probability 0.50000000000 -j KUBE-SEP-HJU6P624NH7ZFLEO</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 默认的匹配(转发)规则--</span></span><br><span class=\"line\">-A KUBE-SVC-2CMXP7HKUVJN7L6M -m comment --comment &quot;default/nginx&quot; -j KUBE-SEP-FU7B2O7TL4BNEJXI</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>根据上面的iptables规则可以知道，只是入口不一样(nodeport或clusterip)，入口后的规则都是一样的，因此一般情况下数据包准发流程如下：</p>\n<ul>\n<li>通过访问clusterIP来访问pod(集群内)，即user–&gt;clusterIP–&gt;PodIP(多个IP)</li>\n<li>通过访问nodeIP来访问pod(集群外)，即user–&gt;NodePort(多个集群IP)–&gt;PodIP(多个IP)</li>\n</ul>\n<h3 id=\"5-2-ipvs\"><a href=\"#5-2-ipvs\" class=\"headerlink\" title=\"5.2 ipvs\"></a>5.2 ipvs</h3><p>​        通过上文，我们已经知道了默认模式是iptables，如果我们想使用ipvs规则，需要进行模式的修改。</p>\n<p>修改方式：</p>\n<ul>\n<li>二进制部署，通过配置文件kube-proxy-config.yml修改，修改imode，然后重启kube-proxy服务</li>\n<li>容器部署，通过kubeadm的方式修改，此处采用该方式</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl edit configmap kube-proxy -n kube-system</span></span><br><span class=\"line\">configmap/kube-proxy edited</span><br></pre></td></tr></table></figure>\n\n<p>如下图：</p>\n<img src=\"../kuberPre/image-20210420170843998.png\" alt=\"image-20210420170843998\" style=\"zoom: 80%;\" />\n\n<p>重置容器：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> k8s中没有容器Pod的概念，因此此处直接删除pod，让其重建pod</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pods -n kube-system  -o wide | grep proxy</span> </span><br><span class=\"line\">kube-proxy-bzhts  1/1     Running   1     11d   10.138.3.62      k8s-node-01   &lt;none&gt;    &lt;none&gt;</span><br><span class=\"line\">kube-proxy-fd5q2  1/1     Running   1     11d   10.138.3.63      k8s-node-02   &lt;none&gt;    &lt;none&gt;</span><br><span class=\"line\">kube-proxy-p6hmt  1/1     Running   1     11d   10.138.3.61      k8s-master    &lt;none&gt;    &lt;none&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 先删除其中一个(k8s-node-01)，然后验证合法后，再进行其他两台的操作</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl delete pod kube-proxy-bzhts  -n kube-system</span></span><br><span class=\"line\">pod &quot;kube-proxy-bzhts&quot; deleted</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pods -n kube-system  -o wide | grep proxy</span> </span><br><span class=\"line\">kube-proxy-fd5q2  1/1     Running   1     11d   10.138.3.63      k8s-node-02   &lt;none&gt;    &lt;none&gt;</span><br><span class=\"line\">kube-proxy-lndks  1/1     Running   0     8s    10.138.3.62      k8s-node-01   &lt;none&gt;    &lt;none&gt;</span><br><span class=\"line\">kube-proxy-p6hmt  1/1     Running   1     11d   10.138.3.61      k8s-master    &lt;none&gt;    &lt;none&gt;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get svc -o wide | grep nginx</span></span><br><span class=\"line\">nginx  NodePort    10.103.247.121   &lt;none&gt;    80:32561/TCP   11d   app=nginx</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 验证(在k8s-node-01验证)：安装ipvs，并查看规则</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum -y install ipvsadm</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ipvsadm -Ln</span></span><br><span class=\"line\">IP Virtual Server version 1.2.1 (size=4096)</span><br><span class=\"line\">Prot LocalAddress:Port Scheduler Flags</span><br><span class=\"line\"><span class=\"meta\">  -&gt;</span><span class=\"bash\"> RemoteAddress:Port           Forward Weight ActiveConn InActConn</span></span><br><span class=\"line\">TCP  10.96.0.1:443 rr   # 默认规则就是rr</span><br><span class=\"line\"><span class=\"meta\">  -&gt;</span><span class=\"bash\"> 10.138.3.61:6443             Masq    1      0          0</span>         </span><br><span class=\"line\">TCP  10.96.0.10:53 rr</span><br><span class=\"line\"><span class=\"meta\">  -&gt;</span><span class=\"bash\"> 10.244.235.196:53            Masq    1      0          0</span>         </span><br><span class=\"line\"><span class=\"meta\">  -&gt;</span><span class=\"bash\"> 10.244.235.197:53            Masq    1      0          0</span>         </span><br><span class=\"line\">TCP  10.96.0.10:9153 rr</span><br><span class=\"line\"><span class=\"meta\">  -&gt;</span><span class=\"bash\"> 10.244.235.196:9153          Masq    1      0          0</span>         </span><br><span class=\"line\"><span class=\"meta\">  -&gt;</span><span class=\"bash\"> 10.244.235.197:9153          Masq    1      0          0</span>         </span><br><span class=\"line\">TCP  10.99.141.98:8000 rr</span><br><span class=\"line\"><span class=\"meta\">  -&gt;</span><span class=\"bash\"> 10.244.44.208:8000           Masq    1      0          0</span>         </span><br><span class=\"line\">TCP  10.100.90.183:443 rr</span><br><span class=\"line\"><span class=\"meta\">  -&gt;</span><span class=\"bash\"> 10.244.154.197:8443          Masq    1      0          0</span>         </span><br><span class=\"line\">TCP  10.103.247.121:80 rr         # svc的IP地址：10.103.247.121，通过svc地址(clusterIP)访问的流量转发</span><br><span class=\"line\"><span class=\"meta\">  -&gt;</span><span class=\"bash\"> 10.244.44.209:80             Masq    1      0          0</span>         </span><br><span class=\"line\"><span class=\"meta\">  -&gt;</span><span class=\"bash\"> 10.244.44.210:80             Masq    1      0          0</span>         </span><br><span class=\"line\"><span class=\"meta\">  -&gt;</span><span class=\"bash\"> 10.244.154.198:80            Masq    1      0          0</span>         </span><br><span class=\"line\">TCP  10.138.3.62:30001 rr</span><br><span class=\"line\"><span class=\"meta\">  -&gt;</span><span class=\"bash\"> 10.244.154.197:8443          Masq    1      0          0</span>         </span><br><span class=\"line\">TCP  10.138.3.62:32561 rr        # 宿主机IP地址：10.138.3.62，通过nodeport访问的流量转发</span><br><span class=\"line\"><span class=\"meta\">  -&gt;</span><span class=\"bash\"> 10.244.44.209:80             Masq    1      0          0</span>         </span><br><span class=\"line\"><span class=\"meta\">  -&gt;</span><span class=\"bash\"> 10.244.44.210:80             Masq    1      0          0</span>         </span><br><span class=\"line\"><span class=\"meta\">  -&gt;</span><span class=\"bash\"> 10.244.154.198:80            Masq    1      0          0</span>         </span><br><span class=\"line\">TCP  10.244.154.192:30001 rr</span><br><span class=\"line\"><span class=\"meta\">  -&gt;</span><span class=\"bash\"> 10.244.154.197:8443          Masq    1      0          0</span>         </span><br><span class=\"line\">TCP  10.244.154.192:32561 rr    # 通过网卡tunl0@NONE访问，网卡信息看下文</span><br><span class=\"line\"><span class=\"meta\">  -&gt;</span><span class=\"bash\"> 10.244.44.209:80             Masq    1      0          0</span>         </span><br><span class=\"line\"><span class=\"meta\">  -&gt;</span><span class=\"bash\"> 10.244.44.210:80             Masq    1      0          0</span>         </span><br><span class=\"line\"><span class=\"meta\">  -&gt;</span><span class=\"bash\"> 10.244.154.198:80            Masq    1      0          0</span>         </span><br><span class=\"line\">TCP  127.0.0.1:30001 rr</span><br><span class=\"line\"><span class=\"meta\">  -&gt;</span><span class=\"bash\"> 10.244.154.197:8443          Masq    1      0          0</span>         </span><br><span class=\"line\">TCP  127.0.0.1:32561 rr       # 通过lo:32561访问nginx容器(NodePort)</span><br><span class=\"line\"><span class=\"meta\">  -&gt;</span><span class=\"bash\"> 10.244.44.209:80             Masq    1      0          0</span>         </span><br><span class=\"line\"><span class=\"meta\">  -&gt;</span><span class=\"bash\"> 10.244.44.210:80             Masq    1      0          0</span>         </span><br><span class=\"line\"><span class=\"meta\">  -&gt;</span><span class=\"bash\"> 10.244.154.198:80            Masq    1      0          0</span>         </span><br><span class=\"line\">TCP  172.17.0.1:30001 rr</span><br><span class=\"line\"><span class=\"meta\">  -&gt;</span><span class=\"bash\"> 10.244.154.197:8443          Masq    1      0          0</span>         </span><br><span class=\"line\">TCP  172.17.0.1:32561 rr     # 172.17.0.1 docker0的IP地址</span><br><span class=\"line\"><span class=\"meta\">  -&gt;</span><span class=\"bash\"> 10.244.44.209:80             Masq    1      0          0</span>         </span><br><span class=\"line\"><span class=\"meta\">  -&gt;</span><span class=\"bash\"> 10.244.44.210:80             Masq    1      0          0</span>         </span><br><span class=\"line\"><span class=\"meta\">  -&gt;</span><span class=\"bash\"> 10.244.154.198:80            Masq    1      0          0</span>         </span><br><span class=\"line\">UDP  10.96.0.10:53 rr</span><br><span class=\"line\"><span class=\"meta\">  -&gt;</span><span class=\"bash\"> 10.244.235.196:53            Masq    1      0          0</span>         </span><br><span class=\"line\"><span class=\"meta\">  -&gt;</span><span class=\"bash\"> 10.244.235.197:53            Masq    1      0          0</span>  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ip a   <span class=\"comment\"># 网卡信息发生了变化</span></span></span><br><span class=\"line\">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class=\"line\">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class=\"line\">    inet 127.0.0.1/8 scope host lo</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 ::1/128 scope host </span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class=\"line\">    link/ether 00:0c:29:f8:4c:a3 brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 10.138.3.62/24 brd 10.138.3.255 scope global noprefixroute ens33</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 fe80::edf4:6c5f:a090:110/64 scope link noprefixroute </span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">3: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default </span><br><span class=\"line\">    link/ether 02:42:b9:85:b5:e8 brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">4: tunl0@NONE: &lt;NOARP,UP,LOWER_UP&gt; mtu 1480 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class=\"line\">    link/ipip 0.0.0.0 brd 0.0.0.0     # 不知道干啥的？？？？</span><br><span class=\"line\">    inet 10.244.154.192/32 scope global tunl0</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">5: cali76d2c4cb462@if4: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1480 qdisc noqueue state UP group default </span><br><span class=\"line\">    link/ether ee:ee:ee:ee:ee:ee brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class=\"line\">    inet6 fe80::ecee:eeff:feee:eeee/64 scope link </span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">6: cali2941b9a4026@if4: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1480 qdisc noqueue state UP group default </span><br><span class=\"line\">    link/ether ee:ee:ee:ee:ee:ee brd ff:ff:ff:ff:ff:ff link-netnsid 1</span><br><span class=\"line\">    inet6 fe80::ecee:eeff:feee:eeee/64 scope link </span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">7: dummy0: &lt;BROADCAST,NOARP&gt; mtu 1500 qdisc noop state DOWN group default qlen 1000</span><br><span class=\"line\">    link/ether 02:a3:b5:68:00:72 brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">8: kube-ipvs0: &lt;BROADCAST,NOARP&gt; mtu 1500 qdisc noop state DOWN group default # 新出现的网卡</span><br><span class=\"line\">    link/ether ae:50:d0:2b:72:2b brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 10.96.0.1/32 scope global kube-ipvs0</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet 10.103.247.121/32 scope global kube-ipvs0</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet 10.96.0.10/32 scope global kube-ipvs0</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet 10.99.141.98/32 scope global kube-ipvs0</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet 10.100.90.183/32 scope global kube-ipvs0</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">       </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 删除其他两个proxy pod</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pods -o wide -n kube-system |grep proxy</span></span><br><span class=\"line\">\\kube-proxy-fd5q2  1/1     Running   1  11d   10.138.3.63      k8s-node-02   &lt;none&gt;  &lt;none&gt;</span><br><span class=\"line\">kube-proxy-lndks   1/1     Running   0  39m   10.138.3.62      k8s-node-01   &lt;none&gt;  &lt;none&gt;</span><br><span class=\"line\">kube-proxy-p6hmt   1/1     Running   1   11d   10.138.3.61      k8s-master    &lt;none&gt;  &lt;none&gt; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl delete pod kube-proxy-fd5q2  -n kube-system</span></span><br><span class=\"line\">pod &quot;kube-proxy-fd5q2&quot; deleted</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl delete pod kube-proxy-p6hmt  -n kube-system</span></span><br><span class=\"line\">pod &quot;kube-proxy-p6hmt&quot; deleted</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 完成如下：</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pods -o wide -n kube-system |grep proxy</span></span><br><span class=\"line\">kube-proxy-7xhzn 1/1     Running   0    10s   10.138.3.61      k8s-master    &lt;none&gt;   &lt;none&gt;</span><br><span class=\"line\">kube-proxy-hr7ht 1/1     Running   0    91s   10.138.3.63      k8s-node-02   &lt;none&gt;   &lt;none&gt;</span><br><span class=\"line\">kube-proxy-lndks 1/1     Running   0    41m   10.138.3.62      k8s-node-01   &lt;none&gt;   &lt;none&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-3-工作模式\"><a href=\"#5-3-工作模式\" class=\"headerlink\" title=\"5.3 工作模式\"></a>5.3 工作模式</h3><p><img src=\"../kuberPre/image-20210420175854241.png\" alt=\"image-20210420175854241\"></p>\n<h2 id=\"6-Service-DNS名称\"><a href=\"#6-Service-DNS名称\" class=\"headerlink\" title=\"6. Service DNS名称\"></a>6. Service DNS名称</h2><p>​        CoreDNS是一个DNS服务器，k8s默认采用，以Pod部署在集群中，CoreDNS服务监视K8S API，为<strong>每个Servicd创建DNS记录用于域名解析</strong>。</p>\n<p>​        ClusterIP A记录格式：<servicename>.<namespace>.svc.cluster.local，如果查询不到要么是svc不存在，要么没有指定命名空间。</p>\n<p><img src=\"../kuberPre/image-20210420185422423.png\" alt=\"image-20210420185422423\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get svc| grep nginx</span> </span><br><span class=\"line\">nginx        NodePort    10.103.247.121   &lt;none&gt;        80:32561/TCP   11d</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get svc -o wide -n kube-system   <span class=\"comment\"># 名叫kube-dns的svc，这个就是dns的IP</span></span></span><br><span class=\"line\">NAME       TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)                  AGE   SELECTOR</span><br><span class=\"line\">kube-dns   ClusterIP   10.96.0.10   &lt;none&gt;        53/UDP,53/TCP,9153/TCP   11d   k8s-app=kube-dns</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">  kubectl run -it --image=busybox:1.28.4 -- sh</span></span><br><span class=\"line\">/ # nslookup nginx   # 查看nginx的解析信息</span><br><span class=\"line\">Server:    10.96.0.10</span><br><span class=\"line\">Address 1: 10.96.0.10 kube-dns.kube-system.svc.cluster.local</span><br><span class=\"line\"></span><br><span class=\"line\">Name:      nginx</span><br><span class=\"line\">Address 1: 10.103.247.121 nginx.default.svc.cluster.local</span><br><span class=\"line\"></span><br><span class=\"line\">/ # cat /etc/resolv.conf </span><br><span class=\"line\">search default.svc.cluster.local svc.cluster.local cluster.local</span><br><span class=\"line\">nameserver 10.96.0.10</span><br><span class=\"line\">options ndots:5</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 在其他node上删除nginx这个svc,再次查询nginx的解析信息</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl delete svc nginx</span></span><br><span class=\"line\">service &quot;nginx&quot; deleted</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 在次查询Nginx的解析信息</span></span><br><span class=\"line\">/ # nslookup nginx</span><br><span class=\"line\">Server:    10.96.0.10</span><br><span class=\"line\">Address 1: 10.96.0.10 kube-dns.kube-system.svc.cluster.local</span><br><span class=\"line\"></span><br><span class=\"line\">nslookup: can&#x27;t resolve &#x27;nginx&#x27;   # 查询失败</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 在其他节点上，新建nginx的svc后，在查看解析信息</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl expose deployment nginx --target-port=80 --port=80 --<span class=\"built_in\">type</span>=NodePort</span></span><br><span class=\"line\">service/nginx exposed</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get svc |grep nginx</span></span><br><span class=\"line\">nginx        NodePort    10.99.5.83   &lt;none&gt;        80:31031/TCP   20s  # nginx的IP地址已经发生了变化</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 再一次解析</span></span><br><span class=\"line\">/ # nslookup nginx</span><br><span class=\"line\">Server:    10.96.0.10</span><br><span class=\"line\">Address 1: 10.96.0.10 kube-dns.kube-system.svc.cluster.local</span><br><span class=\"line\"></span><br><span class=\"line\">Name:      nginx</span><br><span class=\"line\">Address 1: 10.99.5.83 nginx.default.svc.cluster.local  # 解析成功</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","comments":true,"permalink":"https://qingdalf.github.io/2021-05/kuberService/","categories":[{"name":"kubernets","slug":"kubernets","permalink":"https://qingdalf.github.io/categories/kubernets/"}],"tags":[]},{"title":"项目生命周期","date":"2021-05-05T11:18:43.000Z","path":"2021-05/kuberLifeCycle/","content":"<h2 id=\"1-项目生命周期：\"><a href=\"#1-项目生命周期：\" class=\"headerlink\" title=\"1 项目生命周期：\"></a>1 项目生命周期：</h2><p><img src=\"../kuberPre/image-20210414150353944.png\" alt=\"image-20210414150353944\"></p>\n<h2 id=\"2-如何将应用部署到k8s中？\"><a href=\"#2-如何将应用部署到k8s中？\" class=\"headerlink\" title=\"2 如何将应用部署到k8s中？\"></a>2 如何将应用部署到k8s中？</h2><h3 id=\"2-1镜像构建\"><a href=\"#2-1镜像构建\" class=\"headerlink\" title=\"2.1镜像构建\"></a>2.1镜像构建</h3><span id=\"more\"></span>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker bulid image:tag  ./</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-部署：部署应用-暴露端口\"><a href=\"#2-2-部署：部署应用-暴露端口\" class=\"headerlink\" title=\"2.2 部署：部署应用+暴露端口\"></a>2.2 部署：部署应用+暴露端口</h3><h4 id=\"2-2-1-部署Pod\"><a href=\"#2-2-1-部署Pod\" class=\"headerlink\" title=\"2.2.1 部署Pod\"></a>2.2.1 部署Pod</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 方法1：通过命令行部署应用，使用较少，常用于测试</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubect create deployment deploy_name --image=image_name:tag --replicas=3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 方式2：通过yaml文件部署应用</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl apply -f xxx.yaml</span></span><br></pre></td></tr></table></figure>\n\n<p>两种部署方式案例</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方法1：命令行，部署一个名叫web的deployment，镜像是nginx:latest，副本数是3个</span></span><br><span class=\"line\"><span class=\"comment\"># kubectl create deployment web --image=nginx:latest --replicas=3  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方法2：编写yaml文件</span></span><br><span class=\"line\"><span class=\"comment\"># vim deploy_web.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">web</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">web</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">web</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">web</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">nginx:latest</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">&quot;0.5&quot;</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">&quot;128Mi&quot;</span></span><br><span class=\"line\">          <span class=\"attr\">limits:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">&quot;0.6&quot;</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">&quot;256Mi&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 部署Pod</span></span><br><span class=\"line\"><span class=\"comment\"># kubectl apply -f deploy_web.yaml</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看pod和deploy</span></span><br><span class=\"line\"><span class=\"comment\"># kubectl get pod,deploy -o wide</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-2-暴露端口\"><a href=\"#2-2-2-暴露端口\" class=\"headerlink\" title=\"2.2.2 暴露端口\"></a>2.2.2 暴露端口</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 方法1：通过命令行部署应用，使用较少，常用于测试</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubect expose deployment deploy_name  --port=xx --tagert-port=xx  --<span class=\"built_in\">type</span>=NodePort</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 方式2：通过yaml文件部署应用</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl apply -f xxx.yaml</span></span><br></pre></td></tr></table></figure>\n\n<p>两种暴露端口的案例</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方法1：命令行</span></span><br><span class=\"line\"><span class=\"comment\"># # kubectl expose deployment web  --port=80 --target-port=80 --type=NodePort</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方法2：yaml文件</span></span><br><span class=\"line\"><span class=\"comment\"># vim deploy_web_svc.ymal</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">web</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">web</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\">    <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">web</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">NodePort</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\"># 暴露端口</span></span><br><span class=\"line\"><span class=\"comment\"># kubectl apply -f deploy_web_svc.ymal</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看svc</span></span><br><span class=\"line\"><span class=\"comment\"># kubectl get svc</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3-应用升级\"><a href=\"#2-3-应用升级\" class=\"headerlink\" title=\"2.3 应用升级\"></a>2.3 应用升级</h3><h4 id=\"2-3-1-升级\"><a href=\"#2-3-1-升级\" class=\"headerlink\" title=\"2.3.1 升级\"></a>2.3.1 升级</h4><p>更新镜像三种方式：</p>\n<ul>\n<li>kubectl apply -f xxx.yaml，直接对yaml文件进行修改，然后apply即可完成升级</li>\n<li>kubectl set image deployment deploy_name  image=image:tag</li>\n<li>kubectl edit deployment deploy_name</li>\n</ul>\n<p>滚动升级：K8s对Pod升级的默认策略，通过使用新版本Pod逐步更新旧版本Pod，实现零停机发布，用户无感知。</p>\n<p><img src=\"../kuberPre/image-20210414153715731.png\" alt=\"image-20210414153715731\"></p>\n<p>升级策略：</p>\n<ul>\n<li>滚动升级，k8s目前仅支持滚动升级</li>\n<li>蓝绿发布</li>\n<li>金丝雀发布</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># k8s中通过下面两个参数来控制一次性升级的pod数量，使用场景是当pod数量过多时，可指定一次性升级的pod个数，从而减少升级时间</span></span><br><span class=\"line\"><span class=\"string\">•maxSurge：滚动更新过程中最大Pod副本数，确保在更新时启动的Pod数量比期望（replicas）Pod数量最大多出25%</span></span><br><span class=\"line\"><span class=\"string\">•maxUnavailable：滚动更新过程中最大不可用Pod副本数，确保在更新时最大25%Pod数量不可用，即确保75%Pod数量是可用状态。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># yaml文件格式如下：</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"attr\">revisionHistoryLimit:</span> <span class=\"number\">10</span> <span class=\"comment\"># RS历史版本保存数量</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">web</span></span><br><span class=\"line\">  <span class=\"attr\">strategy:</span>          <span class=\"comment\">#该字段指定升级策略</span></span><br><span class=\"line\">    <span class=\"attr\">rollingUpdate:</span></span><br><span class=\"line\">      <span class=\"attr\">maxSurge:</span> <span class=\"number\">25</span><span class=\"string\">%</span></span><br><span class=\"line\">      <span class=\"attr\">maxUnavailable:</span> <span class=\"number\">25</span><span class=\"string\">%</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">RollingUpdate</span></span><br></pre></td></tr></table></figure>\n\n<p>升级过程：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get rs   <span class=\"comment\"># 查看副本数</span></span></span><br><span class=\"line\">NAME                   DESIRED   CURRENT   READY   AGE</span><br><span class=\"line\">java-demo-56d54df448   3         3         3       3d17h</span><br><span class=\"line\">nginx-6799fc88d8       3         3         3       4d16h</span><br><span class=\"line\">web-86cd4d65b9         3         3         3       3d17h</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get deployment   <span class=\"comment\"># 查看deploy</span></span></span><br><span class=\"line\">NAME        READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class=\"line\">java-demo   3/3     3            3           3d17h</span><br><span class=\"line\">nginx       3/3     3            3           4d16h</span><br><span class=\"line\">web         3/3     3            3           3d17h</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pods | grep web   <span class=\"comment\"># 查看与web对应的pod</span></span></span><br><span class=\"line\">web-86cd4d65b9-554kq         1/1     Running   0          3d17h</span><br><span class=\"line\">web-86cd4d65b9-65nkq         1/1     Running   0          3d17h</span><br><span class=\"line\">web-86cd4d65b9-7zml9         1/1     Running   0          3d17h</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl describe deployment web   <span class=\"comment\"># 查看详细信息</span></span></span><br><span class=\"line\">Name:                   web</span><br><span class=\"line\">Namespace:              default</span><br><span class=\"line\">CreationTimestamp:      Sat, 10 Apr 2021 22:17:18 +0800</span><br><span class=\"line\">Labels:                 app=web</span><br><span class=\"line\">Annotations:            deployment.kubernetes.io/revision: 1</span><br><span class=\"line\">Selector:               app=web</span><br><span class=\"line\">Replicas:               3 desired | 3 updated | 3 total | 3 available | 0 unavailable</span><br><span class=\"line\">StrategyType:           RollingUpdate</span><br><span class=\"line\">MinReadySeconds:        0</span><br><span class=\"line\">RollingUpdateStrategy:  25% max unavailable, 25% max surge</span><br><span class=\"line\">Pod Template:</span><br><span class=\"line\">  Labels:  app=web</span><br><span class=\"line\">  Containers:</span><br><span class=\"line\">   nginx:</span><br><span class=\"line\">    Image:        nginx:latest   # 升级前的nginx镜像版本</span><br><span class=\"line\">    Port:         &lt;none&gt;</span><br><span class=\"line\">    Host Port:    &lt;none&gt;</span><br><span class=\"line\">    Environment:  &lt;none&gt;</span><br><span class=\"line\">    Mounts:       &lt;none&gt;</span><br><span class=\"line\">  Volumes:        &lt;none&gt;</span><br><span class=\"line\">Conditions:</span><br><span class=\"line\">  Type           Status  Reason</span><br><span class=\"line\">  ----           ------  ------</span><br><span class=\"line\">  Available      True    MinimumReplicasAvailable</span><br><span class=\"line\">  Progressing    True    NewReplicaSetAvailable</span><br><span class=\"line\">OldReplicaSets:  &lt;none&gt;</span><br><span class=\"line\">NewReplicaSet:   web-86cd4d65b9 (3/3 replicas created)</span><br><span class=\"line\">Events:          &lt;none&gt;   # 没有日志输出</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 修改web的镜像为nginx:1.15</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl <span class=\"built_in\">set</span> image deployment web nginx=nginx:1.15</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get rs</span></span><br><span class=\"line\">NAME                   DESIRED   CURRENT   READY   AGE</span><br><span class=\"line\">java-demo-56d54df448   3         3         3       3d17h</span><br><span class=\"line\">nginx-6799fc88d8       3         3         3       4d16h</span><br><span class=\"line\">web-586db47859         2         2         1       63s    # 新建了一个关于web的rs</span><br><span class=\"line\">web-86cd4d65b9         2         2         2       3d17h</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pod | grep web</span></span><br><span class=\"line\">web-586db47859-5kwj6         0/1     ContainerCreating   0          14s  # 新建pod</span><br><span class=\"line\">web-586db47859-tqxll         1/1     Running             0          54s</span><br><span class=\"line\">web-86cd4d65b9-554kq         1/1     Running             0          3d17h</span><br><span class=\"line\">web-86cd4d65b9-7zml9         1/1     Running             0          3d17h</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 升级完成后的Pod</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pod | grep web</span></span><br><span class=\"line\">web-586db47859-5kwj6         1/1     Running   0          3m20s</span><br><span class=\"line\">web-586db47859-r58g5         1/1     Running   0          2m49s</span><br><span class=\"line\">web-586db47859-tqxll         1/1     Running   0          4m</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 升级完成后，存在两个关于web的rs，一个数值均为0(升级前的rs)，另一个是更改后关于web的rs</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get rs</span></span><br><span class=\"line\">NAME                   DESIRED   CURRENT   READY   AGE</span><br><span class=\"line\">java-demo-56d54df448   3         3         3       3d17h</span><br><span class=\"line\">nginx-6799fc88d8       3         3         3       4d16h</span><br><span class=\"line\">web-586db47859         3         3         3       2m34s   # 新版本web的rs</span><br><span class=\"line\">web-86cd4d65b9         0         0         0       3d17h   # 旧版本web的rs</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看升级日志</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl describe deployment web</span></span><br><span class=\"line\">Name:                   web</span><br><span class=\"line\">Namespace:              default</span><br><span class=\"line\">CreationTimestamp:      Sat, 10 Apr 2021 22:17:18 +0800</span><br><span class=\"line\">Labels:                 app=web</span><br><span class=\"line\">Annotations:            deployment.kubernetes.io/revision: 2</span><br><span class=\"line\">Selector:               app=web</span><br><span class=\"line\">Replicas:               3 desired | 3 updated | 3 total | 3 available | 0 unavailable</span><br><span class=\"line\">StrategyType:           RollingUpdate</span><br><span class=\"line\">MinReadySeconds:        0</span><br><span class=\"line\">RollingUpdateStrategy:  25% max unavailable, 25% max surge</span><br><span class=\"line\">Pod Template:</span><br><span class=\"line\">  Labels:  app=web</span><br><span class=\"line\">  Containers:</span><br><span class=\"line\">   nginx:</span><br><span class=\"line\">    Image:        nginx:1.15   # 升级后的镜像版本</span><br><span class=\"line\">    Port:         &lt;none&gt;</span><br><span class=\"line\">    Host Port:    &lt;none&gt;</span><br><span class=\"line\">    Environment:  &lt;none&gt;</span><br><span class=\"line\">    Mounts:       &lt;none&gt;</span><br><span class=\"line\">  Volumes:        &lt;none&gt;</span><br><span class=\"line\">Conditions:</span><br><span class=\"line\">  Type           Status  Reason</span><br><span class=\"line\">  ----           ------  ------</span><br><span class=\"line\">  Available      True    MinimumReplicasAvailable</span><br><span class=\"line\">  Progressing    True    NewReplicaSetAvailable</span><br><span class=\"line\">OldReplicaSets:  &lt;none&gt;</span><br><span class=\"line\">NewReplicaSet:   web-586db47859 (3/3 replicas created)</span><br><span class=\"line\">Events:</span><br><span class=\"line\">  Type    Reason             Age    From                   Message</span><br><span class=\"line\">  ----    ------             ----   ----                   -------</span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\"> 新建一个新版本的pod</span></span><br><span class=\"line\">  Normal  ScalingReplicaSet  5m2s   deployment-controller  Scaled up replica set web-586db47859 to 1</span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\"> 将旧版本的pod的数量减少到2个，此时总pod的数量仍旧是3个</span></span><br><span class=\"line\">  Normal  ScalingReplicaSet  4m22s  deployment-controller  Scaled down replica set web-86cd4d65b9 to 2</span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\"> 新建第二个新版本的pod</span></span><br><span class=\"line\">  Normal  ScalingReplicaSet  4m22s  deployment-controller  Scaled up replica set web-586db47859 to 2</span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\"> 将旧版本的pod的数量减少到1个，此时总pod的数量仍旧是3个</span></span><br><span class=\"line\">  Normal  ScalingReplicaSet  3m51s  deployment-controller  Scaled down replica set web-86cd4d65b9 to 1</span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\"> 新建第三个新版本的pod</span></span><br><span class=\"line\">  Normal  ScalingReplicaSet  3m51s  deployment-controller  Scaled up replica set web-586db47859 to 3</span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\"> 将旧版本的pod的数量减少到0个，此时总pod的数量仍旧是3个</span></span><br><span class=\"line\">  Normal  ScalingReplicaSet  3m34s  deployment-controller  Scaled down replica set web-86cd4d65b9 to 0</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 从上面的日志中可以看出，k8s会先创建一个新的rs，k8s在新建好一个新版本的pod后，就停止一个旧版本的pod，在此期间副本数永远保持deploy定义的副本数</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 滚动升级在K8s中的实现：</span></span><br><span class=\"line\">- 1个Deployment</span><br><span class=\"line\">- 2个ReplicaSet</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-2-水平扩容\"><a href=\"#2-3-2-水平扩容\" class=\"headerlink\" title=\"2.3.2 水平扩容\"></a>2.3.2 水平扩容</h4><p>​        根据业务需求，扩容和缩容是对现有业务容器进行增加和减少，在不能满足业务需求时，增加容器数量；在容器产能过剩时，减少容器数量。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 方法1：直接修改yaml文件中的replicas的值，然后直接apply</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">　kubectl apply -f xxx.yaml</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 方法2：使用命令行</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl scale deployment deploy_name --replicas=xx</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>案例</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pod | grep web</span></span><br><span class=\"line\">web-586db47859-5kwj6         1/1     Running   0          38m</span><br><span class=\"line\">web-586db47859-r58g5         1/1     Running   0          38m</span><br><span class=\"line\">web-586db47859-tqxll         1/1     Running   0          39m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl scale deployment web --replicas=5</span></span><br><span class=\"line\">deployment.apps/web scaled</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pod | grep web   <span class=\"comment\"># 现在正扩容副本数到5个</span></span></span><br><span class=\"line\">web-586db47859-5kwj6         1/1     Running             0          39m</span><br><span class=\"line\">web-586db47859-r58g5         1/1     Running             0          38m</span><br><span class=\"line\">web-586db47859-tqxll         1/1     Running             0          40m</span><br><span class=\"line\">web-586db47859-x5256         0/1     ContainerCreating   0          2s</span><br><span class=\"line\">web-586db47859-x77sn         0/1     ContainerCreating   0          2s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看日志</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl describe deployment web</span></span><br><span class=\"line\">···</span><br><span class=\"line\">Events:</span><br><span class=\"line\">  Type    Reason             Age   From                   Message</span><br><span class=\"line\">  ----    ------             ----  ----                   -------</span><br><span class=\"line\">  Normal  ScalingReplicaSet  40m   deployment-controller  Scaled up replica set web-586db47859 to 1</span><br><span class=\"line\">  Normal  ScalingReplicaSet  40m   deployment-controller  Scaled down replica set web-86cd4d65b9 to 2</span><br><span class=\"line\">  Normal  ScalingReplicaSet  40m   deployment-controller  Scaled up replica set web-586db47859 to 2</span><br><span class=\"line\">  Normal  ScalingReplicaSet  39m   deployment-controller  Scaled down replica set web-86cd4d65b9 to 1</span><br><span class=\"line\">  Normal  ScalingReplicaSet  39m   deployment-controller  Scaled up replica set web-586db47859 to 3</span><br><span class=\"line\">  Normal  ScalingReplicaSet  39m   deployment-controller  Scaled down replica set web-86cd4d65b9 to 0</span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\"> 提示将副本数增加到5个</span></span><br><span class=\"line\">  Normal  ScalingReplicaSet  45s   deployment-controller  Scaled up replica set web-586db47859 to 5</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-3-水平缩容\"><a href=\"#2-3-3-水平缩容\" class=\"headerlink\" title=\"2.3.3 水平缩容\"></a>2.3.3 水平缩容</h4><p>方法同上，只要将replicas的值该小即可</p>\n<p><strong>案例</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl scale deployment web --replicas=2</span></span><br><span class=\"line\">deployment.apps/web scaled</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pod | grep web  <span class=\"comment\"># 已经在删除多余的pod</span></span></span><br><span class=\"line\">web-586db47859-5kwj6         1/1     Running       0          41m</span><br><span class=\"line\">web-586db47859-r58g5         0/1     Terminating   0          41m  </span><br><span class=\"line\">web-586db47859-tqxll         1/1     Running       0          42m</span><br><span class=\"line\">web-586db47859-x5256         0/1     Terminating   0          2m23s</span><br><span class=\"line\">web-586db47859-x77sn         0/1     Terminating   0          2m23s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 再次查看日志</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl describe deployment web</span></span><br><span class=\"line\">···</span><br><span class=\"line\">Events:</span><br><span class=\"line\">  Type    Reason             Age   From                   Message</span><br><span class=\"line\">  ----    ------             ----  ----                   -------</span><br><span class=\"line\">  Normal  ScalingReplicaSet  43m   deployment-controller  Scaled up replica set web-586db47859 to 1</span><br><span class=\"line\">  Normal  ScalingReplicaSet  42m   deployment-controller  Scaled down replica set web-86cd4d65b9 to 2</span><br><span class=\"line\">  Normal  ScalingReplicaSet  42m   deployment-controller  Scaled up replica set web-586db47859 to 2</span><br><span class=\"line\">  Normal  ScalingReplicaSet  41m   deployment-controller  Scaled down replica set web-86cd4d65b9 to 1</span><br><span class=\"line\">  Normal  ScalingReplicaSet  41m   deployment-controller  Scaled up replica set web-586db47859 to 3</span><br><span class=\"line\">  Normal  ScalingReplicaSet  41m   deployment-controller  Scaled down replica set web-86cd4d65b9 to 0</span><br><span class=\"line\">  Normal  ScalingReplicaSet  3m4s  deployment-controller  Scaled up replica set web-586db47859 to 5</span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\"> 显示将副本数缩小到2个</span></span><br><span class=\"line\">  Normal  ScalingReplicaSet  44s   deployment-controller  Scaled down replica set web-586db47859 to 2</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-4-回滚\"><a href=\"#2-4-回滚\" class=\"headerlink\" title=\"2.4 回滚\"></a>2.4 回滚</h3><p>​        回滚是在升级失败时，回滚到上一个版本(或上n个版本)，回滚是重新部署某一次部署时的状态，即当时版本所有配置</p>\n<p>kubectl rollout history deployment deploy_name # 查看历史发布版本<br>kubectl rollout undo deployment deploy_name # 回滚上一个版本<br>kubectl rollout undo deployment deploy_name –to-revision=2 # 回滚历史指定版本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看历史更新的版本</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl rollout <span class=\"built_in\">history</span> deployment web</span></span><br><span class=\"line\">deployment.apps/web </span><br><span class=\"line\">REVISION  CHANGE-CAUSE</span><br><span class=\"line\">1         &lt;none&gt;    # 此处默认没有记录镜像的版本信息</span><br><span class=\"line\">2         &lt;none&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 此处为了实验效果，我们进行多次升级操作</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl  <span class=\"built_in\">set</span> image deployment web nginx=nginx:1.10</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl  <span class=\"built_in\">set</span> image deployment web nginx=nginx:1.12</span></span><br><span class=\"line\"><span class=\"meta\"> #</span><span class=\"bash\"> 总结下：目前总共做了三次升级，原版本是latest，第一次升级是nginx:1.15，第二次是nginx:1.10，第三次是nginx:1.10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 通过describe和rs查看版本信息</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 查看rs</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get rs          <span class=\"comment\"># 总共有四个web版本</span></span></span><br><span class=\"line\">NAME                   DESIRED   CURRENT   READY   AGE</span><br><span class=\"line\">java-demo-56d54df448   3         3         3       3d20h</span><br><span class=\"line\">nginx-6799fc88d8       3         3         3       4d19h</span><br><span class=\"line\">web-55b4d6d556         0         0         0       3m54s</span><br><span class=\"line\">web-586db47859         0         0         0       3h4m</span><br><span class=\"line\">web-649f896474         2         2         2       84s   # 现在的web版本</span><br><span class=\"line\">web-86cd4d65b9         0         0         0       3d20h</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看名称为web的deployment的版本更新次数，总共四次</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl describe deployment web | grep -i revision</span></span><br><span class=\"line\">Annotations:            deployment.kubernetes.io/revision: 4</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看没有被升级过的名称为nginx的deployment的升级更新次数，显示为1</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl describe deployment nginx | grep revision</span></span><br><span class=\"line\">Annotations:            deployment.kubernetes.io/revision: 1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl rollout <span class=\"built_in\">history</span> deployment web   <span class=\"comment\"># 查看名称为web的deployment此时历史更新的版本</span></span></span><br><span class=\"line\">deployment.apps/web </span><br><span class=\"line\">REVISION  CHANGE-CAUSE</span><br><span class=\"line\">1         &lt;none&gt;</span><br><span class=\"line\">2         &lt;none&gt;</span><br><span class=\"line\">3         &lt;none&gt;</span><br><span class=\"line\">4         &lt;none&gt;  # 通过该命令查询出来的还是没有版本信息</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看方式1：通过rs的名称去查看每个rs对应的版本号，费时费力，不适用于频繁更新的应用</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl describe rs web-86cd4d65b9  <span class=\"comment\"># 通过rs的名称去相信信息</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 通过rs直接过滤出所有的应用和系统版本</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl describe rs | grep -iE  <span class=\"string\">&quot;revision|image&quot;</span></span></span><br><span class=\"line\">                deployment.kubernetes.io/revision: 1</span><br><span class=\"line\">    Image:        lizhenliang/java-demo</span><br><span class=\"line\">                deployment.kubernetes.io/revision: 1</span><br><span class=\"line\">    Image:        nginx</span><br><span class=\"line\">                deployment.kubernetes.io/revision: 3</span><br><span class=\"line\">    Image:        nginx:1.10</span><br><span class=\"line\">                deployment.kubernetes.io/revision: 2</span><br><span class=\"line\">    Image:        nginx:1.15</span><br><span class=\"line\">                deployment.kubernetes.io/revision: 4</span><br><span class=\"line\">    Image:        nginx:1.12</span><br><span class=\"line\">                deployment.kubernetes.io/revision: 1  </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 此处的revision: 1，跟该命令对应kubectl rollout <span class=\"built_in\">history</span> deployment web</span></span><br><span class=\"line\">    Image:        nginx:latest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 通过上面的输出，我们可以得出下面的结果</span></span><br><span class=\"line\">REVISION  CHANGE-CAUSE</span><br><span class=\"line\">1         nginx:latest</span><br><span class=\"line\">2         nginx:1.15</span><br><span class=\"line\">3         nginx:1.10</span><br><span class=\"line\">4         nginx:1.12 </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 有了上面的版本信息，我们就可以回滚了,比如我们回退到第二个版本1.15</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl rollout undo deployment web --to-revision=2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 验证版本信息</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pods -o wide | grep web</span></span><br><span class=\"line\">web-586db47859-8bxt7  1/1   Running   0  94s   10.244.154.214   k8s-node-01   &lt;none&gt;   &lt;none&gt;</span><br><span class=\"line\">web-586db47859-dxm8t  1/1   Running   0  114s  10.244.154.213   k8s-node-01   &lt;none&gt;   &lt;none&gt;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> curl -I 10.244.154.213</span></span><br><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">Server: nginx/1.15.12    # 版本信息为1.15，回退成功</span><br><span class=\"line\">Date: Wed, 14 Apr 2021 11:19:39 GMT</span><br><span class=\"line\">Content-Type: text/html</span><br><span class=\"line\">Content-Length: 612</span><br><span class=\"line\">Last-Modified: Tue, 16 Apr 2019 13:08:19 GMT</span><br><span class=\"line\">Connection: keep-alive</span><br><span class=\"line\">ETag: &quot;5cb5d3c3-264&quot;</span><br><span class=\"line\">Accept-Ranges: bytes</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-5-下线\"><a href=\"#2-5-下线\" class=\"headerlink\" title=\"2.5 下线\"></a>2.5 下线</h3><p>​        通过deployment类型创建的Pod，可以通过直接删除deployment来下线应用，通过Pod类型创建的Pod，可以直接删除Pod。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get deployment</span> </span><br><span class=\"line\">NAME        READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class=\"line\">java-demo   3/3     3            3           3d21h</span><br><span class=\"line\">nginx       3/3     3            3           4d19h</span><br><span class=\"line\">web         2/2     2            2           3d21h</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 下面我们删除名叫nginx的deployment</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get deployment     <span class=\"comment\"># 查看deloyment的名称</span></span></span><br><span class=\"line\">NAME        READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class=\"line\">java-demo   3/3     3            3           3d21h</span><br><span class=\"line\">nginx       3/3     3            3           4d19h</span><br><span class=\"line\">web         2/2     2            2           3d21h   # 删除该deploy</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pods | grep nginx  <span class=\"comment\"># 查看删除前的nginx容器</span></span></span><br><span class=\"line\">nginx-6799fc88d8-825ps       1/1     Running   0          4d19h</span><br><span class=\"line\">nginx-6799fc88d8-dt5g7       1/1     Running   0          3d7h</span><br><span class=\"line\">nginx-6799fc88d8-h9fzb       1/1     Running   0          3d7h</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 执行删除命令并查看pod和deploy</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl delete deployment nginx</span></span><br><span class=\"line\">deployment.apps &quot;nginx&quot; deleted</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get deployment nginx   <span class=\"comment\"># 查询不了nginx的deploy了</span></span></span><br><span class=\"line\">Error from server (NotFound): deployments.apps &quot;nginx&quot; not found</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pods | grep nginx   <span class=\"comment\"># 查询不了nginx的容器了</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">   <span class=\"comment\"># 输出为空</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 删除svc</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get svc   <span class=\"comment\"># 查看目前的svc信息</span></span></span><br><span class=\"line\">NAME         TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)        AGE</span><br><span class=\"line\">java-demo    NodePort    10.111.242.80    &lt;none&gt;        80:32133/TCP   3d20h</span><br><span class=\"line\">kubernetes   ClusterIP   10.96.0.1        &lt;none&gt;        443/TCP        5d7h</span><br><span class=\"line\">nginx        NodePort    10.103.247.121   &lt;none&gt;        80:32561/TCP   5d5h</span><br><span class=\"line\">web          NodePort    10.108.74.141    &lt;none&gt;        80:31397/TCP   3d21h</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl delete svc nginx   <span class=\"comment\"># 删除svc</span></span></span><br><span class=\"line\">service &quot;nginx&quot; deleted</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get svc  <span class=\"comment\"># 查看删除nginx后的svc信息</span></span></span><br><span class=\"line\">NAME         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE</span><br><span class=\"line\">java-demo    NodePort    10.111.242.80   &lt;none&gt;        80:32133/TCP   3d20h</span><br><span class=\"line\">kubernetes   ClusterIP   10.96.0.1       &lt;none&gt;        443/TCP        5d7h</span><br><span class=\"line\">web          NodePort    10.108.74.141   &lt;none&gt;        80:31397/TCP   3d21h</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","comments":true,"permalink":"https://qingdalf.github.io/2021-05/kuberLifeCycle/","categories":[{"name":"kubernets","slug":"kubernets","permalink":"https://qingdalf.github.io/categories/kubernets/"}],"tags":[]},{"title":"Pod调度","date":"2021-05-05T11:07:33.000Z","path":"2021-05/kuberScheduler/","content":"<h2 id=\"1-创建一个Pod的流程\"><a href=\"#1-创建一个Pod的流程\" class=\"headerlink\" title=\"1. 创建一个Pod的流程\"></a>1. 创建一个Pod的流程</h2><p><strong>step1</strong> kubectl run/apply创建一个pod，向apiserver发起请求<br><strong>step2</strong> apiserver会将请求的配置写到etcd<br><strong>step3</strong> etcd响应处理结果给apiserver，apiserver响应处理结果给kubectl<br><strong>step4</strong> scheduler收到需要创建pod的请求，根据自己调度算法选择一个合适的节点分配，并将结果反馈给apiserver<br><strong>step5</strong> kubelet收到需要创建我这个节点的pod，再调用容器引擎创建容器，容器引擎将结果反馈给kubelet，kubelet汇总pod状态反馈apiserver</p>\n<span id=\"more\"></span>\n\n<p>​        在创建pod的过程中，少了controller-manager和kube-proxy组件。controller-manager创建工作负载控制器才会用到；kube-proxy创建service才用到。</p>\n<img src=\"../kuberPre/image-20210412155314385.png\" alt=\"image-20210412155314385\" style=\"zoom: 67%;\" />\n\n<center>创建pod流程</center>\n\n<h2 id=\"2-Pod中影响调度的主要因素\"><a href=\"#2-Pod中影响调度的主要因素\" class=\"headerlink\" title=\"2. Pod中影响调度的主要因素\"></a>2. Pod中影响调度的主要因素</h2><h3 id=\"2-1-资源配额–resources\"><a href=\"#2-1-资源配额–resources\" class=\"headerlink\" title=\"2.1 资源配额–resources\"></a>2.1 资源配额–resources</h3><ul>\n<li>资源调度的依据–limits(上限)和requests(下限)<ul>\n<li><strong>容器资源限制</strong>：<ul>\n<li><code>resources.limits.cpu</code>–容器最大能使用的cpu</li>\n<li><code>resources.limits.memory</code>–容器最大能使用的memory</li>\n</ul>\n</li>\n<li><strong>容器最小资源需求</strong>(等同于预分配)：<ul>\n<li><code>resources.requests.cpu</code></li>\n<li><code>resources.requests.memory</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<ol>\n<li><strong>容器最小资源需求</strong>作为容器调度时资源分配的依据</li>\n<li><strong>如果集群中没有节点能满足pod创建的最小资源要求，pod将不会被创建，一直处于pedding状态</strong>。</li>\n</ol>\n</blockquote>\n<ul>\n<li>资源配额注意事项：<ul>\n<li>requests必须小于limits，并且小于宿主机能提供的最大cpu和memory资源</li>\n<li>requests配置建议低于limits的20%-30%</li>\n<li>cpu单位可以是m，也可以是浮点数，m是CPU的一个计量单位，称为毫核，例如节点2C4G，2C=2*1000=2000m，0.5=500m</li>\n<li>如果设置CPU的值是浮点数，会自动转m单位</li>\n<li>如果没有节点满足requests配置要求，pod不会被创建</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-1-1-设置pod使用的宿主机资源\"><a href=\"#2-1-1-设置pod使用的宿主机资源\" class=\"headerlink\" title=\"2.1.1 设置pod使用的宿主机资源\"></a>2.1.1 设置pod使用的宿主机资源</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Pod</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    run: nginx</span><br><span class=\"line\">  name: pod-resources </span><br><span class=\"line\">spec:</span><br><span class=\"line\">  containers:</span><br><span class=\"line\">  - image: nginx</span><br><span class=\"line\">    name: nginx</span><br><span class=\"line\">    resources:            # 资源配额，包括最小配置要求requests和最大使用限制limits</span><br><span class=\"line\">      requests:</span><br><span class=\"line\">        memory: &quot;800Mi&quot;   # 最小内存要求为800M，如果此处的值大于limits中的memory的值，将新建pod失败</span><br><span class=\"line\">        cpu: &quot;0.4&quot;     # 最小cpu要求是0.4核，如果此处的值大于limits中的cpu的值，将新建pod失败</span><br><span class=\"line\">      limits:</span><br><span class=\"line\">        memory: &quot;1Gi&quot;    # 最大能使用的内存是1024M</span><br><span class=\"line\">        cpu: &quot;0.5&quot;       # 最大能使用的cpu是半核，单位会自动转换成m的</span><br></pre></td></tr></table></figure>\n\n<p>新建容器，并查看资源限制信息</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl apply -f pod-resouce.yaml</span> </span><br><span class=\"line\">pod/pod-resources created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl describe pods pod-resources   <span class=\"comment\"># 着重关注下面的Limits和Requests字段</span></span></span><br><span class=\"line\">Name:         pod-resources</span><br><span class=\"line\">Namespace:    default</span><br><span class=\"line\">Priority:     0</span><br><span class=\"line\">Node:         k8s-node-02/10.138.3.63</span><br><span class=\"line\">Start Time:   Mon, 12 Apr 2021 16:38:58 +0800</span><br><span class=\"line\">Labels:       run=nginx</span><br><span class=\"line\">Annotations:  cni.projectcalico.org/podIP: 10.244.44.214/32</span><br><span class=\"line\">              cni.projectcalico.org/podIPs: 10.244.44.214/32</span><br><span class=\"line\">Status:       Running</span><br><span class=\"line\">IP:           10.244.44.214</span><br><span class=\"line\">IPs:</span><br><span class=\"line\">  IP:  10.244.44.214</span><br><span class=\"line\">Containers:</span><br><span class=\"line\">  nginx:</span><br><span class=\"line\">    Container ID:   containerd://657add7043e67b807db3b34d3d18c40d7f82c6620175a86f85b7036d4b205e15</span><br><span class=\"line\">    Image:          nginx</span><br><span class=\"line\">    Image ID:       docker.io/library/nginx@sha256:6b5f5eec0ac03442f3b186d552ce895dce2a54be6cb834358040404a242fd476</span><br><span class=\"line\">    Port:           &lt;none&gt;</span><br><span class=\"line\">    Host Port:      &lt;none&gt;</span><br><span class=\"line\">    State:          Running</span><br><span class=\"line\">      Started:      Mon, 12 Apr 2021 16:39:14 +0800</span><br><span class=\"line\">    Ready:          True</span><br><span class=\"line\">    Restart Count:  0</span><br><span class=\"line\">    Limits:            # 资源限制，如果不做限制，一般不显示这个字段的信息</span><br><span class=\"line\">      cpu:     500m             # cpu限制，默认将单位转换成了毫核</span><br><span class=\"line\">      memory:  1Gi              # memory限制</span><br><span class=\"line\">    Requests:         # 最小资源要求，如果不做限制，一般不显示这个字段的信息</span><br><span class=\"line\">      cpu:        400m          # cpu最小要求400毫核</span><br><span class=\"line\">      memory:     800Mi         # memory最小要求</span><br><span class=\"line\">    Environment:  &lt;none&gt;</span><br><span class=\"line\">    Mounts:</span><br><span class=\"line\">      /var/run/secrets/kubernetes.io/serviceaccount from default-token-bq4pj (ro)</span><br><span class=\"line\">Conditions:</span><br><span class=\"line\">  Type              Status</span><br><span class=\"line\">  Initialized       True </span><br><span class=\"line\">  Ready             True </span><br><span class=\"line\">  ContainersReady   True </span><br><span class=\"line\">  PodScheduled      True </span><br><span class=\"line\">Volumes:</span><br><span class=\"line\">  default-token-bq4pj:</span><br><span class=\"line\">    Type:        Secret (a volume populated by a Secret)</span><br><span class=\"line\">    SecretName:  default-token-bq4pj</span><br><span class=\"line\">    Optional:    false</span><br><span class=\"line\">QoS Class:       Burstable</span><br><span class=\"line\">Node-Selectors:  &lt;none&gt;</span><br><span class=\"line\">Tolerations:     node.kubernetes.io/not-ready:NoExecute op=Exists for 300s</span><br><span class=\"line\">                 node.kubernetes.io/unreachable:NoExecute op=Exists for 300s</span><br><span class=\"line\">Events:</span><br><span class=\"line\">  Type    Reason     Age   From               Message</span><br><span class=\"line\">  ----    ------     ----  ----               -------</span><br><span class=\"line\">  Normal  Scheduled  53s   default-scheduler  Successfully assigned default/pod-resources to k8s-node-02</span><br><span class=\"line\">  Normal  Pulling    53s   kubelet            Pulling image &quot;nginx&quot;</span><br><span class=\"line\">  Normal  Pulled     37s   kubelet            Successfully pulled image &quot;nginx&quot; in 15.312652246s</span><br><span class=\"line\">  Normal  Created    37s   kubelet            Created container nginx</span><br><span class=\"line\">  Normal  Started    37s   kubelet            Started container nginx</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-1-2-查看集群中节点资源分配情况\"><a href=\"#2-1-2-查看集群中节点资源分配情况\" class=\"headerlink\" title=\"2.1.2 查看集群中节点资源分配情况\"></a>2.1.2 查看集群中节点资源分配情况</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl describe node k8s-master</span></span><br><span class=\"line\">····</span><br><span class=\"line\">  Namespace      Name                    CPU Requests  CPU Limits Memory Requests Memory Limits   AGE</span><br><span class=\"line\">  --------- ---- ------------  ----------  ---------------  -------------  ---</span><br><span class=\"line\">  kube-system  calico-kube-controllers-69496d8b75-vlphv  0 (0%)    0 (0%)  0 (0%)     0 (0%)      3d4h</span><br><span class=\"line\">  kube-system  calico-node-jppch                        250m (12%) 0 (0%)  0 (0%)     0 (0%)      3d4h</span><br><span class=\"line\">  kube-system  coredns-7f89b7bc75-b2ms6                 100m (5%)  0 (0%)  70Mi (1%)  170Mi (4%)  3d5h</span><br><span class=\"line\">  kube-system  coredns-7f89b7bc75-hr2sk                 100m (5%)  0 (0%)  70Mi (1%)  170Mi (4%)  3d5h</span><br><span class=\"line\">  kube-system  etcd-k8s-master                          100m (5%)  0 (0%)  100Mi (2%)  0 (0%)     3d5h</span><br><span class=\"line\">  kube-system  kube-apiserver-k8s-master                250m (12%) 0 (0%)   0 (0%)     0 (0%)     3d5h</span><br><span class=\"line\">  kube-system  kube-controller-manager-k8s-master 200m (10%) 0 (0%) 0 (0%) 0 (0%)  2d16h</span><br><span class=\"line\">  kube-system  kube-proxy-p6hmt                          0 (0%)    0 (0%)   0 (0%)     0 (0%)     3d5h</span><br><span class=\"line\">  kube-system  kube-scheduler-k8s-master                 100m (5%) 0 (0%)   0 (0%)     0 (0%)     2d16h</span><br><span class=\"line\"></span><br><span class=\"line\">Allocated resources:</span><br><span class=\"line\">  (Total limits may be over 100 percent, i.e., overcommitted.)</span><br><span class=\"line\">  Resource           Requests     Limits</span><br><span class=\"line\">  --------           --------     ------</span><br><span class=\"line\">  cpu                1100m (55%)  0 (0%)</span><br><span class=\"line\">  memory             240Mi (6%)   340Mi (9%)</span><br><span class=\"line\">  ephemeral-storage  100Mi (0%)   0 (0%)</span><br><span class=\"line\">  hugepages-1Gi      0 (0%)       0 (0%)</span><br><span class=\"line\">  hugepages-2Mi      0 (0%)       0 (0%)</span><br><span class=\"line\">····</span><br></pre></td></tr></table></figure>\n\n<p>关于资源配额的几个常见问题：</p>\n<p><strong>Q1</strong>：如果requests配置超出节点配置会怎么样？<br>A：pod无法分配，pendding状态<br><strong>Q2</strong>：如果只是limits超出节点配置会怎么样？<br>A：Pod正常分配<br><strong>Q3</strong>：如果limits设置太大（超出节点配置）会怎么样？<br>A：Pod可以分配，可以超卖，但是如果超出节点配置比较多，出现节点资源打满几率就比较</p>\n<h3 id=\"2-2-调度策略–nodeSelector-amp-nodeAffinity\"><a href=\"#2-2-调度策略–nodeSelector-amp-nodeAffinity\" class=\"headerlink\" title=\"2.2 调度策略–nodeSelector &amp; nodeAffinity\"></a>2.2 调度策略–nodeSelector &amp; nodeAffinity</h3><h4 id=\"2-2-1-nodeSelector\"><a href=\"#2-2-1-nodeSelector\" class=\"headerlink\" title=\"2.2.1 nodeSelector\"></a>2.2.1 nodeSelector</h4><p>​        nodeSelector：<strong>用于将Pod调度到匹配Label的Node上，如果没有匹配的标签会调度失败</strong>。<br>作用：</p>\n<ul>\n<li>约束Pod到特定的节点运行</li>\n<li>完全匹配节点标签(必须满足)，如果匹配不到，则Pod的状态将一直为Pendding</li>\n</ul>\n<p>应用场景：</p>\n<ul>\n<li>专用节点：根据业务线将Node分组管理</li>\n<li>配备特殊硬件：部分Node配有SSD硬盘、GPU等</li>\n</ul>\n<p><strong>案例：确保Pod分配到具有SSD硬盘的节点上</strong></p>\n<ul>\n<li><strong>给节点打标签</strong></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get nodes</span></span><br><span class=\"line\">NAME          STATUS   ROLES                  AGE    VERSION</span><br><span class=\"line\">k8s-master    Ready    control-plane,master   3d5h   v1.20.0</span><br><span class=\"line\">k8s-node-01   Ready    &lt;none&gt;                 3d3h   v1.20.0</span><br><span class=\"line\">k8s-node-02   Ready    &lt;none&gt;                 3d3h   v1.20.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get nodes --show-labels   <span class=\"comment\"># 查看node节点的标签</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl label node k8s-node-01 disktype=ssd   <span class=\"comment\"># 给k8s-node-01宿主机打标签</span></span></span><br><span class=\"line\">node/k8s-node-01 labeled</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 验证结果，只有名称为k8s-node-01的节点被打上了disktype=ssd的标签</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get nodes -l disktype=ssd</span>              </span><br><span class=\"line\">NAME          STATUS   ROLES    AGE    VERSION</span><br><span class=\"line\">k8s-node-01   Ready    &lt;none&gt;   3d3h   v1.20.0</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>编写yaml文件时指定节点标签</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> vim ssd-pod.yaml</span></span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Pod</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    run: nginx</span><br><span class=\"line\">  name: pod-nodeselector </span><br><span class=\"line\">spec:</span><br><span class=\"line\">  nodeSelector:        # 指定将要被调度的node的标签，如果有多个node符合标准，k8s将选择含有该标签的最优的一个节点</span><br><span class=\"line\">    disktype: &quot;ssd&quot;</span><br><span class=\"line\">  containers:</span><br><span class=\"line\">  - image: nginx</span><br><span class=\"line\">    name: nginx</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>执行yaml文件并验证</strong></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl apply -f ssd-pod.yaml    <span class=\"comment\"># 新建容器</span></span></span><br><span class=\"line\">pod/pod-nodeselector created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pods  -o wide | grep pod-nodeselector   <span class=\"comment\"># 该pod被调度到k8s-node-01节点上</span></span></span><br><span class=\"line\">NAME              READY   STATUS RESTARTS AGE     IP           NODE    NOMINATED NODE  READINESS GATES</span><br><span class=\"line\">pod-nodeselector  1/1     Running   0      58s 10.244.154.203  k8s-node-01   &lt;none&gt;    &lt;none&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-2-nodeAffinity\"><a href=\"#2-2-2-nodeAffinity\" class=\"headerlink\" title=\"2.2.2 nodeAffinity\"></a>2.2.2 nodeAffinity</h4><p>​        <strong>nodeAffinity</strong>：节点亲和性，与nodeSelector(必须满足，不满足pod状态将为pendding)作用一样，但相比更灵活，满足更多条件，诸如：</p>\n<ul>\n<li><p>匹配更多的逻辑组合，不只是字符串的完全相等，操作符：In(包含)、NotIn(不包含)、Exists(存在)、DoesNotExist(不存在)、Gt(大于)、Lt(小于)</p>\n</li>\n<li><p>调度策略可分为软策略和硬策略，而不是硬性要求</p>\n<ul>\n<li><p>硬（required）：必须满足</p>\n</li>\n<li><p>软（preferred）：尝试满足，但不保证</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>硬性策略案例–必须满足策略，否则不创建pod</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># vim node-affinity.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pod-nodeaffinity</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">affinity:</span></span><br><span class=\"line\">    <span class=\"attr\">nodeAffinity:</span></span><br><span class=\"line\">      <span class=\"attr\">requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class=\"line\">        <span class=\"attr\">nodeSelectorTerms:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">matchExpressions:</span>   <span class=\"comment\"># 匹配disktype=ssd的node节点，必须要满足才能被创建</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">disktype</span></span><br><span class=\"line\">            <span class=\"attr\">operator:</span> <span class=\"string\">In</span></span><br><span class=\"line\">            <span class=\"attr\">values:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">ssd</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">web</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nginx</span></span><br></pre></td></tr></table></figure>\n\n<p>软性策略案例–即使不满足，也会创建pod</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># vim node-affinity.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pod-nodeaffinity</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">affinity:</span></span><br><span class=\"line\">    <span class=\"attr\">nodeAffinity:</span></span><br><span class=\"line\">      <span class=\"attr\">preferredDuringSchedulingIgnoredDuringExecution:</span>  <span class=\"comment\"># 跟硬性要求第一个单词不一样</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">wight:</span> <span class=\"number\">1</span>   <span class=\"comment\"># 设置权重，权重取值范围是1-100，值越大，期望越大，没有匹配的也会创建pod</span></span><br><span class=\"line\">        <span class=\"attr\">preferrce:</span>     <span class=\"comment\"># 比硬性多该行</span></span><br><span class=\"line\">          <span class=\"attr\">matchExpressions:</span>   <span class=\"comment\"># 匹配disktype=ssd的node节点，跟硬性要求不同，没有横杆</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">gpu</span></span><br><span class=\"line\">            <span class=\"attr\">operator:</span> <span class=\"string\">In</span></span><br><span class=\"line\">            <span class=\"attr\">values:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">&quot;yes&quot;</span>   <span class=\"comment\"># yes、no这种是yaml中的关键字，因此需要用引号，否则产生歧义</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">web</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nginx</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-Taint-污点-amp-Tolerations-污点容忍\"><a href=\"#3-Taint-污点-amp-Tolerations-污点容忍\" class=\"headerlink\" title=\"3. Taint(污点) &amp; Tolerations(污点容忍)\"></a>3. Taint(污点) &amp; Tolerations(污点容忍)</h2><p>Taints：避免Pod调度到特定Node上<br>Tolerations：允许Pod调度到持有Taints的Node上<br>应用场景：</p>\n<ul>\n<li>专用节点：根据业务线将Node分组管理，<strong>希望在默认情况下不调度该节点</strong>，只有配置了污点容忍才允许分配</li>\n<li>配备特殊硬件：部分Node配有SSD硬盘、GPU，希望在默认情况下不调度该节点，只有配置了污点容忍才允许分配</li>\n<li>基于Taint的驱逐</li>\n</ul>\n<p>给节点打污点的步骤和方法：</p>\n<ul>\n<li>第一步：给节点添加污点<ul>\n<li>格式：kubectl taint node [node] key=value:[effect]<br>例如：kubectl taint node k8s-node1 gpu=yes:NoSchedule</li>\n<li>验证：kubectl describe node k8s-node1 |grep Taint</li>\n<li>其中[effect] 可取值：<ul>\n<li>NoSchedule ：一定不能被调度</li>\n<li>PreferNoSchedule：尽量不要调度，非必须配置容忍</li>\n<li>NoExecute：不仅不会调度，还会驱逐Node上已有的Pod</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>第二步：添加污点容忍（tolrations）字段到Pod配置中</li>\n<li>去掉污点：kubectl taint node [node] key:[effect]-</li>\n</ul>\n<h3 id=\"3-1-给节点添加污点\"><a href=\"#3-1-给节点添加污点\" class=\"headerlink\" title=\"3.1 给节点添加污点\"></a>3.1 给节点添加污点</h3><ul>\n<li>格式：kubectl taint node [node] key=value:[effect]<br>例如：kubectl taint node k8s-node1 gpu=yes:NoSchedule</li>\n<li>验证：kubectl describe node k8s-node1 |grep Taint</li>\n<li>其中[effect] 可取值：<ul>\n<li>NoSchedule ：一定不能被调度</li>\n<li>PreferNoSchedule：尽量不要调度，非必须配置容忍</li>\n<li>NoExecute：不仅不会调度，还会驱逐Node上已有的Pod</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3-1-1-查看集群节点污点情况\"><a href=\"#3-1-1-查看集群节点污点情况\" class=\"headerlink\" title=\"3.1.1 查看集群节点污点情况\"></a>3.1.1 查看集群节点污点情况</h4><ul>\n<li><strong>查看指定节点污点</strong></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> master节点默认被打了污点</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl describe nodes k8s-master| grep -i taint</span></span><br><span class=\"line\">Taints:             node-role.kubernetes.io/master:NoSchedule   # master默认被打了污点</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> node节点默认没有污点</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl describe nodes k8s-node-01| grep -i taint</span></span><br><span class=\"line\">Taints:             &lt;none&gt;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl describe nodes k8s-node-02| grep -i taint</span></span><br><span class=\"line\">Taints:             &lt;none&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看所有节点污点情况</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl describe node | grep -i taint</span></span><br><span class=\"line\">Taints:             node-role.kubernetes.io/master:NoSchedule   # master节点默认不允许被调度</span><br><span class=\"line\">Taints:             &lt;none&gt;</span><br><span class=\"line\">Taints:             &lt;none&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-1-2-给指定节点添加污点并验证\"><a href=\"#3-1-2-给指定节点添加污点并验证\" class=\"headerlink\" title=\"3.1.2 给指定节点添加污点并验证\"></a>3.1.2 给指定节点添加污点并验证</h4><p>​        污点也是通过标签进行选择的，因此在添加污点之前，需要给节点添加标签。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 给k8s-node-02打两个标签，分别是abc=123和gpu=yes</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl label nodes k8s-node-02 gpu=yes</span></span><br><span class=\"line\">node/k8s-node-02 labeled</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl label node k8s-node-02 abc=123</span></span><br><span class=\"line\">node/k8s-node-02 labeled</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get  nodes -l gpu=yes</span>    </span><br><span class=\"line\">NAME          STATUS   ROLES    AGE    VERSION</span><br><span class=\"line\">k8s-node-02   Ready    &lt;none&gt;   3d7h   v1.20.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get nodes  -l abc=123</span></span><br><span class=\"line\">NAME          STATUS   ROLES    AGE    VERSION</span><br><span class=\"line\">k8s-node-02   Ready    &lt;none&gt;   3d8h   v1.20.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 给节点k8s-node-02打污点</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl taint node k8s-node-02 gpu=yes:NoSchedule   <span class=\"comment\"># 不调度到该节点</span></span></span><br><span class=\"line\">node/k8s-node-02 tainted</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 验证</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl describe nodes | grep -i taint</span></span><br><span class=\"line\">Taints:             node-role.kubernetes.io/master:NoSchedule</span><br><span class=\"line\">Taints:             &lt;none&gt;</span><br><span class=\"line\">Taints:             gpu=yes:NoSchedule   # 污点</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>编写yaml文件并执行</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># vim tain.yaml    # 编写yaml文件，指定节点选择器为abc=123，那么该Pod会在k8s-node-02上进行创建吗</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">run:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pod-taint</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">nodeSelector:</span></span><br><span class=\"line\">    <span class=\"attr\">abc:</span> <span class=\"string\">&quot;123&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># kubectl apply -f tain.yaml </span></span><br><span class=\"line\"><span class=\"string\">pod/pod-taint</span> <span class=\"string\">created</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># kubectl get pod pod-taint</span></span><br><span class=\"line\"><span class=\"string\">NAME</span>        <span class=\"string\">READY</span>   <span class=\"string\">STATUS</span>    <span class=\"string\">RESTARTS</span>   <span class=\"string\">AGE</span></span><br><span class=\"line\"><span class=\"string\">pod-taint</span>   <span class=\"number\">0</span><span class=\"string\">/1</span>     <span class=\"string\">Pending</span>   <span class=\"number\">0</span>          <span class=\"string\">19s</span>   <span class=\"comment\"># 状态将一直是Pendding</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># kubectl describe pod pod-taint   # 查看名称为pod-taint的Pod的详细信息</span></span><br><span class=\"line\"><span class=\"comment\"># 此处只截取Events里面的信息，查看创建日志</span></span><br><span class=\"line\"><span class=\"string\">···</span></span><br><span class=\"line\"><span class=\"attr\">Events:</span></span><br><span class=\"line\">  <span class=\"string\">Type</span>     <span class=\"string\">Reason</span>            <span class=\"string\">Age</span>   <span class=\"string\">From</span>               <span class=\"string\">Message</span></span><br><span class=\"line\">  <span class=\"string\">----</span>     <span class=\"string\">------</span>            <span class=\"string\">----</span>  <span class=\"string\">----</span>               <span class=\"string\">-------</span></span><br><span class=\"line\">  <span class=\"attr\">Warning  FailedScheduling  58s   default-scheduler  0/3 nodes are available:</span> <span class=\"number\">1</span> <span class=\"string\">node(s)</span> <span class=\"string\">didn&#x27;t</span> <span class=\"string\">match</span> <span class=\"string\">Pod&#x27;s</span> <span class=\"string\">node</span> <span class=\"string\">affinity,</span> <span class=\"number\">1</span> <span class=\"string\">node(s)</span> <span class=\"string\">had</span> <span class=\"string\">taint</span> &#123;<span class=\"attr\">gpu:</span> <span class=\"literal\">yes</span>&#125;<span class=\"string\">,</span> <span class=\"string\">that</span> <span class=\"string\">the</span> <span class=\"string\">pod</span> <span class=\"string\">didn&#x27;t</span> <span class=\"string\">tolerate,</span> <span class=\"number\">1</span> <span class=\"string\">node(s)</span> <span class=\"string\">had</span> <span class=\"string\">taint</span> &#123;<span class=\"attr\">node-role.kubernetes.io/master:</span> &#125;<span class=\"string\">,</span> <span class=\"string\">that</span> <span class=\"string\">the</span> <span class=\"string\">pod</span> <span class=\"string\">didn&#x27;t</span> <span class=\"string\">tolerate.</span></span><br><span class=\"line\"><span class=\"comment\"># 警告 调度失败 三个节点没有一个节点可用(0/3)：1个节点没有匹配，1个节点有污点(gpu:yes)，1个节点(master)有污点</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-污点容忍\"><a href=\"#3-2-污点容忍\" class=\"headerlink\" title=\"3.2 污点容忍\"></a>3.2 污点容忍</h3><p>容忍可选值是NoSchedule的所有污点：<br>        - effect: NoSchedule<br>          operator: Exists</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># vim pid-taint2.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">run:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pod-taint2</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">nodeSelector:</span>   <span class=\"comment\"># node标签选择器</span></span><br><span class=\"line\">    <span class=\"attr\">abc:</span> <span class=\"string\">&quot;123&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">tolerations:</span>   <span class=\"comment\"># 污点容忍，gpu=yes</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">&quot;gpu&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">operator:</span> <span class=\"string\">&quot;Equal&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">value:</span> <span class=\"string\">&quot;yes&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">effect:</span> <span class=\"string\">&quot;NoSchedule&quot;</span>   <span class=\"comment\"># 一定不能被调度，但是是tolerations(污点容忍)，因此可以新建Pod成功</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"comment\"># 查看上面创建的两个pod的结果，pod-taint2已经创建成功</span></span><br><span class=\"line\"><span class=\"comment\"># kubectl get pods| grep   pod-taint</span></span><br><span class=\"line\"><span class=\"string\">pod-taint</span>                    <span class=\"number\">0</span><span class=\"string\">/1</span>     <span class=\"string\">Pending</span>   <span class=\"number\">0</span>          <span class=\"string\">12m</span>   <span class=\"comment\"># 未对污点进行容忍，因此不能创建pod</span></span><br><span class=\"line\"><span class=\"string\">pod-taint2</span>                   <span class=\"number\">1</span><span class=\"string\">/1</span>     <span class=\"string\">Running</span>   <span class=\"number\">0</span>          <span class=\"string\">30s</span>   <span class=\"comment\"># 对污点进行容忍，因此可以创建pod</span></span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<ul>\n<li>nodeSelector：节点做好分组，希望Pod根据配置调度到部分节点</li>\n<li>Taints：节点做特殊用途，不希望正常Pod分配过来</li>\n</ul>\n<h2 id=\"4-nodeName\"><a href=\"#4-nodeName\" class=\"headerlink\" title=\"4. nodeName\"></a>4. nodeName</h2><p>​        nodeName：指定节点名称，<strong>用于将Pod调度到指定的Node上</strong>，<strong>不经过调度器</strong>，<strong>因此污点不会起作用</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># vim nodename.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">run:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pod-nodename</span> </span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">nodeName:</span> <span class=\"string\">&quot;k8s-node-02&quot;</span>   <span class=\"comment\"># 该pod会被调度到名称为k8s-node-02的节点上(注意02上有污点)</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br></pre></td></tr></table></figure>\n\n<p>创建pod</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl describe nodes | grep -i taints</span></span><br><span class=\"line\">Taints:             node-role.kubernetes.io/master:NoSchedule</span><br><span class=\"line\">Taints:             &lt;none&gt;</span><br><span class=\"line\">Taints:             gpu=yes:NoSchedule   # 02上有污点，不允许被调度</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl apply -f nodename.yaml</span> </span><br><span class=\"line\">pod/pod-nodename created</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pods | grep pod-nodename</span></span><br><span class=\"line\">pod-nodename                 1/1     Running   0          15s   # 创建pod成功</span><br></pre></td></tr></table></figure>\n","comments":true,"permalink":"https://qingdalf.github.io/2021-05/kuberScheduler/","categories":[{"name":"kubernets","slug":"kubernets","permalink":"https://qingdalf.github.io/categories/kubernets/"}],"tags":[]},{"title":"Pod基础","date":"2021-05-05T10:20:33.000Z","path":"2021-05/kuberPodPre/","content":"<h2 id=\"1-pod基本管理\"><a href=\"#1-pod基本管理\" class=\"headerlink\" title=\"1 pod基本管理\"></a>1 pod基本管理</h2><h3 id=\"1-1-Pod基本概念\"><a href=\"#1-1-Pod基本概念\" class=\"headerlink\" title=\"1.1 Pod基本概念\"></a>1.1 Pod基本概念</h3><p>​        Pod是k8s创建和管理的最小单元，一个Pod由一个或多个容器组成，这些容器共享存储和网络。</p>\n<p>Pod的特点：</p>\n<span id=\"more\"></span>\n<ul>\n<li>一个Pod可以理解为一个应用实例，共同向外提供服务</li>\n<li>一个Pod中的容器始终部署在同一个Node中</li>\n<li>同一个Pod容器共享网络、存储资源</li>\n<li>k8s直接管理Pod，而不是管理容器</li>\n</ul>\n<h3 id=\"1-2-Pod的用法\"><a href=\"#1-2-Pod的用法\" class=\"headerlink\" title=\"1.2 Pod的用法\"></a>1.2 Pod的用法</h3><ul>\n<li>运行单个容器：最常见的用法，在这种情况下，可以将Pod看作是单个容器的抽象封装</li>\n<li>运行多个容器：封装多个紧密耦合且需要共享资源的应用程序</li>\n</ul>\n<p>如果有这些需求，你可以运行多个容器：</p>\n<ul>\n<li>两个应用之间发生文件交互(传统方式可通过”Rsync实时同步”、”共享存储”、”将两个应用部署在同一台服务器上”这三种方式实现交互)</li>\n<li>两个应用需要通过127.0.0.1或者socket通信</li>\n<li>两个应用需要发生频繁的调用</li>\n</ul>\n<h3 id=\"1-3-Pod资源共享实现机制\"><a href=\"#1-3-Pod资源共享实现机制\" class=\"headerlink\" title=\"1.3 Pod资源共享实现机制\"></a>1.3 Pod资源共享实现机制</h3><ul>\n<li>共享网络：将业务容器网络加入到“负责网络的容器”实现网络共享，创建Pod时，会首先创建一个pause容器，然后将应用容器加入到pause容器的网络命名空间。</li>\n<li>共享存储：容器通过数据卷共享数据</li>\n</ul>\n<img src=\"../kuberPre/image-20210411220442884.png\" alt=\"image-20210411220442884\" style=\"zoom:67%;\" />\n\n<h3 id=\"1-4-Pod管理命令\"><a href=\"#1-4-Pod管理命令\" class=\"headerlink\" title=\"1.4 Pod管理命令\"></a>1.4 Pod管理命令</h3><h4 id=\"1-4-1-创建Pod\"><a href=\"#1-4-1-创建Pod\" class=\"headerlink\" title=\"1.4.1 创建Pod\"></a>1.4.1 创建Pod</h4><p>​        我们已经知道通过yaml文件或者命令行都可以创建pod。</p>\n<ul>\n<li>yaml文件：<code>kubectl apply -f pod.yaml</code></li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">run:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span> &#123;&#125;</span><br><span class=\"line\">  <span class=\"attr\">dnsPolicy:</span> <span class=\"string\">ClusterFirst</span></span><br><span class=\"line\">  <span class=\"attr\">restartPolicy:</span> <span class=\"string\">Always</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>命令行：kubectl run nginx –image=nginx</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 可以通过--dry-run=client参数查看”kubectl run nginx --image=nginx“是否存在格式问题等</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl run nginx --image=nginx --dry-run=client</span></span><br><span class=\"line\">pod/nginx created (dry run)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 可以通过-o yaml文件导入指定pod的yaml文件</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl run nginx --image=nginx --dry-run=client -o yaml    <span class=\"comment\"># 将新建容器nginx的yaml文件输出在屏幕上</span></span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-4-2-查看Pod\"><a href=\"#1-4-2-查看Pod\" class=\"headerlink\" title=\"1.4.2 查看Pod\"></a>1.4.2 查看Pod</h4><ul>\n<li>查看简要信息：<code>kubectl get pods</code></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pods</span></span><br><span class=\"line\">NAME                         READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">java-demo-56d54df448-7mhg8   1/1     Running   0          24h</span><br><span class=\"line\">java-demo-56d54df448-dx767   1/1     Running   0          24h</span><br><span class=\"line\">java-demo-56d54df448-flh48   1/1     Running   0          24h</span><br><span class=\"line\">nginx-6799fc88d8-825ps       1/1     Running   0          46h</span><br><span class=\"line\">nginx-6799fc88d8-dt5g7       1/1     Running   0          10h</span><br><span class=\"line\">nginx-6799fc88d8-h9fzb       1/1     Running   0          10h</span><br><span class=\"line\">sh                           1/1     Running   0          10h</span><br><span class=\"line\">web-86cd4d65b9-554kq         1/1     Running   0          24h</span><br><span class=\"line\">web-86cd4d65b9-65nkq         1/1     Running   0          24h</span><br><span class=\"line\">web-86cd4d65b9-7zml9         1/1     Running   0          24h</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看详细信息：<code>kubectl describe pod &lt;Pod名称&gt;</code></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl describe pods nginx-6799fc88d8-h9fzb</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-4-3-查看pod日志\"><a href=\"#1-4-3-查看pod日志\" class=\"headerlink\" title=\"1.4.3 查看pod日志\"></a>1.4.3 查看pod日志</h4><ul>\n<li>查看pod日志格式：<code>kubectl logs &lt;Pod名称&gt; </code></li>\n<li>查看pod中指定容器的日志格式：<code>kubectl logs &lt;Pod名称&gt; [-c CONTAINERNAME]</code></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl logs nginx-6799fc88d8-dt5g7</span></span><br><span class=\"line\">/docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration</span><br><span class=\"line\">/docker-entrypoint.sh: Looking for shell scripts in /docker-entrypoint.d/</span><br><span class=\"line\">/docker-entrypoint.sh: Launching /docker-entrypoint.d/10-listen-on-ipv6-by-default.sh</span><br><span class=\"line\">10-listen-on-ipv6-by-default.sh: info: Getting the checksum of /etc/nginx/conf.d/default.conf</span><br><span class=\"line\">10-listen-on-ipv6-by-default.sh: info: Enabled listen on IPv6 in /etc/nginx/conf.d/default.conf</span><br><span class=\"line\">/docker-entrypoint.sh: Launching /docker-entrypoint.d/20-envsubst-on-templates.sh</span><br><span class=\"line\">/docker-entrypoint.sh: Launching /docker-entrypoint.d/30-tune-worker-processes.sh</span><br><span class=\"line\">/docker-entrypoint.sh: Configuration complete; ready for start up</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>持续输出日志：<code>kubectl logs &lt;Pod名称&gt; [-c CONTAINER] -f</code></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl logs nginx-6799fc88d8-dt5g7 -f    <span class=\"comment\"># 跟tailf一样，可以持续输出日志</span></span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-4-4-进入pod或容器\"><a href=\"#1-4-4-进入pod或容器\" class=\"headerlink\" title=\"1.4.4 进入pod或容器\"></a>1.4.4 进入pod或容器</h4><ul>\n<li>当pod中只有一个容器时：<code>kubectl exec -it &lt;Pod名称&gt; -- bash</code></li>\n<li>当pod中有多个容器时：<code>kubectl exec -it &lt;Pod名称&gt; -c container_name -- bash</code></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl <span class=\"built_in\">exec</span> -it nginx-6799fc88d8-dt5g7 -- bash     <span class=\"comment\"># 进入容器</span></span></span><br><span class=\"line\">root@nginx-6799fc88d8-dt5g7:/#</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 也可通过kubectl <span class=\"built_in\">exec</span>直接在容器内执行命令</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl <span class=\"built_in\">exec</span> nginx-6799fc88d8-dt5g7 -- hostname   <span class=\"comment\"># 查看容器的主机名</span></span></span><br><span class=\"line\">nginx-6799fc88d8-dt5g7</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl <span class=\"built_in\">exec</span> nginx-6799fc88d8-dt5g7 -- <span class=\"built_in\">pwd</span>    <span class=\"comment\"># 查看当前工作目录</span></span></span><br><span class=\"line\">/</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-4-5-删除Pod\"><a href=\"#1-4-5-删除Pod\" class=\"headerlink\" title=\"1.4.5 删除Pod\"></a>1.4.5 删除Pod</h4><ul>\n<li>以pod(资源类型)部署的pod：<code>kubectl delete pod &lt;Pod名称&gt;</code></li>\n<li>以deployment(资源类型)部署的pod：<code>kubectl delete deploy &lt;deploy名称&gt;</code></li>\n</ul>\n<h3 id=\"1-5-重启策略和健康检查-应用自我修复\"><a href=\"#1-5-重启策略和健康检查-应用自我修复\" class=\"headerlink\" title=\"1.5 重启策略和健康检查(应用自我修复)\"></a>1.5 重启策略和健康检查(应用自我修复)</h3><h4 id=\"1-5-1-重启策略\"><a href=\"#1-5-1-重启策略\" class=\"headerlink\" title=\"1.5.1 重启策略\"></a>1.5.1 重启策略</h4><p>​        在定义pod时通过<code>restartPolicy</code>参数指定，有以下三种重启策略：</p>\n<ul>\n<li><p>Always：当容器终止退出后，总是重启容器，默认策略，长期服务可采用该种策略。</p>\n</li>\n<li><p>OnFailure：当容器异常退出（退出状态码非0）时，才重启容器。</p>\n</li>\n<li><p>Never：当容器终止退出，从不重启容器。</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看部署方式是deployment名称是nginx的容器的重启策略</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get deployment nginx -o yaml  | grep restartPolicy</span>   </span><br><span class=\"line\">            f:restartPolicy: &#123;&#125;</span><br><span class=\"line\">      restartPolicy: Always      # 默认策略是Always</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-5-2-健康检查\"><a href=\"#1-5-2-健康检查\" class=\"headerlink\" title=\"1.5.2 健康检查\"></a>1.5.2 健康检查</h4><h5 id=\"1-5-2-1-健康检查的两种类型\"><a href=\"#1-5-2-1-健康检查的两种类型\" class=\"headerlink\" title=\"1.5.2.1  健康检查的两种类型\"></a>1.5.2.1  健康检查的两种类型</h5><ul>\n<li>livenessProbe（存活检查）：如果检查失败，将杀死容器，是否重启根据Pod的restartPolicy来操作。</li>\n<li>readinessProbe（就绪检查）：如果检查失败，Kubernetes会把Pod从service endpoints中剔除，即该故障Pod将不对外提供服务，待容器故障消除后，自动加入到调度策略中。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get ep</span></span><br><span class=\"line\">NAME         ENDPOINTS                                                    AGE</span><br><span class=\"line\">java-demo    10.244.154.198:8080,10.244.154.199:8080,10.244.44.210:8080   24h</span><br><span class=\"line\">kubernetes   10.138.3.61:6443                                             2d11h</span><br><span class=\"line\">nginx        10.244.154.196:80,10.244.154.200:80,10.244.44.211:80         2d8h</span><br><span class=\"line\">web          10.244.154.197:80,10.244.44.208:80,10.244.44.209:80          24h</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 比如web中IP地址为10.244.154.197的Pod服务故障，Kubernetes会把IP地址为10.244.154.197的pod从service endpoints中剔除，即只将请求分发给其他两个容器，由其他两个容器来提供服务，当故障Pod状态消除后，再将请求分发给该Pod(此时IP地址可能已经发生变化了)</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"1-5-2-2-健康检查的三种方法\"><a href=\"#1-5-2-2-健康检查的三种方法\" class=\"headerlink\" title=\"1.5.2.2 健康检查的三种方法\"></a>1.5.2.2 健康检查的三种方法</h5><ul>\n<li>httpGet：发送HTTP请求，返回200-400范围状态码为成功。</li>\n<li>exec：执行Shell命令返回状态码是0为成功。</li>\n<li>tcpSocket：发起TCP Socket建立成功。</li>\n</ul>\n<p><strong>案例</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用tcpSocket进行健康检查</span></span><br><span class=\"line\"><span class=\"comment\"># vim probe.yaml   # 新建一个健康检查和存活检查的容器</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">probe-demo</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">demo</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">web</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">    <span class=\"attr\">livenessProbe:</span></span><br><span class=\"line\">      <span class=\"attr\">tcpSocket:</span></span><br><span class=\"line\">        <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\">      <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">30</span> <span class=\"comment\">#启动容器后多少秒健康检查</span></span><br><span class=\"line\">      <span class=\"attr\">periodSeconds:</span> <span class=\"number\">10</span> <span class=\"comment\">#以后间隔多少秒检查一次</span></span><br><span class=\"line\">    <span class=\"attr\">readinessProbe:</span></span><br><span class=\"line\">      <span class=\"attr\">tcpSocket:</span></span><br><span class=\"line\">        <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\">      <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">30</span></span><br><span class=\"line\">      <span class=\"attr\">periodSeconds:</span> <span class=\"number\">10</span></span><br><span class=\"line\">      </span><br><span class=\"line\"><span class=\"comment\"># kubectl apply -f probe.yaml</span></span><br><span class=\"line\"><span class=\"string\">pod/probe-demo</span> <span class=\"string\">created</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># kubectl get pods | grep probe-demo</span></span><br><span class=\"line\"><span class=\"string\">probe-demo</span>    <span class=\"number\">0</span><span class=\"string\">/1</span>     <span class=\"string\">Running</span>   <span class=\"number\">0</span>    <span class=\"string\">45s</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># vim probe2.yaml   # 新建一个健康检查和存活检查的容器</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">probe2-demo</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">default</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">web</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">    <span class=\"attr\">livenessProbe:</span></span><br><span class=\"line\">      <span class=\"attr\">httpGet:</span>            <span class=\"comment\"># 使用httpGet进行健康检查</span></span><br><span class=\"line\">        <span class=\"attr\">path:</span> <span class=\"string\">/index.html</span>    <span class=\"comment\"># 指定httpGet健康检查访问的页面文件</span></span><br><span class=\"line\">        <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\">      <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">30</span> <span class=\"comment\">#启动容器后多少秒健康检查</span></span><br><span class=\"line\">      <span class=\"attr\">periodSeconds:</span> <span class=\"number\">10</span> <span class=\"comment\">#以后间隔多少秒检查一次</span></span><br><span class=\"line\">    <span class=\"attr\">readinessProbe:</span></span><br><span class=\"line\">      <span class=\"attr\">httpGet:</span>            <span class=\"comment\"># 使用httpGet进行健康检查</span></span><br><span class=\"line\">        <span class=\"attr\">path:</span> <span class=\"string\">/index.html</span>     <span class=\"comment\"># 指定httpGet健康检查访问的页面文件</span></span><br><span class=\"line\">        <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\">      <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">30</span></span><br><span class=\"line\">      <span class=\"attr\">periodSeconds:</span> <span class=\"number\">10</span></span><br><span class=\"line\">      </span><br><span class=\"line\"><span class=\"comment\"># kubectl apply -f probe2.yaml </span></span><br><span class=\"line\"><span class=\"string\">pod/probe2-demo</span> <span class=\"string\">created</span></span><br><span class=\"line\"><span class=\"comment\"># kubectl get pods | grep probe2-demo</span></span><br><span class=\"line\"><span class=\"string\">probe2-demo</span>      <span class=\"number\">0</span><span class=\"string\">/1</span>     <span class=\"string\">ContainerCreating</span>   <span class=\"number\">0</span>       <span class=\"string\">16s</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在我们没有任何访问的情况下，查看日志，看看是否每隔10s有对index.html的访问请求</span></span><br><span class=\"line\"><span class=\"comment\"># kubectl logs probe2-demo</span></span><br><span class=\"line\"><span class=\"string\">/docker-entrypoint.sh:</span> <span class=\"string\">/docker-entrypoint.d/</span> <span class=\"string\">is</span> <span class=\"string\">not</span> <span class=\"string\">empty,</span> <span class=\"string\">will</span> <span class=\"string\">attempt</span> <span class=\"string\">to</span> <span class=\"string\">perform</span> <span class=\"string\">configuration</span></span><br><span class=\"line\"><span class=\"string\">/docker-entrypoint.sh:</span> <span class=\"string\">Looking</span> <span class=\"string\">for</span> <span class=\"string\">shell</span> <span class=\"string\">scripts</span> <span class=\"string\">in</span> <span class=\"string\">/docker-entrypoint.d/</span></span><br><span class=\"line\"><span class=\"string\">/docker-entrypoint.sh:</span> <span class=\"string\">Launching</span> <span class=\"string\">/docker-entrypoint.d/10-listen-on-ipv6-by-default.sh</span></span><br><span class=\"line\"><span class=\"attr\">10-listen-on-ipv6-by-default.sh: info:</span> <span class=\"string\">Getting</span> <span class=\"string\">the</span> <span class=\"string\">checksum</span> <span class=\"string\">of</span> <span class=\"string\">/etc/nginx/conf.d/default.conf</span></span><br><span class=\"line\"><span class=\"attr\">10-listen-on-ipv6-by-default.sh: info:</span> <span class=\"string\">Enabled</span> <span class=\"string\">listen</span> <span class=\"string\">on</span> <span class=\"string\">IPv6</span> <span class=\"string\">in</span> <span class=\"string\">/etc/nginx/conf.d/default.conf</span></span><br><span class=\"line\"><span class=\"string\">/docker-entrypoint.sh:</span> <span class=\"string\">Launching</span> <span class=\"string\">/docker-entrypoint.d/20-envsubst-on-templates.sh</span></span><br><span class=\"line\"><span class=\"string\">/docker-entrypoint.sh:</span> <span class=\"string\">Launching</span> <span class=\"string\">/docker-entrypoint.d/30-tune-worker-processes.sh</span></span><br><span class=\"line\"><span class=\"string\">/docker-entrypoint.sh:</span> <span class=\"string\">Configuration</span> <span class=\"string\">complete;</span> <span class=\"string\">ready</span> <span class=\"string\">for</span> <span class=\"string\">start</span> <span class=\"string\">up</span></span><br><span class=\"line\"><span class=\"number\">10.138</span><span class=\"number\">.3</span><span class=\"number\">.63</span> <span class=\"string\">--</span> [<span class=\"number\">11</span><span class=\"string\">/Apr/2021:15:17:33</span> <span class=\"string\">+0000</span>] <span class=\"string\">&quot;GET /index.html HTTP/1.1&quot;</span> <span class=\"number\">200</span> <span class=\"number\">612</span> <span class=\"string\">&quot;-&quot;</span> <span class=\"string\">&quot;kube-probe/1.20&quot;</span> <span class=\"string\">&quot;-&quot;</span></span><br><span class=\"line\"><span class=\"number\">10.138</span><span class=\"number\">.3</span><span class=\"number\">.63</span> <span class=\"string\">--</span> [<span class=\"number\">11</span><span class=\"string\">/Apr/2021:15:17:34</span> <span class=\"string\">+0000</span>] <span class=\"string\">&quot;GET /index.html HTTP/1.1&quot;</span> <span class=\"number\">200</span> <span class=\"number\">612</span> <span class=\"string\">&quot;-&quot;</span> <span class=\"string\">&quot;kube-probe/1.20&quot;</span> <span class=\"string\">&quot;-&quot;</span></span><br><span class=\"line\"><span class=\"number\">10.138</span><span class=\"number\">.3</span><span class=\"number\">.63</span> <span class=\"string\">--</span> [<span class=\"number\">11</span><span class=\"string\">/Apr/2021:15:17:43</span> <span class=\"string\">+0000</span>] <span class=\"string\">&quot;GET /index.html HTTP/1.1&quot;</span> <span class=\"number\">200</span> <span class=\"number\">612</span> <span class=\"string\">&quot;-&quot;</span> <span class=\"string\">&quot;kube-probe/1.20&quot;</span> <span class=\"string\">&quot;-&quot;</span></span><br><span class=\"line\"><span class=\"number\">10.138</span><span class=\"number\">.3</span><span class=\"number\">.63</span> <span class=\"string\">--</span> [<span class=\"number\">11</span><span class=\"string\">/Apr/2021:15:17:44</span> <span class=\"string\">+0000</span>] <span class=\"string\">&quot;GET /index.html HTTP/1.1&quot;</span> <span class=\"number\">200</span> <span class=\"number\">612</span> <span class=\"string\">&quot;-&quot;</span> <span class=\"string\">&quot;kube-probe/1.20&quot;</span> <span class=\"string\">&quot;-&quot;</span></span><br><span class=\"line\"><span class=\"number\">10.138</span><span class=\"number\">.3</span><span class=\"number\">.63</span> <span class=\"string\">--</span> [<span class=\"number\">11</span><span class=\"string\">/Apr/2021:15:17:53</span> <span class=\"string\">+0000</span>] <span class=\"string\">&quot;GET /index.html HTTP/1.1&quot;</span> <span class=\"number\">200</span> <span class=\"number\">612</span> <span class=\"string\">&quot;-&quot;</span> <span class=\"string\">&quot;kube-probe/1.20&quot;</span> <span class=\"string\">&quot;-&quot;</span></span><br><span class=\"line\"><span class=\"number\">10.138</span><span class=\"number\">.3</span><span class=\"number\">.63</span> <span class=\"string\">--</span> [<span class=\"number\">11</span><span class=\"string\">/Apr/2021:15:17:54</span> <span class=\"string\">+0000</span>] <span class=\"string\">&quot;GET /index.html HTTP/1.1&quot;</span> <span class=\"number\">200</span> <span class=\"number\">612</span> <span class=\"string\">&quot;-&quot;</span> <span class=\"string\">&quot;kube-probe/1.20&quot;</span> <span class=\"string\">&quot;-&quot;</span></span><br><span class=\"line\"><span class=\"number\">10.138</span><span class=\"number\">.3</span><span class=\"number\">.63</span> <span class=\"string\">--</span> [<span class=\"number\">11</span><span class=\"string\">/Apr/2021:15:18:03</span> <span class=\"string\">+0000</span>] <span class=\"string\">&quot;GET /index.html HTTP/1.1&quot;</span> <span class=\"number\">200</span> <span class=\"number\">612</span> <span class=\"string\">&quot;-&quot;</span> <span class=\"string\">&quot;kube-probe/1.20&quot;</span> <span class=\"string\">&quot;-&quot;</span></span><br><span class=\"line\"><span class=\"number\">10.138</span><span class=\"number\">.3</span><span class=\"number\">.63</span> <span class=\"string\">--</span> [<span class=\"number\">11</span><span class=\"string\">/Apr/2021:15:18:04</span> <span class=\"string\">+0000</span>] <span class=\"string\">&quot;GET /index.html HTTP/1.1&quot;</span> <span class=\"number\">200</span> <span class=\"number\">612</span> <span class=\"string\">&quot;-&quot;</span> <span class=\"string\">&quot;kube-probe/1.20&quot;</span> <span class=\"string\">&quot;-&quot;</span></span><br><span class=\"line\"><span class=\"number\">10.138</span><span class=\"number\">.3</span><span class=\"number\">.63</span> <span class=\"string\">--</span> [<span class=\"number\">11</span><span class=\"string\">/Apr/2021:15:18:13</span> <span class=\"string\">+0000</span>] <span class=\"string\">&quot;GET /index.html HTTP/1.1&quot;</span> <span class=\"number\">200</span> <span class=\"number\">612</span> <span class=\"string\">&quot;-&quot;</span> <span class=\"string\">&quot;kube-probe/1.20&quot;</span> <span class=\"string\">&quot;-&quot;</span></span><br><span class=\"line\"><span class=\"number\">10.138</span><span class=\"number\">.3</span><span class=\"number\">.63</span> <span class=\"string\">--</span> [<span class=\"number\">11</span><span class=\"string\">/Apr/2021:15:18:14</span> <span class=\"string\">+0000</span>] <span class=\"string\">&quot;GET /index.html HTTP/1.1&quot;</span> <span class=\"number\">200</span> <span class=\"number\">612</span> <span class=\"string\">&quot;-&quot;</span> <span class=\"string\">&quot;kube-probe/1.20&quot;</span> <span class=\"string\">&quot;-&quot;</span></span><br><span class=\"line\"><span class=\"number\">10.138</span><span class=\"number\">.3</span><span class=\"number\">.63</span> <span class=\"string\">--</span> [<span class=\"number\">11</span><span class=\"string\">/Apr/2021:15:18:23</span> <span class=\"string\">+0000</span>] <span class=\"string\">&quot;GET /index.html HTTP/1.1&quot;</span> <span class=\"number\">200</span> <span class=\"number\">612</span> <span class=\"string\">&quot;-&quot;</span> <span class=\"string\">&quot;kube-probe/1.20&quot;</span> <span class=\"string\">&quot;-&quot;</span></span><br><span class=\"line\"><span class=\"number\">10.138</span><span class=\"number\">.3</span><span class=\"number\">.63</span> <span class=\"string\">--</span> [<span class=\"number\">11</span><span class=\"string\">/Apr/2021:15:18:24</span> <span class=\"string\">+0000</span>] <span class=\"string\">&quot;GET /index.html HTTP/1.1&quot;</span> <span class=\"number\">200</span> <span class=\"number\">612</span> <span class=\"string\">&quot;-&quot;</span> <span class=\"string\">&quot;kube-probe/1.20&quot;</span> <span class=\"string\">&quot;-&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 刚好每隔10s就有两个get请求，一个是存活检查，一个是健康检查，将存活和健康检查的访问的默认文件换成不一样的文件，效果会更好。</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-6-环境变量\"><a href=\"#1-6-环境变量\" class=\"headerlink\" title=\"1.6 环境变量\"></a>1.6 环境变量</h3><p>变量值的定义方法：</p>\n<ul>\n<li>自定义变量值</li>\n<li>变量值从Pod属性获取</li>\n<li>变量值从Secret、ConfigMap获取</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> vim env.yaml</span></span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Pod</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: pod-env</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  containers:</span><br><span class=\"line\">    - name: test</span><br><span class=\"line\">      image: busybox</span><br><span class=\"line\">      command: [ &quot;sh&quot;, &quot;-c&quot;, &quot;sleep 36000&quot;]</span><br><span class=\"line\">      env:</span><br><span class=\"line\">        - name: MY_NODE_NAME     # 变量值从Pod属性获取</span><br><span class=\"line\">          valueFrom:</span><br><span class=\"line\">            fieldRef:</span><br><span class=\"line\">              fieldPath: spec.nodeName    # Pod所在节点名称</span><br><span class=\"line\">        - name: MY_POD_NAME     # 变量值从Pod属性获取</span><br><span class=\"line\">          valueFrom:</span><br><span class=\"line\">            fieldRef:</span><br><span class=\"line\">              fieldPath: metadata.name     # Pod名称</span><br><span class=\"line\">        - name: MY_POD_NAMESPACE    # 变量值从Pod属性获取</span><br><span class=\"line\">          valueFrom:</span><br><span class=\"line\">            fieldRef:</span><br><span class=\"line\">              fieldPath: metadata.namespace    # Pod命名空间</span><br><span class=\"line\">        - name: MY_POD_IP      # 变量值从Pod属性获取</span><br><span class=\"line\">          valueFrom:</span><br><span class=\"line\">            fieldRef:</span><br><span class=\"line\">              fieldPath: status.podIP   # Pod IP</span><br><span class=\"line\">        - name: ABC       # 自定义变量值</span><br><span class=\"line\">          value: &quot;123456&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-7-init-Container\"><a href=\"#1-7-init-Container\" class=\"headerlink\" title=\"1.7 init Container\"></a>1.7 init Container</h3><p>Init Container：顾名思义，<strong>用于初始化工作，执行完就结束，可以理解为一次性任务</strong>。</p>\n<ul>\n<li>支持大部分应用容器配置，但不支持健康检查</li>\n<li>优先于应用容器执行</li>\n</ul>\n<p>应用场景：</p>\n<ul>\n<li>环境检查：例如确保应用容器依赖的服务启动后再启动应用容器</li>\n<li>初始化配置：例如给应用容器准备配置文件</li>\n</ul>\n<p>案例：部署一个web网站，网站首页没有放到镜像中，希望从指定位置下载(远程或者本地存储)网站首页，然后放到部署的web根目录下。</p>\n<p>实现的方法：</p>\n<ul>\n<li>将远程文件下载到本地，使用存储卷–volume</li>\n<li>将远程文件下载到本地，然后使用kubectl cp将网站首页拷贝到容器内，如果启动的web网站的副本数过多，就需要执行重复的操作</li>\n<li>待web容器启动后，通过kubectl exec进入容器，然后通过wget将远程文件下载到容器内</li>\n<li>使用init container</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Pod</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: init-demo</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  initContainers:    # 初始化容器</span><br><span class=\"line\">  - name: download</span><br><span class=\"line\">    image: busybox</span><br><span class=\"line\">    command:        # 需要执行的命令，wget -O http://www.ctnrs.com &quot;/opt/index.html&quot;</span><br><span class=\"line\">    - wget</span><br><span class=\"line\">    - &quot;-O&quot;</span><br><span class=\"line\">    - &quot;/opt/index.html&quot;</span><br><span class=\"line\">    - http://www.ctnrs.com</span><br><span class=\"line\">    volumeMounts:</span><br><span class=\"line\">    - name: wwwroot</span><br><span class=\"line\">      mountPath: &quot;/opt&quot;</span><br><span class=\"line\">  containers:</span><br><span class=\"line\">  - name: nginx_init</span><br><span class=\"line\">    image: nginx</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">    - containerPort: 80</span><br><span class=\"line\">    volumeMounts:        # 将存储卷wwwroot挂载到网站的根目录下/usr/share/nginx/html</span><br><span class=\"line\">    - name: wwwroot</span><br><span class=\"line\">      mountPath: /usr/share/nginx/html</span><br><span class=\"line\">  volumes:</span><br><span class=\"line\">  - name: wwwroot</span><br><span class=\"line\">    emptyDir: &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行yaml文件，查看pod状态变化</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl apply -f nginx_ini.yaml</span> </span><br><span class=\"line\">pod/init-demo created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pods</span> </span><br><span class=\"line\">NAME            READY   STATUS     RESTARTS   AGE</span><br><span class=\"line\">init-demo       0/1     Init:0/1   0          8s # 待busybox容器下载完成后才会创建nginx_init容器</span><br><span class=\"line\">····  # 其他容器与该实验无关，此处不显示</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pods</span></span><br><span class=\"line\">NAME            READY   STATUS            RESTARTS   AGE</span><br><span class=\"line\">init-demo       0/1     PodInitializing   0          20s  # 状态为PodInitializing容器初始化</span><br><span class=\"line\">····  # 其他容器与该实验无关，此处不显示</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pods</span></span><br><span class=\"line\">NAME            READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">init-demo       1/1     Running   0          37s    # 状态为Running</span><br><span class=\"line\">····  # 其他容器与该实验无关，此处不显示</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 进入容器查看文件</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl <span class=\"built_in\">exec</span> -it init-demo -- bash</span>   </span><br><span class=\"line\">root@init-demo:/# ls -l   /usr/share/nginx/html/index.html </span><br><span class=\"line\">-rw-r--r-- 1 root root 20702 Apr 12 07:27 /usr/share/nginx/html/index.html</span><br></pre></td></tr></table></figure>\n\n<p>Pod中常见的几类容器：</p>\n<ul>\n<li><p>Infrastructure Container：基础容器</p>\n<ul>\n<li>维护整个Pod网络空间</li>\n</ul>\n</li>\n<li><p>InitContainers：初始化容器</p>\n<ul>\n<li>先于业务容器开始执行</li>\n</ul>\n</li>\n<li><p>Containers：业务容器</p>\n<ul>\n<li>并行启动</li>\n</ul>\n</li>\n</ul>\n","comments":true,"permalink":"https://qingdalf.github.io/2021-05/kuberPodPre/","categories":[{"name":"kubernets","slug":"kubernets","permalink":"https://qingdalf.github.io/categories/kubernets/"}],"tags":[]},{"title":"认识yaml","date":"2021-05-05T09:14:26.000Z","path":"2021-05/kuberYaml/","content":"<h2 id=\"1-yaml文件格式\"><a href=\"#1-yaml文件格式\" class=\"headerlink\" title=\"1 yaml文件格式\"></a>1 yaml文件格式</h2><p>​        K8s是一个容器编排引擎，使用YAML文件编排要部署应用，因此在学习之前，应先了解YAML语法格式：</p>\n <span id=\"more\"></span>\n<ul>\n<li>缩进表示层级关系</li>\n<li>不支持制表符“tab”缩进，使用空格缩进</li>\n<li>通常开头缩进2 个空格</li>\n<li>字符后缩进1 个空格，如冒号、逗号等</li>\n<li>“—” 表示YAML格式，一个文件的开始</li>\n<li>“#”注释</li>\n</ul>\n<h2 id=\"2-yaml文件创建资源对象\"><a href=\"#2-yaml文件创建资源对象\" class=\"headerlink\" title=\"2 yaml文件创建资源对象\"></a>2 yaml文件创建资源对象</h2><p>创建pod的两种方法：</p>\n<ul>\n<li>通过kubectl create命令创建</li>\n<li>通过yaml文件创建</li>\n</ul>\n<h3 id=\"2-1-通过kubectl-create指令创建pod\"><a href=\"#2-1-通过kubectl-create指令创建pod\" class=\"headerlink\" title=\"2.1 通过kubectl create指令创建pod\"></a>2.1 通过kubectl create指令创建pod</h3><p>​        我们以上文新建的java-demo为例进行说明</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl create deployment java-demo --image=lizhenliang/java-demo --replicas=3 -n default</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-通过yaml文件创建pod\"><a href=\"#2-2-通过yaml文件创建pod\" class=\"headerlink\" title=\"2.2 通过yaml文件创建pod\"></a>2.2 通过yaml文件创建pod</h3><p>​        上面<code>kubectl create</code>命令创建的pod的yaml文件格式如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span>           <span class=\"comment\"># API版本</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span>              <span class=\"comment\"># 资源类型</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span>                     <span class=\"comment\"># 资源元数据</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">java-demo</span>             <span class=\"comment\"># 资源的名称</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">default</span>          <span class=\"comment\"># 资源的命名空间</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span>                         <span class=\"comment\"># 资源规格</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">3</span>                 <span class=\"comment\"># 副本数量</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span>                   <span class=\"comment\"># 标签选择器</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">web</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span>                   <span class=\"comment\"># pod模板</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span>                 <span class=\"comment\"># pod模板元数据</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span>                 <span class=\"comment\"># pod的标签</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">java-demo</span>        <span class=\"comment\"># pod标签名称是app,对应的值是java-demo</span></span><br><span class=\"line\">  <span class=\"attr\">spec:</span>                       <span class=\"comment\"># pod的规格</span></span><br><span class=\"line\">    <span class=\"attr\">containers:</span>               <span class=\"comment\"># 容器配置，可配置多个容器，多个容器之间默认是列表</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">web</span></span><br><span class=\"line\">      <span class=\"attr\">image:</span> <span class=\"string\">lizhenliang/java-demo</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-通过k8s指令生成和导出模板yaml文件\"><a href=\"#3-通过k8s指令生成和导出模板yaml文件\" class=\"headerlink\" title=\"3 通过k8s指令生成和导出模板yaml文件\"></a>3 通过k8s指令生成和导出模板yaml文件</h2><h3 id=\"3-1-通过指令生成模板yaml\"><a href=\"#3-1-通过指令生成模板yaml\" class=\"headerlink\" title=\"3.1 通过指令生成模板yaml\"></a>3.1 通过指令生成模板yaml</h3><p>通常使用到以下两个参数：</p>\n<ul>\n<li><code>--dry-run=client</code>：检查kubernets指令的是否正确，只检查指令，不允许指令</li>\n<li><code>-o yaml</code>：将指令的yaml格式文件输出在屏幕上</li>\n</ul>\n<p><strong>测试命令行创建pod的命令是否正确</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl create deployment java-demo --image=lizhenliang/java-demo --replicas=3 -n default --dry-run=client</span></span><br><span class=\"line\">deployment.apps/java-demo created (dry run)</span><br></pre></td></tr></table></figure>\n\n<p><strong>将创建生成的yaml文件导出到文件中</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl create deployment java-demo --image=lizhenliang/java-demo --replicas=3 -n default --dry-run=client -o yaml &gt; java-demo.yaml</span></span><br></pre></td></tr></table></figure>\n\n<p>生成的yaml格式文件模板如下，使用该yaml文件前需要将下面标记的三处内容删除掉</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cat java-demo.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">creationTimestamp:</span> <span class=\"literal\">null</span>    <span class=\"comment\"># 时间戳，直接删除即可</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">java-demo</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">java-demo</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">default</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">java-demo</span></span><br><span class=\"line\">  <span class=\"attr\">strategy:</span> &#123;&#125;</span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">creationTimestamp:</span> <span class=\"literal\">null</span>    <span class=\"comment\"># 时间戳，直接删除即可</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">java-demo</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">lizhenliang/java-demo</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">java-demo</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"attr\">status:</span> &#123;&#125;                 <span class=\"comment\">#  直接删除即可</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-通过k8s指定导出已创建Pod的yaml文件\"><a href=\"#3-2-通过k8s指定导出已创建Pod的yaml文件\" class=\"headerlink\" title=\"3.2 通过k8s指定导出已创建Pod的yaml文件\"></a>3.2 通过k8s指定导出已创建Pod的yaml文件</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get deployment</span> </span><br><span class=\"line\">NAME        READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class=\"line\">java-demo   3/3     3            3           111m</span><br><span class=\"line\">nginx       1/1     1            1           24h</span><br><span class=\"line\">web         3/3     3            3           112m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get deployment web -o yaml        <span class=\"comment\"># 将yaml格式文件输出到屏幕上</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get deployment web -o yaml &gt; web.yaml   <span class=\"comment\"># 通过重定向将yaml文件导出到web.yaml文件中</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-kubectl-explain查询指令的使用\"><a href=\"#4-kubectl-explain查询指令的使用\" class=\"headerlink\" title=\"4 kubectl explain查询指令的使用\"></a>4 kubectl explain查询指令的使用</h2><p>​        当我们在编写yaml文件忘记资源名称时，可以通过<code>kubectl explain</code>命令查看，使用<code>kubectl explain</code>指令的方法如下：</p>\n<ul>\n<li>格式：<code>kubectl explain  &lt;type&gt;.&lt;fieldName&gt;[.&lt;fieldName&gt;]</code></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl explain --<span class=\"built_in\">help</span></span> </span><br><span class=\"line\">List the fields for supported resources   # 列出所有资源的字段</span><br><span class=\"line\"></span><br><span class=\"line\"> This command describes the fields associated with each supported API resource. Fields are identified via a simple</span><br><span class=\"line\">JSONPath identifier:</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;type&gt;.&lt;fieldName&gt;[.&lt;fieldName&gt;]     # 使用方法举例</span><br><span class=\"line\">  </span><br><span class=\"line\"> Add the --recursive flag to display all of the fields at once without descriptions. Information about each field is</span><br><span class=\"line\">retrieved from the server in OpenAPI format.</span><br><span class=\"line\"></span><br><span class=\"line\">Use &quot;kubectl api-resources&quot; for a complete list of supported resources.</span><br><span class=\"line\"></span><br><span class=\"line\">Examples:</span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\"> Get the documentation of the resource and its fields</span></span><br><span class=\"line\">  kubectl explain pods</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\"> Get the documentation of a specific field of a resource</span></span><br><span class=\"line\">  kubectl explain pods.spec.containers</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\">      --api-version=&#x27;&#x27;: Get different explanations for particular API version (API group/version)</span><br><span class=\"line\">      --recursive=false: Print the fields of fields (Currently only 1 level deep)</span><br><span class=\"line\"></span><br><span class=\"line\">Usage:</span><br><span class=\"line\">  kubectl explain RESOURCE [options]    # 用法举例</span><br><span class=\"line\"></span><br><span class=\"line\">Use &quot;kubectl options&quot; for a list of global command-line options (applies to all commands).</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看资源类型为pod的字段信息</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl explain pods</span> </span><br><span class=\"line\">KIND:     Pod</span><br><span class=\"line\">VERSION:  v1</span><br><span class=\"line\"></span><br><span class=\"line\">DESCRIPTION:</span><br><span class=\"line\">     Pod is a collection of containers that can run on a host. This resource is</span><br><span class=\"line\">     created by clients and scheduled onto hosts.</span><br><span class=\"line\"></span><br><span class=\"line\">FIELDS:</span><br><span class=\"line\">   apiVersion\t&lt;string&gt;</span><br><span class=\"line\">     APIVersion defines the versioned schema of this representation of an</span><br><span class=\"line\">     object. Servers should convert recognized schemas to the latest internal</span><br><span class=\"line\">     value, and may reject unrecognized values. More info:</span><br><span class=\"line\">     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources</span><br><span class=\"line\"></span><br><span class=\"line\">   kind\t&lt;string&gt;</span><br><span class=\"line\">     Kind is a string value representing the REST resource this object</span><br><span class=\"line\">     represents. Servers may infer this from the endpoint the client submits</span><br><span class=\"line\">     requests to. Cannot be updated. In CamelCase. More info:</span><br><span class=\"line\">     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds</span><br><span class=\"line\"></span><br><span class=\"line\">   metadata\t&lt;Object&gt;</span><br><span class=\"line\">     Standard object&#x27;s metadata. More info:</span><br><span class=\"line\">     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata</span><br><span class=\"line\"></span><br><span class=\"line\">   spec\t&lt;Object&gt;</span><br><span class=\"line\">     Specification of the desired behavior of the pod. More info:</span><br><span class=\"line\">     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status</span><br><span class=\"line\"></span><br><span class=\"line\">   status\t&lt;Object&gt;</span><br><span class=\"line\">     Most recently observed status of the pod. This data may not be up to date.</span><br><span class=\"line\">     Populated by the system. Read-only. More info:</span><br><span class=\"line\">     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看pods下级字段，如spec下的containers字段</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl explain pods.spec.containers</span></span><br><span class=\"line\">KIND:     Pod</span><br><span class=\"line\">VERSION:  v1</span><br><span class=\"line\"></span><br><span class=\"line\">RESOURCE: containers &lt;[]Object&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">DESCRIPTION:   # 描述信息</span><br><span class=\"line\">     List of containers belonging to the pod. Containers cannot currently be</span><br><span class=\"line\">     added or removed. There must be at least one container in a Pod. Cannot be</span><br><span class=\"line\">     updated.</span><br><span class=\"line\"></span><br><span class=\"line\">     A single application container that you want to run within a pod.</span><br><span class=\"line\"></span><br><span class=\"line\">FIELDS:   # 字段</span><br><span class=\"line\">   args\t&lt;[]string&gt;</span><br><span class=\"line\">     Arguments to the entrypoint. The docker image&#x27;s CMD is used if this is not</span><br><span class=\"line\">     provided. Variable references $(VAR_NAME) are expanded using the</span><br><span class=\"line\">     container&#x27;s environment. If a variable cannot be resolved, the reference in</span><br><span class=\"line\">     the input string will be unchanged. The $(VAR_NAME) syntax can be escaped</span><br><span class=\"line\">     with a double $$, ie: $$(VAR_NAME). Escaped references will never be</span><br><span class=\"line\">     expanded, regardless of whether the variable exists or not. Cannot be</span><br><span class=\"line\">     updated. More info:</span><br><span class=\"line\">     https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell</span><br><span class=\"line\"></span><br><span class=\"line\">   command\t&lt;[]string&gt;</span><br><span class=\"line\">     Entrypoint array. Not executed within a shell. The docker image&#x27;s</span><br><span class=\"line\">     ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME)</span><br><span class=\"line\">     are expanded using the container&#x27;s environment. If a variable cannot be</span><br><span class=\"line\">     resolved, the reference in the input string will be unchanged. The</span><br><span class=\"line\">     $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME).</span><br><span class=\"line\">     Escaped references will never be expanded, regardless of whether the</span><br><span class=\"line\">     variable exists or not. Cannot be updated. More info:</span><br><span class=\"line\">     https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell</span><br><span class=\"line\"></span><br><span class=\"line\">   env\t&lt;[]Object&gt;   # 定义变量</span><br><span class=\"line\">     List of environment variables to set in the container. Cannot be updated.</span><br><span class=\"line\"></span><br><span class=\"line\">   envFrom\t&lt;[]Object&gt;</span><br><span class=\"line\">     List of sources to populate environment variables in the container. The</span><br><span class=\"line\">     keys defined within a source must be a C_IDENTIFIER. All invalid keys will</span><br><span class=\"line\">     be reported as an event when the container is starting. When a key exists</span><br><span class=\"line\">     in multiple sources, the value associated with the last source will take</span><br><span class=\"line\">     precedence. Values defined by an Env with a duplicate key will take</span><br><span class=\"line\">     precedence. Cannot be updated.</span><br><span class=\"line\"></span><br><span class=\"line\">   image\t&lt;string&gt;   # 镜像</span><br><span class=\"line\">     Docker image name. More info:</span><br><span class=\"line\">     https://kubernetes.io/docs/concepts/containers/images This field is</span><br><span class=\"line\">     optional to allow higher level config management to default or override</span><br><span class=\"line\">     container images in workload controllers like Deployments and StatefulSets.</span><br><span class=\"line\"></span><br><span class=\"line\">   imagePullPolicy\t&lt;string&gt;   # 镜像拉取规则</span><br><span class=\"line\">     Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always</span><br><span class=\"line\">     if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated.</span><br><span class=\"line\">     More info:</span><br><span class=\"line\">     https://kubernetes.io/docs/concepts/containers/images#updating-images</span><br><span class=\"line\"></span><br><span class=\"line\">   lifecycle\t&lt;Object&gt;     # 生命周期</span><br><span class=\"line\">     Actions that the management system should take in response to container</span><br><span class=\"line\">     lifecycle events. Cannot be updated.</span><br><span class=\"line\"></span><br><span class=\"line\">   livenessProbe\t&lt;Object&gt;</span><br><span class=\"line\">     Periodic probe of container liveness. Container will be restarted if the</span><br><span class=\"line\">     probe fails. Cannot be updated. More info:</span><br><span class=\"line\">     https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes</span><br><span class=\"line\"></span><br><span class=\"line\">   name\t&lt;string&gt; -required-     # 容器名称，是容器的名称，不是pod</span><br><span class=\"line\">     Name of the container specified as a DNS_LABEL. Each container in a pod</span><br><span class=\"line\">     must have a unique name (DNS_LABEL). Cannot be updated.</span><br><span class=\"line\"></span><br><span class=\"line\">   ports\t&lt;[]Object&gt;      # 容器暴露的端口</span><br><span class=\"line\">     List of ports to expose from the container. Exposing a port here gives the</span><br><span class=\"line\">     system additional information about the network connections a container</span><br><span class=\"line\">     uses, but is primarily informational. Not specifying a port here DOES NOT</span><br><span class=\"line\">     prevent that port from being exposed. Any port which is listening on the</span><br><span class=\"line\">     default &quot;0.0.0.0&quot; address inside a container will be accessible from the</span><br><span class=\"line\">     network. Cannot be updated.</span><br><span class=\"line\"></span><br><span class=\"line\">   readinessProbe\t&lt;Object&gt;</span><br><span class=\"line\">     Periodic probe of container service readiness. Container will be removed</span><br><span class=\"line\">     from service endpoints if the probe fails. Cannot be updated. More info:</span><br><span class=\"line\">     https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes</span><br><span class=\"line\"></span><br><span class=\"line\">   resources\t&lt;Object&gt;</span><br><span class=\"line\">     Compute Resources required by this container. Cannot be updated. More info:</span><br><span class=\"line\">     https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/</span><br><span class=\"line\"></span><br><span class=\"line\">   securityContext\t&lt;Object&gt;</span><br><span class=\"line\">     Security options the pod should run with. More info:</span><br><span class=\"line\">     https://kubernetes.io/docs/concepts/policy/security-context/ More info:</span><br><span class=\"line\">     https://kubernetes.io/docs/tasks/configure-pod-container/security-context/</span><br><span class=\"line\"></span><br><span class=\"line\">   startupProbe\t&lt;Object&gt;</span><br><span class=\"line\">     StartupProbe indicates that the Pod has successfully initialized. If</span><br><span class=\"line\">     specified, no other probes are executed until this completes successfully.</span><br><span class=\"line\">     If this probe fails, the Pod will be restarted, just as if the</span><br><span class=\"line\">     livenessProbe failed. This can be used to provide different probe</span><br><span class=\"line\">     parameters at the beginning of a Pod&#x27;s lifecycle, when it might take a long</span><br><span class=\"line\">     time to load data or warm a cache, than during steady-state operation. This</span><br><span class=\"line\">     cannot be updated. More info:</span><br><span class=\"line\">     https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes</span><br><span class=\"line\"></span><br><span class=\"line\">   stdin\t&lt;boolean&gt;</span><br><span class=\"line\">     Whether this container should allocate a buffer for stdin in the container</span><br><span class=\"line\">     runtime. If this is not set, reads from stdin in the container will always</span><br><span class=\"line\">     result in EOF. Default is false.</span><br><span class=\"line\"></span><br><span class=\"line\">   stdinOnce\t&lt;boolean&gt;</span><br><span class=\"line\">     Whether the container runtime should close the stdin channel after it has</span><br><span class=\"line\">     been opened by a single attach. When stdin is true the stdin stream will</span><br><span class=\"line\">     remain open across multiple attach sessions. If stdinOnce is set to true,</span><br><span class=\"line\">     stdin is opened on container start, is empty until the first client</span><br><span class=\"line\">     attaches to stdin, and then remains open and accepts data until the client</span><br><span class=\"line\">     disconnects, at which time stdin is closed and remains closed until the</span><br><span class=\"line\">     container is restarted. If this flag is false, a container processes that</span><br><span class=\"line\">     reads from stdin will never receive an EOF. Default is false</span><br><span class=\"line\"></span><br><span class=\"line\">   terminationMessagePath\t&lt;string&gt;</span><br><span class=\"line\">     Optional: Path at which the file to which the container&#x27;s termination</span><br><span class=\"line\">     message will be written is mounted into the container&#x27;s filesystem. Message</span><br><span class=\"line\">     written is intended to be brief final status, such as an assertion failure</span><br><span class=\"line\">     message. Will be truncated by the node if greater than 4096 bytes. The</span><br><span class=\"line\">     total message length across all containers will be limited to 12kb.</span><br><span class=\"line\">     Defaults to /dev/termination-log. Cannot be updated.</span><br><span class=\"line\"></span><br><span class=\"line\">   terminationMessagePolicy\t&lt;string&gt;</span><br><span class=\"line\">     Indicate how the termination message should be populated. File will use the</span><br><span class=\"line\">     contents of terminationMessagePath to populate the container status message</span><br><span class=\"line\">     on both success and failure. FallbackToLogsOnError will use the last chunk</span><br><span class=\"line\">     of container log output if the termination message file is empty and the</span><br><span class=\"line\">     container exited with an error. The log output is limited to 2048 bytes or</span><br><span class=\"line\">     80 lines, whichever is smaller. Defaults to File. Cannot be updated.</span><br><span class=\"line\"></span><br><span class=\"line\">   tty\t&lt;boolean&gt;</span><br><span class=\"line\">     Whether this container should allocate a TTY for itself, also requires</span><br><span class=\"line\">     &#x27;stdin&#x27; to be true. Default is false.</span><br><span class=\"line\"></span><br><span class=\"line\">   volumeDevices\t&lt;[]Object&gt;</span><br><span class=\"line\">     volumeDevices is the list of block devices to be used by the container.</span><br><span class=\"line\"></span><br><span class=\"line\">   volumeMounts\t&lt;[]Object&gt;</span><br><span class=\"line\">     Pod volumes to mount into the container&#x27;s filesystem. Cannot be updated.</span><br><span class=\"line\"></span><br><span class=\"line\">   workingDir\t&lt;string&gt;</span><br><span class=\"line\">     Container&#x27;s working directory. If not specified, the container runtime&#x27;s</span><br><span class=\"line\">     default will be used, which might be configured in the container image.</span><br><span class=\"line\">     Cannot be updated.</span><br></pre></td></tr></table></figure>\n","comments":true,"permalink":"https://qingdalf.github.io/2021-05/kuberYaml/","categories":[{"name":"kubernets","slug":"kubernets","permalink":"https://qingdalf.github.io/categories/kubernets/"}],"tags":[]},{"title":"快熟部署一个网站","date":"2021-05-05T08:34:56.000Z","path":"2021-05/kuberMakeWeb/","content":"<h2 id=\"1-部署应用流程\"><a href=\"#1-部署应用流程\" class=\"headerlink\" title=\"1. 部署应用流程\"></a>1. 部署应用流程</h2><p>​        在kubernets中部署应用程序的流程，如下：<br> <span id=\"more\"></span><br><img src=\"../kuberPre/image-20210410221952190.png\" alt=\"image-20210410221952190\"></p>\n<h2 id=\"1-流程1–制作镜像\"><a href=\"#1-流程1–制作镜像\" class=\"headerlink\" title=\"1.流程1–制作镜像\"></a>1.流程1–制作镜像</h2><p>​        制作容器镜像–略，镜像仓库默认hub.docker.com，如果是自建仓库，格式一般是ip/仓库名称(如用户名称)/镜像名称:版本信息</p>\n<h2 id=\"2-流程2–通过镜像部署容器\"><a href=\"#2-流程2–通过镜像部署容器\" class=\"headerlink\" title=\"2. 流程2–通过镜像部署容器\"></a>2. 流程2–通过镜像部署容器</h2><h3 id=\"2-1-通过deployment的形式部署nginx容器\"><a href=\"#2-1-通过deployment的形式部署nginx容器\" class=\"headerlink\" title=\"2.1 通过deployment的形式部署nginx容器\"></a>2.1 通过deployment的形式部署nginx容器</h3><p>格式：<code>kubectl create deployment DeployName --image=nginx:latest [--replicas=num]</code></p>\n<ul>\n<li><code>DeployName</code>：是<code>deployment</code>的命令，在同一个命名空间内全局唯一，可以通过<code>kubectl get deploy</code>查看<code>deployment</code>类型的资源信息</li>\n<li><code>[--replicas=num]</code>：指定副本数，可省略，不指定副本数时，默认启动一个pod</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl create deployment web --image=nginx:latest --replicas=3</span></span><br><span class=\"line\">deployment.apps/web created</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pod</span></span><br><span class=\"line\">NAME                     READY   STATUS              RESTARTS   AGE</span><br><span class=\"line\">nginx-6799fc88d8-825ps   1/1     Running             0          22h</span><br><span class=\"line\">web-86cd4d65b9-554kq     0/1     ContainerCreating   0          20s</span><br><span class=\"line\">web-86cd4d65b9-65nkq     0/1     ContainerCreating   0          20s</span><br><span class=\"line\">web-86cd4d65b9-7zml9     0/1     ContainerCreating   0          20s</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-通过deployment的形式部署java-demo容器\"><a href=\"#2-2-通过deployment的形式部署java-demo容器\" class=\"headerlink\" title=\"2.2 通过deployment的形式部署java-demo容器\"></a>2.2 通过deployment的形式部署java-demo容器</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl create deployment java-demo --image=lizhenliang/java-demo --replicas=3</span></span><br><span class=\"line\">deployment.apps/java-demo created</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pod</span></span><br><span class=\"line\">NAME                         READY   STATUS              RESTARTS   AGE</span><br><span class=\"line\">java-demo-56d54df448-7mhg8   0/1     ContainerCreating   0          3s</span><br><span class=\"line\">java-demo-56d54df448-dx767   0/1     ContainerCreating   0          3s</span><br><span class=\"line\">java-demo-56d54df448-flh48   0/1     ContainerCreating   0          3s</span><br><span class=\"line\">nginx-6799fc88d8-825ps       1/1     Running             0          22h</span><br><span class=\"line\">web-86cd4d65b9-554kq         1/1     Running             0          80s</span><br><span class=\"line\">web-86cd4d65b9-65nkq         1/1     Running             0          80s</span><br><span class=\"line\">web-86cd4d65b9-7zml9         1/1     Running             0          80s</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-流程3–暴露端口\"><a href=\"#3-流程3–暴露端口\" class=\"headerlink\" title=\"3. 流程3–暴露端口\"></a>3. 流程3–暴露端口</h2><h3 id=\"3-1-nginx容器\"><a href=\"#3-1-nginx容器\" class=\"headerlink\" title=\"3.1 nginx容器\"></a>3.1 nginx容器</h3><h4 id=\"3-1-1-暴露nginx容器端口\"><a href=\"#3-1-1-暴露nginx容器端口\" class=\"headerlink\" title=\"3.1.1 暴露nginx容器端口\"></a>3.1.1 暴露nginx容器端口</h4><p>格式：<code> kubectl  expose deployment web --port=80 --target-port=80 --type=NodePort</code></p>\n<ul>\n<li><code>--port</code>：指定svc的端口</li>\n<li><code>--target-port</code>：指定容器内的端口</li>\n<li><code>--type</code>：svc的类型，总共有三种，后续<code>Service</code>章节将详细介绍：<ul>\n<li>NodePort：将<code>--port</code>跟宿主机做映射，可通过外网访问</li>\n<li>ClusterIP：默认类型，只能在集群类访问，外网不能访问</li>\n<li>LB：一般用于公有云等</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl  expose deployment web --port=80 --target-port=80 --<span class=\"built_in\">type</span>=NodePort</span></span><br><span class=\"line\">service/web exposed</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get svc</span></span><br><span class=\"line\">NAME         TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)        AGE</span><br><span class=\"line\">kubernetes   ClusterIP   10.96.0.1        &lt;none&gt;        443/TCP        34h</span><br><span class=\"line\">nginx        NodePort    10.103.247.121   &lt;none&gt;        80:32561/TCP   32h</span><br><span class=\"line\">web          NodePort    10.108.74.141    &lt;none&gt;        80:31397/TCP   23s  # 对外暴露的端口是31397</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看关联容器的信息</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get ep</span>   </span><br><span class=\"line\">NAME         ENDPOINTS                                             AGE</span><br><span class=\"line\">kubernetes   10.138.3.61:6443                                      34h</span><br><span class=\"line\">nginx        10.244.154.196:80                                     32h</span><br><span class=\"line\">web          10.244.154.197:80,10.244.44.208:80,10.244.44.209:80   117s  # 这三个ip都是web容器的IP地址</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-1-2-访问nginx容器\"><a href=\"#3-1-2-访问nginx容器\" class=\"headerlink\" title=\"3.1.2 访问nginx容器\"></a>3.1.2 访问nginx容器</h4><ul>\n<li><strong>外网访问nginx网页</strong></li>\n</ul>\n<p>​        访问nginx网页，可通过<code>node:port</code>，<code>node</code>为集群中任意一个node节点，<code>port</code>端口信息为通过<code>kubectl get svc</code>查询到的宿主机<code>port</code></p>\n<img src=\"../kuberPre/image-20210410223019076.png\" alt=\"image-20210410223019076\" style=\"zoom:67%;\" />\n\n\n\n<ul>\n<li><p><strong>通过k8s控制台查看日志</strong></p>\n<p>​    我们可以通过k8s控制台获取访问日志信息，由于后端有三个<code>nginx</code>容器，并且<code>svc</code>自动做了负载均衡，因此只有被<code>svc</code>调度了的<code>nginx</code>后端容才有日志输出，没有被<code>svc</code>调度到的容器没有日志输出，下面将截取<code>nginx</code>容器的日志信息做对比</p>\n</li>\n</ul>\n<p>获取token登陆控制台：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 获取用户Token</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl describe secrets -n kube-system $(kubectl -n kube-system get secret | awk <span class=\"string\">&#x27;/dashboard-admin/&#123;print $1&#125;&#x27;</span>)</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"../kuberPre/image-20210410223345969.png\" alt=\"image-20210410223345969\"></p>\n<p>​        点击web容器查看nginx访问日志，此处值得注意的是，我们启动了三个nginx容器，我们访问的时候只能有一个容器提供服务，因此日志只能提供服务了的容器才有，也就是说这三个nginx容器的日志可能是有的容器访问日志多，有的容器访问日志少，下面截取两张图做个对比</p>\n<p><img src=\"../kuberPre/image-20210410223507547.png\" alt=\"image-20210410223507547\"></p>\n<p>我们截图另一个web容器，查看访问日志</p>\n<p><img src=\"../kuberPre/image-20210410223856368.png\" alt=\"image-20210410223856368\"></p>\n<h3 id=\"3-2-java-demo容器\"><a href=\"#3-2-java-demo容器\" class=\"headerlink\" title=\"3.2 java-demo容器\"></a>3.2 java-demo容器</h3><h4 id=\"3-2-1-暴露-java-demo容器端口\"><a href=\"#3-2-1-暴露-java-demo容器端口\" class=\"headerlink\" title=\"3.2.1 暴露 java-demo容器端口\"></a>3.2.1 暴露 java-demo容器端口</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl  expose deployment java-demo --port=80 --target-port=8080 --<span class=\"built_in\">type</span>=NodePort</span></span><br><span class=\"line\">service/java-demo exposed</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get svc</span></span><br><span class=\"line\">NAME         TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)        AGE</span><br><span class=\"line\">java-demo    NodePort    10.111.242.80    &lt;none&gt;        80:32133/TCP   30s  # 通过Node:32133访问java应用</span><br><span class=\"line\">kubernetes   ClusterIP   10.96.0.1        &lt;none&gt;        443/TCP        34h</span><br><span class=\"line\">nginx        NodePort    10.103.247.121   &lt;none&gt;        80:32561/TCP   32h</span><br><span class=\"line\">web          NodePort    10.108.74.141    &lt;none&gt;        80:31397/TCP   19m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看端点信息</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get ep</span> </span><br><span class=\"line\">NAME         ENDPOINTS                                                    AGE</span><br><span class=\"line\">java-demo    10.244.154.198:8080,10.244.154.199:8080,10.244.44.210:8080   9s # 此处的三个ip对应三个java容器</span><br><span class=\"line\">kubernetes   10.138.3.61:6443                                             34h</span><br><span class=\"line\">nginx        10.244.154.196:80                                            32h</span><br><span class=\"line\">web          10.244.154.197:80,10.244.44.208:80,10.244.44.209:80          18m</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-2-2-访问java-demo容器\"><a href=\"#3-2-2-访问java-demo容器\" class=\"headerlink\" title=\"3.2.2 访问java-demo容器\"></a>3.2.2 访问java-demo容器</h4><ul>\n<li><strong>外网访问java-demo网页</strong></li>\n</ul>\n<p>​        该java应用目前只有一个页面，暂时不能使用，需要结合数据库，页面信息如下：</p>\n<p><img src=\"../kuberPre/image-20210410224423040.png\" alt=\"image-20210410224423040\"></p>\n<ul>\n<li><strong>通过k8s控制台查看日志</strong></li>\n</ul>\n<p>​        方法如nginx容器日志查看方式，此处不再赘述。</p>\n","comments":true,"permalink":"https://qingdalf.github.io/2021-05/kuberMakeWeb/","categories":[{"name":"kubernets","slug":"kubernets","permalink":"https://qingdalf.github.io/categories/kubernets/"}],"tags":[]},{"title":"kubernets管理命令","date":"2021-05-05T08:07:37.000Z","path":"2021-05/kuberMangerment/","content":"<h1 id=\"k8s管理命令\"><a href=\"#k8s管理命令\" class=\"headerlink\" title=\"k8s管理命令\"></a>k8s管理命令</h1><h2 id=\"1-查看master组件\"><a href=\"#1-查看master组件\" class=\"headerlink\" title=\"1 查看master组件\"></a>1 查看master组件</h2><ul>\n<li><strong>查看集群组件cs状态</strong></li>\n</ul>\n<span id=\"more\"></span>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get cs   <span class=\"comment\"># 查看集群组件状态，cs是ComponentStatus的缩写</span></span></span><br><span class=\"line\">Warning: v1  ComponentStatus is deprecated in v1.19+   # 警告：v1版本的cs将在v1.19+ 版本后被弃用</span><br><span class=\"line\">NAME          STATUS      MESSAGE                       ERROR</span><br><span class=\"line\">scheduler     Unhealthy   Get &quot;http://127.0.0.1:10251/healthz&quot;: dial tcp 127.0.0.1:10251: connect: connection refused   </span><br><span class=\"line\">controller-manager   Unhealthy   Get &quot;http://127.0.0.1:10252/healthz&quot;: dial tcp 127.0.0.1:10252: connect: connection refused   </span><br><span class=\"line\">etcd-0        Healthy     &#123;&quot;health&quot;:&quot;true&quot;&#125;   </span><br></pre></td></tr></table></figure>\n\n<p>​        上面显示scheduler和controller-manager服务状态“不健康”，并且不允许被访问，这是k8s的一个小bug，可以通过下面的方法解决.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> vim /etc/kubernetes/manifests/kube-scheduler.yaml <span class=\"comment\"># 注释掉该文件第19行的- --port=0，让其监控端口</span></span></span><br><span class=\"line\">spec:</span><br><span class=\"line\">  containers:</span><br><span class=\"line\">  - command:</span><br><span class=\"line\">    - kube-scheduler</span><br><span class=\"line\">    - --authentication-kubeconfig=/etc/kubernetes/scheduler.conf</span><br><span class=\"line\">    - --authorization-kubeconfig=/etc/kubernetes/scheduler.conf</span><br><span class=\"line\">    - --bind-address=127.0.0.1</span><br><span class=\"line\">    - --kubeconfig=/etc/kubernetes/scheduler.conf</span><br><span class=\"line\">    - --leader-elect=true</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">    - --port=0   <span class=\"comment\"># 注释掉该行</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cat /etc/kubernetes/manifests/kube-controller-manager.yaml <span class=\"comment\"># 注释掉该文件第26行的- --port=0，让其监控端口</span></span></span><br><span class=\"line\">spec:</span><br><span class=\"line\">  containers:</span><br><span class=\"line\">  - command:</span><br><span class=\"line\">    - kube-controller-manager</span><br><span class=\"line\">    - --allocate-node-cidrs=true</span><br><span class=\"line\">    - --authentication-kubeconfig=/etc/kubernetes/controller-manager.conf</span><br><span class=\"line\">    - --authorization-kubeconfig=/etc/kubernetes/controller-manager.conf</span><br><span class=\"line\">    - --bind-address=127.0.0.1</span><br><span class=\"line\">    - --client-ca-file=/etc/kubernetes/pki/ca.crt</span><br><span class=\"line\">    - --cluster-cidr=10.244.0.0/16</span><br><span class=\"line\">    - --cluster-name=kubernetes</span><br><span class=\"line\">    - --cluster-signing-cert-file=/etc/kubernetes/pki/ca.crt</span><br><span class=\"line\">    - --cluster-signing-key-file=/etc/kubernetes/pki/ca.key</span><br><span class=\"line\">    - --controllers=*,bootstrapsigner,tokencleaner</span><br><span class=\"line\">    - --kubeconfig=/etc/kubernetes/controller-manager.conf</span><br><span class=\"line\">    - --leader-elect=true</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">    - --port=0    <span class=\"comment\"># 注释掉该行</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> systemctl restart kubelet   <span class=\"comment\"># 重启kubelet服务</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl  get cs             <span class=\"comment\"># 再次查看cs，显示组件状态都是Healthy</span></span></span><br><span class=\"line\">Warning: v1 ComponentStatus is deprecated in v1.19+</span><br><span class=\"line\">NAME                 STATUS    MESSAGE             ERROR</span><br><span class=\"line\">scheduler            Healthy   ok                  </span><br><span class=\"line\">controller-manager   Healthy   ok                  </span><br><span class=\"line\">etcd-0               Healthy   &#123;&quot;health&quot;:&quot;true&quot;&#125;  </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看apiserver状态</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl api-resources  <span class=\"comment\"># 查看k8s资源信息，此处只列举了一部分</span></span></span><br><span class=\"line\">NAME                 SHORTNAMES   APIVERSION          NAMESPACED   KIND</span><br><span class=\"line\">bindings                           v1                 true         Binding</span><br><span class=\"line\">componentstatuses     cs           v1                 false        ComponentStatus</span><br><span class=\"line\">configmaps            cm           v1                 true         ConfigMap</span><br><span class=\"line\">endpoints             ep           v1                 true         Endpoints</span><br><span class=\"line\">events                ev           v1                 true         Event</span><br><span class=\"line\">events                ev           v1                 true         Event</span><br><span class=\"line\">limitranges           limits       v1                 true         LimitRange</span><br><span class=\"line\">namespaces            ns           v1                 false        Namespace</span><br><span class=\"line\">nodes                 no           v1                 false        Node</span><br><span class=\"line\">persistentvolumeclaims  pvc        v1                 true         PersistentVolumeClaim</span><br><span class=\"line\">persistentvolumes     pv           v1                 false        PersistentVolume</span><br><span class=\"line\">pods                  po           v1                 true         Pod</span><br><span class=\"line\">podtemplates                       v1                 true         PodTemplate</span><br><span class=\"line\">replicationcontrollers rc          v1                 true         ReplicationController</span><br><span class=\"line\">···</span><br><span class=\"line\">nodes                 no           v1                 false        Node</span><br><span class=\"line\">services              svc          v1                 true         Service</span><br><span class=\"line\">daemonsets            ds           apps/v1            true         DaemonSet</span><br><span class=\"line\">deployments           deploy       apps/v1            true         Deployment</span><br><span class=\"line\">replicasets           rs           apps/v1            true         ReplicaSet</span><br><span class=\"line\">events                ev           events.k8s.io/v1   true         Event</span><br><span class=\"line\">ingresses             ing          extensions/v1beta1 true         Ingress</span><br><span class=\"line\">资源名称           资源名称缩写      资源版本             命名空间       资源类型</span><br><span class=\"line\">···</span><br></pre></td></tr></table></figure>\n\n<p>​        kubelet命令执行失败的排查思路：检查apiserver和etcd服务是否正常</p>\n<h2 id=\"2-查看node状态\"><a href=\"#2-查看node状态\" class=\"headerlink\" title=\"2 查看node状态\"></a>2 查看node状态</h2><p>​        如果get node有节点是NotReady转台，排查思路：查看kubelet日志(<code> journalctl -u kublet</code>)，检查kubelet的状态</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get node    <span class=\"comment\"># 查看节点的简单信息</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get node -o wide   <span class=\"comment\"># 查看节点的详细信息</span></span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"../kuberPre/image-20210410185725881.png\" alt=\"image-20210410185725881\"></p>\n<h2 id=\"3-查看apiserver代理的url\"><a href=\"#3-查看apiserver代理的url\" class=\"headerlink\" title=\"3 查看apiserver代理的url\"></a>3 查看apiserver代理的url</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl cluster-info</span> </span><br><span class=\"line\">Kubernetes control plane is running at https://10.138.3.61:6443</span><br><span class=\"line\">KubeDNS is running at https://10.138.3.61:6443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy</span><br><span class=\"line\"></span><br><span class=\"line\">To further debug and diagnose cluster problems, use &#x27;kubectl cluster-info dump&#x27;.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl cluster-info dump  <span class=\"comment\"># 查看集群详细信息</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 输出信息太多</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-查看资源详细信息\"><a href=\"#4-查看资源详细信息\" class=\"headerlink\" title=\"4 查看资源详细信息\"></a>4 查看资源详细信息</h2><p>格式：<code>kubectl describe &lt;资源类型&gt; &lt;资源名称&gt;</code>，如下我们可以通过该指令查看<code>ns</code>、<code>pod</code>、<code>node</code>等资源类型的信息。</p>\n<ul>\n<li>查看名叫kube-system的命令空间的信息</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl describe ns kube-system</span></span><br><span class=\"line\">Name:         kube-system</span><br><span class=\"line\">Labels:       &lt;none&gt;</span><br><span class=\"line\">Annotations:  &lt;none&gt;</span><br><span class=\"line\">Status:       Active</span><br><span class=\"line\"></span><br><span class=\"line\">No resource quota.</span><br><span class=\"line\"></span><br><span class=\"line\">No LimitRange resource.</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看指定pod的详细信息</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl describe pod nginx-6799fc88d8-825ps          <span class=\"comment\"># 查看名叫nginx-6799fc88d8-825ps的pod的信息</span></span></span><br><span class=\"line\">Name:         nginx-6799fc88d8-825ps</span><br><span class=\"line\">Namespace:    default</span><br><span class=\"line\">Priority:     0</span><br><span class=\"line\">Node:         k8s-node-01/10.138.3.62</span><br><span class=\"line\">Start Time:   Fri, 09 Apr 2021 23:26:10 +0800</span><br><span class=\"line\">Labels:       app=nginx</span><br><span class=\"line\">              pod-template-hash=6799fc88d8</span><br><span class=\"line\">Annotations:  cni.projectcalico.org/podIP: 10.244.154.196/32</span><br><span class=\"line\">              cni.projectcalico.org/podIPs: 10.244.154.196/32</span><br><span class=\"line\">Status:       Running</span><br><span class=\"line\">IP:           10.244.154.196</span><br><span class=\"line\">IPs:</span><br><span class=\"line\">  IP:           10.244.154.196</span><br><span class=\"line\">Controlled By:  ReplicaSet/nginx-6799fc88d8</span><br><span class=\"line\">Containers:</span><br><span class=\"line\">  nginx:</span><br><span class=\"line\">    Container ID:   docker://f1a61998e952237162c9d4bbe7424c595c87e694cd03806f4685eeb22d11b1fa</span><br><span class=\"line\">    Image:          nginx</span><br><span class=\"line\">    Image ID:       docker-pullable://nginx@sha256:bae781e7f518e0fb02245140c97e6ddc9f5fcf6aecc043dd9d17e33aec81c832</span><br><span class=\"line\">    Port:           &lt;none&gt;</span><br><span class=\"line\">    Host Port:      &lt;none&gt;</span><br><span class=\"line\">    State:          Running</span><br><span class=\"line\">      Started:      Fri, 09 Apr 2021 23:26:21 +0800</span><br><span class=\"line\">    Ready:          True</span><br><span class=\"line\">    Restart Count:  0</span><br><span class=\"line\">    Environment:    &lt;none&gt;</span><br><span class=\"line\">    Mounts:</span><br><span class=\"line\">      /var/run/secrets/kubernetes.io/serviceaccount from default-token-bq4pj (ro)</span><br><span class=\"line\">Conditions:</span><br><span class=\"line\">  Type              Status</span><br><span class=\"line\">  Initialized       True </span><br><span class=\"line\">  Ready             True </span><br><span class=\"line\">  ContainersReady   True </span><br><span class=\"line\">  PodScheduled      True </span><br><span class=\"line\">Volumes:</span><br><span class=\"line\">  default-token-bq4pj:</span><br><span class=\"line\">    Type:        Secret (a volume populated by a Secret)</span><br><span class=\"line\">    SecretName:  default-token-bq4pj</span><br><span class=\"line\">    Optional:    false</span><br><span class=\"line\">QoS Class:       BestEffort</span><br><span class=\"line\">Node-Selectors:  &lt;none&gt;</span><br><span class=\"line\">Tolerations:     node.kubernetes.io/not-ready:NoExecute op=Exists for 300s</span><br><span class=\"line\">                 node.kubernetes.io/unreachable:NoExecute op=Exists for 300s</span><br><span class=\"line\">Events:          &lt;none&gt;   # 这里有日志输出，可用于排查pod的错误</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看指定node的详细信息</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看名称是k8s-node-01的node节点的信息</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl describe node k8s-node-01</span>           </span><br><span class=\"line\">Name:               k8s-node-01</span><br><span class=\"line\">Roles:              &lt;none&gt;</span><br><span class=\"line\">Labels:             beta.kubernetes.io/arch=amd64</span><br><span class=\"line\">                    beta.kubernetes.io/os=linux</span><br><span class=\"line\">                    kubernetes.io/arch=amd64</span><br><span class=\"line\">                    kubernetes.io/hostname=k8s-node-01</span><br><span class=\"line\">                    kubernetes.io/os=linux</span><br><span class=\"line\">Annotations:        kubeadm.alpha.kubernetes.io/cri-socket: /var/run/dockershim.sock</span><br><span class=\"line\">                    node.alpha.kubernetes.io/ttl: 0</span><br><span class=\"line\">                    projectcalico.org/IPv4Address: 10.138.3.62/24</span><br><span class=\"line\">                    projectcalico.org/IPv4IPIPTunnelAddr: 10.244.154.192</span><br><span class=\"line\">                    volumes.kubernetes.io/controller-managed-attach-detach: true</span><br><span class=\"line\">CreationTimestamp:  Fri, 09 Apr 2021 13:59:16 +0800</span><br><span class=\"line\">Taints:             &lt;none&gt;</span><br><span class=\"line\">Unschedulable:      false</span><br><span class=\"line\">Lease:</span><br><span class=\"line\">  HolderIdentity:  k8s-node-01</span><br><span class=\"line\">  AcquireTime:     &lt;unset&gt;</span><br><span class=\"line\">  RenewTime:       Sat, 10 Apr 2021 19:12:40 +0800</span><br><span class=\"line\">Conditions:</span><br><span class=\"line\">  Type         Status  LastHeartbeatTime    LastTransitionTime       Reason        Message</span><br><span class=\"line\">  ----         ------  -----------------    ------------------       ------        -------</span><br><span class=\"line\">  NetworkUnavailable   False   Fri, 09 Apr 2021 14:02:09 +0800   Fri, 09 Apr 2021 14:02:09 +0800   CalicoIsUp                   Calico is running on this node</span><br><span class=\"line\">  MemoryPressure       False   Sat, 10 Apr 2021 19:09:07 +0800   Fri, 09 Apr 2021 13:59:16 +0800   KubeletHasSufficientMemory   kubelet has sufficient memory available</span><br><span class=\"line\">  DiskPressure         False   Sat, 10 Apr 2021 19:09:07 +0800   Fri, 09 Apr 2021 13:59:16 +0800   KubeletHasNoDiskPressure     kubelet has no disk pressure</span><br><span class=\"line\">  PIDPressure          False   Sat, 10 Apr 2021 19:09:07 +0800   Fri, 09 Apr 2021 13:59:16 +0800   KubeletHasSufficientPID      kubelet has sufficient PID available</span><br><span class=\"line\">  Ready                True    Sat, 10 Apr 2021 19:09:07 +0800   Fri, 09 Apr 2021 14:00:57 +0800   KubeletReady                 kubelet is posting ready status</span><br><span class=\"line\">Addresses:</span><br><span class=\"line\">  InternalIP:  10.138.3.62</span><br><span class=\"line\">  Hostname:    k8s-node-01</span><br><span class=\"line\">Capacity:</span><br><span class=\"line\">  cpu:                2</span><br><span class=\"line\">  ephemeral-storage:  47056436Ki</span><br><span class=\"line\">  hugepages-1Gi:      0</span><br><span class=\"line\">  hugepages-2Mi:      0</span><br><span class=\"line\">  memory:             3861276Ki</span><br><span class=\"line\">  pods:               110</span><br><span class=\"line\">Allocatable:</span><br><span class=\"line\">  cpu:                2</span><br><span class=\"line\">  ephemeral-storage:  43367211346</span><br><span class=\"line\">  hugepages-1Gi:      0</span><br><span class=\"line\">  hugepages-2Mi:      0</span><br><span class=\"line\">  memory:             3758876Ki</span><br><span class=\"line\">  pods:               110</span><br><span class=\"line\">System Info:</span><br><span class=\"line\">  Machine ID:                 470ef48e132b4cb2969dd0b3a9470468</span><br><span class=\"line\">  System UUID:                76904D56-2C28-AF2B-1B8F-D40CD5F84CA3</span><br><span class=\"line\">  Boot ID:                    596b2960-83d3-453c-a2e5-33e89812527e</span><br><span class=\"line\">  Kernel Version:             3.10.0-1160.21.1.el7.x86_64</span><br><span class=\"line\">  OS Image:                   CentOS Linux 7 (Core)</span><br><span class=\"line\">  Operating System:           linux</span><br><span class=\"line\">  Architecture:               amd64</span><br><span class=\"line\">  Container Runtime Version:  docker://20.10.5</span><br><span class=\"line\">  Kubelet Version:            v1.20.0</span><br><span class=\"line\">  Kube-Proxy Version:         v1.20.0</span><br><span class=\"line\">PodCIDR:                      10.244.1.0/24</span><br><span class=\"line\">PodCIDRs:                     10.244.1.0/24</span><br><span class=\"line\">Non-terminated Pods:          (4 in total)</span><br><span class=\"line\">  Namespace       Name                  CPU Requests  CPU Limits  Memory Requests  Memory Limits  AGE</span><br><span class=\"line\">  ---------      ----                   ------------  ----------  ---------------  -------------  ---</span><br><span class=\"line\">  default         nginx-6799fc88d8-825ps 0 (0%)        0 (0%)      0 (0%)           0 (0%)         19h</span><br><span class=\"line\">  kube-system     calico-node-zwrm8      250m (12%)    0 (0%)      0 (0%)           0 (0%)         29h</span><br><span class=\"line\">  kube-system     kube-proxy-bzhts       0 (0%)        0 (0%)      0 (0%)           0 (0%)         29h</span><br><span class=\"line\">  kubernetes-dashboard  kubernetes-dashboard-5dbf55bd9d-ktdz8    0 (0%) 0 (0%)   0 (0%)  0 (0%)     28h</span><br><span class=\"line\">Allocated resources:</span><br><span class=\"line\">  (Total limits may be over 100 percent, i.e., overcommitted.)</span><br><span class=\"line\">  Resource           Requests    Limits</span><br><span class=\"line\">  --------           --------    ------</span><br><span class=\"line\">  cpu                250m (12%)  0 (0%)</span><br><span class=\"line\">  memory             0 (0%)      0 (0%)</span><br><span class=\"line\">  ephemeral-storage  0 (0%)      0 (0%)</span><br><span class=\"line\">  hugepages-1Gi      0 (0%)      0 (0%)</span><br><span class=\"line\">  hugepages-2Mi      0 (0%)      0 (0%)</span><br><span class=\"line\">Events:                              # 事件信息--可用于排错</span><br><span class=\"line\">  Type    Reason           Age   From     Message</span><br><span class=\"line\">  ----    ------           ----  ----     -------</span><br><span class=\"line\">  Normal  NodeSchedulable  19m   kubelet  Node k8s-node-01 status is now: NodeSchedulable</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-kubectl管理工具\"><a href=\"#5-kubectl管理工具\" class=\"headerlink\" title=\"5 kubectl管理工具\"></a>5 kubectl管理工具</h2><h3 id=\"5-1-kubectl配置文件\"><a href=\"#5-1-kubectl配置文件\" class=\"headerlink\" title=\"5.1 kubectl配置文件\"></a>5.1 kubectl配置文件</h3><p>​      <code>kubectl</code>使用<code>kubeconfig</code>认证文件连接k8s集群，使用<code>kubectl config</code>指令生成<code>kubeconfig文</code>件。默认路径是<code>/root/.kube/config</code>，也可以在使用<code>--kubeconfig=Path</code>指定<code>kubeconfig</code>文件，<code>kubeconfig</code>文件格式如下：</p>\n<img src=\"../kuberPre/image-20210410214949332.png\" alt=\"image-20210410214949332\" style=\"zoom:67%;\" />\n\n<p>集群中<code>kubeconfig</code>文件内容如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cat /root/.kube/config</span> </span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">clusters:</span><br><span class=\"line\">- cluster:</span><br><span class=\"line\">    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM1ekNDQWMrZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJeE1EUXdPVEF6TkRVMU0xb1hEVE14TURRd056QXpORFUxTTFvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTW40CitLQklXeTVQQUVrOW11cG9mbDUxRTlBczE0NHJhZUYyVXlneDB4MnlVWTB2eE1SYlFxajFUYUlTTWhNR1BlYXYKbjN4WDNZak9aSDNyM0thbmp2dkJVeXh0TU9CRk5DTG5QOFZBcjVmblQxRjh0Y2U1YnBDMXRKSk1hT3g1TE1KbQpiS3pOODJkb3N3Q2hoOVV0NlJoZXZIL2VudG1VVnhzZ1NnTUdHSnNtbEpkOVVBcmM0dGhXQk1JcUlQMEs4dFc5Cm1OZlNvamFaeU9HRmsxVGtRS2pRQngzMTd1MGpFWFFmZDFwVkt1c2JMN205Lzh4dmh1c3dlVjBMWUxXdi9TWTAKU0lZbHAvdDFjdk1rL1VPR2RBcGdFZGV4S1NsKzlEalBmd09HLzZ4REFoL0ZIbXY2MHJ2U2FEK09uemVSZy9rUQpuQzRUczdkRWMvR3lvaVNlQ2ZrQ0F3RUFBYU5DTUVBd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZFc1NUeGRLY3BVQmNWc24yRHJoallRL0lQWVhNQTBHQ1NxR1NJYjMKRFFFQkN3VUFBNElCQVFDRlNra1FDUjRLNEp2L1JlVWZvTjM1d01VS2lRUTlCTzlLQnd3RXVwUndkVXJ3TFZDTApKUWNJbEtHSWRyQ2hJNUt5Q1ZQUkdyZm5teVpoNWZmdkpTZk42VU5wV0c5TGk4OXI5ak5qZ2psVjE4SE9kYjdCCi9ObE1sdzJ6ellxcDZSRG16K0RDbXY3cmgzOHBpdk00S2dOdjd5VENrakZwYmQ1VjZaaUdsZWNRWlMwcVhxQlMKdVlpZk9DdFBVUGVsSWxwOHI5Mmp1cGVXWDE2SnVhWDNnTU9DRGxuOGUwa3c4VFBJM0lRRGQzYmlqa2pOb3VLdQprZG96UTF4Zk1LLzMzN2VZWHlxbWZSK1Bmd0ljaW9Kd3ZIOHpTeGREV29mZjhnYXF5SW4yK0hTVHhpQVdXOGZ3CkF2V20wODFnbUNndnBSM2M0Zy9SdVE2UU1WVmdXazEybTk5OAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==</span><br><span class=\"line\">    server: https://10.138.3.61:6443</span><br><span class=\"line\">  name: kubernetes</span><br><span class=\"line\">contexts:</span><br><span class=\"line\">- context:</span><br><span class=\"line\">    cluster: kubernetes</span><br><span class=\"line\">    user: kubernetes-admin</span><br><span class=\"line\">  name: kubernetes-admin@kubernetes</span><br><span class=\"line\">current-context: kubernetes-admin@kubernetes</span><br><span class=\"line\">kind: Config</span><br><span class=\"line\">preferences: &#123;&#125;</span><br><span class=\"line\">users:</span><br><span class=\"line\">- name: kubernetes-admin</span><br><span class=\"line\">  user:</span><br><span class=\"line\">    client-certificate-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lJTzBhNmh5OTJzdmN3RFFZSktvWklodmNOQVFFTEJRQXdGVEVUTUJFR0ExVUUKQXhNS2EzVmlaWEp1WlhSbGN6QWVGdzB5TVRBME1Ea3dNelExTlROYUZ3MHlNakEwTURrd016UTFOVFphTURReApGekFWQmdOVkJBb1REbk41YzNSbGJUcHRZWE4wWlhKek1Sa3dGd1lEVlFRREV4QnJkV0psY201bGRHVnpMV0ZrCmJXbHVNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQTNVUVBJOFdVdFVFOS8zZkoKbHNXdWxpTUJkalk1aFhFL0dITUpnTERIdU9aU2ZuVFJzYTRET3RaaTdEdFVxc0dkZjl3eXBLRitGUUxmR2d1QwpRY3dVOWE5TksxZTdkRCthTkhLeFpmdnNlWk9Lck5PQ2pJbk5uU2NzanRpSkc3OVNYU1ltNjFQeUJtNnJDSE1zCm96Z21sQlFXZkRUUHp0NmpEL213TWlQblV2am5nWHREOE1QanAwekpqSFJaZzY3eERqSVBiQUtvbGNDSnY1c3QKZTU3cjVzZDkwOHB5N2lDYVBXcFNOV3RPc2JGaktSQWI5VXFqamg3M09xcUVIK240WFpNRWFlZXhrMWJUdStxdAo0Y0UwUVlVcUMxRktTWTVnTHR6VVdGNlQ2VGNaSjhXU0huV0JMa25xbHJ0WGFrdi9sTTY2bDFsWGlSQTAyVmp0ClI5NEtGUUlEQVFBQm8wZ3dSakFPQmdOVkhROEJBZjhFQkFNQ0JhQXdFd1lEVlIwbEJBd3dDZ1lJS3dZQkJRVUgKQXdJd0h3WURWUjBqQkJnd0ZvQVVTeEpQRjBweWxRRnhXeWZZT3VHTmhEOGc5aGN3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFFM1BMY0lhQmdzOU9hN3lBUHFrQm9tOWN2M0d0bi9icFpiYng1clhvdGl3SzRwdVFXcmlhTDhQCm1Hc3YyMkZtb3JwVDRMRHJWODBFZVd4ZEdTTWVDR1grdEE2ZUtDS1RTNGpSSEZ5V0FXZDN4Wkd0QzducUNwejkKMmFvZG1nZUhMS05HZDJKV2dNRHphUnRtRXlEK3lMZWc5MkVJNytIeVpORFVUYUhuZGVmaTVESG1tM0FYWk1TbQpQT1NrejVJOVcwcEd0K3d1WGZwb0hqMTF2MytYWndTaFdEd3U1S1JiTTVadUNWSTVsaXBhUHIrczRyTW14T2JxCjIvdEQrUU14akZmbkpRK0VXeFBnR0t4RFRYLzJGckpNY1BTcEVuQjVWczRqQnBLdFA1emhMRW9XazRRSkl1VzcKRzBCL21rVytvUWlOOC9VWUhDRmdXS3ltTUxQUWNvcz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=</span><br><span class=\"line\">    client-key-data: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBM1VRUEk4V1V0VUU5LzNmSmxzV3VsaU1CZGpZNWhYRS9HSE1KZ0xESHVPWlNmblRSCnNhNERPdFppN0R0VXFzR2RmOXd5cEtGK0ZRTGZHZ3VDUWN3VTlhOU5LMWU3ZEQrYU5IS3haZnZzZVpPS3JOT0MKakluTm5TY3NqdGlKRzc5U1hTWW02MVB5Qm02ckNITXNvemdtbEJRV2ZEVFB6dDZqRC9td01pUG5VdmpuZ1h0RAo4TVBqcDB6SmpIUlpnNjd4RGpJUGJBS29sY0NKdjVzdGU1N3I1c2Q5MDhweTdpQ2FQV3BTTld0T3NiRmpLUkFiCjlVcWpqaDczT3FxRUgrbjRYWk1FYWVleGsxYlR1K3F0NGNFMFFZVXFDMUZLU1k1Z0x0elVXRjZUNlRjWko4V1MKSG5XQkxrbnFscnRYYWt2L2xNNjZsMWxYaVJBMDJWanRSOTRLRlFJREFRQUJBb0lCQURtUWJVZm5MVXNDa0RpWQpWMi9NT2lHQk5lNGxLVTNZS293WDBZOFRic0poMlhCZ3YvVXp5azlTV3lZT1FYYXpMR0NKVHZ1WnNBMlRVNnVZCjl1aGJTZENwTExCc0FLNjdwVWlqMWhjc05WZGoxUjRsWUw5alVvVGlIaXVEbGhnTDdFZWpsMWg5M0dkai8wY1IKZjdsdThFcHg5MitVNWNOeUZJWWhkWDkxNjhhZjBzeldVblhJRWdNV2JyUCtIL2hQTTFicVlpN2NKL0E4SjQ5bQpPQk5wY2ZaTzZJaVVYdVE0WGJRMkl4Z2VVSnN2bUVhRHNFQWdHMlRtUUVpeGlUNlhIQUtqcWV0bEw2UzYreVoyCmd5dE1uV1BNS2QvUVY2N055WkNxSU9CZ015OFV1Q1RUa24rVkxtRGhuTUtJLzJ0UUM3RytaeDdoc1JpUGJmUHYKMURyZTkva0NnWUVBK2pONXJBZVNVUCtxTEozUGthZ1BEeE9Ic3lVbkUxbXRLM3Y2ZitqcWRXMUdOazZvK20vbwpzTmtWQmJCOUQ3ejI2anRLM0pWR3h1a1I3L3ByZTBabXdGQ3ZWY2pHbU4rbEkxY1FPSHhvWCtjcm1lNGpMMDRMCktkWDNtNDZwcG1KSzNIUnBnTHlFdEY2QjhvRitNWU1YNGxhaUMvQ2x6TmMwWFlrN2FTQ01nTHNDZ1lFQTRtVG0KMlFyL3FzK2dxZ3h6U3YxTXhFNzJRaEtTVkZYZWxHbnJHVHZXV0dPU0Rabmx3QkwyL1VydVIxbXlnYmY1MzFQQQpLVDhKbXM0cWx1V21oRHora2dXZ2p1Y05EU1JUSU9Sa21WZ0VhQjc5RTlwY2tYMnlsOURPbmR2ckczdVN1emlTCjhRMitRdUxSNGxicXFINzYxVXUzWCt6T3Y2bW5JY1Boc2Y5em0yOENnWUEvNHJEb3FpNUVIR1A1YkhvNXVPM1AKYmE4eW9RUHZQdkNtcjh0d3FhcGtQWGkyR1RPd2JxNjlxVkJpMllPMVp3eXRGbUt4SERTc1NZclkrZHBENmVBRwpyeE4yRmdRUHVOdFR3TUZWaXY2anJrVkYwcmFOTjZKR0ZtcFkvLzUxaTVlTjN2T3BlWGx4RE1pbGdVY1ZvV0dSCjI0a1kvMk4yZ0dUUWxWL2tJZmwrVFFLQmdRQ05sMFc1b09OZDFSVkt4UmFtWTkxTE9ZZFNzNExKTkJ0TS95R0cKV3FJb0RiNGV1NDJ4bnlyU0o3YjI4T1p2c3J5WUxDMFdudEpHKzRJdmRkbTdBdHJFUUxpMkoxTkdVTjJjeUxzUwpITFpFMkh5M21lNGpJRlkrRk4za1pOS2FFYU1uYks2YURGcGVRclc1dFZwMW4xVUphWjE2WlFTNVlrV2hISDFmCmNjREFDUUtCZ0RJbmt2bnVEY0VaeDRxc2xHdHAraGxhRTR2ZkJiTG1mZG02MEd5b01LemhnZ1BwUDhxaEVld3MKZEFocGI1YmV2bk1yUG9oMjM0V3hMU0VVOVpKTDNCSXg5K3R0QXI2eDBicVR0b3NZem1WelJiQVpvbjBBS3lEdgpsbnFqdmpFN2pGTkcyalJNbXBBV3V5OXlGSlkwVERBQzJhL1VmaTM4NjRDRHpkT3lFeGdOCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-2-kubectl管理命令概要\"><a href=\"#5-2-kubectl管理命令概要\" class=\"headerlink\" title=\"5.2 kubectl管理命令概要\"></a>5.2 kubectl管理命令概要</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看帮助文档的简单方法</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl --<span class=\"built_in\">help</span>   <span class=\"comment\"># 查看kubectl的帮助信息</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl create --<span class=\"built_in\">help</span>   <span class=\"comment\"># 查看kubectl create的帮助信息</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl create deployment --<span class=\"built_in\">help</span>  <span class=\"comment\"># 查看kubectl create deployment的帮助信息</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 自动补全功能</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum -y install bash-completion   <span class=\"comment\"># 依赖于bash-completion该软件包</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">source</span>  &lt;(kubectl completion bash)   <span class=\"comment\"># 注意&lt;(之间没有空格，有空格会报错</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">source</span>  /usr/share/bash-completion/bash_completion   <span class=\"comment\"># 重载一下该文件</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get n[TAB]              <span class=\"comment\"># 此时就可以使用补全功能了</span></span></span><br><span class=\"line\">namespaces   networkpolicies.networking.k8s.io      nodes                                  </span><br><span class=\"line\">networkpolicies.crd.projectcalico.org  networksets.crd.projectcalico.org </span><br></pre></td></tr></table></figure>\n\n<p><img src=\"../kuberPre/image-20210410215820251.png\" alt=\"image-20210410215820251\"></p>\n<p><img src=\"../kuberPre/image-20210410215832677.png\" alt=\"image-20210410215832677\"></p>\n","comments":true,"permalink":"https://qingdalf.github.io/2021-05/kuberMangerment/","categories":[],"tags":[]},{"title":"切换容器引擎为Containerd","date":"2021-05-04T13:05:57.000Z","path":"2021-05/kuberRuncSwitch/","content":"<p>官网参考文档：<a href=\"https://kubernetes.io/zh/docs/setup/production-environment/container-runtimes/#containerd\">https://kubernetes.io/zh/docs/setup/production-environment/container-runtimes/#containerd</a></p>\n<span id=\"more\"></span>\n<h3 id=\"1-迁移宿主机上pod\"><a href=\"#1-迁移宿主机上pod\" class=\"headerlink\" title=\"1. 迁移宿主机上pod\"></a>1. 迁移宿主机上pod</h3><h4 id=\"1-1-设置宿主机不允许被调度\"><a href=\"#1-1-设置宿主机不允许被调度\" class=\"headerlink\" title=\"1.1 设置宿主机不允许被调度\"></a>1.1 设置宿主机不允许被调度</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl cordon k8s-node-01    <span class=\"comment\"># 设置k8s-node-01节点不允许被调度创建容器</span></span></span><br><span class=\"line\">node/k8s-node-01 already cordoned</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get node   <span class=\"comment\"># 此时显示k8s-node-01不允许被调度</span></span></span><br><span class=\"line\">NAME          STATUS                     ROLES                  AGE   VERSION</span><br><span class=\"line\">k8s-master    Ready                      control-plane,master   11h   v1.20.0</span><br><span class=\"line\">k8s-node-01   Ready,SchedulingDisabled   &lt;none&gt;                 9h    v1.20.0</span><br><span class=\"line\">k8s-node-02   Ready                      &lt;none&gt;                 9h    v1.20.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl cordon命令帮助文档解释</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl cordon --<span class=\"built_in\">help</span></span>   </span><br><span class=\"line\">Mark node as unschedulable.   # 让节点不可调度</span><br><span class=\"line\"></span><br><span class=\"line\">Examples:</span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\"> Mark node <span class=\"string\">&quot;foo&quot;</span> as unschedulable.</span></span><br><span class=\"line\">  kubectl cordon foo    # 设置foo节点不允许被调度创建容器</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\">      --dry-run=&#x27;none&#x27;: Must be &quot;none&quot;, &quot;server&quot;, or &quot;client&quot;. If client strategy, only print the object that would be</span><br><span class=\"line\">sent, without sending it. If server strategy, submit server-side request without persisting the resource.</span><br><span class=\"line\">  -l, --selector=&#x27;&#x27;: Selector (label query) to filter on</span><br><span class=\"line\"></span><br><span class=\"line\">Usage:</span><br><span class=\"line\">  kubectl cordon NODE [options]</span><br><span class=\"line\"></span><br><span class=\"line\">Use &quot;kubectl options&quot; for a list of global command-line options (applies to all commands).</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-2-驱赶宿主机上pod\"><a href=\"#1-2-驱赶宿主机上pod\" class=\"headerlink\" title=\"1.2 驱赶宿主机上pod\"></a>1.2 驱赶宿主机上pod</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pod -o wide   <span class=\"comment\"># 此时pod还在k8s-node-01上</span></span></span><br><span class=\"line\">NAME             READY   STATUS    RESTARTS   AGE    IP   NODE   NOMINATED NODE   READINESS GATES</span><br><span class=\"line\">nginx-6799fc88d8-825ps   1/1 Running 0 8m4s 10.244.154.196  k8s-node-01 &lt;none&gt;     &lt;none&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl drain  k8s-node-01</span></span><br><span class=\"line\">node/k8s-node-01 already cordoned</span><br><span class=\"line\">error: unable to drain node &quot;k8s-node-01&quot;, aborting command...</span><br><span class=\"line\"></span><br><span class=\"line\">There are pending nodes to be drained:  # 提示网络容器和web页面容器删除失败，可使用--ignore-daemonsets忽略</span><br><span class=\"line\"> k8s-node-01</span><br><span class=\"line\">cannot delete DaemonSet-managed Pods (use --ignore-daemonsets to ignore): kube-system/calico-node-zwrm8, kube-system/kube-proxy-bzhts</span><br><span class=\"line\">cannot delete Pods with local storage (use --delete-emptydir-data to override): kubernetes-dashboard/kubernetes-dashboard-5dbf55bd9d-ktdz8</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pod -o wide | grep k8s-node-01  <span class=\"comment\"># 检查是否还存在pod</span></span></span><br><span class=\"line\">NAME             READY   STATUS    RESTARTS   AGE    IP   NODE   NOMINATED NODE   READINESS GATES</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl drain命令帮助文档解释</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl drain --<span class=\"built_in\">help</span></span></span><br><span class=\"line\">Drain node in preparation for maintenance.</span><br><span class=\"line\"></span><br><span class=\"line\"> The given node will be marked unschedulable to prevent new pods from arriving. &#x27;drain&#x27; evicts the pods if the APIServer</span><br><span class=\"line\">supports http://kubernetes.io/docs/admin/disruptions/ . Otherwise, it will use normal DELETE to delete the pods. The</span><br><span class=\"line\">&#x27;drain&#x27; evicts or deletes all pods except mirror pods (which cannot be deleted through the API server).  If there are</span><br><span class=\"line\">DaemonSet-managed pods, drain will not proceed without --ignore-daemonsets, and regardless it will not delete any</span><br><span class=\"line\">DaemonSet-managed pods, because those pods would be immediately replaced by the DaemonSet controller, which ignores</span><br><span class=\"line\">unschedulable markings.  If there are any pods that are neither mirror pods nor managed by ReplicationController,</span><br><span class=\"line\">ReplicaSet, DaemonSet, StatefulSet or Job, then drain will not delete any pods unless you use --force.  --force will</span><br><span class=\"line\">also allow deletion to proceed if the managing resource of one or more pods is missing.</span><br><span class=\"line\"></span><br><span class=\"line\"> &#x27;drain&#x27; waits for graceful termination. You should not operate on the machine until the command completes.</span><br><span class=\"line\"></span><br><span class=\"line\"> When you are ready to put the node back into service, use kubectl uncordon, which will make the node schedulable again.</span><br><span class=\"line\"></span><br><span class=\"line\"> http://kubernetes.io/images/docs/kubectl_drain.svg</span><br><span class=\"line\"></span><br><span class=\"line\">Examples:</span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\"> Drain node <span class=\"string\">&quot;foo&quot;</span>, even <span class=\"keyword\">if</span> there are pods not managed by a ReplicationController, ReplicaSet, Job, DaemonSet or</span></span><br><span class=\"line\">StatefulSet on it.</span><br><span class=\"line\"><span class=\"meta\">  $</span><span class=\"bash\"> kubectl drain foo --force</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\"> As above, but abort <span class=\"keyword\">if</span> there are pods not managed by a ReplicationController, ReplicaSet, Job, DaemonSet or</span></span><br><span class=\"line\">StatefulSet, and use a grace period of 15 minutes.</span><br><span class=\"line\"><span class=\"meta\">  $</span><span class=\"bash\"> kubectl drain foo --grace-period=900</span></span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\">      --delete-emptydir-data=false: Continue even if there are pods using emptyDir (local data that will be deleted when</span><br><span class=\"line\">the node is drained).</span><br><span class=\"line\">      --disable-eviction=false: Force drain to use delete, even if eviction is supported. This will bypass checking</span><br><span class=\"line\">PodDisruptionBudgets, use with caution.</span><br><span class=\"line\">      --dry-run=&#x27;none&#x27;: Must be &quot;none&quot;, &quot;server&quot;, or &quot;client&quot;. If client strategy, only print the object that would be</span><br><span class=\"line\">sent, without sending it. If server strategy, submit server-side request without persisting the resource.</span><br><span class=\"line\">      --force=false: Continue even if there are pods not managed by a ReplicationController, ReplicaSet, Job, DaemonSet</span><br><span class=\"line\">or StatefulSet.</span><br><span class=\"line\">      --grace-period=-1: Period of time in seconds given to each pod to terminate gracefully. If negative, the default</span><br><span class=\"line\">value specified in the pod will be used.</span><br><span class=\"line\">      --ignore-daemonsets=false: Ignore DaemonSet-managed pods.</span><br><span class=\"line\">      --pod-selector=&#x27;&#x27;: Label selector to filter pods on the node</span><br><span class=\"line\">  -l, --selector=&#x27;&#x27;: Selector (label query) to filter on</span><br><span class=\"line\">      --skip-wait-for-delete-timeout=0: If pod DeletionTimestamp older than N seconds, skip waiting for the pod.</span><br><span class=\"line\">Seconds must be greater than 0 to skip.</span><br><span class=\"line\">      --timeout=0s: The length of time to wait before giving up, zero means infinite</span><br><span class=\"line\"></span><br><span class=\"line\">Usage:</span><br><span class=\"line\">  kubectl drain NODE [options]</span><br><span class=\"line\"></span><br><span class=\"line\">Use &quot;kubectl options&quot; for a list of global command-line options (applies to all commands).</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-3-升级完成后，重新设置该节点为可调度节点\"><a href=\"#1-3-升级完成后，重新设置该节点为可调度节点\" class=\"headerlink\" title=\"1.3 升级完成后，重新设置该节点为可调度节点\"></a>1.3 升级完成后，重新设置该节点为可调度节点</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 待node节点恢复/更换容器引擎完成后，重新运行节点调度</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl uncordon k8s-node-01</span></span><br><span class=\"line\">node/k8s-node-01 uncordoned</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get node</span></span><br><span class=\"line\">NAME          STATUS   ROLES                  AGE   VERSION</span><br><span class=\"line\">k8s-master    Ready    control-plane,master   31h   v1.20.0</span><br><span class=\"line\">k8s-node-01   Ready    &lt;none&gt;                 28h   v1.20.0   # 状态变成Ready</span><br><span class=\"line\">k8s-node-02   Ready    &lt;none&gt;                 28h   v1.20.0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-开始切换容器引擎\"><a href=\"#2-开始切换容器引擎\" class=\"headerlink\" title=\"2. 开始切换容器引擎\"></a>2. 开始切换容器引擎</h3><p>​        下面步骤参考kuberntes官方切换容器引擎文档，官方文档地址：<a href=\"https://kubernetes.io/zh/docs/setup/production-environment/container-runtimes/#containerd\">https://kubernetes.io/zh/docs/setup/production-environment/container-runtimes/#containerd</a></p>\n<h4 id=\"2-1-切换的先决条件\"><a href=\"#2-1-切换的先决条件\" class=\"headerlink\" title=\"2.1 切换的先决条件\"></a>2.1 切换的先决条件</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cat &lt;&lt;<span class=\"string\">EOF | sudo tee /etc/modules-load.d/containerd.conf</span></span></span><br><span class=\"line\">overlay</span><br><span class=\"line\">br_netfilter</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 加载内核并查看加载结果</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> modprobe overlay</span>        </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> modprobe br_netfilter</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> lsmod | grep overlay</span></span><br><span class=\"line\">overlay                91659  8 </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> lsmod | grep br_netfilter</span></span><br><span class=\"line\">br_netfilter           22256  0 </span><br><span class=\"line\">bridge                151336  1 br_netfilter</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 设置必需的sysctl参数，这些参数在重新启动后仍然存在。</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cat &lt;&lt;<span class=\"string\">EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf</span></span></span><br><span class=\"line\">net.bridge.bridge-nf-call-iptables  = 1</span><br><span class=\"line\">net.ipv4.ip_forward                 = 1</span><br><span class=\"line\">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Apply sysctl params without reboot</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> sysctl --system</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 可通过sysctl  -a | grep xx进行查询是否配置成功</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-安装containerd\"><a href=\"#2-2-安装containerd\" class=\"headerlink\" title=\"2.2 安装containerd\"></a>2.2 安装containerd</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum install -y yum-utils device-mapper-persistent-data lvm2</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum-config-manager \\</span></span><br><span class=\"line\"><span class=\"bash\">    --add-repo \\</span></span><br><span class=\"line\"><span class=\"bash\">    https://download.docker.com/linux/centos/docker-ce.repo</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> sudo yum install -y containerd.io</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> mkdir -p /etc/containerd</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> containerd config default |  tee /etc/containerd/config.toml   <span class=\"comment\"># 生成配置文件</span></span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-修改配置文件\"><a href=\"#2-3-修改配置文件\" class=\"headerlink\" title=\"2.3 修改配置文件\"></a>2.3 修改配置文件</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> vi /etc/containerd/config.toml</span></span><br><span class=\"line\">   [plugins.&quot;io.containerd.grpc.v1.cri&quot;]</span><br><span class=\"line\">      sandbox_image = &quot;registry.aliyuncs.com/google_containers/pause:3.2&quot; </span><br><span class=\"line\">         ...</span><br><span class=\"line\">         [plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd.runtimes.runc.options]</span><br><span class=\"line\">             SystemdCgroup = true         # 启用containerd</span><br><span class=\"line\">             ...</span><br><span class=\"line\">        [plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.mirrors.&quot;docker.io&quot;]</span><br><span class=\"line\">          endpoint = [&quot;https://b9pmyelo.mirror.aliyuncs.com&quot;]     # 设置镜像仓库为阿里云</span><br><span class=\"line\">          </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> systemctl restart containerd  &amp;&amp; systemctl <span class=\"built_in\">enable</span> containerd</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ps -ef | grep contianerd</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 停止docker</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl  get node</span></span><br><span class=\"line\">NAME          STATUS   ROLES                  AGE     VERSION</span><br><span class=\"line\">k8s-master    Ready    control-plane,master   6h28m   v1.20.0</span><br><span class=\"line\">k8s-node-01   Ready    &lt;none&gt;                 4h15m   v1.20.0</span><br><span class=\"line\">k8s-node-02   Ready    &lt;none&gt;                 4h14m   v1.20.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> systemctl stop docker   <span class=\"comment\"># 关闭失败，提示随时可能被docker.socket唤醒</span></span></span><br><span class=\"line\">Warning: Stopping docker.service, but it can still be activated by:</span><br><span class=\"line\">  docker.socket</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 如果停止了，还是有docker进程，就直接通过停止docker.socket停止docker</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> systemctl stop docker.socket</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> systemctl <span class=\"built_in\">disable</span> docker</span> </span><br><span class=\"line\">Removed symlink /etc/systemd/system/multi-user.target.wants/docker.service.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl  get node    <span class=\"comment\"># 由于k8s-node-02停止了docker服务，因此状态就变成了NotReady</span></span></span><br><span class=\"line\">NAME          STATUS     ROLES                  AGE   VERSION</span><br><span class=\"line\">k8s-master    Ready      control-plane,master   11h   v1.20.0</span><br><span class=\"line\">k8s-node-01   Ready      &lt;none&gt;                 8h    v1.20.0</span><br><span class=\"line\">k8s-node-02   NotReady   &lt;none&gt;                 8h    v1.20.0</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-4-配置kubelet使用containerd\"><a href=\"#2-4-配置kubelet使用containerd\" class=\"headerlink\" title=\"2.4 配置kubelet使用containerd\"></a><strong>2.4 配置kubelet使用containerd</strong></h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> vi /etc/sysconfig/kubelet</span> </span><br><span class=\"line\">KUBELET_EXTRA_ARGS=--container-runtime=remote --container-runtime-endpoint=unix:///run/containerd/containerd.sock --cgroup-driver=systemd</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 说明</span></span><br><span class=\"line\">     1.--container-runtime=remote  # 容器引擎为第三方容器引擎</span><br><span class=\"line\">     2.--container-runtime-endpoint=unix:///run/containerd/containerd.sock  # 指定socket文件位置</span><br><span class=\"line\">     3.--cgroup-driver=systemd    # 指定cgroup驱动是systemd</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> systemctl restart kubelet</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> journalctl -u kubelet -f   <span class=\"comment\"># 如果切换容器引擎时失败，可通过该命令查看kubelet日志</span></span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-5-验证\"><a href=\"#2-5-验证\" class=\"headerlink\" title=\"2.5 验证\"></a>2.5 验证</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl  get node</span></span><br><span class=\"line\">NAME          STATUS   ROLES                  AGE   VERSION</span><br><span class=\"line\">k8s-master    Ready    control-plane,master   11h   v1.20.0</span><br><span class=\"line\">k8s-node-01   Ready    &lt;none&gt;                 8h    v1.20.0</span><br><span class=\"line\">k8s-node-02   Ready    &lt;none&gt;                 8h    v1.20.0       # 状态已经变成Ready了</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get node -o wide   <span class=\"comment\"># 通过该命令详细查看node节点信息，可以看到容器引擎已经切换到1.4.4版本的containerd</span></span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"../kuberPre/image-20210409225809284.png\" alt=\"image-20210409225809284\"></p>\n<h4 id=\"2-6-containerd和crictl命令\"><a href=\"#2-6-containerd和crictl命令\" class=\"headerlink\" title=\"2.6 containerd和crictl命令\"></a>2.6 containerd和crictl命令</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> containerd[TAB]    <span class=\"comment\"># 可以看到系统上现在有如下关于containerd的命令</span></span></span><br><span class=\"line\">containerd  containerd-shim   containerd-shim-runc-v1  containerd-shim-runc-v2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> containerd --<span class=\"built_in\">help</span></span></span><br><span class=\"line\">NAME:</span><br><span class=\"line\">   containerd - </span><br><span class=\"line\">                    __        _                     __</span><br><span class=\"line\">  _________  ____  / /_____ _(_)___  ___  _________/ /</span><br><span class=\"line\"> / ___/ __ \\/ __ \\/ __/ __ `/ / __ \\/ _ \\/ ___/ __  /</span><br><span class=\"line\">/ /__/ /_/ / / / / /_/ /_/ / / / / /  __/ /  / /_/ /</span><br><span class=\"line\">\\___/\\____/_/ /_/\\__/\\__,_/_/_/ /_/\\___/_/   \\__,_/</span><br><span class=\"line\"></span><br><span class=\"line\">high performance container runtime</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">USAGE:</span><br><span class=\"line\">   containerd [global options] command [command options] [arguments...]</span><br><span class=\"line\"></span><br><span class=\"line\">VERSION:</span><br><span class=\"line\">   1.4.4</span><br><span class=\"line\"></span><br><span class=\"line\">DESCRIPTION:</span><br><span class=\"line\">   </span><br><span class=\"line\">containerd is a high performance container runtime whose daemon can be started</span><br><span class=\"line\">by using this command. If none of the *config*, *publish*, or *help* commands</span><br><span class=\"line\">are specified, the default action of the **containerd** command is to start the</span><br><span class=\"line\">containerd daemon in the foreground.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">A default configuration is used if no TOML configuration is specified or located</span><br><span class=\"line\">at the default file location. The *containerd config* command can be used to</span><br><span class=\"line\">generate the default configuration for containerd. The output of that command</span><br><span class=\"line\">can be used and modified as necessary as a custom configuration.</span><br><span class=\"line\"></span><br><span class=\"line\">COMMANDS:</span><br><span class=\"line\">   config    information on the containerd config</span><br><span class=\"line\">   publish   binary to publish events to containerd</span><br><span class=\"line\">   oci-hook  provides a base for OCI runtime hooks to allow arguments to be injected.</span><br><span class=\"line\">   help, h   Shows a list of commands or help for one command</span><br><span class=\"line\"></span><br><span class=\"line\">GLOBAL OPTIONS:</span><br><span class=\"line\">   --config value, -c value     path to the configuration file (default: &quot;/etc/containerd/config.toml&quot;)</span><br><span class=\"line\">   --log-level value, -l value  set the logging level [trace, debug, info, warn, error, fatal, panic]</span><br><span class=\"line\">   --address value, -a value    address for containerd&#x27;s GRPC server</span><br><span class=\"line\">   --root value                 containerd root directory</span><br><span class=\"line\">   --state value                containerd state directory</span><br><span class=\"line\">   --help, -h                   show help</span><br><span class=\"line\">   --version, -v                print the version</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>容器的工具crictl命令</strong></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> rpm -qf  /usr/bin/crictl    <span class=\"comment\"># crictl属于cri-tools软件包</span></span></span><br><span class=\"line\">cri-tools-1.13.0-0.x86_64</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> crictl --<span class=\"built_in\">help</span>   <span class=\"comment\"># crictl是一个用于管理容器的工具，常用于检查和调试</span></span></span><br><span class=\"line\">NAME:</span><br><span class=\"line\">   crictl - client for CRI</span><br><span class=\"line\"></span><br><span class=\"line\">USAGE:</span><br><span class=\"line\">   crictl [global options] command [command options] [arguments...]</span><br><span class=\"line\"></span><br><span class=\"line\">VERSION:</span><br><span class=\"line\">   v1.13.0</span><br><span class=\"line\"></span><br><span class=\"line\">COMMANDS:</span><br><span class=\"line\">     attach        Attach to a running container</span><br><span class=\"line\">     create        Create a new container</span><br><span class=\"line\">     exec          Run a command in a running container</span><br><span class=\"line\">     version       Display runtime version information</span><br><span class=\"line\">     images        List images</span><br><span class=\"line\">     inspect       Display the status of one or more containers</span><br><span class=\"line\">     inspecti      Return the status of one or more images</span><br><span class=\"line\">     inspectp      Display the status of one or more pods</span><br><span class=\"line\">     logs          Fetch the logs of a container</span><br><span class=\"line\">     port-forward  Forward local port to a pod</span><br><span class=\"line\">     ps            List containers</span><br><span class=\"line\">     pull          Pull an image from a registry</span><br><span class=\"line\">     runp          Run a new pod</span><br><span class=\"line\">     rm            Remove one or more containers</span><br><span class=\"line\">     rmi           Remove one or more images</span><br><span class=\"line\">     rmp           Remove one or more pods</span><br><span class=\"line\">     pods          List pods</span><br><span class=\"line\">     start         Start one or more created containers</span><br><span class=\"line\">     info          Display information of the container runtime</span><br><span class=\"line\">     stop          Stop one or more running containers</span><br><span class=\"line\">     stopp         Stop one or more running pods</span><br><span class=\"line\">     update        Update one or more running containers</span><br><span class=\"line\">     config        Get and set crictl options</span><br><span class=\"line\">     stats         List container(s) resource usage statistics</span><br><span class=\"line\">     completion    Output bash shell completion code</span><br><span class=\"line\">     help, h       Shows a list of commands or help for one command</span><br><span class=\"line\"></span><br><span class=\"line\">GLOBAL OPTIONS:</span><br><span class=\"line\">   --config value, -c value            Location of the client config file (default: &quot;/etc/crictl.yaml&quot;) [$CRI_CONFIG_FILE]</span><br><span class=\"line\">   --debug, -D                         Enable debug mode</span><br><span class=\"line\">   --image-endpoint value, -i value    Endpoint of CRI image manager service [$IMAGE_SERVICE_ENDPOINT]</span><br><span class=\"line\">   --runtime-endpoint value, -r value  Endpoint of CRI container runtime service (default: &quot;unix:///var/run/dockershim.sock&quot;) [$CONTAINER_RUNTIME_ENDPOINT]</span><br><span class=\"line\">   --timeout value, -t value           Timeout of connecting to the server (default: 10s)</span><br><span class=\"line\">   --help, -h                          show help</span><br><span class=\"line\">   --version, -v                       print the version</span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> crictl images       <span class=\"comment\"># 查看容器镜像</span></span></span><br><span class=\"line\">IMAGE                                                TAG                 IMAGE ID            SIZE</span><br><span class=\"line\">calico/cni                                           v3.18.1             21fdaa2fccee2       131MB</span><br><span class=\"line\">calico/node                                          v3.18.1             50b52cdadbcf0       172MB</span><br><span class=\"line\">calico/pod2daemon-flexvol                            v3.18.1             3994c62982cc0       21.7MB</span><br><span class=\"line\">kubernetesui/dashboard                               v2.0.3              503bc4b7440b9       225MB</span><br><span class=\"line\">nginx                                                latest              7ce4f91ef623b       133MB</span><br><span class=\"line\">registry.aliyuncs.com/google_containers/kube-proxy   v1.20.0             10cc881966cfd       118MB</span><br><span class=\"line\">registry.aliyuncs.com/google_containers/pause        3.2                 80d28bedfe5de       683kB</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> crictl inspecti nginx    <span class=\"comment\"># 查看指定镜像nginx的详细信息</span></span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;status&quot;: &#123;</span><br><span class=\"line\">    &quot;id&quot;: &quot;sha256:7ce4f91ef623b9672ec12302c4a710629cd542617c1ebc616a48d06e2a84656a&quot;,</span><br><span class=\"line\">    &quot;repoTags&quot;: [</span><br><span class=\"line\">      &quot;nginx:latest&quot;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    &quot;repoDigests&quot;: [</span><br><span class=\"line\">      &quot;nginx@sha256:bae781e7f518e0fb02245140c97e6ddc9f5fcf6aecc043dd9d17e33aec81c832&quot;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    &quot;size&quot;: &quot;133108593&quot;,</span><br><span class=\"line\">    &quot;uid&quot;: null,</span><br><span class=\"line\">    &quot;username&quot;: &quot;&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;maintainer&quot;: &quot;NGINX Docker Maintainers &lt;docker-maint@nginx.com&gt;&quot;</span><br></pre></td></tr></table></figure>\n","comments":true,"permalink":"https://qingdalf.github.io/2021-05/kuberRuncSwitch/","categories":[{"name":"kubernets","slug":"kubernets","permalink":"https://qingdalf.github.io/categories/kubernets/"}],"tags":[]},{"title":"kubernets集群搭建","date":"2021-05-04T12:43:22.000Z","path":"2021-05/kuberInstall/","content":"<h2 id=\"1-kubernetes集群搭建的两种方式\"><a href=\"#1-kubernetes集群搭建的两种方式\" class=\"headerlink\" title=\"1 kubernetes集群搭建的两种方式\"></a>1 kubernetes集群搭建的两种方式</h2><p>​        kubernetes集群搭建提供了下面两种方式，建议都熟悉</p>\n<ul>\n<li>kubeadm：Kubeadm是一个工具，提供kubeadm init和kubeadm join，用于快熟部署kubernetes集群<ul>\n<li>网址：<a href=\"https://kubernetes.io/docs/reference/setup-tools/kubeadm/\">https://kubernetes.io/docs/reference/setup-tools/kubeadm/</a></li>\n</ul>\n</li>\n<li>二进制：从官方下载发行版的二进制包，手动部署每个组件，组成kubernetes集群<ul>\n<li><a href=\"https://github.com/kubernetes/kubernetes/tree/release-xx\">https://github.com/kubernetes/kubernetes/tree/release-xx</a><span id=\"more\"></span></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-搭建\"><a href=\"#2-搭建\" class=\"headerlink\" title=\"2 搭建\"></a>2 搭建</h2><p>环境规划：<br>| 序号 | IP地址      | 主机名      | 操作系统版本   | 在集群中地位 |<br>| —- | ———– | ———– | ————– | ———— |<br>| 1    | 10.138.3.61 | k8s-master  | CentOS7.6.1810 | master       |<br>| 2    | 10.138.3.62 | k8s-Node-01 | CentOS7.6.1810 | node         |<br>| 3    | 10.138.3.63 | k8s-Node-01 | CentOS7.6.1810 | node         |</p>\n<h3 id=\"2-1-准备工作\"><a href=\"#2-1-准备工作\" class=\"headerlink\" title=\"2.1 准备工作\"></a>2.1 准备工作</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 关闭防火墙：</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> systemctl stop firewalld</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> systemctl <span class=\"built_in\">disable</span> firewalld</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 关闭selinux：</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> sed -i <span class=\"string\">&#x27;s/enforcing/disabled/&#x27;</span> /etc/selinux/config  <span class=\"comment\"># 永久</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> setenforce 0  <span class=\"comment\"># 临时</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 关闭swap：</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> swapoff -a  <span class=\"comment\"># 临时</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> vim /etc/fstab  <span class=\"comment\"># 永久</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 设置主机名：</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> hostnamectl set-hostname &lt;hostname&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 在master添加hosts：</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cat &gt;&gt; /etc/hosts &lt;&lt; <span class=\"string\">EOF</span></span></span><br><span class=\"line\">10.138.3.61 k8s-master</span><br><span class=\"line\">10.138.3.62 k8s-Node-01</span><br><span class=\"line\">10.138.3.63 k8s-Node-02</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 将桥接的IPv4流量传递到iptables的链：</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cat &gt; /etc/sysctl.d/k8s.conf &lt;&lt; <span class=\"string\">EOF</span></span></span><br><span class=\"line\">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class=\"line\">net.bridge.bridge-nf-call-iptables = 1</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> sysctl --system  <span class=\"comment\"># 生效</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 时间同步：</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum  -y install chronyd</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> systemctl start chronyd &amp;&amp; systemctl <span class=\"built_in\">enable</span> chronyd</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-安装docker\"><a href=\"#2-2-安装docker\" class=\"headerlink\" title=\"2.2 安装docker\"></a>2.2 安装docker</h3><p>​        Kubernetes默认CRI（容器运行时，理解为<code>容器引擎</code>）为Docker，因此先安装Docker</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> wget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo -O /etc/yum.repos.d/docker-ce.repo</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum -y install docker-ce</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> systemctl <span class=\"built_in\">enable</span> docker &amp;&amp; systemctl start docker</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 配置镜像加速器</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cat &gt; /etc/docker/daemon.json &lt;&lt; <span class=\"string\">EOF</span></span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;registry-mirrors&quot;: [&quot;https://b9pmyelo.mirror.aliyuncs.com&quot;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> systemctl restart docker</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker --version</span></span><br><span class=\"line\">Docker version 20.10.5, build 55c4c88</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3-安装控制节点\"><a href=\"#2-3-安装控制节点\" class=\"headerlink\" title=\"2.3 安装控制节点\"></a>2.3 安装控制节点</h3><h4 id=\"2-3-1-k8s安装工具-kubeadm\"><a href=\"#2-3-1-k8s安装工具-kubeadm\" class=\"headerlink\" title=\"2.3.1 k8s安装工具-kubeadm\"></a>2.3.1 k8s安装工具-kubeadm</h4><p>​        配置阿里云的kubernets源</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cat &gt; /etc/yum.repos.d/kubernetes.repo &lt;&lt; <span class=\"string\">EOF</span></span></span><br><span class=\"line\">[kubernetes]</span><br><span class=\"line\">name=Kubernetes</span><br><span class=\"line\">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">gpgcheck=0</span><br><span class=\"line\">repo_gpgcheck=0</span><br><span class=\"line\">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n<p>安装kubeadm、kubeclt、kubelet</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum install -y kubelet-1.20.0 kubeadm-1.20.0 kubectl-1.20.0</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> systemctl <span class=\"built_in\">enable</span> kubelet</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-2-初始化–kubeadm-init\"><a href=\"#2-3-2-初始化–kubeadm-init\" class=\"headerlink\" title=\"2.3.2 初始化–kubeadm init\"></a>2.3.2 初始化–kubeadm init</h4><p>在Master上执行。</p>\n<p>kubadm init做了哪些工作？</p>\n<ul>\n<li>[preflight] 环境检查和拉取镜像</li>\n<li>[certs] 生成证书文件，存放目录：/etc/kubernetes/pki</li>\n<li>[kubeconfig] 生成kubeconfig连接k8s配置文件，存放目录：/etc/kubernetes/</li>\n<li>[kubelet-start] 生成kubelet配置文件并启动</li>\n<li>[control-plane] 以静态pod方式启动master组件</li>\n<li>存放master组件配置文件/etc/kubernetes/manifests，存储配置到k8s configmap中</li>\n<li>[mark-control-plane] 给master节点配置role和添加污点（没声明的情况下，不允许pod分配过来）</li>\n<li>[bootstrap-token] 为kubelet自动生成证书的一系列配置</li>\n<li>[addons] 安装插件，CoreDNS和kube-proxy</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">  kubeadm init \\</span></span><br><span class=\"line\"><span class=\"bash\">&gt;   --apiserver-advertise-address=10.138.3.61 \\</span></span><br><span class=\"line\"><span class=\"bash\">&gt;   --image-repository registry.aliyuncs.com/google_containers \\</span></span><br><span class=\"line\"><span class=\"bash\">&gt;   --kubernetes-version v1.20.0 \\</span></span><br><span class=\"line\"><span class=\"bash\">&gt;   --service-cidr=10.96.0.0/12 \\</span></span><br><span class=\"line\"><span class=\"bash\">&gt;   --pod-network-cidr=10.244.0.0/16 \\</span></span><br><span class=\"line\"><span class=\"bash\">&gt;   --ignore-preflight-errors=all</span></span><br><span class=\"line\">[init] Using Kubernetes version: v1.20.0</span><br><span class=\"line\">[preflight] Running pre-flight checks</span><br><span class=\"line\">\t[WARNING IsDockerSystemdCheck]: detected &quot;cgroupfs&quot; as the Docker cgroup driver. The recommended driver is &quot;systemd&quot;. Please follow the guide at https://kubernetes.io/docs/setup/cri/</span><br><span class=\"line\">\t[WARNING SystemVerification]: this Docker version is not on the list of validated versions: 20.10.5. Latest validated version: 19.03</span><br><span class=\"line\">[preflight] Pulling images required for setting up a Kubernetes cluster</span><br><span class=\"line\">[preflight] This might take a minute or two, depending on the speed of your internet connection</span><br><span class=\"line\">[preflight] You can also perform this action in beforehand using &#x27;kubeadm config images pull&#x27;</span><br><span class=\"line\">[certs] Using certificateDir folder &quot;/etc/kubernetes/pki&quot;</span><br><span class=\"line\">[certs] Generating &quot;ca&quot; certificate and key</span><br><span class=\"line\">[certs] Generating &quot;apiserver&quot; certificate and key</span><br><span class=\"line\">[certs] apiserver serving cert is signed for DNS names [k8s-master kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 10.138.3.61]</span><br><span class=\"line\">[certs] Generating &quot;apiserver-kubelet-client&quot; certificate and key</span><br><span class=\"line\">[certs] Generating &quot;front-proxy-ca&quot; certificate and key</span><br><span class=\"line\">[certs] Generating &quot;front-proxy-client&quot; certificate and key</span><br><span class=\"line\">[certs] Generating &quot;etcd/ca&quot; certificate and key</span><br><span class=\"line\">[certs] Generating &quot;etcd/server&quot; certificate and key</span><br><span class=\"line\">[certs] etcd/server serving cert is signed for DNS names [k8s-master localhost] and IPs [10.138.3.61 127.0.0.1 ::1]</span><br><span class=\"line\">[certs] Generating &quot;etcd/peer&quot; certificate and key</span><br><span class=\"line\">[certs] etcd/peer serving cert is signed for DNS names [k8s-master localhost] and IPs [10.138.3.61 127.0.0.1 ::1]</span><br><span class=\"line\">[certs] Generating &quot;etcd/healthcheck-client&quot; certificate and key</span><br><span class=\"line\">[certs] Generating &quot;apiserver-etcd-client&quot; certificate and key</span><br><span class=\"line\">[certs] Generating &quot;sa&quot; key and public key</span><br><span class=\"line\">[kubeconfig] Using kubeconfig folder &quot;/etc/kubernetes&quot;</span><br><span class=\"line\">[kubeconfig] Writing &quot;admin.conf&quot; kubeconfig file</span><br><span class=\"line\">[kubeconfig] Writing &quot;kubelet.conf&quot; kubeconfig file</span><br><span class=\"line\">[kubeconfig] Writing &quot;controller-manager.conf&quot; kubeconfig file</span><br><span class=\"line\">[kubeconfig] Writing &quot;scheduler.conf&quot; kubeconfig file</span><br><span class=\"line\">[kubelet-start] Writing kubelet environment file with flags to file &quot;/var/lib/kubelet/kubeadm-flags.env&quot;</span><br><span class=\"line\">[kubelet-start] Writing kubelet configuration to file &quot;/var/lib/kubelet/config.yaml&quot;</span><br><span class=\"line\">[kubelet-start] Starting the kubelet</span><br><span class=\"line\">[control-plane] Using manifest folder &quot;/etc/kubernetes/manifests&quot;</span><br><span class=\"line\">[control-plane] Creating static Pod manifest for &quot;kube-apiserver&quot;</span><br><span class=\"line\">[control-plane] Creating static Pod manifest for &quot;kube-controller-manager&quot;</span><br><span class=\"line\">[control-plane] Creating static Pod manifest for &quot;kube-scheduler&quot;</span><br><span class=\"line\">[etcd] Creating static Pod manifest for local etcd in &quot;/etc/kubernetes/manifests&quot;</span><br><span class=\"line\">[wait-control-plane] Waiting for the kubelet to boot up the control plane as static Pods from directory &quot;/etc/kubernetes/manifests&quot;. This can take up to 4m0s</span><br><span class=\"line\">[apiclient] All control plane components are healthy after 9.503626 seconds</span><br><span class=\"line\">[upload-config] Storing the configuration used in ConfigMap &quot;kubeadm-config&quot; in the &quot;kube-system&quot; Namespace</span><br><span class=\"line\">[kubelet] Creating a ConfigMap &quot;kubelet-config-1.20&quot; in namespace kube-system with the configuration for the kubelets in the cluster</span><br><span class=\"line\">[upload-certs] Skipping phase. Please see --upload-certs</span><br><span class=\"line\">[mark-control-plane] Marking the node k8s-master as control-plane by adding the labels &quot;node-role.kubernetes.io/master=&#x27;&#x27;&quot; and &quot;node-role.kubernetes.io/control-plane=&#x27;&#x27; (deprecated)&quot;</span><br><span class=\"line\">[mark-control-plane] Marking the node k8s-master as control-plane by adding the taints [node-role.kubernetes.io/master:NoSchedule]</span><br><span class=\"line\">[bootstrap-token] Using token: uqp2hx.gaud04r7o5d1y68r</span><br><span class=\"line\">[bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles</span><br><span class=\"line\">[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to get nodes</span><br><span class=\"line\">[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials</span><br><span class=\"line\">[bootstrap-token] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token</span><br><span class=\"line\">[bootstrap-token] configured RBAC rules to allow certificate rotation for all node client certificates in the cluster</span><br><span class=\"line\">[bootstrap-token] Creating the &quot;cluster-info&quot; ConfigMap in the &quot;kube-public&quot; namespace</span><br><span class=\"line\">[kubelet-finalize] Updating &quot;/etc/kubernetes/kubelet.conf&quot; to point to a rotatable kubelet client certificate and key</span><br><span class=\"line\">[addons] Applied essential addon: CoreDNS</span><br><span class=\"line\">[addons] Applied essential addon: kube-proxy</span><br><span class=\"line\"></span><br><span class=\"line\">Your Kubernetes control-plane has initialized successfully!</span><br><span class=\"line\"></span><br><span class=\"line\">To start using your cluster, you need to run the following as a regular user:</span><br><span class=\"line\"></span><br><span class=\"line\">  mkdir -p $HOME/.kube</span><br><span class=\"line\">  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class=\"line\">  sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br><span class=\"line\"></span><br><span class=\"line\">Alternatively, if you are the root user, you can run:</span><br><span class=\"line\"></span><br><span class=\"line\">  export KUBECONFIG=/etc/kubernetes/admin.conf</span><br><span class=\"line\"></span><br><span class=\"line\">You should now deploy a pod network to the cluster.</span><br><span class=\"line\">Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:</span><br><span class=\"line\">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class=\"line\"></span><br><span class=\"line\">Then you can join any number of worker nodes by running the following on each as root:</span><br><span class=\"line\"></span><br><span class=\"line\">kubeadm join 10.138.3.61:6443 --token uqp2hx.gaud04r7o5d1y68r \\</span><br><span class=\"line\">    --discovery-token-ca-cert-hash sha256:9d384bc1d7f292796aec5ce3a2b9c774493997d4062e2efc8fd6313630fed561 </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> </span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>–apiserver-advertise-address 集群通告地址</li>\n<li>–image-repository  由于默认拉取镜像地址k8s.gcr.io国内无法访问，这里指定阿里云镜像仓库地址</li>\n<li>–kubernetes-version K8s版本，与上面安装的一致</li>\n<li>–service-cidr 集群内部虚拟网络，Pod统一访问入口</li>\n<li>–pod-network-cidr Pod网络，，与下面部署的CNI网络组件yaml中保持一致</li>\n</ul>\n<p>或者使用配置文件引导：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> vi kubeadm.conf</span></span><br><span class=\"line\">apiVersion: kubeadm.k8s.io/v1beta2</span><br><span class=\"line\">kind: ClusterConfiguration</span><br><span class=\"line\">kubernetesVersion: v1.20.0</span><br><span class=\"line\">imageRepository: registry.aliyuncs.com/google_containers </span><br><span class=\"line\">networking:</span><br><span class=\"line\">  podSubnet: 10.244.0.0/16 </span><br><span class=\"line\">  serviceSubnet: 10.96.0.0/12 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubeadm init --config kubeadm.conf --ignore-preflight-errors=all</span>  </span><br></pre></td></tr></table></figure>\n\n<p>拷贝kubectl使用的连接k8s认证文件到默认路径：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> mkdir -p <span class=\"variable\">$HOME</span>/.kube</span></span><br><span class=\"line\"> cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class=\"line\"> chown $(id -u):$(id -g) $HOME/.kube/config</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get nodes</span></span><br><span class=\"line\">NAME                     STATUS    ROLES                  AGE   VERSION</span><br><span class=\"line\">localhost.localdomain   NotReady   control-plane,master   20s   v1.20.0   # 此时得状态为NotReady</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> tailf /var/<span class=\"built_in\">log</span>/messages   <span class=\"comment\"># 日志中显示kubernets网络未准备好</span></span></span><br><span class=\"line\">Apr  9 11:59:57 k8s-master kubelet: W0409 11:59:57.698459    3798 cni.go:239] Unable to update cni config: no networks found in /etc/cni/net.d</span><br><span class=\"line\"></span><br><span class=\"line\">Apr  9 12:00:00 k8s-master kubelet: E0409 12:00:00.679027    3798 kubelet.go:2160] Container runtime network not ready: NetworkReady=false reason:NetworkPluginNotReady message:docker: network plugin is not ready: cni config uninitialized</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-4-将Node节点加入k8s集群\"><a href=\"#2-4-将Node节点加入k8s集群\" class=\"headerlink\" title=\"2.4. 将Node节点加入k8s集群\"></a>2.4. 将Node节点加入k8s集群</h3><p>​         向集群添加新节点，在所有node节点执行在kubeadm init输出的kubeadm join命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubeadm join 10.138.3.61:6443 --token uqp2hx.gaud04r7o5d1y68r \\</span></span><br><span class=\"line\"><span class=\"bash\">&gt;     --discovery-token-ca-cert-hash sha256:9d384bc1d7f292796aec5ce3a2b9c774493997d4062e2efc8fd6313630fed561</span> </span><br><span class=\"line\">[preflight] Running pre-flight checks</span><br><span class=\"line\">\t[WARNING IsDockerSystemdCheck]: detected &quot;cgroupfs&quot; as the Docker cgroup driver. The recommended driver is &quot;systemd&quot;. Please follow the guide at https://kubernetes.io/docs/setup/cri/</span><br><span class=\"line\">\t[WARNING SystemVerification]: this Docker version is not on the list of validated versions: 20.10.5. Latest validated version: 19.03</span><br><span class=\"line\">[preflight] Reading configuration from the cluster...</span><br><span class=\"line\">[preflight] FYI: You can look at this config file with &#x27;kubectl -n kube-system get cm kubeadm-config -o yaml&#x27;</span><br><span class=\"line\">[kubelet-start] Writing kubelet configuration to file &quot;/var/lib/kubelet/config.yaml&quot;</span><br><span class=\"line\">[kubelet-start] Writing kubelet environment file with flags to file &quot;/var/lib/kubelet/kubeadm-flags.env&quot;</span><br><span class=\"line\">[kubelet-start] Starting the kubelet</span><br><span class=\"line\">[kubelet-start] Waiting for the kubelet to perform the TLS Bootstrap...</span><br><span class=\"line\"></span><br><span class=\"line\">This node has joined the cluster:</span><br><span class=\"line\">* Certificate signing request was sent to apiserver and a response was received.</span><br><span class=\"line\">* The Kubelet was informed of the new secure connection details.</span><br><span class=\"line\"></span><br><span class=\"line\">Run &#x27;kubectl get nodes&#x27; on the control-plane to see this node join the cluster.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get nodes      <span class=\"comment\"># 查看node节点信息，访问失败</span></span></span><br><span class=\"line\">The connection to the server localhost:8080 was refused - did you specify the right host or port?</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 在node的当前用户下新建.kube目录</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> mkdir -p <span class=\"variable\">$HOME</span>/.kube</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 将master上的kube.conf文件拷贝到Node节点上的.kube目录中并授予权限</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> scp -P 10022 /etc/kubernetes/admin.conf  root@k8s-Node-01:/root/.kube/config</span> </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> scp -P 10022 /etc/kubernetes/admin.conf  root@k8s-Node-02:/root/.kube/config</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 在Node上授权</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">sudo chown $(id -u):$(id -g) <span class=\"variable\">$HOME</span>/.kube/config</span></span><br></pre></td></tr></table></figure>\n\n<p>​        默认token有效期为24小时，当过期之后，该token就不可用了。这时就需要重新创建token，可以直接使用命令快捷生成：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubeadm token create --print-join-command</span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm-join/\">https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm-join/</a></p>\n<h3 id=\"2-5-客户端工具–kubectl\"><a href=\"#2-5-客户端工具–kubectl\" class=\"headerlink\" title=\"2.5 客户端工具–kubectl\"></a>2.5 客户端工具–kubectl</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl --<span class=\"built_in\">help</span></span> </span><br><span class=\"line\">kubectl controls the Kubernetes cluster manager.</span><br><span class=\"line\"></span><br><span class=\"line\"> Find more information at: https://kubernetes.io/docs/reference/kubectl/overview/</span><br><span class=\"line\"></span><br><span class=\"line\">Basic Commands (Beginner):</span><br><span class=\"line\">  create        Create a resource from a file or from stdin.</span><br><span class=\"line\">  expose        Take a replication controller, service, deployment or pod and expose it as a new Kubernetes Service</span><br><span class=\"line\">  run           Run a particular image on the cluster</span><br><span class=\"line\">  set           Set specific features on objects</span><br><span class=\"line\"></span><br><span class=\"line\">Basic Commands (Intermediate):</span><br><span class=\"line\">  explain       Documentation of resources     # 资源文档信息</span><br><span class=\"line\">  get           Display one or many resources  # 展示资源</span><br><span class=\"line\">  edit          Edit a resource on the server    # 编辑资源信息</span><br><span class=\"line\">  delete        Delete resources by filenames, stdin, resources and names, or by resources and label selector    # 删除资源</span><br><span class=\"line\"></span><br><span class=\"line\">Deploy Commands:</span><br><span class=\"line\">  rollout       Manage the rollout of a resource</span><br><span class=\"line\">  scale         Set a new size for a Deployment, ReplicaSet or Replication Controller</span><br><span class=\"line\">  autoscale     Auto-scale a Deployment, ReplicaSet, or ReplicationController</span><br><span class=\"line\"></span><br><span class=\"line\">Cluster Management Commands:    # 集群管理命令</span><br><span class=\"line\">  certificate   Modify certificate resources.   # 修改证书认证信息</span><br><span class=\"line\">  cluster-info  Display cluster info     # 显示集群信息</span><br><span class=\"line\">  top           Display Resource (CPU/Memory/Storage) usage.   # 展示集群资源利用率</span><br><span class=\"line\">  cordon        Mark node as unschedulable   # 标记node(计算节点)不可被调度，即不允许在该节点上创建pod</span><br><span class=\"line\">  uncordon      Mark node as schedulable     # 恢复node(计算节点)使用，允许被调度</span><br><span class=\"line\">  drain         Drain node in preparation for maintenance  # 将node(计算节点)上的pod迁移到其他node节点</span><br><span class=\"line\">  taint         Update the taints on one or more nodes</span><br><span class=\"line\"></span><br><span class=\"line\">Troubleshooting and Debugging Commands:   # 排错和debug命令</span><br><span class=\"line\">  describe      Show details of a specific resource or group of resources</span><br><span class=\"line\">  logs          Print the logs for a container in a pod</span><br><span class=\"line\">  attach        Attach to a running container</span><br><span class=\"line\">  exec          Execute a command in a container</span><br><span class=\"line\">  port-forward  Forward one or more local ports to a pod</span><br><span class=\"line\">  proxy         Run a proxy to the Kubernetes API server</span><br><span class=\"line\">  cp            Copy files and directories to and from containers.</span><br><span class=\"line\">  auth          Inspect authorization</span><br><span class=\"line\">  debug         Create debugging sessions for troubleshooting workloads and nodes</span><br><span class=\"line\"></span><br><span class=\"line\">Advanced Commands:   # 高级命令</span><br><span class=\"line\">  diff          Diff live version against would-be applied version</span><br><span class=\"line\">  apply         Apply a configuration to a resource by filename or stdin</span><br><span class=\"line\">  patch         Update field(s) of a resource</span><br><span class=\"line\">  replace       Replace a resource by filename or stdin</span><br><span class=\"line\">  wait          Experimental: Wait for a specific condition on one or many resources.</span><br><span class=\"line\">  kustomize     Build a kustomization target from a directory or a remote url.</span><br><span class=\"line\"></span><br><span class=\"line\">Settings Commands:   # 设置命令</span><br><span class=\"line\">  label         Update the labels on a resource</span><br><span class=\"line\">  annotate      Update the annotations on a resource</span><br><span class=\"line\">  completion    Output shell completion code for the specified shell (bash or zsh)</span><br><span class=\"line\"></span><br><span class=\"line\">Other Commands:    # 其他命令</span><br><span class=\"line\">  api-resources Print the supported API resources on the server</span><br><span class=\"line\">  api-versions  Print the supported API versions on the server, in the form of &quot;group/version&quot;</span><br><span class=\"line\">  config        Modify kubeconfig files    # 修改kubeconfig文件</span><br><span class=\"line\">  plugin        Provides utilities for interacting with plugins.</span><br><span class=\"line\">  version       Print the client and server version information</span><br><span class=\"line\"></span><br><span class=\"line\">Usage:   # 基本用法</span><br><span class=\"line\">  kubectl [flags] [options]</span><br><span class=\"line\"></span><br><span class=\"line\">Use &quot;kubectl &lt;command&gt; --help&quot; for more information about a given command.</span><br><span class=\"line\">Use &quot;kubectl options&quot; for a list of global command-line options (applies to all commands).</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-部署容器网络–CNI\"><a href=\"#3-部署容器网络–CNI\" class=\"headerlink\" title=\"3. 部署容器网络–CNI\"></a>3. 部署容器网络–CNI</h2><p>docker两台宿主机上的容器通信过程：</p>\n<p>​        docker容器默认在每台宿主机上使用相同的子网(172.17.0.0/24)，我们在两台docker主机上分别新建两个容器，如果是第一次在这两个节点新建容器，那么这两个容器分配的默认IP地址都是172.17.0.2/24，即ip地址重复，即使不是第一次新建容器，如果我们要访问IP地址为172.17.0.2的容器，必然会先访问到同台宿主机上IP地址为172.17.0.2的容器，而不会访问另一台宿主机上IP地址为172.17.0.2的容器，因此要想实现每台docker主机上的容器使用不同的子网，就需要对整个容器网络进行规划，CNI就是这样的一个软件解决方案</p>\n<p>部署容器网络的原因：</p>\n<p>​        <strong>部署网络组件的目的是打通Pod到Pod之间网络、Node与Pod之间网络，从而集群中数据包可以任意传输，形成了一个扁平化网络</strong>。</p>\n<p>​       主流网络组件有：Flannel、Calico等。</p>\n<p>​       所谓的CNI（Container Network Interface，容器网络接口）就是k8s对接这些第三方网络组件的接口。</p>\n<p><a href=\"https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/#pod-network\">https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/#pod-network</a> </p>\n<p>注意：只需要部署下面其中一个，推荐Calico。</p>\n<p>​        Calico是一个纯三层的数据中心网络方案，Calico支持广泛的平台，包括Kubernetes、OpenStack等。Calico 在每一个计算节点利用 Linux Kernel 实现了一个高效的虚拟路由器(vRouter) 来负责数据转发，而每个vRouter通过BGP协议负责把自己上运行的 workload的路由信息向整个Calico网络内传播。</p>\n<p>​        此外，Calico  项目还实现了 Kubernetes 网络策略，提供ACL功能。</p>\n<p> <a href=\"https://docs.projectcalico.org/getting-started/kubernetes/quickstart\">https://docs.projectcalico.org/getting-started/kubernetes/quickstart</a> </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> wget https://docs.projectcalico.org/manifests/calico.yaml</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> vim calico.yaml</span></span><br><span class=\"line\">···   # 搜索CALICO_IPV4POOL_CIDR字段，将value修改成上文kube init命令中指定的pod-network-cidr的网络段</span><br><span class=\"line\">- name: CALICO_IPV4POOL_CIDR</span><br><span class=\"line\">  value: &quot;10.244.0.0/16&quot;</span><br></pre></td></tr></table></figure>\n\n<p>​        下载完后还需要修改里面定义Pod网络（CALICO_IPV4POOL_CIDR），与前面kubeadm init指定的一样</p>\n<p>修改完后应用清单：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl apply -f calico.yaml</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pods -n kube-system   <span class=\"comment\"># 新部署calico和coredns容器的状态在慢慢变化</span></span></span><br><span class=\"line\">NAME                                       READY   STATUS              RESTARTS   AGE</span><br><span class=\"line\">calico-kube-controllers-69496d8b75-vlphv   0/1     ContainerCreating   0          3m25s</span><br><span class=\"line\">calico-node-jppch                          0/1     PodInitializing     0          3m25s</span><br><span class=\"line\">coredns-7f89b7bc75-b2ms6                   0/1     ContainerCreating   0          26m</span><br><span class=\"line\">coredns-7f89b7bc75-hr2sk                   0/1     ContainerCreating   0          26m</span><br><span class=\"line\">etcd-k8s-master                            1/1     Running             0          26m</span><br><span class=\"line\">kube-apiserver-k8s-master                  1/1     Running             0          26m</span><br><span class=\"line\">kube-controller-manager-k8s-master         1/1     Running             0          26m</span><br><span class=\"line\">kube-proxy-p6hmt                           1/1     Running             0          26m</span><br><span class=\"line\">kube-scheduler-k8s-master                  1/1     Running             0          26m</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pods -n kube-system    <span class=\"comment\"># 必须容器状态都是Running才可以进行下一步操作</span></span></span><br><span class=\"line\">NAME                                       READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">calico-kube-controllers-69496d8b75-vlphv   1/1     Running   0          6m55s</span><br><span class=\"line\">calico-node-jppch                          1/1     Running   0          6m55s</span><br><span class=\"line\">coredns-7f89b7bc75-b2ms6                   1/1     Running   0          29m</span><br><span class=\"line\">coredns-7f89b7bc75-hr2sk                   1/1     Running   0          29m</span><br><span class=\"line\">etcd-k8s-master                            1/1     Running   0          29m</span><br><span class=\"line\">kube-apiserver-k8s-master                  1/1     Running   0          29m</span><br><span class=\"line\">kube-controller-manager-k8s-master         1/1     Running   0          29m</span><br><span class=\"line\">kube-proxy-p6hmt                           1/1     Running   0          29m</span><br><span class=\"line\">kube-scheduler-k8s-master                  1/1     Running   0          29m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl  get node  <span class=\"comment\"># 此时所有节点都是Ready状态</span></span></span><br><span class=\"line\">NAME          STATUS   ROLES                  AGE     VERSION</span><br><span class=\"line\">k8s-master    Ready    control-plane,master   139m    v1.20.0</span><br><span class=\"line\">k8s-node-01   Ready    &lt;none&gt;                 5m48s   v1.20.0</span><br><span class=\"line\">k8s-node-02   Ready    &lt;none&gt;                 5m26s   v1.20.0</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-测试kubernetes集群\"><a href=\"#4-测试kubernetes集群\" class=\"headerlink\" title=\"4. 测试kubernetes集群\"></a>4. 测试kubernetes集群</h2><ul>\n<li>验证Pod工作</li>\n<li>验证Pod网络通信</li>\n<li>验证DNS解析</li>\n</ul>\n<h3 id=\"4-1-验证pod运行\"><a href=\"#4-1-验证pod运行\" class=\"headerlink\" title=\"4.1 验证pod运行\"></a>4.1 验证pod运行</h3><p>​        在Kubernetes集群中创建一个pod，验证是否正常运行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl create deployment nginx --image=nginx   <span class=\"comment\"># 新建一个nginx镜像的pod</span></span></span><br><span class=\"line\">deployment.apps/nginx created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl expose deployment nginx --port=80 --<span class=\"built_in\">type</span>=NodePort   <span class=\"comment\"># 新建svc，暴露端口以便通过浏览器访问</span></span></span><br><span class=\"line\">service/nginx exposed</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pod,svc   <span class=\"comment\"># 查看pod和svc信息</span></span></span><br><span class=\"line\">NAME                         READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">pod/nginx-6799fc88d8-nkm9f   1/1     Running   0          2m27s</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                 TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)        AGE</span><br><span class=\"line\">service/kubernetes   ClusterIP   10.96.0.1        &lt;none&gt;        443/TCP        148m</span><br><span class=\"line\">service/nginx        NodePort    10.103.247.121   &lt;none&gt;        80:32561/TCP   8s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl  describe pod nginx-6799fc88d8-nkm9f   <span class=\"comment\"># 查看pod的详细信息和日志</span></span></span><br><span class=\"line\">Name:         nginx-6799fc88d8-nkm9f</span><br><span class=\"line\">Namespace:    default</span><br><span class=\"line\">Priority:     0</span><br><span class=\"line\">Node:         k8s-node-02/10.138.3.63   # 被调度到k8s-node-02上运行</span><br><span class=\"line\">Start Time:   Fri, 09 Apr 2021 14:12:34 +0800    # pod创建的时间</span><br><span class=\"line\">Labels:       app=nginx                          # pod标签</span><br><span class=\"line\">              pod-template-hash=6799fc88d8</span><br><span class=\"line\">Annotations:  cni.projectcalico.org/podIP: 10.244.44.193/32</span><br><span class=\"line\">              cni.projectcalico.org/podIPs: 10.244.44.193/32</span><br><span class=\"line\">Status:       Running             # pod的状态</span><br><span class=\"line\">IP:           10.244.44.193       # pod的IP地址</span><br><span class=\"line\">IPs:</span><br><span class=\"line\">  IP:           10.244.44.193</span><br><span class=\"line\">Controlled By:  ReplicaSet/nginx-6799fc88d8</span><br><span class=\"line\">Containers:          # pod中容器的信息，如果pod中含有多个容器，此处将显示多个容器的信息</span><br><span class=\"line\">  nginx:             # 第一个容器--nginx，下面是nginx容器的id、镜像、镜像ID、端口、运行状态、卷等信息</span><br><span class=\"line\">    Container ID:   docker://dcc748a9352c1caa4b508a458933f571bd9ca275430b6e9773033a1ce60128d6</span><br><span class=\"line\">    Image:          nginx</span><br><span class=\"line\">    Image ID:       docker-pullable://nginx@sha256:bae781e7f518e0fb02245140c97e6ddc9f5fcf6aecc043dd9d17e33aec81c832</span><br><span class=\"line\">    Port:           &lt;none&gt;</span><br><span class=\"line\">    Host Port:      &lt;none&gt;</span><br><span class=\"line\">    State:          Running</span><br><span class=\"line\">      Started:      Fri, 09 Apr 2021 14:13:15 +0800</span><br><span class=\"line\">    Ready:          True</span><br><span class=\"line\">    Restart Count:  0</span><br><span class=\"line\">    Environment:    &lt;none&gt;</span><br><span class=\"line\">    Mounts:</span><br><span class=\"line\">      /var/run/secrets/kubernetes.io/serviceaccount from default-token-bq4pj (ro)</span><br><span class=\"line\">Conditions:</span><br><span class=\"line\">  Type              Status</span><br><span class=\"line\">  Initialized       True </span><br><span class=\"line\">  Ready             True </span><br><span class=\"line\">  ContainersReady   True </span><br><span class=\"line\">  PodScheduled      True </span><br><span class=\"line\">Volumes:</span><br><span class=\"line\">  default-token-bq4pj:</span><br><span class=\"line\">    Type:        Secret (a volume populated by a Secret)</span><br><span class=\"line\">    SecretName:  default-token-bq4pj</span><br><span class=\"line\">    Optional:    false</span><br><span class=\"line\">QoS Class:       BestEffort</span><br><span class=\"line\">Node-Selectors:  &lt;none&gt;</span><br><span class=\"line\">Tolerations:     node.kubernetes.io/not-ready:NoExecute op=Exists for 300s</span><br><span class=\"line\">                 node.kubernetes.io/unreachable:NoExecute op=Exists for 300s</span><br><span class=\"line\">Events:   # 日志信息，排查重点关注该信息</span><br><span class=\"line\">  Type    Reason     Age    From               Message</span><br><span class=\"line\">  ----    ------     ----   ----               -------</span><br><span class=\"line\">  Normal  Scheduled  3m23s  default-scheduler  Successfully assigned default/nginx-6799fc88d8-nkm9f to k8s-node-02</span><br><span class=\"line\">  Normal  Pulling    3m22s  kubelet            Pulling image &quot;nginx&quot;</span><br><span class=\"line\">  Normal  Pulled     2m43s  kubelet            Successfully pulled image &quot;nginx&quot; in 39.033652696s</span><br><span class=\"line\">  Normal  Created    2m42s  kubelet            Created container nginx</span><br><span class=\"line\">  Normal  Started    2m42s  kubelet            Started container nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 验证：</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl  get pod -o wide</span></span><br><span class=\"line\">NAME     READY   STATUS    RESTARTS   AGE     IP       NODE     NOMINATED NODE   READINESS GATES</span><br><span class=\"line\">nginx-6799fc88d8-nkm9f 1/1 Running 0  4m37s  10.244.44.193  k8s-node-02 &lt;none&gt;     &lt;none&gt;</span><br></pre></td></tr></table></figure>\n\n<p>验证方法：</p>\n<ul>\n<li><p>在各个节点上ping通nginx的podIP即可，即在master和node上执行ping 10.244.44.193</p>\n</li>\n<li><p>浏览器访问地址：<a href=\"http://NodeIP:Port\">http://NodeIP:Port</a>  ，此处的NodeIP为宿主机IP地址，Port是svc中显示的宿主机端口</p>\n</li>\n</ul>\n<h2 id=\"5-部署-Dashboard\"><a href=\"#5-部署-Dashboard\" class=\"headerlink\" title=\"5. 部署 Dashboard\"></a>5. 部署 Dashboard</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> wget https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.3/aio/deploy/recommended.yaml</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> mv recommended.yaml  k8s-dashboard.yaml   <span class=\"comment\"># 修改下文件名称，让我们一目了然文件的用途</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls k8s-dashboard.yaml</span></span><br><span class=\"line\">k8s-dashboard.yaml</span><br></pre></td></tr></table></figure>\n\n<p>​        默认Dashboard只能集群内部访问，修改Service为NodePort类型，暴露到外部：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> vim k8s-dashboard.yaml</span></span><br><span class=\"line\">...</span><br><span class=\"line\">kind: Service                  # 在类型为Service的字段中添加两个字段nodePort和type</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    k8s-app: kubernetes-dashboard</span><br><span class=\"line\">  name: kubernetes-dashboard</span><br><span class=\"line\">  namespace: kubernetes-dashboard</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">    - port: 443</span><br><span class=\"line\">      targetPort: 8443</span><br><span class=\"line\">      nodePort: 30001                  # 添加宿主机暴露的端口，注意P大写</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    k8s-app: kubernetes-dashboard</span><br><span class=\"line\">  type: NodePort                        # 通过NodePort类型暴露端口，以便可以通过浏览器访问</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl apply -f k8s-dashboard.yaml</span></span><br><span class=\"line\">namespace/kubernetes-dashboard unchanged</span><br><span class=\"line\">serviceaccount/kubernetes-dashboard unchanged</span><br><span class=\"line\">service/kubernetes-dashboard created</span><br><span class=\"line\">secret/kubernetes-dashboard-certs created</span><br><span class=\"line\">secret/kubernetes-dashboard-csrf created</span><br><span class=\"line\">secret/kubernetes-dashboard-key-holder created</span><br><span class=\"line\">configmap/kubernetes-dashboard-settings created</span><br><span class=\"line\">role.rbac.authorization.k8s.io/kubernetes-dashboard created</span><br><span class=\"line\">clusterrole.rbac.authorization.k8s.io/kubernetes-dashboard created</span><br><span class=\"line\">rolebinding.rbac.authorization.k8s.io/kubernetes-dashboard created</span><br><span class=\"line\">clusterrolebinding.rbac.authorization.k8s.io/kubernetes-dashboard created</span><br><span class=\"line\">deployment.apps/kubernetes-dashboard created</span><br><span class=\"line\">service/dashboard-metrics-scraper created</span><br><span class=\"line\">deployment.apps/dashboard-metrics-scraper created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl get pods -n kubernetes-dashboard  <span class=\"comment\"># 大概一分钟创建好容器，状态变成Running</span></span></span><br><span class=\"line\">NAME                                         READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">dashboard-metrics-scraper-7b59f7d4df-4kcbb   1/1     Running   0          61s</span><br><span class=\"line\">kubernetes-dashboard-5dbf55bd9d-ktdz8        1/1     Running   0          61s</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>​        访问地址：<a href=\"https://NodeIP:30001，集群中的任意一个节点的IP加端口都能访问成功，如下：\">https://NodeIP:30001，集群中的任意一个节点的IP加端口都能访问成功，如下：</a></p>\n<img src=\"../kuberPre/image-20210409143052868.png\" alt=\"image-20210409143052868\" style=\"zoom: 33%;\" />\n\n\n\n<img src=\"../kuberPre/image-20210409143608690.png\" alt=\"image-20210409143608690\" style=\"zoom:50%;\" />\n\n<p>​        创建service account并绑定默认cluster-admin管理员集群角色：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 创建用户</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl create serviceaccount dashboard-admin -n kube-system</span></span><br><span class=\"line\">serviceaccount/dashboard-admin created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 用户授权</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl create clusterrolebinding dashboard-admin --clusterrole=cluster-admin --serviceaccount=kube-system:dashboard-admin</span></span><br><span class=\"line\">clusterrolebinding.rbac.authorization.k8s.io/dashboard-admin created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 获取用户Token</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubectl describe secrets -n kube-system $(kubectl -n kube-system get secret | awk <span class=\"string\">&#x27;/dashboard-admin/&#123;print $1&#125;&#x27;</span>)</span></span><br><span class=\"line\">Name:         dashboard-admin-token-qz9b5</span><br><span class=\"line\">Namespace:    kube-system</span><br><span class=\"line\">Labels:       &lt;none&gt;</span><br><span class=\"line\">Annotations:  kubernetes.io/service-account.name: dashboard-admin</span><br><span class=\"line\">              kubernetes.io/service-account.uid: 3888e789-beec-45a8-a04e-1d03d3dc645e</span><br><span class=\"line\"></span><br><span class=\"line\">Type:  kubernetes.io/service-account-token</span><br><span class=\"line\"></span><br><span class=\"line\">Data</span><br><span class=\"line\">====</span><br><span class=\"line\">ca.crt:     1066 bytes</span><br><span class=\"line\">namespace:  11 bytes</span><br><span class=\"line\">token:      eyJhbGciOiJSUzI1NiIsImtpZCI6IldsZjlGaGZmcjNiekJOaTRCQjM4WEpDTXc0UXlhSF9nUC1ETlAzbVlvQk0ifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJkYXNoYm9hcmQtYWRtaW4tdG9rZW4tcXo5YjUiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZGFzaGJvYXJkLWFkbWluIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiMzg4OGU3ODktYmVlYy00NWE4LWEwNGUtMWQwM2QzZGM2NDVlIiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50Omt1YmUtc3lzdGVtOmRhc2hib2FyZC1hZG1pbiJ9.mVNJ7T8a7we8lza5bGsYrst-TuL5lTS7_Ef8kmORXwytknMkLYc34dYUB_NvuV8QBd9E7bGVka_ff6ihtmnxRVQ74Aq4Cj-Y5__Vqvy9BoAxAPTuYXPxyP88sC0GujIqfKnH369h0bfETuiTlaLW3WU4bIOH7O27T3n8JNICV7xAvAWrEX1KypVEWHROUFYGbv0-UzCGZxD9TRalaZi7EiIXCY2RH5bmpKsV3X0NfEsKtcUWHcXkonwjlawoi3IXBUzkTuw_FoAAL2qWMvGMi_XOQ1qyS4zcB18y4mhqt9lDKFDaNxUBA_RY-9JIOSTaHn4Co1Cq35-wjNKoPjSbTw</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 复制上面的token到浏览器中，注意不要多复制空格</span></span><br></pre></td></tr></table></figure>\n\n<p>​        使用输出的token登录Dashboard。</p>\n<img src=\"../kuberPre/image-20210409143843273.png\" alt=\"image-20210409143843273\" style=\"zoom:67%;\" />\n\n<p>​        完成后，就登陆成功了</p>\n<p><img src=\"../kuberPre/image-20210409143959671.png\" alt=\"image-20210409143959671\"></p>\n","comments":true,"permalink":"https://qingdalf.github.io/2021-05/kuberInstall/","categories":[{"name":"kubernets","slug":"kubernets","permalink":"https://qingdalf.github.io/categories/kubernets/"}],"tags":[]},{"title":"走进kubernets","date":"2021-05-04T12:22:54.000Z","path":"2021-05/kuberPre/","content":"<h2 id=\"1-认识kubernetes\"><a href=\"#1-认识kubernetes\" class=\"headerlink\" title=\"1.认识kubernetes\"></a>1.认识kubernetes</h2><p>​        备注：以下文字说明摘录于kubernetes官网。看来很多讲kubernets基础概念的文章和视频，发现还是官网讲的好。<br>官网：<a href=\"https://kubernetes.io/\">https://kubernetes.io/</a><br>文档：<a href=\"https://kubernetes.io/docs/home/\">https://kubernetes.io/docs/home/</a></p>\n<span id=\"more\"></span>\n<p>​        Kubernetes 是一个<strong>可移植的、可扩展的开源平台</strong>，<strong>用于管理容器化的工作负载和服务，可促进声明式配置和自动化</strong>。 Kubernetes 拥有一个庞大且快速增长的生态系统。Kubernetes 的服务、支持和工具广泛可用。</p>\n<p>​        让我们回顾一下为什么 Kubernetes 如此有用。</p>\n<p><img src=\"container_evolution.svg\" alt=\"部署演进\"></p>\n<p><strong>传统部署时代：</strong></p>\n<p>​        <strong>早期，各个组织机构在物理服务器上运行应用程序。无法为物理服务器中的应用程序定义资源边界，这会导致资源分配问题</strong>。 例如，如果在物理服务器上运行多个应用程序，则可能会出现一个应用程序占用大部分资源的情况， 结果可能导致其他应用程序的性能下降。 一种解决方案是在不同的物理服务器上运行每个应用程序，但是由于资源利用不足而无法扩展， 并且维护许多物理服务器的成本很高。</p>\n<p><strong>虚拟化部署时代：</strong></p>\n<p>​        作为解决方案，引入了虚拟化。<strong>虚拟化技术允许你在单个物理服务器的 CPU 上运行多个虚拟机（VM）</strong>。 虚拟化允许应用程序在 VM 之间隔离，并提供一定程度的安全，因为一个应用程序的信息不能被另一应用程序随意访问。<strong>虚拟化技术能够更好地利用物理服务器上的资源，并且因为可轻松地添加或更新应用程序 而可以实现更好的可伸缩性，降低硬件成本</strong>等等。</p>\n<p>​        每个VM是一台完整的计算机，在虚拟化硬件之上运行所有组件，包括其自己的操作系统。</p>\n<p><strong>容器部署时代：</strong></p>\n<p>​        <strong>容器类似于VM，但是它们具有被放宽的隔离属性，可以在应用程序之间共享操作系统（OS）</strong>。 <strong>因此，容器被认为是轻量级的。容器与 VM 类似，具有自己的文件系统、CPU、内存、进程空间等</strong>。 <strong>由于它们与基础架构分离，因此可以跨云和 OS 发行版本进行移植</strong>。</p>\n<p>容器因具有许多优势而变得流行起来。下面列出的是容器的一些好处：</p>\n<ul>\n<li><strong>敏捷应用程序的创建和部署</strong>：与使用 VM 镜像相比，提高了容器镜像创建的简便性和效率。</li>\n<li><strong>持续开发、集成和部署</strong>：通过快速简单的回滚（由于镜像不可变性），支持可靠且频繁的 容器镜像构建和部署。</li>\n<li><strong>关注开发与运维的分离</strong>：在构建/发布时而不是在部署时创建应用程序容器镜像， 从而将应用程序与基础架构分离。</li>\n<li><strong>可观察性</strong>：不仅可以显示操作系统级别的信息和指标，还可以显示应用程序的运行状况和其他指标信号。</li>\n<li><strong>跨开发、测试和生产的环境一致性</strong>：在便携式计算机上与在云中相同地运行。</li>\n<li><strong>跨云和操作系统发行版本的可移植性</strong>：可在 Ubuntu、RHEL、CoreOS、本地、 Google Kubernetes Engine 和其他任何地方运行。</li>\n<li><strong>以应用程序为中心的管理</strong>：提高抽象级别，从在虚拟硬件上运行 OS 到使用逻辑资源在 OS 上运行应用程序。</li>\n<li><strong>松散耦合、分布式、弹性、解放的微服务</strong>：应用程序被分解成较小的独立部分， 并且可以动态部署和管理 - 而不是在一台大型单机上整体运行。</li>\n<li><strong>资源隔离</strong>：可预测的应用程序性能。</li>\n<li><strong>资源利用</strong>：高效率和高密度。</li>\n</ul>\n<h2 id=\"2-为什么需要-Kubernetes，它能做什么\"><a href=\"#2-为什么需要-Kubernetes，它能做什么\" class=\"headerlink\" title=\"2.为什么需要 Kubernetes，它能做什么?\"></a>2.为什么需要 Kubernetes，它能做什么?</h2><p>​        <strong>容器是打包和运行应用程序的好方式</strong>。在生产环境中，你需要管理运行应用程序的容器，并确保不会停机。 例如，如果一个容器发生故障，则需要启动另一个容器。如果系统处理此行为，会不会更容易？</p>\n<p>​        这就是 Kubernetes 来解决这些问题的方法！ <strong>Kubernetes 提供了一个可弹性运行分布式系统的框架</strong>。 Kubernetes 会满足你的扩展要求、故障转移、部署模式等。 例如，Kubernetes 可以轻松管理系统的 Canary 部署。</p>\n<p>Kubernetes 为你提供：</p>\n<ul>\n<li><p><strong>服务发现和负载均衡</strong></p>\n<p>​        Kubernetes 可以使用 DNS 名称或自己的 IP 地址公开容器，如果进入容器的流量很大， Kubernetes 可以负载均衡并分配网络流量，从而使部署稳定。</p>\n</li>\n<li><p><strong>存储编排</strong></p>\n<p>​        Kubernetes 允许你自动挂载你选择的存储系统，例如本地存储、公共云提供商等。</p>\n</li>\n<li><p><strong>自动部署和回滚</strong></p>\n<p>​        你可以使用 Kubernetes 描述已部署容器的所需状态，它可以以受控的速率将实际状态 更改为期望状态。例如，你可以自动化 Kubernetes 来为你的部署创建新容器， 删除现有容器并将它们的所有资源用于新容器。</p>\n</li>\n<li><p><strong>自动完成装箱计算</strong></p>\n<p>​        <strong>Kubernetes 允许你指定每个容器所需 CPU 和内存（RAM）</strong>。 当容器指定了资源请求时，Kubernetes 可以做出更好的决策来管理容器的资源。</p>\n</li>\n<li><p><strong>自我修复</strong></p>\n<p>​        Kubernetes 重新启动失败的容器、替换容器、杀死不响应用户定义的 运行状况检查的容器，并且在准备好服务之前不将其通告给客户端。</p>\n</li>\n<li><p><strong>密钥与配置管理</strong></p>\n<p>​        Kubernetes 允许你存储和管理敏感信息，例如密码、OAuth 令牌和 ssh 密钥。 你可以在不重建容器镜像的情况下部署和更新密钥和应用程序配置，也无需在堆栈配置中暴露密钥。</p>\n</li>\n</ul>\n<h2 id=\"3-Kubernetes-不是什么\"><a href=\"#3-Kubernetes-不是什么\" class=\"headerlink\" title=\"3.Kubernetes 不是什么\"></a>3.Kubernetes 不是什么</h2><p>​        <strong>Kubernetes 不是传统的、包罗万象的 PaaS（平台即服务）系统</strong>。 由于 Kubernetes 在容器级别而不是在硬件级别运行，它提供了 PaaS 产品共有的一些普遍适用的功能， 例如部署、扩展、负载均衡、日志记录和监视。 但是，<strong>Kubernetes 不是单体系统，默认解决方案都是可选和可插拔的</strong>。 <strong>Kubernetes 提供了构建开发人员平台的基础，但是在重要的地方保留了用户的选择和灵活性</strong>。</p>\n<p>Kubernetes：</p>\n<ul>\n<li><p><strong>不限制支持的应用程序类型</strong>。 Kubernetes 旨在支持极其多种多样的工作负载，包括无状态、有状态和数据处理工作负载。 如果应用程序可以在容器中运行，那么它应该可以在 Kubernetes 上很好地运行。</p>\n</li>\n<li><p><strong>不部署源代码，也不构建你的应用程序</strong>。 持续集成(CI)、交付和部署（CI/CD）工作流取决于组织的文化和偏好以及技术要求。</p>\n</li>\n<li><p><strong>不提供应用程序级别的服务作为内置服务</strong>，例如中间件（例如，消息中间件）、 数据处理框架（例如，Spark）、数据库（例如，mysql）、缓存、集群存储系统 （例如，Ceph）。这样的组件可以在 Kubernetes 上运行，并且/或者可以由运行在 Kubernetes 上的应用程序通过可移植机制（例如， <a href=\"https://openservicebrokerapi.org/\">开放服务代理</a>）来访问。</p>\n</li>\n<li><p><strong>不要求日志记录、监视或警报解决方案</strong>。 它提供了一些集成作为概念证明，并提供了收集和导出指标的机制。</p>\n</li>\n<li><p><strong>不提供或不要求配置语言/系统</strong>（例如 jsonnet），它提供了声明性 API， 该声明性 API 可以由任意形式的声明性规范所构成。</p>\n</li>\n<li><p><strong>不提供也不采用任何全面的机器配置、维护、管理或自我修复系统</strong>。</p>\n</li>\n<li><p>此外，<strong>Kubernetes 不仅仅是一个编排系统，实际上它消除了编排的需要</strong>。 编排的技术定义是执行已定义的工作流程：首先执行 A，然后执行 B，再执行 C。 相比之下，Kubernetes 包含一组独立的、可组合的控制过程， 这些过程连续地将当前状态驱动到所提供的所需状态。 如何从 A 到 C 的方式无关紧要，也不需要集中控制，这使得系统更易于使用 且功能更强大、系统更健壮、更为弹性和可扩展。</p>\n</li>\n</ul>\n<h2 id=\"4-kubernetes集群架构和组件\"><a href=\"#4-kubernetes集群架构和组件\" class=\"headerlink\" title=\"4. kubernetes集群架构和组件\"></a>4. kubernetes集群架构和组件</h2><p>​        一个 Kubernetes 集群由一组被称作<strong>节点</strong>的机器组成。<strong>这些节点上运行 Kubernetes 所管理的容器化应用</strong>。集群具有至少一个工作节点。工作节点托管作为应用负载的组件的 Pod 。控制平面管理集群中的工作节点和 Pod 。 为集群提供故障转移和高可用性，这些控制平面一般跨多主机运行，集群跨多个节点运行。</p>\n<p>​        本文档概述了交付正常运行的 Kubernetes 集群所需的各种组件。这张图表展示了包含所有相互关联组件的 Kubernetes 集群。</p>\n<p><img src=\"components-of-kubernetes.svg\" alt=\"Kubernetes 组件\"></p>\n<h3 id=\"4-1-控制平面组件（Control-Plane-Components）\"><a href=\"#4-1-控制平面组件（Control-Plane-Components）\" class=\"headerlink\" title=\"4.1 控制平面组件（Control Plane Components）\"></a>4.1 控制平面组件（Control Plane Components）</h3><p>​        <strong>控制平面的组件对集群做出全局决策</strong>(比如调度)，<strong>以及检测和响应集群事件</strong>（例如，当不满足部署的 <code>replicas</code> 字段时，启动新的 <a href=\"https://kubernetes.io/docs/concepts/workloads/pods/pod-overview/\">pod</a>）。</p>\n<p>​        <strong>控制平面组件可以在集群中的任何节点上运行</strong>。 然而，为了简单起见，设置脚本通常会在同一个计算机上启动所有控制平面组件，并且不会在此计算机上运行用户容器。 请参阅<a href=\"https://kubernetes.io/zh/docs/setup/production-environment/tools/kubeadm/high-availability/\">构建高可用性集群</a> 中对于多主机 VM 的设置示例。</p>\n<h4 id=\"4-1-1-kube-apiserver\"><a href=\"#4-1-1-kube-apiserver\" class=\"headerlink\" title=\"4.1.1 kube-apiserver\"></a>4.1.1 kube-apiserver</h4><p>​        API 服务器是 Kubernetes <a href=\"https://kubernetes.io/zh/docs/reference/glossary/?all=true#term-control-plane\">控制面</a>的组件， 该组件公开了 Kubernetes API。 API 服务器是 Kubernetes 控制面的前端。Kubernetes API 服务器的主要实现是 <a href=\"https://kubernetes.io/zh/docs/reference/command-line-tools-reference/kube-apiserver/\">kube-apiserver</a>。 <strong>kube-apiserver 设计上考虑了水平伸缩，也就是说，它可通过部署多个实例进行伸缩</strong>。 你可以运行 kube-apiserver 的多个实例，并在这些实例之间平衡流量。</p>\n<h4 id=\"4-1-2-etcd\"><a href=\"#4-1-2-etcd\" class=\"headerlink\" title=\"4.1.2 etcd\"></a>4.1.2 etcd</h4><p>​        <strong>etcd 是兼具一致性和高可用性的键值数据库，可以作为保存 Kubernetes 所有集群数据的后台数据库</strong>。您的 Kubernetes 集群的 etcd 数据库通常需要有个备份计划。要了解 etcd 更深层次的信息，请参考 <a href=\"https://etcd.io/docs/\">etcd 文档</a>。</p>\n<h4 id=\"4-1-3-kube-scheduler\"><a href=\"#4-1-3-kube-scheduler\" class=\"headerlink\" title=\"4.1.3 kube-scheduler\"></a>4.1.3 kube-scheduler</h4><p>​        控制平面组件，负责监视新创建的、未指定运行<a href=\"https://kubernetes.io/zh/docs/concepts/architecture/nodes/\">节点（node）</a>的 <a href=\"https://kubernetes.io/docs/concepts/workloads/pods/pod-overview/\">Pods</a>，选择节点让 Pod 在上面运行。<strong>调度决策考虑的因素包括单个 Pod 和 Pod 集合的资源需求、硬件/软件/策略约束、亲和性和反亲和性规范、数据位置、工作负载间的干扰和最后时限</strong>。</p>\n<h4 id=\"4-1-4-kube-controller-manager\"><a href=\"#4-1-4-kube-controller-manager\" class=\"headerlink\" title=\"4.1.4 kube-controller-manager\"></a>4.1.4 kube-controller-manager</h4><p>​        在主节点上运行 <a href=\"https://kubernetes.io/zh/docs/concepts/architecture/controller/\">控制器</a> 的组件。从逻辑上讲，每个<a href=\"https://kubernetes.io/zh/docs/concepts/architecture/controller/\">控制器</a>都是一个单独的进程， 但是为了降低复杂性，它们都被编译到同一个可执行文件，并在一个进程中运行。</p>\n<p>这些控制器包括:</p>\n<ul>\n<li><strong>节点控制器</strong>（Node Controller）: 负责在节点出现故障时进行通知和响应</li>\n<li><strong>任务控制器</strong>（Job controller）: 监测代表一次性任务的 Job 对象，然后创建 Pods 来运行这些任务直至完成</li>\n<li><strong>端点控制器</strong>（Endpoints Controller）: 填充端点(Endpoints)对象(即加入 Service 与 Pod)</li>\n<li><strong>服务帐户和令牌控制器</strong>（Service Account &amp; Token Controllers）: 为新的命名空间创建默认帐户和 API 访问令牌</li>\n</ul>\n<h4 id=\"4-1-5-cloud-controller-manager\"><a href=\"#4-1-5-cloud-controller-manager\" class=\"headerlink\" title=\"4.1.5 cloud-controller-manager\"></a>4.1.5 cloud-controller-manager</h4><p>​        云控制器管理器是指嵌入特定云的控制逻辑的 <a href=\"https://kubernetes.io/zh/docs/reference/glossary/?all=true#term-control-plane\">控制平面</a>组件。 云控制器管理器允许您链接聚合到云提供商的应用编程接口中， 并分离出相互作用的组件与您的集群交互的组件。<code>cloud-controller-manager</code> 仅运行特定于云平台的控制回路。 如果你在自己的环境中运行 Kubernetes，或者在本地计算机中运行学习环境， 所部署的环境中不需要云控制器管理器。</p>\n<p>​        与 <code>kube-controller-manager</code> 类似，<code>cloud-controller-manager</code> 将若干逻辑上独立的 控制回路组合到同一个可执行文件中，供你以同一进程的方式运行。 你可以对其执行水平扩容（运行不止一个副本）以提升性能或者增强容错能力。</p>\n<p>下面的控制器都包含对云平台驱动的依赖：</p>\n<ul>\n<li><strong>节点控制器</strong>（Node Controller）: 用于在节点终止响应后检查云提供商以确定节点是否已被删除</li>\n<li><strong>路由控制器</strong>（Route Controller）: 用于在底层云基础架构中设置路由</li>\n<li><strong>服务控制器</strong>（Service Controller）: 用于创建、更新和删除云提供商负载均衡器</li>\n</ul>\n<h3 id=\"4-2-Node-组件\"><a href=\"#4-2-Node-组件\" class=\"headerlink\" title=\"4.2 Node 组件\"></a>4.2 Node 组件</h3><p>​        节点组件在每个节点上运行，维护运行的 Pod 并提供 Kubernetes 运行环境。</p>\n<h4 id=\"4-2-1-kubelet\"><a href=\"#4-2-1-kubelet\" class=\"headerlink\" title=\"4.2.1 kubelet\"></a>4.2.1 kubelet</h4><p>​        <strong>一个在集群中每个<a href=\"https://kubernetes.io/zh/docs/concepts/architecture/nodes/\">节点（node）</a>上运行的代理</strong>。 <strong>它保证<a href=\"https://kubernetes.io/zh/docs/concepts/overview/what-is-kubernetes/#why-containers\">容器（containers）</a>都 运行在 <a href=\"https://kubernetes.io/docs/concepts/workloads/pods/pod-overview/\">Pod</a> 中</strong>。<strong>kubelet 接收一组通过各类机制提供给它的 PodSpecs，确保这些 PodSpecs 中描述的容器处于运行状态且健康。 <em>kubelet 不会管理不是由 Kubernetes 创建的容器</em></strong>。</p>\n<h4 id=\"4-2-2-kube-proxy\"><a href=\"#4-2-2-kube-proxy\" class=\"headerlink\" title=\"4.2.2 kube-proxy\"></a>4.2.2 kube-proxy</h4><p><a href=\"https://kubernetes.io/zh/docs/reference/command-line-tools-reference/kube-proxy/\">        kube-proxy</a> 是集群中每个节点上运行的<strong>网络代理</strong>， 实现 Kubernetes <a href=\"https://kubernetes.io/zh/docs/concepts/services-networking/service/\">服务（Service）</a> 概念的一部分。<strong>kube-proxy 维护节点上的网络规则。这些网络规则允许从集群内部或外部的网络会话与 Pod 进行网络通信。<em>如果操作系统提供了数据包过滤层并可用的话，kube-proxy 会通过它来实现网络规则。否则， kube-proxy 仅转发流量本身。</em></strong></p>\n<h3 id=\"4-3-几个重要概念\"><a href=\"#4-3-几个重要概念\" class=\"headerlink\" title=\"4.3 几个重要概念\"></a>4.3 几个重要概念</h3><h4 id=\"4-3-1-容器运行时（Container-Runtime）\"><a href=\"#4-3-1-容器运行时（Container-Runtime）\" class=\"headerlink\" title=\"4.3.1 容器运行时（Container Runtime）\"></a>4.3.1 容器运行时（Container Runtime）</h4><p>​        **容器运行环境是负责运行容器的软件(容器引擎)**。Kubernetes 支持多个容器运行环境: <a href=\"https://kubernetes.io/zh/docs/reference/kubectl/docker-cli-to-kubectl/\">Docker</a>、 <a href=\"https://containerd.io/docs/\">containerd</a>、<a href=\"https://cri-o.io/#what-is-cri-o\">CRI-O</a> 以及任何实现 <a href=\"https://github.com/kubernetes/community/blob/master/contributors/devel/sig-node/container-runtime-interface.md\">Kubernetes CRI (容器运行环境接口)</a>。</p>\n<h4 id=\"4-3-2-插件（Addons）\"><a href=\"#4-3-2-插件（Addons）\" class=\"headerlink\" title=\"4.3.2 插件（Addons）\"></a>4.3.2 插件（Addons）</h4><p>​        插件使用 Kubernetes 资源（<a href=\"https://kubernetes.io/zh/docs/concepts/workloads/controllers/daemonset/\">DaemonSet</a>、 <a href=\"https://kubernetes.io/zh/docs/concepts/workloads/controllers/deployment/\">Deployment</a>等）实现集群功能。 因为这些插件提供集群级别的功能，插件中命名空间域的资源属于 <code>kube-system</code> 命名空间。下面描述众多插件中的几种。有关可用插件的完整列表，请参见 <a href=\"https://kubernetes.io/zh/docs/concepts/cluster-administration/addons/\">插件（Addons）</a>。</p>\n<h5 id=\"4-3-2-1-DNS\"><a href=\"#4-3-2-1-DNS\" class=\"headerlink\" title=\"4.3.2.1 DNS\"></a>4.3.2.1 DNS</h5><p>​        尽管其他插件都并非严格意义上的必需组件，但几乎所有 Kubernetes 集群都应该有<a href=\"https://kubernetes.io/zh/docs/concepts/services-networking/dns-pod-service/\">集群 DNS</a>， 因为很多示例都需要 DNS 服务。集群 DNS 是一个 DNS 服务器，和环境中的其他 DNS 服务器一起工作，它为 Kubernetes 服务提供 DNS 记录。<strong>Kubernetes 启动的容器自动将此 DNS 服务器包含在其 DNS 搜索列表中。</strong></p>\n<h5 id=\"4-3-2-2-Web-界面（仪表盘）\"><a href=\"#4-3-2-2-Web-界面（仪表盘）\" class=\"headerlink\" title=\"4.3.2.2 Web 界面（仪表盘）\"></a>4.3.2.2 Web 界面（仪表盘）</h5><p>​        <a href=\"https://kubernetes.io/zh/docs/tasks/access-application-cluster/web-ui-dashboard/\">Dashboard</a> 是Kubernetes 集群的通用的、基于 Web 的用户界面。 它使用户可以管理集群中运行的应用程序以及集群本身并进行故障排除。</p>\n<h5 id=\"4-3-2-3-容器资源监控\"><a href=\"#4-3-2-3-容器资源监控\" class=\"headerlink\" title=\"4.3.2.3 容器资源监控\"></a>4.3.2.3 容器资源监控</h5><p>​        <strong><a href=\"https://kubernetes.io/zh/docs/tasks/debug-application-cluster/resource-usage-monitoring/\">容器资源监控</a> 将关于容器的一些常见的时间序列度量值保存到一个<em>集中的数据库</em>中，并提供用于浏览这些数据的界面</strong>。</p>\n<h5 id=\"4-3-2-4-集群层面日志\"><a href=\"#4-3-2-4-集群层面日志\" class=\"headerlink\" title=\"4.3.2.4 集群层面日志\"></a>4.3.2.4 集群层面日志</h5><p>​        <strong><a href=\"https://kubernetes.io/zh/docs/concepts/cluster-administration/logging/\">集群层面日志</a> 机制负责将容器的日志数据保存到一个<em>集中的日志存储</em>中，该存储能够提供搜索和浏览接口。</strong></p>\n","comments":true,"permalink":"https://qingdalf.github.io/2021-05/kuberPre/","categories":[{"name":"kubernets","slug":"kubernets","permalink":"https://qingdalf.github.io/categories/kubernets/"}],"tags":[]},{"title":"prometheus+grafana监控docker主机和容器","date":"2021-05-04T10:57:09.000Z","path":"2021-05/dockerMonitor/","content":"<p>监控系统概述：</p>\n<ul>\n<li>cAdvisor(container cAdvisor)：用于收集正在运行的容器资源使用和性能信息，在每个docker 主机上部署<br><a href=\"https://github.com/google/cAdvisor\">https://github.com/google/cAdvisor</a></li>\n<li>Prometheus：容器监控系统，从cAdvisor收集并存储数据，官网<a href=\"https://prometheus.io/\">https://prometheus.io/</a></li>\n<li>Grafana：开源可视化展示系统，官网<a href=\"https://grafana.com/grafana\">https://grafana.com/grafana</a><span id=\"more\"></span>\n<h2 id=\"1-配置cAdvisor\"><a href=\"#1-配置cAdvisor\" class=\"headerlink\" title=\"1.配置cAdvisor\"></a>1.配置cAdvisor</h2></li>\n</ul>\n<h3 id=\"1-1-安装cAdvisor\"><a href=\"#1-1-安装cAdvisor\" class=\"headerlink\" title=\"1.1 安装cAdvisor\"></a>1.1 安装cAdvisor</h3><p>​        可通过<code>GitHub</code>中<code>cAdvisor</code>的运行容器命令，运行<code>cAdvisor</code></p>\n<img src=\"../dockerHarbor/image-20210405163157209.png\" alt=\"image-20210405163157209\" style=\"zoom:67%;\" />\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker run \\</span></span><br><span class=\"line\"><span class=\"bash\">  --volume=/:/rootfs:ro \\</span></span><br><span class=\"line\"><span class=\"bash\">  --volume=/var/run:/var/run:ro \\</span></span><br><span class=\"line\"><span class=\"bash\">  --volume=/sys:/sys:ro \\</span></span><br><span class=\"line\"><span class=\"bash\">  --volume=/var/lib/docker/:/var/lib/docker:ro \\</span></span><br><span class=\"line\"><span class=\"bash\">  --volume=/dev/disk/:/dev/disk:ro \\</span></span><br><span class=\"line\"><span class=\"bash\">  --publish=8080:8080 \\</span></span><br><span class=\"line\"><span class=\"bash\">  --detach=<span class=\"literal\">true</span> \\</span></span><br><span class=\"line\"><span class=\"bash\">  --name=cadvisor \\</span></span><br><span class=\"line\"><span class=\"bash\">  --privileged \\</span></span><br><span class=\"line\"><span class=\"bash\">  --device=/dev/kmsg \\</span></span><br><span class=\"line\"><span class=\"bash\">  google/cadvisor:latest     <span class=\"comment\"># Github中的源地址可能访问不了，因此这里更换成dockerhub中的地址</span></span></span><br><span class=\"line\">Unable to find image &#x27;google/cadvisor:latest&#x27; locally</span><br><span class=\"line\">latest: Pulling from google/cadvisor</span><br><span class=\"line\">ff3a5c916c92: Downloading </span><br><span class=\"line\">44a45bb65cdf: Download complete </span><br><span class=\"line\">0bbe1a2fe2a6: Download complete </span><br><span class=\"line\">latest: Pulling from google/cadvisor</span><br><span class=\"line\">ff3a5c916c92: Pull complete </span><br><span class=\"line\">44a45bb65cdf: Pull complete </span><br><span class=\"line\">0bbe1a2fe2a6: Pull complete </span><br><span class=\"line\">Digest: sha256:815386ebbe9a3490f38785ab11bda34ec8dacf4634af77b8912832d4f85dca04</span><br><span class=\"line\">Status: Downloaded newer image for google/cadvisor:latest</span><br><span class=\"line\">WARNING: IPv4 forwarding is disabled. Networking will not work.  # 此处有一个报错，需要打开路由转发功能</span><br><span class=\"line\">e1132c19a4129804a28c1c0d0d61884ced3d548625daf882834095a420d3da7a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker container ls</span> </span><br><span class=\"line\">CONTAINER ID   IMAGE                    COMMAND                  CREATED          STATUS                          PORTS                                NAMES</span><br><span class=\"line\">886e2bce936f   google/cadvisor:latest   &quot;/usr/bin/cadvisor -…&quot;   12 seconds ago   Up 11 seconds                   0.0.0.0:8080-&gt;8080/tcp               cadvisor</span><br><span class=\"line\">60d4d688b698   php:lnmp_php_7.4.16      &quot;./sbin/php-fpm -c /…&quot;   6 hours ago      Restarting (78) 3 seconds ago                                        lnmp_php</span><br><span class=\"line\">10124a1d6b8b   mysql:5.7                &quot;docker-entrypoint.s…&quot;   16 hours ago     Up 7 hours                      33060/tcp, 0.0.0.0:13306-&gt;3306/tcp   lnmp_mysql</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-2-访问-cAdvisor\"><a href=\"#1-2-访问-cAdvisor\" class=\"headerlink\" title=\"1.2 访问 cAdvisor\"></a>1.2 访问 <code>cAdvisor</code></h3><p>​        直接在浏览器中输入url–<code>http://10.138.3.130:8080</code>访问<code>cAdvisor</code>，访问较慢 </p>\n<p><img src=\"../dockerHarbor/image-20210405214538925.png\" alt=\"image-20210405214538925\"></p>\n<blockquote>\n<p>第一次实验的时候一直不能通过<a href=\"http://10.138.3.130:8080/%E8%AE%BF%E9%97%AE%EF%BC%8C%E9%87%8D%E6%96%B0%E5%88%A0%E9%99%A4%E5%B9%B6%E5%AE%89%E8%A3%85cAdvisor%E5%AE%B9%E5%99%A8%EF%BC%8C%E5%8F%91%E7%8E%B0%E6%89%A7%E8%A1%8C%E5%AE%8C%E6%96%B0%E5%BB%BAcAdvisor%E5%AE%B9%E5%99%A8%E5%90%8E%E6%9C%89%E4%B8%80%E4%B8%AA%E6%8A%A5%E9%94%99%E4%BF%A1%E6%81%AF%60WARNING\">http://10.138.3.130:8080/访问，重新删除并安装cAdvisor容器，发现执行完新建cAdvisor容器后有一个报错信息`WARNING</a>: IPv4 forwarding is disabled. Networking will not work.<code>，解决方法是打开路由转发功能</code>echo ‘net.ipv4.ip_forward=1’ &gt;&gt; /usr/lib/sysctl.d/00-system.conf`</p>\n</blockquote>\n<p>查看宿主机上运行的容器信息：</p>\n<p><img src=\"../dockerHarbor/image-20210405214435116.png\" alt=\"image-20210405214435116\"></p>\n<h2 id=\"2-配置prometheus\"><a href=\"#2-配置prometheus\" class=\"headerlink\" title=\"2. 配置prometheus\"></a>2. 配置prometheus</h2><h3 id=\"2-1-安装prometheus\"><a href=\"#2-1-安装prometheus\" class=\"headerlink\" title=\"2.1 安装prometheus\"></a>2.1 安装prometheus</h3><p>​        <code>prometheus</code>可部署在任意的宿主机上，<code> cAdvisor</code>暴露出来的指标必须要符合<code>prometheus</code>的格式，才能被<code>prometheus</code>采集，我们在浏览器中输入<code>http://10.138.3.130:8080/metrics</code>，即可查看到符合<code>prometheus</code>格式的信息</p>\n<p><img src=\"../dockerHarbor/image-20210405214835081.png\" alt=\"image-20210405214835081\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装prometheus</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker run -d --name prometheus -p 9090:9090 prom/prometheus</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker ps -l</span> </span><br><span class=\"line\">CONTAINER ID   IMAGE             COMMAND                  CREATED         STATUS         PORTS                    NAMES</span><br><span class=\"line\">fe3468745563   prom/prometheus   &quot;/bin/prometheus --c…&quot;   6 seconds ago   Up 5 seconds   0.0.0.0:9090-&gt;9090/tcp   prometheus</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-访问prometheus\"><a href=\"#2-2-访问prometheus\" class=\"headerlink\" title=\"2.2 访问prometheus\"></a>2.2 访问prometheus</h3><p>​        在浏览器中访问<code>http://ip:9090/config</code>，如下：</p>\n<img src=\"../dockerHarbor/image-20210405215848324.png\" alt=\"image-20210405215848324\" style=\"zoom: 67%;\" />\n\n<h3 id=\"2-3-添加监控主机\"><a href=\"#2-3-添加监控主机\" class=\"headerlink\" title=\"2.3 添加监控主机\"></a>2.3 添加监控主机</h3><p>​        修改<code>prometheus</code>配置文件，让<code>prometheus</code>采集数据，每一个被监控端的信息都需要写入<code>prometheus</code>的配置文件，<code>prometheus</code>才能采集到数据，更改配置文件就是让<code>prometheus</code>知道去哪里取数据。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 进入prometheus容器中</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker <span class=\"built_in\">exec</span> -it fe3468745563 sh</span> </span><br><span class=\"line\">/prometheus $ vi /etc/prometheus/prometheus.yml </span><br><span class=\"line\">scrape_configs:                                                    </span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\"> The job name is added as a label `job=&lt;job_name&gt;` to any timeseries scraped from this config.</span></span><br><span class=\"line\">  - job_name: &#x27;prometheus&#x27;     # 等同于分组的组名                                                                                                               </span><br><span class=\"line\">    static_configs:                      </span><br><span class=\"line\">    - targets: [&#x27;localhost:9090&#x27;]       # 被监控的目标端 </span><br><span class=\"line\">                                 </span><br><span class=\"line\">  - job_name: &#x27;docker&#x27;           # 新建一个docker分组</span><br><span class=\"line\">                                 </span><br><span class=\"line\">    static_configs:              </span><br><span class=\"line\">    - targets: [&#x27;10.138.3.130:8080&#x27;]    # 添加cAdvisor的接口，就能监控到数据；多个被监控端，用逗号隔开</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 重启生效</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker container restart  fe3468745563</span> </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker ps -l</span> </span><br><span class=\"line\">CONTAINER ID   IMAGE             COMMAND                  CREATED          STATUS          PORTS                    NAMES</span><br><span class=\"line\">fe3468745563   prom/prometheus   &quot;/bin/prometheus --c…&quot;   17 minutes ago   Up 14 seconds   0.0.0.0:9090-&gt;9090/tcp   prometheus</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>​        此时就能在<code>prometheus</code>的<code>targets</code>页面查看新添加的主机信息：</p>\n<p><img src=\"../dockerHarbor/image-20210405221649388.png\" alt=\"image-20210405221649388\"></p>\n<p>​        现在我们可以通过在<code>prometheus</code>的<code>Graph</code>页面输入<code>promql</code>查看指定的性能数据了</p>\n<p><img src=\"../dockerHarbor/image-20210405221756180.png\" alt=\"image-20210405221756180\"></p>\n<p>​        如下，这里只要输入一个字符，就能列出跟含有该字符的所有的<code>promql</code>，非常方便</p>\n<p><img src=\"../dockerHarbor/image-20210405221946712.png\" alt=\"image-20210405221946712\"></p>\n<h2 id=\"3-配置Grafana\"><a href=\"#3-配置Grafana\" class=\"headerlink\" title=\"3.配置Grafana\"></a>3.配置Grafana</h2><h3 id=\"3-1-安装Grafana\"><a href=\"#3-1-安装Grafana\" class=\"headerlink\" title=\"3.1 安装Grafana\"></a>3.1 安装Grafana</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker run -d --name grafana -p 3000:3000 grafana/grafana</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker ps -l</span> </span><br><span class=\"line\">CONTAINER ID   IMAGE             COMMAND     CREATED          STATUS          PORTS                    NAMES</span><br><span class=\"line\">99ec838588e1   grafana/grafana   &quot;/run.sh&quot;   39 seconds ago   Up 37 seconds   0.0.0.0:3000-&gt;3000/tcp   grafana</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-登陆Grafana\"><a href=\"#3-2-登陆Grafana\" class=\"headerlink\" title=\"3.2 登陆Grafana\"></a>3.2 登陆Grafana</h3><p>​        登陆grafana，用户和密码都是admin，登陆后会要求修改密码。</p>\n<p><img src=\"../dockerHarbor/image-20210405222545189.png\" alt=\"image-20210405222545189\"></p>\n<p>​        修改密码后(Admin)，进入主页：</p>\n<p><img src=\"../dockerHarbor/image-20210405222915458.png\" alt=\"image-20210405222915458\"></p>\n<h3 id=\"3-3-配置Grafana\"><a href=\"#3-3-配置Grafana\" class=\"headerlink\" title=\"3.3 配置Grafana\"></a>3.3 配置Grafana</h3><h4 id=\"3-3-1-添加数据源–Prometheus\"><a href=\"#3-3-1-添加数据源–Prometheus\" class=\"headerlink\" title=\"3.3.1 添加数据源–Prometheus\"></a>3.3.1 添加数据源–Prometheus</h4><p>​        首先，添加一个数据源–即告诉<code>Grafana</code>去哪里获取数据，点击<code>DATA SOURCES</code>，使<code>grafana</code>连接到<code>prometheus</code>，下图页面展示了所有能添加的数据源。</p>\n<p><img src=\"../dockerHarbor/image-20210405223215419.png\" alt=\"image-20210405223215419\"></p>\n<p>​        输入Prometheus的访问地址，并保存。</p>\n<p><img src=\"../dockerHarbor/image-20210405223339334.png\" alt=\"image-20210405223339334\"></p>\n<p>​        查看添加的数据源信息：</p>\n<p><img src=\"../dockerHarbor/image-20210405223451030.png\" alt=\"image-20210405223451030\"></p>\n<h4 id=\"3-3-2-添加自定义仪表盘\"><a href=\"#3-3-2-添加自定义仪表盘\" class=\"headerlink\" title=\"3.3.2 添加自定义仪表盘\"></a>3.3.2 添加自定义仪表盘</h4><p><img src=\"../dockerHarbor/image-20210405223545260.png\" alt=\"image-20210405223545260\"></p>\n<p>​        默认的仪表盘页面(更正：下文中截图Prometheus的查询语句promql，误写成了proql)如下：</p>\n<p><img src=\"../dockerHarbor/image-20210405224051163.png\" alt=\"image-20210405224051163\"></p>\n<p>​        此时我们即将使用到<code>promql</code>，即将<code>promql</code>添加到<code>Grafana</code>仪表盘中的<code>Metrics</code>中<code>Grafana</code>将在该图形中展示哪种<code>promethues</code>中的数据，我们依旧可以通过<code>prometheus</code>界面上的<code>Graph</code>进行调试，如监控内存，我们列出所有跟容器相关的<code>container_memory_usage_bytes</code>的信息</p>\n<p><img src=\"../dockerHarbor/image-20210405224523020.png\" alt=\"image-20210405224523020\"></p>\n<p>​        下面，我们通过筛选条件，列出容器的<code>container_memory_usage_bytes</code>信息，<code>promql</code>语句为<code>container_memory_usage_bytes&#123;image!=&quot;&quot;&#125;</code></p>\n<p><img src=\"../dockerHarbor/image-20210405224757286.png\" alt=\"image-20210405224757286\"></p>\n<p>​        接下来，我们采集具体的容器，如名称为<code>cAdvisor</code>的容器的信息，<code>promql</code>为<code>container_memory_usage_bytes&#123;image!=&quot;&quot;,name=&quot;cadvisor&quot;&#125;</code>，如下</p>\n<p><img src=\"../dockerHarbor/image-20210405225046812.png\" alt=\"image-20210405225046812\"></p>\n<p>​        将上面得到的<code>promql</code>写入到<code>grafana</code>中的<code>metrics</code>，就能得到数据</p>\n<p><img src=\"../dockerHarbor/image-20210405230150973.png\" alt=\"image-20210405230150973\"></p>\n<p>​        完成后，如下图所示：</p>\n<p><img src=\"../dockerHarbor/image-20210405230244625.png\" alt=\"image-20210405230244625\"></p>\n<h4 id=\"3-3-3-添加模板仪表盘\"><a href=\"#3-3-3-添加模板仪表盘\" class=\"headerlink\" title=\"3.3.3 添加模板仪表盘\"></a>3.3.3 添加模板仪表盘</h4><p>​        如果每台机器都要这样手动配置一个图形的话，对于十来台服务器来说还可以接受，但对于成有千上万台的服务器的公司来说，这样的配置方式无疑是灾难性的，因此有没有一个通用的模板呢？答案是肯定的，<code>grafana</code>官网提供了很多这样的监控模板，访问地址–<code>https://grafana.com/grafana/dashboards/</code>：</p>\n<p><img src=\"../dockerHarbor/image-20210405230718697.png\" alt=\"image-20210405230718697\"></p>\n<p>​        监控docker主机模板ID：193，即使用url–<code>https://grafana.com/grafana/dashboards/193</code></p>\n<p><img src=\"../dockerHarbor/image-20210405231133723.png\" alt=\"image-20210405231133723\"></p>\n<p>在grafana首页中，点击<code>manage</code>–&gt;<code>import</code>，输入<code>193</code>导入模板</p>\n<p><img src=\"../dockerHarbor/image-20210405231439212.png\" alt=\"image-20210405231439212\"></p>\n<p>输入<code>193</code>点击<code>load</code>按钮</p>\n<p><img src=\"../dockerHarbor/image-20210405231558075.png\" alt=\"image-20210405231558075\"></p>\n<p>点击<code>load</code>后，自动加载</p>\n<p><img src=\"../dockerHarbor/image-20210405231650128.png\" alt=\"image-20210405231650128\"></p>\n<p>导入后，即可看到仪表盘数据内容</p>\n<p><img src=\"../dockerHarbor/image-20210405231742854.png\" alt=\"image-20210405231742854\"></p>\n<p>​        这里的仪表盘只是大佬给我们做好了的模板，本质上也是通过<code>promql</code>自定义仪表盘来做的，例如，我们查看上图中的<code>Total Memory Usage</code>，点击<code>Edit</code>来到编辑界面</p>\n<p><img src=\"../dockerHarbor/image-20210405232056122.png\" alt=\"image-20210405232056122\"></p>\n<p>​        <code>promql</code>语句如下：</p>\n<p><img src=\"../dockerHarbor/image-20210405232158441.png\" alt=\"image-20210405232158441\"></p>\n<p> 一些常见的坑：</p>\n<ul>\n<li>不展示数据：<ul>\n<li>可能是宿主机由于时间不同步</li>\n<li>promql格式有问题，可以通过<code>prometheus</code>的<code>Graph</code>进行检查</li>\n<li>prometheus本来就没有数据</li>\n</ul>\n</li>\n</ul>\n<p>cAdvisor+prometheus+grafana进行监控的步骤总结：</p>\n<ol>\n<li>在被监控主机上安装cAdvisor容器，让cAdvisor收集宿主机数据</li>\n<li>将宿主机监控端写入prometheus配置文件，让Prometheus能够获得cAdvisor采集到宿主机的监控数据</li>\n<li>添加到grafana仪表盘(但是每天主机都添加一个仪表盘是不是很烦呢？能否一个界面显示所有的主机呢？需要查看哪台主机就点击哪台主机呢？)</li>\n</ol>\n<p>​        点击下图中的<code>设置</code>按钮，进入设置选项</p>\n<p><img src=\"../dockerHarbor/image-20210405233132149.png\" alt=\"image-20210405233132149\"></p>\n<p>​        点击<code>Versions</code>，添加变量</p>\n<p><img src=\"../dockerHarbor/image-20210405233216163.png\" alt=\"image-20210405233216163\"></p>\n<p>​        如下，列出所有分组(或主机)信息，即<code>dashboard</code>中是按照<code>job</code>还是<code>instance</code>显示主机：</p>\n<p><img src=\"../dockerHarbor/image-20210405233844242.png\" alt=\"image-20210405233844242\"></p>\n<p>​        上图中的配置，我们仍然是通过<code>promql</code>实现，在<code>Graph</code>页面显示不出的数据，不可能在<code>grafana</code>中能显示图形。</p>\n<p><img src=\"../dockerHarbor/image-20210405233532485.png\" alt=\"image-20210405233532485\"></p>\n<p>​        此时，查看<code>grafana</code>仪表盘，就多了选择框，可以选择主机或分组，上图中<code>add variables</code>(添加变量)时使用 的是<code>instance</code>就显示所有主机的信息，添加的是<code>job</code>就会显示所有分组的信息。</p>\n<p><img src=\"../dockerHarbor/image-20210405234100094.png\" alt=\"image-20210405234100094\"></p>\n<p>​        但是，现在我们选择两个不同的节点，图表的结果是一样的，因为<code>promql</code>中的语句写死了，没有采集到对应<code>node</code>节点主机的信息，因此需要修改，方法如下，先点击进入其中一个仪表盘的修改界面：</p>\n<p><img src=\"../dockerHarbor/image-20210405234556293.png\" alt=\"image-20210405234556293\"></p>\n<p>​        添加上每台主机，在原<code>promql</code>的基础上，添加上<code>&quot;instance=&#39;$Node&#39;&quot;</code>，变量<code>Node</code>是我们上文中通过<code>add variables</code>自定义的变量名称</p>\n<p><img src=\"../dockerHarbor/image-20210405234802713.png\" alt=\"image-20210405234802713\"></p>\n<p>​        通过这样的修改，得到的就是每一台主机的<code>内存使用量</code>了，然后再将该仪表盘中的其他仪表盘<code>promql</code>都进行这样的修改，就能展示出每台主机独特的信息。 </p>\n","comments":true,"permalink":"https://qingdalf.github.io/2021-05/dockerMonitor/","categories":[{"name":"kubernets","slug":"kubernets","permalink":"https://qingdalf.github.io/categories/kubernets/"}],"tags":[]},{"title":"harbor仓库","date":"2021-05-04T10:47:19.000Z","path":"2021-05/dockerHarbor/","content":"<h2 id=\"1-harbor是什么\"><a href=\"#1-harbor是什么\" class=\"headerlink\" title=\"1. harbor是什么\"></a>1. harbor是什么</h2><h3 id=\"1-1-harbor简介\"><a href=\"#1-1-harbor简介\" class=\"headerlink\" title=\"1.1 harbor简介\"></a>1.1 harbor简介</h3><p>​        Harbor是由VMware公司开源的一个用于存储和分发Docker镜像的企业级docker镜像仓库，默认使用https访问协议。通过添加一些企业必需的功能特性，例如安全、标识和管理等，扩展了开源Docker Distribution。作为一个企业级私有Registry服务器，Harbor提供了更好的性能和安全。提升用户使用Registry构建和运行环境传输镜像的效率。Harbor支持安装在多个Registry节点的镜像资源复制，镜像全部保存在私有Registry中， 确保数据和知识产权在公司内部网络中管控。另外，Harbor也提供了高级的安全特性，诸如用户管理，访问控制和活动审计等。</p>\n<span id=\"more\"></span>\n<ol>\n<li>云本机注册表：Harbour 支持容器映像和Helm图表，可用作云本机环境（如容器运行时和业务流程平台）的注册表。</li>\n<li>基于角色的访问控制：用户和存储库通过“项目”进行组织，用户可以对项目下的图像拥有不同的权限。</li>\n<li>基于策略的映像复制：可以基于具有多个过滤器（存储库，标记和标签）的策略在多个注册表实例之间复制（同步）映像。如果遇到任何错误，Harbor将自动重试进行复制。非常适合负载平衡，高可用性，多数据中心，混合和多云场景。</li>\n<li>漏洞扫描：Harbor定期扫描图像并警告用户漏洞。</li>\n<li>LDAP / AD支持：Harbor与现有企业LDAP / AD集成以进行用户身份验证和管理，并支持将LDAP组导入Harbor并为其分配适当的项目角色。</li>\n<li>图像删除和垃圾收集：可以删除图像，并可以回收它们的空间。</li>\n<li>公证：可以确保图像的真实性。</li>\n<li>图形用户门户：用户可以轻松浏览，搜索存储库和管理项目。</li>\n<li>审计：跟踪存储库的所有操作。</li>\n<li>RESTful API：适用于大多数管理操作的RESTful API，易于与外部系统集成。</li>\n<li>易于部署：提供在线和离线安装程序。　</li>\n</ol>\n<p>官方文档：<a href=\"https://goharbor.io/docs/\">https://goharbor.io/docs/</a></p>\n<p>github用户手册：<a href=\"https://github.com/goharbor/harbor/blob/master/docs/user_guide.md\">https://github.com/goharbor/harbor/blob/master/docs/user_guide.md</a></p>\n<p>官网：<a href=\"https://harbor.com/\">https://harbor.com/</a></p>\n<h3 id=\"1-2-harbor组件：\"><a href=\"#1-2-harbor组件：\" class=\"headerlink\" title=\"1.2 harbor组件：\"></a>1.2 harbor组件：</h3><table>\n<thead>\n<tr>\n<th>组件</th>\n<th align=\"left\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>harbor-adminserver</td>\n<td align=\"left\">配置管理中心</td>\n</tr>\n<tr>\n<td>harbor-db</td>\n<td align=\"left\">Mysql数据库</td>\n</tr>\n<tr>\n<td>harbor-jobservice</td>\n<td align=\"left\">负责镜像复制</td>\n</tr>\n<tr>\n<td>harbor-log</td>\n<td align=\"left\">记录操作日志</td>\n</tr>\n<tr>\n<td>harbor-ui</td>\n<td align=\"left\">Web管理页面和API</td>\n</tr>\n<tr>\n<td>nginx</td>\n<td align=\"left\">前端代理，负责前端页面和镜像上传/下载转发</td>\n</tr>\n<tr>\n<td>redis</td>\n<td align=\"left\">会话</td>\n</tr>\n<tr>\n<td>registry</td>\n<td align=\"left\">镜像存储</td>\n</tr>\n</tbody></table>\n<h2 id=\"2-harbor下载与安装\"><a href=\"#2-harbor下载与安装\" class=\"headerlink\" title=\"2 harbor下载与安装\"></a>2 harbor下载与安装</h2><h3 id=\"2-1-harbor下载\"><a href=\"#2-1-harbor下载\" class=\"headerlink\" title=\"2.1 harbor下载\"></a>2.1 harbor下载</h3><p>服务器配置要求：2C/4G/40G，推荐4C/8G/160G</p>\n<p>下载地址：<a href=\"https://github.com/goharbor/harbor/releases\">https://github.com/goharbor/harbor/releases</a></p>\n<h4 id=\"2-1-1-安装方式\"><a href=\"#2-1-1-安装方式\" class=\"headerlink\" title=\"2.1.1 安装方式\"></a>2.1.1 安装方式</h4><ul>\n<li>离线安装：下载harbor软件包到本地进行安装，软件包较大，下载速度慢</li>\n<li>在线安装：</li>\n<li>OVA安装程序：当用户具有vCenter环境时，使用此安装程序，在部署OVA后启动Harbor。</li>\n</ul>\n<p><img src=\"harbor%E4%B8%8B%E8%BD%BD.png\" alt=\"image-20210405111645490\"></p>\n<h3 id=\"2-2-harbor安装\"><a href=\"#2-2-harbor安装\" class=\"headerlink\" title=\"2.2 harbor安装\"></a>2.2 harbor安装</h3><h4 id=\"2-2-1-安装docker\"><a href=\"#2-2-1-安装docker\" class=\"headerlink\" title=\"2.2.1 安装docker\"></a>2.2.1 安装docker</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 如果已经安装了docker，可以使用下面的命令卸载</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-engine</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装必要的依赖包</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum install -y device-mapper-persistent-data lvm2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 添加docker仓库，并修改成国内清华镜像源</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> wget -O /etc/yum.repos.d/docker-ce.repo https://download.docker.com/linux/centos/docker-ce.repo</span> </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> sed -i <span class=\"string\">&#x27;s#download.docker.com#mirrors.tuna.tsinghua.edu.cn/docker-ce#&#x27;</span> /etc/yum.repos.d/docker-ce.repo</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum clean all &amp;&amp; yum repolist</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装docker</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum -y install docker-ce</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 添加镜像加速器</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> mkdir /etc/docker</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> vim /etc/docker/daemon.json</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com&quot;,&quot;http://hub-mirror.c.163.com&quot;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 启动并添加到开机自启动</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> systemctl start docker  &amp;&amp; systemctl <span class=\"built_in\">enable</span> docker</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-2-安装docker-compose\"><a href=\"#2-2-2-安装docker-compose\" class=\"headerlink\" title=\"2.2.2 安装docker-compose\"></a>2.2.2 安装docker-compose</h4><p>​        harbor使用docker-compose进行编排，因此在安装harbor之前必须先安装docker-compose。</p>\n<p>​        下载地址：<a href=\"https://github.com/docker/compose/releases\">https://github.com/docker/compose/releases</a></p>\n<img src=\"docker-compose下载.png\" alt=\"image-20210405111645490\" style=\"zoom:67%;\" />\n\n\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls docker-compose-Linux-x86_64</span></span><br><span class=\"line\">docker-compose-Linux-x86_64</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 添加执行权限并移动到环境变量路径中</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> chmod u+x docker-compose-Linux-x86_64</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> mv docker-compose-Linux-x86_64 /usr/bin/docker-compose</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 验证</span>  </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker-compose  --version</span></span><br><span class=\"line\">docker-compose version 1.28.6, build 5db8d86f</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker-compose简单用法</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker-compose --<span class=\"built_in\">help</span></span></span><br><span class=\"line\">Define and run multi-container applications with Docker.</span><br><span class=\"line\"></span><br><span class=\"line\">Usage:</span><br><span class=\"line\">  docker-compose [-f &lt;arg&gt;...] [--profile &lt;name&gt;...] [options] [--] [COMMAND] [ARGS...]</span><br><span class=\"line\">  docker-compose -h|--help</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\">  -f, --file FILE             Specify an alternate compose file</span><br><span class=\"line\">                              (default: docker-compose.yml)</span><br><span class=\"line\">  -p, --project-name NAME     Specify an alternate project name</span><br><span class=\"line\">                              (default: directory name)</span><br><span class=\"line\">  --profile NAME              Specify a profile to enable</span><br><span class=\"line\">  -c, --context NAME          Specify a context name</span><br><span class=\"line\">  --verbose                   Show more output</span><br><span class=\"line\">  --log-level LEVEL           Set log level (DEBUG, INFO, WARNING, ERROR, CRITICAL)</span><br><span class=\"line\">  --ansi (never|always|auto)  Control when to print ANSI control characters</span><br><span class=\"line\">  --no-ansi                   Do not print ANSI control characters (DEPRECATED)</span><br><span class=\"line\">  -v, --version               Print version and exit</span><br><span class=\"line\">  -H, --host HOST             Daemon socket to connect to</span><br><span class=\"line\"></span><br><span class=\"line\">  --tls                       Use TLS; implied by --tlsverify</span><br><span class=\"line\">  --tlscacert CA_PATH         Trust certs signed only by this CA</span><br><span class=\"line\">  --tlscert CLIENT_CERT_PATH  Path to TLS certificate file</span><br><span class=\"line\">  --tlskey TLS_KEY_PATH       Path to TLS key file</span><br><span class=\"line\">  --tlsverify                 Use TLS and verify the remote</span><br><span class=\"line\">  --skip-hostname-check       Don&#x27;t check the daemon&#x27;s hostname against the</span><br><span class=\"line\">                              name specified in the client certificate</span><br><span class=\"line\">  --project-directory PATH    Specify an alternate working directory</span><br><span class=\"line\">                              (default: the path of the Compose file)</span><br><span class=\"line\">  --compatibility             If set, Compose will attempt to convert keys</span><br><span class=\"line\">                              in v3 files to their non-Swarm equivalent (DEPRECATED)</span><br><span class=\"line\">  --env-file PATH             Specify an alternate environment file</span><br><span class=\"line\"></span><br><span class=\"line\">Commands:</span><br><span class=\"line\">  build              Build or rebuild services   # 构建或者重构服务</span><br><span class=\"line\">  config             Validate and view the Compose file</span><br><span class=\"line\">  create             Create services   # 创建服务</span><br><span class=\"line\">  down               Stop and remove resources  # 停止运行中的容器</span><br><span class=\"line\">  events             Receive real time events from containers</span><br><span class=\"line\">  exec               Execute a command in a running container  # 进入一个运行的容器中</span><br><span class=\"line\">  help               Get help on a command</span><br><span class=\"line\">  images             List images   # 列出存在的所有镜像</span><br><span class=\"line\">  kill               Kill containers   # kill掉容器</span><br><span class=\"line\">  logs               View output from containers  # 查看容器日志输出</span><br><span class=\"line\">  pause              Pause services   # 暂停服务</span><br><span class=\"line\">  port               Print the public port for a port binding  # 列出端口</span><br><span class=\"line\">  ps                 List containers   # 列出运行中的容器</span><br><span class=\"line\">  pull               Pull service images  # 推镜像到仓库</span><br><span class=\"line\">  push               Push service images  # 从仓库中拉取镜像</span><br><span class=\"line\">  restart            Restart services     # 重启服务</span><br><span class=\"line\">  rm                 Remove stopped containers  # 删除停止的容器</span><br><span class=\"line\">  run                Run a one-off command</span><br><span class=\"line\">  scale              Set number of containers for a service</span><br><span class=\"line\">  start              Start services    # 启动服务</span><br><span class=\"line\">  stop               Stop services     # 停止服务</span><br><span class=\"line\">  top                Display the running processes  # 展示运行容器使用的资源信息</span><br><span class=\"line\">  unpause            Unpause services</span><br><span class=\"line\">  up                 Create and start containers    # 启动容器</span><br><span class=\"line\">  version            Show version information and quit  # 查看docker-compose版本信息</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-3-安装harbor\"><a href=\"#2-2-3-安装harbor\" class=\"headerlink\" title=\"2.2.3 安装harbor\"></a>2.2.3 安装harbor</h4><p>​        harbor默认使用https协议进行访问，也支持http协议。因此接下来的安装过程将分成两个步骤，使用http协议和https协议进行harbor安装。</p>\n<h5 id=\"2-2-3-1-解压并认识harbor配置文件\"><a href=\"#2-2-3-1-解压并认识harbor配置文件\" class=\"headerlink\" title=\"2.2.3.1 解压并认识harbor配置文件\"></a>2.2.3.1 解压并认识harbor配置文件</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls</span> </span><br><span class=\"line\">harbor-offline-installer-v2.2.1.tgz</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> tar zxvf harbor-offline-installer-v2.2.1.tgz    <span class=\"comment\"># 解压</span></span></span><br><span class=\"line\">harbor/harbor.v2.2.1.tar.gz</span><br><span class=\"line\">harbor/prepare</span><br><span class=\"line\">harbor/LICENSE</span><br><span class=\"line\">harbor/install.sh</span><br><span class=\"line\">harbor/common.sh</span><br><span class=\"line\">harbor/harbor.yml.tmpl   # 配置文件样本</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cat harbor.yml.tmpl  | grep -Ev <span class=\"string\">&quot;^$|#&quot;</span>  <span class=\"comment\"># 简单认识配置模板文件</span></span></span><br><span class=\"line\">hostname: reg.mydomain.com   # 默认的域名，使用该域名需要域名解析，如果不做域名解析，可修改成harbor主机IP地址</span><br><span class=\"line\">http:               # http信息，默认端口信息都可以自行修改</span><br><span class=\"line\">  port: 80   </span><br><span class=\"line\">https:              # https的端口和证书存放路径，默认使用Https协议，但使用https需要配置证书，若不使用可注释掉</span><br><span class=\"line\">  port: 443    </span><br><span class=\"line\">  certificate: /your/certificate/path</span><br><span class=\"line\">  private_key: /your/private/key/path</span><br><span class=\"line\">harbor_admin_password: Harbor12345   # 登陆harbor仓库web界面默认密码，默认用户为adamin，建议修改</span><br><span class=\"line\">database:               # 数据库信息</span><br><span class=\"line\">  password: root123     # 数据库root用户密码，建议修改</span><br><span class=\"line\">  max_idle_conns: 50</span><br><span class=\"line\">  max_open_conns: 1000</span><br><span class=\"line\">data_volume: /data     # 默认存储位置</span><br><span class=\"line\">trivy:</span><br><span class=\"line\">  ignore_unfixed: false</span><br><span class=\"line\">  skip_update: false</span><br><span class=\"line\">  insecure: false</span><br><span class=\"line\">jobservice:</span><br><span class=\"line\">  max_job_workers: 10</span><br><span class=\"line\">notification:</span><br><span class=\"line\">  webhook_job_max_retry: 10</span><br><span class=\"line\">chart:</span><br><span class=\"line\">  absolute_url: disabled</span><br><span class=\"line\">log:</span><br><span class=\"line\">  level: info</span><br><span class=\"line\">  local:</span><br><span class=\"line\">    rotate_count: 50</span><br><span class=\"line\">    rotate_size: 200M</span><br><span class=\"line\">    location: /var/log/harbor</span><br><span class=\"line\">_version: 2.2.0</span><br><span class=\"line\">proxy:</span><br><span class=\"line\">  http_proxy:</span><br><span class=\"line\">  https_proxy:</span><br><span class=\"line\">  no_proxy:</span><br><span class=\"line\">  components:</span><br><span class=\"line\">    - core</span><br><span class=\"line\">    - jobservice</span><br><span class=\"line\">    - trivy</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-2-3-2-使用http协议访问harbor\"><a href=\"#2-2-3-2-使用http协议访问harbor\" class=\"headerlink\" title=\"2.2.3.2 使用http协议访问harbor\"></a>2.2.3.2 使用http协议访问harbor</h5><p>​        harbor默认使用https协议，如果不想使用https协议，可以修改/etc/docker/daemon.json文件。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> vim /etc/docker/daemon.json</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com&quot;,&quot;http://hub-mirror.c.163.com&quot;],</span><br><span class=\"line\">    &quot;insecure-registries&quot;: [&quot;10.138.3.111:80&quot;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 将harbor主机IP地址(如果配置了域名解析可直接使用域名)和端口写入该文件，让其受信任即可</span></span><br></pre></td></tr></table></figure>\n\n<p>​        注释掉harbor.yml.tmpl文件中关于https的内容</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> vim harbor.yml.tmpl  <span class=\"comment\"># 注释掉该文件中下面的内容</span></span></span><br><span class=\"line\">https:            </span><br><span class=\"line\">  port: 443    </span><br><span class=\"line\">  certificate: /your/certificate/path</span><br><span class=\"line\">  private_key: /your/private/key/path</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-2-3-3-使用https协议访问harbor\"><a href=\"#2-2-3-3-使用https协议访问harbor\" class=\"headerlink\" title=\"2.2.3.3 使用https协议访问harbor\"></a>2.2.3.3 使用https协议访问harbor</h5><p>​        使用https协议需要证书，接下来我们使用cfssl进行自签证书。</p>\n<p>安装cfssl</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> wget https://pkg.cfssl.org/R1.2/cfssl_linux-amd64</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> wget https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> wget https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 添加执行权限</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> chmod +x cfssl_linux-amd64 cfssljson_linux-amd64 cfssl-certinfo_linux-amd64</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 移动至环境变量路径</span></span><br><span class=\"line\">mv cfssl_linux-amd64 /usr/local/bin/cfssl   # 生成证书工具</span><br><span class=\"line\">mv cfssljson_linux-amd64 /usr/local/bin/cfssljson</span><br><span class=\"line\">mv cfssl-certinfo_linux-amd64 /usr/local/bin/cfssl-certinfo  # 证书信息查看工具</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 验证</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cfssl version</span></span><br><span class=\"line\">Version: 1.2.0</span><br><span class=\"line\">Revision: dev</span><br><span class=\"line\">Runtime: go1.6</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 生成ca证书配置文件</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> mkdir ssl</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">cd</span> ssl &amp;&amp; cfssl print-defaults config &gt; ca-config.json</span>  </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cat ca-config.json</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;signing&quot;: &#123;</span><br><span class=\"line\">        &quot;default&quot;: &#123;</span><br><span class=\"line\">            &quot;expiry&quot;: &quot;168h&quot;   # 过期时间，默认为168h，此处修改成87600h=10年</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;profiles&quot;: &#123;</span><br><span class=\"line\">            &quot;www&quot;: &#123;</span><br><span class=\"line\">                &quot;expiry&quot;: &quot;87600h&quot;,  # 默认是1年，这里修改成10年</span><br><span class=\"line\">                &quot;usages&quot;: [</span><br><span class=\"line\">                    &quot;signing&quot;,</span><br><span class=\"line\">                    &quot;key encipherment&quot;,</span><br><span class=\"line\">                    &quot;server auth&quot;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;client&quot;: &#123;</span><br><span class=\"line\">                &quot;expiry&quot;: &quot;87600h&quot;,  # 默认是1年，这里修改成10年</span><br><span class=\"line\">                &quot;usages&quot;: [</span><br><span class=\"line\">                    &quot;signing&quot;,</span><br><span class=\"line\">                    &quot;key encipherment&quot;,</span><br><span class=\"line\">                    &quot;client auth&quot;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 生成ca证书信息文件</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cfssl print-defaults csr &gt; ca-csr.json</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cat ca-csr.json</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;CN&quot;: &quot;example.net&quot;,   # 标识具体的域</span><br><span class=\"line\">    &quot;hosts&quot;: [            # 使用该证书的域名</span><br><span class=\"line\">        &quot;example.net&quot;,</span><br><span class=\"line\">        &quot;www.example.net&quot;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    &quot;key&quot;: &#123;    # 加密方式，一般使用rsa，大小使用2048</span><br><span class=\"line\">        &quot;algo&quot;: &quot;ecdsa&quot;,  # 加密方式，默认是ecdsa，此处使用rsa</span><br><span class=\"line\">        &quot;size&quot;: 256       # 默认是256，此处使用2048</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;names&quot;: [            # 证书中包含的国家地区和城市信息</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;C&quot;: &quot;US&quot;,   # 表示国家，修改成CN</span><br><span class=\"line\">            &quot;L&quot;: &quot;CA&quot;,   # 区域，这里修改成SiChuan</span><br><span class=\"line\">            &quot;ST&quot;: &quot;San Francisco&quot;   # 城市，修改成本地国内城市，ChengDu</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 使用证书信息文件生成证书</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cfssl gencert -initca ca-csr.json | cfssljson -bare ca -</span></span><br><span class=\"line\">2021/04/05 13:07:11 [INFO] generating a new CA key and certificate from CSR</span><br><span class=\"line\">2021/04/05 13:07:11 [INFO] generate received request</span><br><span class=\"line\">2021/04/05 13:07:11 [INFO] received CSR</span><br><span class=\"line\">2021/04/05 13:07:11 [INFO] generating key: rsa-2048</span><br><span class=\"line\">2021/04/05 13:07:12 [INFO] encoded CSR</span><br><span class=\"line\">2021/04/05 13:07:12 [INFO] signed certificate with serial number 697269161568410809548825101035635405041110584154</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 执行完成后，将生成两个pem文件，如下</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls *.pem</span></span><br><span class=\"line\">ca-key.pem  ca.pem</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 签署服务端证书</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cp ca-csr.json reg.com-csr.json</span> </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> vim reg.com-csr.json</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;CN&quot;: &quot;reg.com&quot;,   # 跟harbor配置文件中的域名一致</span><br><span class=\"line\">    &quot;hosts&quot;: [],</span><br><span class=\"line\">    &quot;key&quot;: &#123;    # 加密方式</span><br><span class=\"line\">        &quot;algo&quot;: &quot;rsa&quot;,  </span><br><span class=\"line\">        &quot;size&quot;: 2048       </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;names&quot;: [            # 证书中包含的国家地区和城市信息</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;C&quot;: &quot;CN&quot;,   # 国家</span><br><span class=\"line\">            &quot;L&quot;: &quot;SiChuan&quot;,   # 区域</span><br><span class=\"line\">            &quot;ST&quot;: &quot;ChengDu&quot;   # 城市</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 签发证书</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=www reg.com-csr.json | cfssljson -bare reg.com</span></span><br><span class=\"line\">2021/04/05 13:07:56 [INFO] generate received request</span><br><span class=\"line\">2021/04/05 13:07:56 [INFO] received CSR</span><br><span class=\"line\">2021/04/05 13:07:56 [INFO] generating key: rsa-2048</span><br><span class=\"line\">2021/04/05 13:07:56 [INFO] encoded CSR</span><br><span class=\"line\">2021/04/05 13:07:56 [INFO] signed certificate with serial number 184797551865598110499745729080826042064714656658</span><br><span class=\"line\">2021/04/05 13:07:56 [WARNING] This certificate lacks a &quot;hosts&quot; field. This makes it unsuitable for</span><br><span class=\"line\">websites. For more information see the Baseline Requirements for the Issuance and Management</span><br><span class=\"line\">of Publicly-Trusted Certificates, v.1.1.6, from the CA/Browser Forum (https://cabforum.org);</span><br><span class=\"line\">specifically, section 10.2.3 (&quot;Information Requirements&quot;).</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls *.pem</span></span><br><span class=\"line\">ca-key.pem  ca.pem  reg.com-key.pem  reg.com.pem</span><br></pre></td></tr></table></figure>\n\n<p>修改harbor配置文件，将证书路径写入harbor配置文件中</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls /etc/docker/ssl</span></span><br><span class=\"line\">reg.com-key.pem  reg.com.pem</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> vim harbor.yml.tmpl    <span class=\"comment\"># 将路径写入即可</span></span></span><br><span class=\"line\">···</span><br><span class=\"line\">http</span><br><span class=\"line\">  port: 80    # 注释掉关于http的信息</span><br><span class=\"line\">https:</span><br><span class=\"line\">  port: 443</span><br><span class=\"line\">  certificate: /etc/docker/ssl/reg.com.pem</span><br><span class=\"line\">  private_key: /etc/docker/ssl/reg.com-key.pem</span><br><span class=\"line\">···</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-2-3-4-安装\"><a href=\"#2-2-3-4-安装\" class=\"headerlink\" title=\"2.2.3.4 安装\"></a>2.2.3.4 安装</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 准备配置文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">cd</span> /root/harbor &amp;&amp; mv harbor.yml.tmpl harbor.yml</span> </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker image load -i harbor.v2.2.1.tar.gz &amp;&amp; ./prepare</span>   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装并启动harbor容器</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ./install.sh</span></span><br><span class=\"line\">····</span><br><span class=\"line\">Creating network &quot;harbor_harbor&quot; with the default driver</span><br><span class=\"line\">Creating harbor-log ... done</span><br><span class=\"line\">Creating harbor-db     ... done</span><br><span class=\"line\">Creating registry      ... done</span><br><span class=\"line\">Creating harbor-portal ... done</span><br><span class=\"line\">Creating redis         ... done</span><br><span class=\"line\">Creating registryctl   ... done</span><br><span class=\"line\">Creating harbor-core   ... done</span><br><span class=\"line\">Creating nginx             ... done</span><br><span class=\"line\">Creating harbor-jobservice ... done</span><br><span class=\"line\">✔ ----Harbor has been installed and started successfully.----  #</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker contianer ls</span> </span><br></pre></td></tr></table></figure>\n\n<p><img src=\"%E5%AE%89%E8%A3%85%E5%AE%8C%E6%88%90%E5%90%8E%E7%9A%84%E5%AE%B9%E5%99%A8.png\" alt=\"image-20210405140323830\"></p>\n<h3 id=\"2-3-访问web页面\"><a href=\"#2-3-访问web页面\" class=\"headerlink\" title=\"2.3 访问web页面\"></a>2.3 访问web页面</h3><p>​        将reg.com域名解析写入windows主机中的hosts文件，做完域名解析后在web浏览器中输入域名，由于我们使用的是自签证书，因此还是会提示链接不安全(并显示在浏览器uri前面)，点击”添加另外”即可：</p>\n<img src=\"不安全界面提醒.png\" alt=\"image-20210405151403972\" style=\"zoom:67%;\" />\n\n<p>登陆界面如下，用户名admin，密码为harbor.yml文件中定义的admin密码：</p>\n<p><img src=\"harbor%E7%99%BB%E9%99%86%E7%95%8C%E9%9D%A2.png\" alt=\"image-20210405140601898\"></p>\n<p>进入控制台，不喜欢该主题的话，可以点击下方<code>浅色主题</code>进行切换</p>\n<p><img src=\"harbor%E6%8E%A7%E5%88%B6%E5%8F%B0.png\" alt=\"image-20210405140845298\"></p>\n<p>查看证书信息</p>\n<img src=\"查看证书方法.png\" alt=\"image-20210405150634165\" style=\"zoom:50%;\" />\n\n<p>证书信息：</p>\n<img src=\"证书信息.png\" alt=\"image-20210405150442674\" style=\"zoom:67%;\" />\n\n<p>​        docker仓库搭建就完成，docker仓库的使用方法，请参考下一个章节的文章。</p>\n<h2 id=\"3-harbor仓库的使用\"><a href=\"#3-harbor仓库的使用\" class=\"headerlink\" title=\"3.harbor仓库的使用\"></a>3.harbor仓库的使用</h2><h3 id=\"3-1命令行登陆到harbor仓库\"><a href=\"#3-1命令行登陆到harbor仓库\" class=\"headerlink\" title=\"3.1命令行登陆到harbor仓库\"></a>3.1命令行登陆到harbor仓库</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 从另外的主机访问harbor仓库</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker login https://reg.com</span></span><br><span class=\"line\">Username: admin</span><br><span class=\"line\">Password: </span><br><span class=\"line\">Error response from daemon: login attempt to https://reg.com/v2/ failed with status: 404 Not Found</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 提示找不到https://reg.com，解决方法做hosts域名解析</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">echo</span> <span class=\"string\">&quot;10.138.3.111 reg.com&quot;</span> &gt;&gt; /etc/hosts</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 做完hosts域名解析后，再一次登陆，提示未知的认证</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker login https://reg.com</span></span><br><span class=\"line\">Username: admin</span><br><span class=\"line\">Password: </span><br><span class=\"line\">Error response from daemon: Get https://reg.com/v2/: x509: certificate signed by unknown authority</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 此时查看harbor主机上的messages日志，将看到访问失败的信息</span></span><br><span class=\"line\">Apr  5 15:20:13 reg dockerd: time=&quot;2021-04-05T15:20:13.964537621+08:00&quot; level=error msg=&quot;Handler for POST /v1.41/auth returned error: login attempt to https://reg.com/v2/ failed with status: 404 Not Found&quot;</span><br><span class=\"line\">Apr  5 15:24:35 reg dockerd: time=&quot;2021-04-05T15:24:35.416729925+08:00&quot; level=info msg=&quot;Error logging in to endpoint, trying next endpoint&quot; error=&quot;Get https://reg.com/v2/: x509: certificate signed by unknown authority&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 解决方法，将harbor主机上的自签证书拷贝到需要访问harbor的主机上</span></span><br><span class=\"line\">mkdir /etc/docker/certs.d/reg.com -p  # 在被访问主机上新建目录，目录名称是/etc/docker/certs.d/harbor主机域名</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 将harbor主机上的reg.com.pem文件拷贝到被访问主机上，名称后缀为.crt，不是.pem</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> scp -P 10022 /etc/docker/ssl/reg.com.pem 10.138.3.111:/etc/docker/certs.d/reg.com/reg.com.crt</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 再次访问就没有问题了</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker login https://reg.com</span></span><br><span class=\"line\">Username: admin</span><br><span class=\"line\">Password: </span><br><span class=\"line\">WARNING! Your password will be stored unencrypted in /root/.docker/config.json.</span><br><span class=\"line\">Configure a credential helper to remove this warning. See</span><br><span class=\"line\">https://docs.docker.com/engine/reference/commandline/login/#credentials-store</span><br><span class=\"line\"></span><br><span class=\"line\">Login Succeeded</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看主机上所有镜像</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker image ls</span></span><br><span class=\"line\">REPOSITORY   TAG                 IMAGE ID       CREATED        SIZE</span><br><span class=\"line\">php          lnmp_php_7.4.16     960a00c2710a   6 hours ago    712MB</span><br><span class=\"line\">nginx        lnmp_ningx_1.18.0   438f02d48ea9   15 hours ago   489MB</span><br><span class=\"line\">mysql        5.7                 cd0f0b1e283d   5 days ago     449MB</span><br><span class=\"line\">centos       centos7.6.1810      f1cb7c7d58b7   2 years ago    202MB</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 给centos镜像修改标签</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker tag centos:centos7.6.1810 reg.com/library/centos:centos7.6.1810</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker image ls</span></span><br><span class=\"line\">REPOSITORY               TAG                 IMAGE ID       CREATED        SIZE</span><br><span class=\"line\">php                      lnmp_php_7.4.16     960a00c2710a   6 hours ago    712MB</span><br><span class=\"line\">nginx                    lnmp_ningx_1.18.0   438f02d48ea9   15 hours ago   489MB</span><br><span class=\"line\">mysql                    5.7                 cd0f0b1e283d   5 days ago     449MB</span><br><span class=\"line\">centos                   centos7.6.1810      f1cb7c7d58b7   2 years ago    202MB</span><br><span class=\"line\">reg.com/library/centos   centos7.6.1810      f1cb7c7d58b7   2 years ago    202MB</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 推送centos镜像到reg.com仓库中</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker push reg.com/library/centos:centos7.6.1810</span></span><br><span class=\"line\">The push refers to repository [reg.com/library/centos]</span><br><span class=\"line\">89169d87dbe2: Pushed </span><br><span class=\"line\">centos7.6.1810: digest: sha256:747b2de199b6197a26eb1a24d69740d25483995842b2d2f75824095e9d1d19eb size: 529</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-推送镜像到harbor仓库\"><a href=\"#3-2-推送镜像到harbor仓库\" class=\"headerlink\" title=\"3.2.推送镜像到harbor仓库\"></a>3.2.推送镜像到harbor仓库</h3><p>​        harbor仓库中给出的镜像推送方法提示：</p>\n<img src=\"推送镜像提示.png\" alt=\"image-20210405154748691\" style=\"zoom:67%;\" />\n\n<p>镜像推送完成后，我们刷新页面，查看harbor页面上的镜像信息：</p>\n<p><img src=\"%E6%8E%A8%E9%80%81%E9%95%9C%E5%83%8F%E5%90%8E%E9%A1%B5%E9%9D%A2.png\" alt=\"image-20210405154949618\"></p>\n","comments":true,"permalink":"https://qingdalf.github.io/2021-05/dockerHarbor/","categories":[{"name":"kubernets","slug":"kubernets","permalink":"https://qingdalf.github.io/categories/kubernets/"}],"tags":[]},{"title":"docker镜像仓库","date":"2021-05-04T10:38:32.000Z","path":"2021-05/dockerRegistory/","content":"<p>​        启动容器时，docker daemon会试图从本地获取相关镜像，本地镜像不存在时，其将从Registry中下载该镜像并保存到本地</p>\n<span id=\"more\"></span>\n<p><img src=\"../dockerImage/clip_image056.jpg\" alt=\"img\"></p>\n<p><strong>Docker Registry分类：</strong></p>\n<p>Registry用于保存docker镜像，包括镜像的层次结构和元数据，用户可自建Registry，也可以使用官方的Docker Hub仓库，分类如下：</p>\n<ul>\n<li><p>Sponsor Registry：第三方仓库，供客户和docker社区使用</p>\n</li>\n<li><p>Mirror Registry：第三方仓库，只供客户使用</p>\n</li>\n<li><p>Vendor Registry：由发布docker镜像的供应商提供的Registry</p>\n</li>\n<li><p>Private Registry：通过设有防火墙和额外的安全层的私有实体提供的Registry，如VMware的harbor</p>\n</li>\n</ul>\n<p><strong>Docker Registry的构成</strong></p>\n<ul>\n<li><p> Repository</p>\n</li>\n<li><p>由特定的docker镜像的所有迭代版本组成的镜像仓库，一个Registry中包含多个Repository</p>\n</li>\n<li><p>Repository可分为“顶级仓库”和“用户仓库“，用户仓库的格式为“用户名/仓库名”</p>\n</li>\n<li><p>每个镜像可以包含多个Tag(标签)，每个镜像内的Tag唯一</p>\n</li>\n<li><p>Index</p>\n<ul>\n<li>维护用户账号、镜像的校验已经公共命名空间的信息</li>\n<li>相当于为Registry提供了一个完成用户认证等功能的索引接口</li>\n</ul>\n</li>\n</ul>\n<p>​        Docker Registry中的镜像通常由开发人员制作（一般是基于基础镜像制作，基础镜像由专业人士制作，如docker官方人员），而后推送至“公共”或“私有”Registry上保存，供其他人员使用，例如“部署”到生产环境中。</p>\n<p><img src=\"../dockerImage/clip_image058.jpg\" alt=\"img\"></p>\n<p>镜像的生成途径：</p>\n<ul>\n<li><p>Dockerfile</p>\n</li>\n<li><p>基于容器制作</p>\n</li>\n<li><p>Docker Hub automated builds</p>\n</li>\n</ul>\n<p><img src=\"../dockerImage/clip_image060.jpg\" alt=\"img\"></p>\n<h2 id=\"1-制作本地镜像仓库\"><a href=\"#1-制作本地镜像仓库\" class=\"headerlink\" title=\"1 制作本地镜像仓库\"></a>1 制作本地镜像仓库</h2><ul>\n<li>拉取并启动registry</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker image ls | grep registry</span></span><br><span class=\"line\">registry     latest     2d4f4b5309b1   4 weeks ago   26.2MB</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 启动该镜像容器，--restart=always表示无论时服务器重启或者是docker服务重启之后都自动重启该容器，即该容器会自启</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker run -d -p 5000:5000 --restart=always --name registry -v /opt/registry:/var/lib/registry registry</span></span><br><span class=\"line\">07da1db7effae881bc22570542efc2065a98d863e08b0a109e71087a9c9615ac</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 设置仓库地址为本机地址，默认是docker hub，这里设置成本机(刚刚启动的容器)</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> vim /etc/docker/daemon.json   <span class=\"comment\"># 注意格式，多行内容以逗号结尾，json格式</span></span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com&quot;,&quot;http://hub-mirror.c.163.com&quot;],  </span><br><span class=\"line\">    &quot;insecure-registries&quot;: [&quot;10.138.3.15:5000&quot;] # 最后一行无逗号</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 重启docker，重读配置文件</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> systemctl restart docker</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 检查容器，发现也自动重启了</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker container ls</span></span><br><span class=\"line\">CONTAINER ID  IMAGE       COMMAND              CREATED      STATUS          PORTS               NAMES</span><br><span class=\"line\">07da1db7effa registry &quot;/entrypoint.sh /etc…&quot;  4 minutes ago Up 9 seconds 0.0.0.0:5000-&gt;5000/tcp registry</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>修改镜像标签并推送到registry</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 重新给镜像打标签</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker image tag 5259a77d042b 10.138.3.15:5000/scaven/centos6_bbs:v1</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker image ls | grep 10.138</span></span><br><span class=\"line\">10.138.3.15:5000/scaven/centos6_bbs v1 5259a77d042b  17 hours ago 477MB</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 上传镜像</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker image ls | grep 10.138</span></span><br><span class=\"line\">10.138.3.15:5000/scaven/centos6_bbs   v1     5259a77d042b        17 hours ago     477MB</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker push 10.138.3.15:5000/scaven/centos6_bbs:v1</span></span><br><span class=\"line\">The push refers to repository [10.138.3.15:5000/scaven/centos6_bbs]</span><br><span class=\"line\">8028f132d224: Pushed </span><br><span class=\"line\">b01adbd9e75d: Pushed </span><br><span class=\"line\">8088cb617267: Pushed </span><br><span class=\"line\">v1: digest: sha256:57b830b668ca8de9f1eca19ecd1d84d9ca1892dbed4c67a10306ae9e556166e4 size: 950</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看宿主机上目录映射中的文件</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls /opt/registry/</span></span><br><span class=\"line\">docker</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls /opt/registry/docker/registry/</span></span><br><span class=\"line\">v2</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls /opt/registry/docker/registry/v2/</span></span><br><span class=\"line\">blobs  repositories</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>测试拉取镜像</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 测试，删除本机上的10.138.3.15:5000/scaven/centos6_bbs:v1镜像，然后从仓库中下载，先做备份再删除</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker  image save -o registry_bbs.tar  5259a77d042b</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker image rm  -f 5259a77d042b   <span class=\"comment\"># 删除</span></span></span><br><span class=\"line\">Untagged: 10.138.3.15:5000/scaven/centos6_bbs:v1</span><br><span class=\"line\">Untagged: 10.138.3.15:5000/scaven/centos6_bbs@sha256:57b830b668ca8de9f1eca19ecd1d84d9ca1892dbed4c67a10306ae9e556166e4</span><br><span class=\"line\">Untagged: scaven/centos6_bbs:v1</span><br><span class=\"line\">Deleted: sha256:5259a77d042b9f0a2ca73f385603733d025b22c1ce3e549e1c25f95cd7c8bdcb</span><br><span class=\"line\">Deleted: sha256:aa0085e1bee996bbffafae209a85ad2e7ee3e767cf43c9117728b761341efcc0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker image ls | grep 5259a77d042b  <span class=\"comment\"># 已删除成功</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 重新下载5259a77d042b镜像</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker pull 10.138.3.15:5000/scaven/centos6_bbs:v1</span></span><br><span class=\"line\">v1: Pulling from scaven/centos6_bbs</span><br><span class=\"line\">06a11a3d840d: Already exists </span><br><span class=\"line\">0bc80ff48944: Already exists </span><br><span class=\"line\">c33df8f494cd: Pull complete </span><br><span class=\"line\">Digest: sha256:57b830b668ca8de9f1eca19ecd1d84d9ca1892dbed4c67a10306ae9e556166e4</span><br><span class=\"line\">Status: Downloaded newer image for 10.138.3.15:5000/scaven/centos6_bbs:v1</span><br><span class=\"line\">10.138.3.15:5000/scaven/centos6_bbs:v1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker image ls | grep 5259a77d042b</span></span><br><span class=\"line\">10.138.3.15:5000/scaven/centos6_bbs v1 5259a77d042b 17 hours ago 477MB</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-本地镜像仓库加密\"><a href=\"#2-本地镜像仓库加密\" class=\"headerlink\" title=\"2 本地镜像仓库加密\"></a>2 本地镜像仓库加密</h2><p>​        上文章节中的实现了镜像仓库的功能，但是任何人都能访问和上传镜像到仓库中，是十分不安全的，因此，我们应该给镜像仓库做加密，只有有密码的用户才能进行访问仓库。</p>\n<ul>\n<li>生成加密文件</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 删除前一个示例中启动的仓库镜像</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker container stop 07da1db7effa</span></span><br><span class=\"line\">07da1db7effa</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 使用http-tools工具生成密钥文件</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum -y install httpd-tools</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> mkdir /opt/registry-auth</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> htpasswd  -Bbn scaven 123456 &gt; /opt/registry-auth/htpasswd</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cat /opt/registry-auth/htpasswd</span> </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 用户名：加密后的密码</span></span><br><span class=\"line\">scaven:$2y$05$LAE/znxZd6RAXVgNrP6rJ.T5wv/JnmWL2D2QYfdUcCT9KSJfJKepS</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>启动镜像，指定密钥文件路径</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker run -d -p 5000:5000 -v /opt/registry-auth/:/auth/ -v /opt/registry:/var/lib/registry --name registry-auth -e <span class=\"string\">&quot;REGISTRY_AUTH=htpasswd&quot;</span> -e <span class=\"string\">&quot;REGISTRY_AUTH_HTPASSWD_REALM=Regisry Realm&quot;</span> -e <span class=\"string\">&quot;REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd&quot;</span> 2d4f4b5309b1</span></span><br><span class=\"line\">c39b88dd0d44dc77529cb697a962c973e1543bf431270d222284cb2605701501</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker container ls</span></span><br><span class=\"line\">CONTAINER ID   IMAGE   COMMAND    CREATED    STATUS   PORTS   NAMES</span><br><span class=\"line\">c39b88dd0d44   2d4f4b5309b1 &quot;/entrypoint.sh /etc…&quot;   8 seconds ago       Up 7 seconds  0.0.0.0:5000-&gt;5000/tcp registry-auth</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>不登陆推送镜像到加密仓库会直接报错</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker pull 10.138.3.15:5000/scaven/centos6_bbs:v1</span></span><br><span class=\"line\">Error response from daemon: Get http://10.138.3.15:5000/v2/scaven/centos6_bbs/manifests/v1: no basic auth credential</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>登陆推送镜像到加密仓库</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 使用用户名和密码登录，登录后再推送镜像</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker login 10.138.3.15:5000</span></span><br><span class=\"line\">Username: scaven</span><br><span class=\"line\">Password: </span><br><span class=\"line\">WARNING! Your password will be stored unencrypted in /root/.docker/config.json.</span><br><span class=\"line\">Configure a credential helper to remove this warning. See</span><br><span class=\"line\">https://docs.docker.com/engine/reference/commandline/login/#credentials-store</span><br><span class=\"line\"></span><br><span class=\"line\">Login Succeeded</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker pull 10.138.3.15:5000/scaven/centos6_bbs:v1</span></span><br><span class=\"line\">v1: Pulling from scaven/centos6_bbs</span><br><span class=\"line\">Digest: sha256:57b830b668ca8de9f1eca19ecd1d84d9ca1892dbed4c67a10306ae9e556166e4</span><br><span class=\"line\">Status: Image is up to date for 10.138.3.15:5000/scaven/centos6_bbs:v1</span><br><span class=\"line\">10.138.3.15:5000/scaven/centos6_bbs:v1</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>验证，删除本地镜像，重新从加密仓库拉取镜像</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 删除本地镜像进行下载验证</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker image ls | grep 10.138.3.15:5000/scaven/centos6_bbs</span></span><br><span class=\"line\">10.138.3.15:5000/scaven/centos6_bbs v15259a77d042b  18 hours ago 477MB</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker image rm -f 10.138.3.15:5000/scaven/centos6_bbs:v1  <span class=\"comment\"># 从本地服务器上删除指定镜像</span></span></span><br><span class=\"line\">Untagged: 10.138.3.15:5000/scaven/centos6_bbs:v1</span><br><span class=\"line\">Untagged: 10.138.3.15:5000/scaven/centos6_bbs@sha256:57b830b668ca8de9f1eca19ecd1d84d9ca1892dbed4c67a10306ae9e556166e4</span><br><span class=\"line\">Deleted: sha256:5259a77d042b9f0a2ca73f385603733d025b22c1ce3e549e1c25f95cd7c8bdcb</span><br><span class=\"line\">Deleted: sha256:aa0085e1bee996bbffafae209a85ad2e7ee3e767cf43c9117728b761341efcc0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 从10.138.3.15:5000中下载镜像</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker pull 10.138.3.15:5000/scaven/centos6_bbs:v1</span></span><br><span class=\"line\">v1: Pulling from scaven/centos6_bbs</span><br><span class=\"line\">06a11a3d840d: Already exists </span><br><span class=\"line\">0bc80ff48944: Already exists </span><br><span class=\"line\">c33df8f494cd: Pull complete </span><br><span class=\"line\">Digest: sha256:57b830b668ca8de9f1eca19ecd1d84d9ca1892dbed4c67a10306ae9e556166e4</span><br><span class=\"line\">Status: Downloaded newer image for 10.138.3.15:5000/scaven/centos6_bbs:v1</span><br><span class=\"line\">10.138.3.15:5000/scaven/centos6_bbs:v1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker image ls | grep 10.138.3.15:5000/scaven/centos6_bbs  <span class=\"comment\"># 下载成功</span></span></span><br><span class=\"line\">10.138.3.15:5000/scaven/centos6_bbs v1 5259a77d042b  18 hours ago 477MB</span><br></pre></td></tr></table></figure>\n","comments":true,"permalink":"https://qingdalf.github.io/2021-05/dockerRegistory/","categories":[{"name":"kubernets","slug":"kubernets","permalink":"https://qingdalf.github.io/categories/kubernets/"}],"tags":[]},{"title":"基于Dockerfile文件制作docker镜像","date":"2021-05-04T09:49:41.000Z","path":"2021-05/dockerFile/","content":"<h3 id=\"1-Dockerfile常用指令\"><a href=\"#1-Dockerfile常用指令\" class=\"headerlink\" title=\"1.Dockerfile常用指令\"></a>1.Dockerfile常用指令</h3><ul>\n<li><strong>FROM–指定基础镜像</strong></li>\n</ul>\n<p>格式: <code>FROM &lt;image&gt; 或者 FROM &lt;image&gt;:&lt;tag&gt;</code></p>\n<span id=\"more\"></span>\n<p>​        FROM指令的功能是为后面的指令提供基础镜像，因此Dockerfile必须以FROM指令作为第一条非注释指令。从公共镜像库中拉取镜像很容易，基础镜像可以选择任何有效的镜像。在一个Dockerfile中FROM指令可以出现多次，这样会构建多个镜像。tag的默认值是latest，如果参数image或者tag指定的镜像不存在，则返回错误。</p>\n<ul>\n<li><strong>LABLE–用于指定作者或一些跟作者相关信息</strong></li>\n</ul>\n<p>格式为：LABEL   user</p>\n<p>案例：LABEL “username usermail”</p>\n<ul>\n<li><strong>ENV–声明变量</strong></li>\n</ul>\n<p>格式: <code>ENV &lt;key&gt; &lt;value&gt; 或者 ENV &lt;key&gt;=&lt;value&gt; ...</code></p>\n<p>​        ENV指令可以为镜像创建出来的容器声明环境变量。并且在Dockerfile中，ENV指令声明的环境变量可以被后面的特定指令(即ENV、ADD、COPY、WORKDIR、EXPOSE、VOLUME、USER)解释使用。其他指令使用环境变量时，使用格式为<code>$variable_name</code>或者<code>$&#123;variable_name&#125;</code>。如果在变量面前添加斜杠\\可以转义。如<code>\\$foo</code>或者<code>\\$&#123;foo&#125;</code>将会被转换为<code>$foo</code>和<code>$&#123;foo&#125;</code>,而不是环境变量所保存的值。</p>\n<ul>\n<li><strong>COPY–复制本地文件或目录到镜像中</strong></li>\n</ul>\n<p>格式: <code>COPY &lt;src&gt; &lt;dest&gt;</code></p>\n<p>​        COPY指令复制所指向的文件或目录,将它添加到新镜像中,复制的文件或目录在镜像中的路径是<code>&lt;dest&gt;</code>。<code>&lt;src&gt;</code>所指定的源可以有多个,但必须是上下文根目录中的相对路径。此外,<code>&lt;src&gt;</code>可以使用通配符指向所有匹配通配符的文件或目录，例如，<code>COPY home* /mydir/ </code>表示添加所有以”hom”开头的文件到目录/mydir/中。</p>\n<p>​        <code>&lt;dest&gt;</code>可以是文件或目录，但必须是目标镜像中的绝对路径或者相对于WORKDIR的相对路径(WORKDIR即Dockerfile中WORKDIR指令指定的路径,用来为其他指令设置工作目录)。<br>​        若<code>&lt;dest&gt;</code>以反斜杠/结尾则其指向的是目录；否则指向文件。<code>&lt;src&gt;</code>同理。若<code>&lt;dest&gt;</code>是一个文件，则<code>&lt;src&gt;</code>的内容会被写到<code>&lt;dest&gt;</code>中；否则<code>&lt;src&gt;</code>指向的文件或目录中的内容会被复制添加到<code>&lt;dest&gt;</code>目录中。<br>​        当<code>&lt;src&gt;</code>指定多个源时，<code>&lt;dest&gt;</code>必须是目录。如果<code>&lt;dest&gt;</code>不存在，则路径中不存在的目录会被创建。</p>\n<ul>\n<li><strong>ADD–复制宿主机或网络文件到镜像中</strong></li>\n</ul>\n<p>格式：<code>ADD &lt;src&gt; &lt;dest&gt;</code></p>\n<p>​        ADD与COPY指令在功能上很相似，都支持复制本地文件到镜像的功能，但ADD指令还支持其他功能，如解压和下载网络文件。<code>&lt;src&gt;</code>可以是指向网络文件的URL,此时若<code>&lt;dest&gt;</code>指向一个目录，则URL必须是完全路径，这样可以获得网络文件的文件名filename，该文件会被复制添加到<code>&lt;dest&gt;/&lt;filename&gt;</code>。<code>&lt;src&gt;</code>还可以指向一个本地压缩归档文件，该文件会在复制到容器时会被解压提取，如ADD sxample.tar.xz /。但是若URL中的文件为归档文件则不会被解压提取。ADD 和 COPY指令虽然功能相似，但一般推荐使用COPY，因为COPY只支持本地文件，相比ADD而言，它更加透明。</p>\n<ul>\n<li><strong>EXPOSE–暴露端口</strong></li>\n</ul>\n<p>格式: <code>EXPOSE &lt;port&gt; [&lt;port&gt;/&lt;protocol&gt;...]</code></p>\n<p>​        EXPOSE指令通知Docker该容器在运行时侦听指定的网络端口。可以指定端口是侦听TCP还是UDP，如果未指定协议，则默认值为TCP。这个指令仅仅是声明容器打算使用什么端口而已，并不会自动在宿主机进行端口映射,可以在运行容器时通过<code> -p</code>指定。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPOSE 80/tcp</span><br><span class=\"line\">EXPOSE 80/udp</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>USER–指定运行用户</strong></li>\n</ul>\n<p>格式: <code>USER &lt;user&gt;[:&lt;group] 或者 USER &lt;UID&gt;[:&lt;GID&gt;]</code></p>\n<p>​        USER指令设置了user name和user group(可选)。在它之后的RUN、CMD以及ENTRYPOINT指令都会以设置的user来执行。</p>\n<ul>\n<li><strong>VOLUME –设置容器的挂载卷</strong></li>\n</ul>\n<p>格式：<code>VOLUME [&quot;&lt;路径1&gt;&quot;, &quot;&lt;路径2&gt;&quot;...]</code><br>          <code>VOLUME &lt;路径&gt;</code></p>\n<p>​        Docker的使用原则除了每个容器干尽量少的事情外，还尽可能要求容器运行时应该尽量保持容器存储层不发生写操作，对于数据库类需要保存动态数据的应用，其数据库文件应该保存于卷(volume)中，也就是将本地磁盘的某一个目录挂载至容器内。同时这样的共享目录可以被多个不同的容器所使用。如果在容器启动时指定了数据卷，那么dockerfile中定义的挂在卷将被覆盖。</p>\n<ul>\n<li><strong>ARG–构建参数</strong></li>\n</ul>\n<p>格式：<code> ARG &lt;name&gt;[=&lt;default value&gt;]</code></p>\n<p>​        ARG和ENV效果类似，都是用来设置环境变量的。唯一不同的是dockerfile中的ARG编译好后是不会出现在打开的容器内的。ARG在dockerfile中创建一个全局参数，参数可以给定一个默认值，在编译时可以传参对其进行覆盖。如果ARG指令有默认值并且在构建期间没有接收到参数、则使用默认值。一个dockerfile中可以包含多个ARG参数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build --build-arg &lt;varname&gt;&#x3D;&lt;value&gt;</span><br></pre></td></tr></table></figure>\n\n<p>​        可以使用ARG或ENV指令来指定RUN指令可用的变量，如果ARG和ENV同时指定了一个相同名称的变量、则ENV设置的变量会覆盖ARG设置的变量。如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 FROM ubuntu</span><br><span class=\"line\">2 ARG CONT_IMG_VER</span><br><span class=\"line\">3 ENV CONT_IMG_VER v1.0.0</span><br><span class=\"line\">4 RUN echo $CONT_IMG_VER</span><br></pre></td></tr></table></figure>\n\n<p>​        使用 docker build –build-arg CONT_IMG_VER=v2.0.1 . 最终输出v1.0.0 。一个ARG指令的有效范围在其定义的构建阶段内、如果要在多个阶段中都有效、则必须在每个阶段都使用ARG指令；与ARG不同 ENV设置参数的有效期为整个构建期内。</p>\n<ul>\n<li><strong>WORKDIR–指定工作目录</strong></li>\n</ul>\n<p>格式: <code>WORKDIR /path/to/workdir</code></p>\n<p>​        WORKDIR指令设置工作目录，它之后的RUN、CMD、ENTRYPOINT、COPY以及ADD指令都会在这个工作目录下运行。如果这个工作目录不存在，则会自动创建一个。WORKDIR指令可在Dockerfile中多次使用。如果提供了相对路径，则它将相对于上一个WORKDIR指令的路径。例如</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WORKDIR /a</span><br><span class=\"line\">WORKDIR b</span><br><span class=\"line\">WORKDIR c</span><br><span class=\"line\">RUN pwd</span><br></pre></td></tr></table></figure>\n\n<p>输出结果是 /a/b/c</p>\n<ul>\n<li><strong>RUN–指定运行的命令</strong></li>\n</ul>\n<p>格式1： <code>RUN &lt;command&gt;</code> (shell格式)<br>格式2： <code>RUN [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</code> (exec格式，推荐使用)</p>\n<p>​        RUN指令会在前一条命令创建出的镜像的基础上创建一个容器，并在容器中运行命令，在命令结束运行后提交容器为新镜像，新镜像被Dockerfile中的下一条指令使用。RUN指令的两种格式表示命令在容器中的两种运行方式<strong>。当使用shell格式时，命令通过/bin/sh -c运行。当使用exec格式时，命令是直接运行的，容器不调用shell程序，即容器中没有shell程序</strong>。<strong>exec格式中的参数会被当成JSON数组被Docker解析，故必须使用双引号而不能使用单引号。因为exec格式不会在shell中执行，所以环境变量的参数不会被替换</strong>。</p>\n<p>​        比如执行<code>RUN [&quot;echo&quot;, &quot;$HOME&quot;]</code>指令时，$HOME不会做变量替换。如果希望运行shell程序，指令可以写成 <code>RUN [&quot;/bin/bash&quot;, &quot;-c&quot;, &quot;echo&quot;, &quot;$HOME&quot;]</code>。</p>\n<ul>\n<li><strong>CMD–指定容器启动时运行的命令</strong></li>\n</ul>\n<p>CMD指令有3种格式。</p>\n<p>格式1：<code>CMD &lt;command&gt;</code> (shell格式)<br>格式2：<code>CMD [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</code> (exec格式，推荐使用)<br>格式3：<code>CMD [&quot;param1&quot;, &quot;param2&quot;]</code> (为ENTRYPOINT指令提供参数)</p>\n<p>​        CMD指令提供容器运行时的默认值，这些默认值可以是一条指令，也可以是一些参数。<strong>一个Dockerfile中可以有多条CMD指令，但只有最后一条CMD指令有效</strong>。<br>​        CMD [“param1”, “param2”]格式是在CMD指令和ENTRYPOINT指令配合时使用的，CMD指令中的参数会添加到ENTRYPOING指令中，<strong>使用shell和exec格式时，命令在容器中的运行方式与RUN指令相同</strong>。<strong>不同之处在于，RUN指令在构建镜像时执行命令，并生成新的镜像；CMD指令在构建镜像时并不执行任何命令，而是在容器启动时默认将CMD指令作为第一条执行的命令</strong>。<strong>如果用户在命令行界面运行docker run命令时指定了命令参数，则会覆盖CMD指令中的命令。</strong></p>\n<ul>\n<li><strong>ENTRYPOINT–指定容器启动时运行的命令</strong></li>\n</ul>\n<p>ENTRYPOINT指令有两种格式。</p>\n<p>格式1：<code>ENTRYPOINT &lt;command&gt;</code> (shell格式)<br>格式2：<code>ENTRYPOINT [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</code> (exec格式，推荐格式)</p>\n<p>​        ENTRYPOINT指令和CMD指令类似，都可以让容器在每次启动时执行相同的命令，但它们之间又有不同。<strong>一个Dockerfile中可以有多条ENTRYPOINT指令，但只有最后一条ENTRYPOINT指令有效</strong>。<strong>当使用Shell格式时，ENTRYPOINT指令会忽略任何CMD指令和docker run命令的参数，并且会运行在bin/sh -c中。这意味着ENTRYPOINT指令进程为bin/sh -c的子进程,进程在容器中的PID将不是1，且不能接受Unix信号</strong>。<strong>即当使用<code>docker stop &lt;container&gt;</code>命令时，命令进程接收不到SIGTERM信号</strong>。推荐使用exec格式，使用此格式时，docker run传入的命令参数会覆盖CMD指令的内容并且附加到ENTRYPOINT指令的参数中。从ENTRYPOINT的使用中可以看出，CMD可以是参数，也可以是指令，而ENTRYPOINT只能是命令；另外，<strong>docker run命令提供的运行命令参数可以覆盖CMD,但不能覆盖ENTRYPOINT</strong>。</p>\n<h4 id=\"2-案例-制作含有ssh服务的centos7镜像\"><a href=\"#2-案例-制作含有ssh服务的centos7镜像\" class=\"headerlink\" title=\"2.案例: 制作含有ssh服务的centos7镜像\"></a>2.案例: 制作含有ssh服务的centos7镜像</h4><ul>\n<li>编写Dockerfile文件</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 删除上面实验的所有容器</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker container rm -f `docker container ls -a -q`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> mkdir -p /data/dockerfile; <span class=\"built_in\">cd</span>  /data/dockerfile  <span class=\"comment\"># 创建制作镜像目录</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 开始制作镜像</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> vim Dockerfile  <span class=\"comment\"># 新建该文件，名称可以是小写</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 备注信息：Centos6.10_SSHDv1.0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 1 设置基础镜像，建议使用下面的写法，而不是使用tag标签</span></span><br><span class=\"line\">FROM centos:centos6.10</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 2 添加制作镜像的相关命令，建议多个命令一起写，不然层级太多</span></span><br><span class=\"line\">RUN mv /etc/yum.repos.d/*.repo /tmp &amp;&amp; echo -e &quot;[ftp6]\\nname=ftp6\\nbaseurl=ftp://172.17.0.1/centos6.10\\nenabled=1\\ngpgcheck=0&quot; &gt; /etc/yum.repos.d/ftp6.repo  &amp;&amp; yum clean all &amp;&amp; yum repolist &amp;&amp; yum -y install openssh-server </span><br><span class=\"line\"></span><br><span class=\"line\">RUN /etc/init.d/sshd start &amp;&amp; /etc/init.d/stop &amp;&amp; echo &quot;root:123456&quot; | chpasswd</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 3 容器启动时指定的命令</span></span><br><span class=\"line\">CMD [&quot;/usr/sbin/sshd&quot;,&quot;-D&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 4 暴露端口</span></span><br><span class=\"line\">EXPOSE 22</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用Dockerfile文件生成镜像</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 制作镜像，默认就会使用当前目录中的Dockerfile文件</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker image build -t <span class=\"string\">&quot;centos6_10_add_sshd&quot;</span> ./</span></span><br><span class=\"line\">Sending build context to Docker daemon   2.56kB</span><br><span class=\"line\">Step 1/5 : FROM centos:centos6.10  # 第一步完成后生成的镜像</span><br><span class=\"line\"><span class=\"meta\"> ---&gt;</span><span class=\"bash\"> 48650444e419</span></span><br><span class=\"line\">Step 2/5 : RUN mv /etc/yum.repos.d/*.repo /tmp &amp;&amp; echo -e &quot;[ftp6]\\nname=ftp6\\nbaseurl=ftp://172.17.0.1/centos6.10\\nenabled=1\\ngpgcheck=0&quot; &gt; /etc/yum.repos.d/ftp6.repo  &amp;&amp; yum clean all &amp;&amp; yum repolist &amp;&amp; yum -y install openssh-server</span><br><span class=\"line\"><span class=\"meta\"> ---&gt;</span><span class=\"bash\"> Using cache</span></span><br><span class=\"line\"><span class=\"meta\"> ---&gt;</span><span class=\"bash\"> 4402742653b8   <span class=\"comment\"># 第二步完成后生成的镜像</span></span></span><br><span class=\"line\">Step 3/5 : RUN /etc/init.d/sshd start &amp;&amp; /etc/init.d/sshd stop &amp;&amp; echo &quot;root:123456&quot; | chpasswd</span><br><span class=\"line\"><span class=\"meta\"> ---&gt;</span><span class=\"bash\"> Running <span class=\"keyword\">in</span> 41576869d2c5</span></span><br><span class=\"line\">Generating SSH2 RSA host key: [  OK  ]</span><br><span class=\"line\">Generating SSH1 RSA host key: [  OK  ]</span><br><span class=\"line\">Generating SSH2 DSA host key: [  OK  ]</span><br><span class=\"line\">Starting sshd: [  OK  ]</span><br><span class=\"line\">Stopping sshd: [  OK  ]</span><br><span class=\"line\">Removing intermediate container 41576869d2c5</span><br><span class=\"line\"><span class=\"meta\"> ---&gt;</span><span class=\"bash\"> f84b609cb2a8  <span class=\"comment\"># 第三步完成后生成的镜像</span></span></span><br><span class=\"line\">Step 4/5 : CMD [&quot;/usr/sbin/sshd&quot;,&quot;-D&quot;]</span><br><span class=\"line\"><span class=\"meta\"> ---&gt;</span><span class=\"bash\"> Running <span class=\"keyword\">in</span> 453a0196b369</span></span><br><span class=\"line\">Removing intermediate container 453a0196b369</span><br><span class=\"line\"><span class=\"meta\"> ---&gt;</span><span class=\"bash\"> fd7d7bdbd6eb   <span class=\"comment\"># 第四步完成后生成的镜像</span></span></span><br><span class=\"line\">Step 5/5 : EXPOSE 22</span><br><span class=\"line\"><span class=\"meta\"> ---&gt;</span><span class=\"bash\"> Running <span class=\"keyword\">in</span> 029d6942a429</span></span><br><span class=\"line\">Removing intermediate container 029d6942a429</span><br><span class=\"line\"><span class=\"meta\"> ---&gt;</span><span class=\"bash\"> 0545dad565d5   <span class=\"comment\"># 第五步完成后生成的镜像</span></span></span><br><span class=\"line\">Successfully built 0545dad565d5</span><br><span class=\"line\">Successfully tagged centos6_10_add_sshd:latest</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 上面的每一步都可以使用<span class=\"string\">&quot;docker run -it --rm 镜像id /bin/bash&quot;</span>进入容器内进行检查和调试</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 制作完成后，在宿主机上查看镜像</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker image ls | grep centos6_10_add_sshd</span></span><br><span class=\"line\">centos6_10_add_sshd  latest  0545dad565d5   About a minute ago   281MB</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>启动镜像并通过ssh远程登陆</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 使用刚制作的镜像启动容器，检查ssh服务和是否后端运行</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker run -it -d  --name ssh -p 222:22 0545dad565d5</span> </span><br><span class=\"line\">e14f92e87ef27406e95001b66c2cd0736fcb181d3ec586bcebee62f24c43ce57</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看容器ip地址</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker container inspect e14f92e87ef2 | grep IPAddress</span></span><br><span class=\"line\">            &quot;SecondaryIPAddresses&quot;: null,</span><br><span class=\"line\">            &quot;IPAddress&quot;: &quot;172.17.0.2&quot;,</span><br><span class=\"line\">                    &quot;IPAddress&quot;: &quot;172.17.0.2&quot;,</span><br></pre></td></tr></table></figure>\n\n<p>使用xshell远程登录</p>\n<p><img src=\"../dockerImage/image-20200720013745449.png\" alt=\"image-20200720013745449\"></p>\n","comments":true,"permalink":"https://qingdalf.github.io/2021-05/dockerFile/","categories":[{"name":"kubernets","slug":"kubernets","permalink":"https://qingdalf.github.io/categories/kubernets/"}],"tags":[]},{"title":"基于容器制作docker镜像","date":"2021-05-04T09:23:03.000Z","path":"2021-05/dockerImageMake/","content":"<h3 id=\"1-准备工作–制作本地局域网yum源\"><a href=\"#1-准备工作–制作本地局域网yum源\" class=\"headerlink\" title=\"1 准备工作–制作本地局域网yum源\"></a>1 准备工作–制作本地局域网yum源</h3><h4 id=\"1-1-安装并启动vsftpd\"><a href=\"#1-1-安装并启动vsftpd\" class=\"headerlink\" title=\"1.1 安装并启动vsftpd\"></a>1.1 安装并启动vsftpd</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum -y install vsftpd</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> systemctl <span class=\"built_in\">enable</span> vsftpd &amp;&amp; systemctl start vsftpd</span></span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h4 id=\"1-2-上传镜像到虚拟机\"><a href=\"#1-2-上传镜像到虚拟机\" class=\"headerlink\" title=\"1.2 上传镜像到虚拟机\"></a>1.2 上传镜像到虚拟机</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls /mnt/iso/</span></span><br><span class=\"line\">CentOS-6.10-x86_64-bin-DVD1.iso  CentOS-7.6-x86_64-DVD-1810.iso</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-3-配置yum仓库\"><a href=\"#1-3-配置yum仓库\" class=\"headerlink\" title=\"1.3 配置yum仓库\"></a>1.3 配置yum仓库</h4><p>​        分别配置CentOS-6.10和CentOS-7.6的本地yum源</p>\n<ul>\n<li>配置CentOS-6.10的yum源</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 创建ftp镜像挂载目录</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> mkdir -p /var/ftp/centos6.10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 挂载光盘文件到ftp镜像挂载目录，使用<span class=\"string\">&quot;-o loop&quot;</span>模式用来将一个档案当成硬盘分割挂上系统</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> mount -o loop /mnt/iso/CentOS-6.10-x86_64-bin-DVD1.iso  /var/ftp/centos6.10/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 注意，如果用IP地址访问不到，就用docker0的地址，默认是172.17.0.1</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cat &gt; /etc/yum.repos.d/ftp6.repo &lt;&lt; <span class=\"string\">EOF</span></span></span><br><span class=\"line\">[ftp6_10]</span><br><span class=\"line\">name=ftp6_10</span><br><span class=\"line\">baseurl=ftp://10.138.3.15/centos6.10</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">gpgcheck=0</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置CentOS-7.6的yum源</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> mkdir -p /var/ftp/centos7.6</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> mount -o loop /mnt/iso/CentOS-7.6-x86_64-DVD-1810.iso /var/ftp/centos7.6/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cat &gt; /etc/yum.repos.d/ftp7.repo &lt;&lt; <span class=\"string\">EOF</span></span></span><br><span class=\"line\">[ftp7.6]</span><br><span class=\"line\">name=ftp7.6</span><br><span class=\"line\">baseurl=ftp://10.138.3.15/centos7.6</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">gpgcheck=0</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n<p>浏览器访问如下所示：</p>\n<p><img src=\"../dockerImage/image-20200718181236918.png\" alt=\"image-20200718181236918\"></p>\n<h3 id=\"2-制作docker镜像\"><a href=\"#2-制作docker镜像\" class=\"headerlink\" title=\"2 制作docker镜像\"></a>2 制作docker镜像</h3><p>Docker镜像含有启动容器所需要的文件系统及其内容，因此，其用于创建并启动docker容器。</p>\n<ul>\n<li>Docker镜像采用分层构建机制，最底层是<code>bootfs</code>（引导文件系统）、其次是<code>rootfs</code>（用户文件系统）：</li>\n<li><code>bootfs</code>用于系统引导的文件系统，包括boot loader和kernel，<strong>容器启动完成后会卸载</strong>以节约内存空间；</li>\n<li><code>rootfs</code>位于<code>bootfs</code>之上，表现为docker容器的根文件系统：传统模式中，系统启动之时，内核挂载rootfs时会首先将其挂载为“只读”模式，完整性自检完成后将其重新挂载为读写模式（Linux系统启动模式）；docker中，rootfs由内核挂载为“只读”模式，而后通过“联合挂载”技术额外挂载一个“可写”层；</li>\n<li>下图中，位于下层的镜像为父镜像（parent image），最底层成为基础镜像（base image），最上层为“可读写”层，其下的均为“只读”层。<br><img src=\"../dockerImage/clip_image052.jpg\" alt=\"img\"></li>\n</ul>\n<p>​        Aufs（advanced multi-layered unification filesystem）：高级多层联合文件系统</p>\n<p>​        用于Linux文件系统实现“联合挂载”，docker最初使用aufs作为容器文件系统层，它目前仍作为存储后端之一来支持；aufs的竞争产品overlayfs，后者自从3.18版本开始被合并到Linux内核，docker的分层镜像，除了aufs，还支持btrfs，devicemapper(dm)和vfs等（在Ubuntu系统中，aufs合并到了Ubuntu系统中；但CentOS系统未合并，因此使用aufs系统需打补丁，CentOS默认使用的是overlayfs）<br><img src=\"../dockerImage/clip_image054.jpg\" alt=\"img\"></p>\n<h4 id=\"2-1-构建企业网站定制镜像–BBS\"><a href=\"#2-1-构建企业网站定制镜像–BBS\" class=\"headerlink\" title=\"2.1  构建企业网站定制镜像–BBS\"></a>2.1  构建企业网站定制镜像–BBS</h4><h5 id=\"2-1-1-第一版镜像的制作–lamp环境\"><a href=\"#2-1-1-第一版镜像的制作–lamp环境\" class=\"headerlink\" title=\"2.1.1 第一版镜像的制作–lamp环境\"></a>2.1.1 第一版镜像的制作–lamp环境</h5><ul>\n<li>基于centos6启动容器并配置yum源</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 在宿主机上新建目录存放MySQL和web网页目录，以便做持久化存储</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> mkdir -p /opt/Volume/bbs/mysql /opt/Volume/bbs/html</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 启动容器</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker run -it -d --name centos6_bbs -v /opt/Volume/bbs/mysql/:/var/lib/mysql -v /opt/Volume/bbs/html/:/var/www/html  48650444e419</span></span><br><span class=\"line\">b8d9eb05d4ed43a192a850c0c0792d1e0b0cb1c0d95c3d084f1785fd2e5ac0a3</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 配置yum源</span></span><br><span class=\"line\">[root@b8d9eb05d4ed /]# cat &gt; /etc/yum.repos.d/ftp6.repo &lt;&lt; EOF</span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> [ftp6_10]</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> name=ftp6_10</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> baseurl=ftp://172.17.0.1/centos6.10</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> enabled=1</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> gpgcheck=0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@b8d9eb05d4ed /]# yum clean all &amp;&amp; yum repolist</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在容器内安装lamp</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装lamp</span></span><br><span class=\"line\">[root@b8d9eb05d4ed /]# yum -y install openssh* httpd mysql php php-mysql mysql-server</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>初始化ssh服务</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh服务初始化</span><br><span class=\"line\">[root@b8d9eb05d4ed /]# /etc/init.d/sshd start</span><br><span class=\"line\">Generating SSH2 RSA host key:                              [  OK  ]</span><br><span class=\"line\">Generating SSH1 RSA host key:                              [  OK  ]</span><br><span class=\"line\">Generating SSH2 DSA host key:                              [  OK  ]</span><br><span class=\"line\">Starting sshd:                                             [  OK  ]</span><br><span class=\"line\">[root@b8d9eb05d4ed /]# echo &quot;root:123456&quot; | chpasswd </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在容器内初始化mysql服务</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@b8d9eb05d4ed /]# /etc/init.d/mysqld  start</span><br><span class=\"line\">Initializing MySQL database:  Installing MySQL system tables...</span><br><span class=\"line\">OK</span><br><span class=\"line\">Filling help tables...</span><br><span class=\"line\">OK</span><br><span class=\"line\">···</span><br><span class=\"line\">Please report any problems with the /usr/bin/mysqlbug script!  [  OK  ]</span><br><span class=\"line\">Starting mysqld:                                               [  OK  ]</span><br><span class=\"line\"></span><br><span class=\"line\">[root@b8d9eb05d4ed /]# cd /var/lib/mysql/</span><br><span class=\"line\">[root@b8d9eb05d4ed mysql]# ll </span><br><span class=\"line\">total 20484</span><br><span class=\"line\">-rw-rw---- 1 mysql mysql  5242880 Jul 19 14:59 ib_logfile0</span><br><span class=\"line\">-rw-rw---- 1 mysql mysql  5242880 Jul 19 14:59 ib_logfile1</span><br><span class=\"line\">-rw-rw---- 1 mysql mysql 10485760 Jul 19 14:59 ibdata1</span><br><span class=\"line\">drwx------ 2 mysql mysql     4096 Jul 19 14:59 mysql</span><br><span class=\"line\">srwxrwxrwx 1 mysql mysql        0 Jul 19 14:59 mysql.sock</span><br><span class=\"line\">drwx------ 2 mysql mysql        6 Jul 19 14:59 test</span><br><span class=\"line\"></span><br><span class=\"line\">[root@b8d9eb05d4ed mysql]# mysql  # 启动mysql</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 新建数据库、用户和授权</span></span><br><span class=\"line\"><span class=\"meta\">mysql&gt;</span><span class=\"bash\"> grant all on *.* to  root@<span class=\"string\">&#x27;localhost&#x27;</span> identified by <span class=\"string\">&#x27;123456&#x27;</span>;</span></span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">mysql&gt;</span><span class=\"bash\"> grant all on *.* to  discuz@<span class=\"string\">&#x27;%&#x27;</span> identified by <span class=\"string\">&#x27;123456&#x27;</span>;</span></span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">mysql&gt;</span><span class=\"bash\"> grant all on *.* to  discuz@<span class=\"string\">&#x27;localhost&#x27;</span> identified by <span class=\"string\">&#x27;123456&#x27;</span>;</span></span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">mysql&gt;</span><span class=\"bash\"> create database discuz charset utf8;</span>  </span><br><span class=\"line\">Query OK, 1 row affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 检查宿主机上文件持久化存储结果</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls /opt/Volume/bbs/mysql/</span></span><br><span class=\"line\">ibdata1  ib_logfile0  ib_logfile1  mysql  mysql.sock  test</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在容器内初始化http服务</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@b8d9eb05d4ed mysql]# /etc/init.d/httpd  start</span><br><span class=\"line\">Starting httpd: httpd: Could not reliably determine the server&#x27;s fully qualified domain name, using 172.17.0.6 for ServerName                                     [  OK  ]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>通过宿主机访问nginx容器</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> curl -I 172.17.0.6</span></span><br><span class=\"line\">HTTP/1.1 403 Forbidden</span><br><span class=\"line\">Date: Sun, 19 Jul 2020 15:09:08 GMT</span><br><span class=\"line\">Server: Apache/2.2.15 (CentOS)</span><br><span class=\"line\">Accept-Ranges: bytes</span><br><span class=\"line\">Content-Length: 4961</span><br><span class=\"line\">Connection: close</span><br><span class=\"line\">Content-Type: text/html; charset=UTF-8</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>保存镜像</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker commit b8d9eb05d4ed centos6_lamp:v1</span></span><br><span class=\"line\">sha256:f022bb774837bd1f28646ca0222005e6962e98a39f7d7ce50ffedd5dbb82a758</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker image ls <span class=\"comment\"># grep lamp</span></span></span><br><span class=\"line\">REPOSITORY    TAG     IMAGE ID        CREATED            SIZE</span><br><span class=\"line\">centos6_lamp   v1     f022bb774837   6 seconds ago       476MB</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>测试lamp服务</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 停止第一版容器</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker container stop centos6_bbs</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 使用lamp第一版镜像启动容器，并暴露80端口</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker run -it --name centos6_lamp -p 8080:80 -v /opt/Volume/bbs/mysql/:/var/lib/mysql -v /opt/Volume/bbs/html/:/var/www/html f022bb774837</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 启动MySQL和http服务</span></span><br><span class=\"line\">[root@e6551f8c73eb /]# /etc/init.d/mysqld start</span><br><span class=\"line\">Starting mysqld:                                           [  OK  ]</span><br><span class=\"line\">[root@e6551f8c73eb /]# /etc/init.d/httpd start</span><br><span class=\"line\">Starting httpd: httpd: Could not reliably determine the server&#x27;s fully qualified domain name, using 172.17.0.6 for ServerName                                  [  OK  ]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 编辑简单的php页面php和http访问情况</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cat  /opt/Volume/bbs/html/index.php  <span class=\"comment\"># 在宿主机上编写即可</span></span></span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">    phpinfo();</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>​        此时，可通过浏览器测试php的访问状态：</p>\n<p><img src=\"../dockerImage/image-20200719232205533.png\" alt=\"image-20200719232205533\"></p>\n<h5 id=\"2-1-2-第二版镜像的制作–安装bbs\"><a href=\"#2-1-2-第二版镜像的制作–安装bbs\" class=\"headerlink\" title=\"2.1.2 第二版镜像的制作–安装bbs\"></a>2.1.2 第二版镜像的制作–安装bbs</h5><ul>\n<li>下载bbs软件包</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> git <span class=\"built_in\">clone</span> https://gitee.com/ComsenzDiscuz/DiscuzX.git</span></span><br><span class=\"line\">Cloning into &#x27;DiscuzX&#x27;...</span><br><span class=\"line\">remote: Enumerating objects: 3493, done.</span><br><span class=\"line\">remote: Counting objects: 100% (3493/3493), done.</span><br><span class=\"line\">remote: Compressing objects: 100% (905/905), done.</span><br><span class=\"line\">remote: Total 11627 (delta 2935), reused 2670 (delta 2588), pack-reused 8134</span><br><span class=\"line\">Receiving objects: 100% (11627/11627), 14.85 MiB | 5.71 MiB/s, done.</span><br><span class=\"line\">Resolving deltas: 100% (5734/5734), done.</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>将bb软件移动至http服务根目录</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">cd</span> DiscuzX/</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls</span> </span><br><span class=\"line\">readme  README.md  upload  utility</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 将upload目录下的所有文件拷贝到http服务根目录下，并给与777的权限</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cp -r  upload/*  /opt/Volume/bbs/html/</span></span><br><span class=\"line\">cp: overwrite ‘/opt/Volume/bbs/html/index.php’? yes</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> chmod -R 777 /opt/Volume/bbs/html/</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>浏览器访问并安装bbs</li>\n</ul>\n<p>接下来就是页面化操作了</p>\n<img src=\"../dockerImage/image-20200719233021172.png\" alt=\"image-20200719233021172\" style=\"zoom:50%;\" />\n\n<p>检查状态是否符合要求</p>\n<img src=\"../dockerImage/image-20200719233137145.png\" alt=\"image-20200719233137145\" style=\"zoom:50%;\" />\n\n<p>设置运行环境</p>\n<img src=\"../dockerImage/image-20200719233215227.png\" alt=\"image-20200719233215227\" style=\"zoom:50%;\" />\n\n<p>安装数据库，设置数据库信息</p>\n<img src=\"../dockerImage/image-20200719233803196.png\" alt=\"image-20200719233803196\" style=\"zoom:50%;\" />\n\n<p>安装完成，点击右下角进入论坛</p>\n<img src=\"../dockerImage/image-20200719233927216.png\" alt=\"image-20200719233927216\" style=\"zoom:50%;\" />\n\n<p>进入论坛，结果正常</p>\n<p><img src=\"../dockerImage/image-20200719233956493.png\" alt=\"image-20200719233956493\"></p>\n<ul>\n<li>保存第二版镜像</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker commit -m <span class=\"string\">&quot;welcom to bbs&quot;</span>  e6551f8c73eb scaven/centos6_bbs:v1</span></span><br><span class=\"line\">sha256:5259a77d042b9f0a2ca73f385603733d025b22c1ce3e549e1c25f95cd7c8bdcb</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker image ls</span></span><br><span class=\"line\">REPOSITORY           TAG      IMAGE ID     CREATED        SIZE</span><br><span class=\"line\">scaven/centos6_bbs   v1       5259a77d042b 10 seconds ago 477MB</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 停止容器</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker container stop e6551f8c73eb</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-1-3-第三版镜像的制作–创建启动脚本\"><a href=\"#2-1-3-第三版镜像的制作–创建启动脚本\" class=\"headerlink\" title=\"2.1.3 第三版镜像的制作–创建启动脚本\"></a>2.1.3 第三版镜像的制作–创建启动脚本</h5><p>​        docker容器在启动时只能指定启动一个进程，那么，我们可以编写一个启动脚本，只要把需要启动的服务放在该脚本中，并最后保持运行该脚本的窗口不退出即可。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cat  /opt/Volume/bbs/html/init.sh</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\">/etc/init.d/mysqld start   # 启动MySQL</span><br><span class=\"line\">/etc/init.d/httpd start    # 启动http</span><br><span class=\"line\">/usr/sbin/sshd -D          # 启动ssh，该命令是前端运行，即端口不退出</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> chmod +x  /opt/Volume/bbs/html/init.sh</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 基于第二版镜像，启动容器，暴露http端口，MySQL端口，ssh端口，并执行上面创建的脚本</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker run -d --name centos6_bbs_v1 -p 8000:80 -p 2222:22 -p 13306:3306 -v /opt/Volume/bbs/mysql/:/var/lib/mysql -v /opt/Volume/bbs/html/:/var/www/html 5259a77d042b /var/www/html/init.sh</span></span><br><span class=\"line\">97bf03282d31439ed03201e95aaba52443c86718fc9f5fd0772b2884c00af7c3</span><br></pre></td></tr></table></figure>\n\n<p>检查验证–ssh服务</p>\n<ul>\n<li>宿主机连接ssh服务，通过ip地址直接连接就可以，不需要使用端口</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ssh 172.17.0.6</span></span><br><span class=\"line\">root@172.17.0.6&#x27;s password:  # 输入密码 </span><br><span class=\"line\">Last login: Sun Jul 19 16:12:52 2020 from 10.138.3.1</span><br><span class=\"line\">[root@97bf03282d31 ~] # </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>外部网络通过xshell连接容器</li>\n</ul>\n<p><img src=\"../dockerImage/image-20200720001324660.png\" alt=\"image-20200720001324660\"></p>\n<p>检查验证–bbs论坛</p>\n<p><img src=\"../dockerImage/image-20200720000946358.png\" alt=\"image-20200720000946358\"></p>\n<p>检查验证–mysql服务</p>\n<img src=\"../dockerImage/image-20200720001520071.png\" alt=\"image-20200720001520071\" style=\"zoom:50%;\" />\n\n<h4 id=\"3-制作centos7的sshd服务镜像\"><a href=\"#3-制作centos7的sshd服务镜像\" class=\"headerlink\" title=\"3 制作centos7的sshd服务镜像\"></a>3 制作centos7的sshd服务镜像</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 启动centos7.6基础镜像</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker run -it --name centos7_sshd f1cb7c7d58b7</span></span><br><span class=\"line\">[root@d4b3c4402094 /]# yum -y install openssh*</span><br><span class=\"line\">[root@d4b3c4402094 /]# systemctl start sshd  # 使用该命令启动不了ssh服务</span><br><span class=\"line\">Failed to get D-Bus connection: Operation not permitted</span><br><span class=\"line\"></span><br><span class=\"line\">[root@d4b3c4402094 /]# /etc/init.d/sshd start  # 该脚本启动也有很多命令没有</span><br><span class=\"line\">/etc/init.d/sshd: line 30: /etc/rc.d/init.d/functions: No such file or directory</span><br><span class=\"line\">/usr/sbin/sshd-keygen: line 10: /etc/rc.d/init.d/functions: No such file or directory</span><br><span class=\"line\">Generating SSH2 RSA host key: /usr/sbin/sshd-keygen: line 63: success: command not found</span><br><span class=\"line\"></span><br><span class=\"line\">Generating SSH2 ECDSA host key: /usr/sbin/sshd-keygen: line 105: success: command not found</span><br><span class=\"line\"></span><br><span class=\"line\">Generating SSH2 ED25519 host key: /usr/sbin/sshd-keygen: line 126: success: command not found</span><br><span class=\"line\"></span><br><span class=\"line\">Starting sshd: /etc/init.d/sshd: line 64: success: command not found</span><br><span class=\"line\">/etc/init.d/sshd: line 64: failure: command not found</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 手动初始化sshd服务</span></span><br><span class=\"line\">[root@d4b3c4402094 /]# mkdir /var/run/sshd</span><br><span class=\"line\">[root@d4b3c4402094 /]# echo &#x27;UseDNS no&#x27; &gt;&gt; /etc/ssh/sshd_config</span><br><span class=\"line\">[root@d4b3c4402094 /]# sed -i -e &#x27;/pam_loginuid.so/d&#x27; /etc/pam.d/sshd</span><br><span class=\"line\">[root@d4b3c4402094 /]# echo &#x27;root:123456&#x27; | chpasswd</span><br><span class=\"line\"></span><br><span class=\"line\">[root@d4b3c4402094 /]# /usr/bin/ssh-keygen -A  # 初始化成功</span><br><span class=\"line\">ssh-keygen: generating new host keys: RSA1 DSA </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 保存含有ssh服务的镜像</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker container ls |grep centos7_sshd</span></span><br><span class=\"line\">CONTAINER ID   IMAGE   COMMAND    CREATED    STATUS    PORTS   NAMES</span><br><span class=\"line\">d4b3c4402094   f1cb7c7d58b7  &quot;/bin/bash&quot;  7 minutes ago   Up 7 minutes    centos7_sshd</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker commit -m <span class=\"string\">&quot;centos7 add sshd&quot;</span> d4b3c4402094 scaven/centos:sshd_v1</span></span><br><span class=\"line\">sha256:40b6e896f747f9ea5757ff36f1803e1d8e7a16189a53838b2258e36ff0da3ce4</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 启动含有ssh服务的镜像</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker run -d --name testsshd  -p 222:22 40b6e896f747 /usr/sbin/sshd -D</span></span><br><span class=\"line\">03a9e7608154a856877fa13479b0dace6eb8c02bc14a3a2654e4a5c62d72c18f</span><br></pre></td></tr></table></figure>\n\n<p>通过xshell连接</p>\n<p><img src=\"../dockerImage/image-20200720004135508.png\" alt=\"image-20200720004135508\"></p>\n","comments":true,"permalink":"https://qingdalf.github.io/2021-05/dockerImageMake/","categories":[{"name":"kuberntes","slug":"kuberntes","permalink":"https://qingdalf.github.io/categories/kuberntes/"}],"tags":[]},{"title":"docker容器存储","date":"2021-05-04T08:46:47.000Z","path":"2021-05/dockerVolumes/","content":"<p>​        将数据从宿主机挂载到容器中的三种方式：</p>\n<ul>\n<li>bind mounts：将宿主机上的任意位置的文件或者目录挂载到容器中。</li>\n<li>volumes：Docker管理宿主机文件系统的一部分(/var/lib/docker/volumes)，保存数据的最佳方法</li>\n<li>tmpfs：挂载存储在主机系统的内存中，而不会写入主机的文件系统。如果不希望将数据持久化存储在任何位置，可以使用tmpfs，同时避免写入容器可写层提高性能(不常使用)。<span id=\"more\"></span>\n<img src=\"../dockerImage/image-20210401154508985.png\" alt=\"image-20210401154508985\" style=\"zoom:67%;\" /></li>\n</ul>\n<h3 id=\"1-bind-mounts\"><a href=\"#1-bind-mounts\" class=\"headerlink\" title=\"1 bind mounts\"></a>1 bind mounts</h3><p>​        <strong>将宿主机目录映射给容器使用</strong>，可以通过直接修改宿主机上文件修改容器文件。</p>\n<ul>\n<li><p>-v： 格式为<code>-v 宿主机目录:容器目录</code></p>\n<p>​    在宿主机上新建nginx容器的根目录文件，并写入指定内容。</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 提前准备好nginx将要使用的根目录</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> tree /root/html/</span></span><br><span class=\"line\">../html/</span><br><span class=\"line\">├── date.html</span><br><span class=\"line\">└── index.html</span><br><span class=\"line\"></span><br><span class=\"line\">0 directories, 2 files</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cat /root/html/date.html  /root/html/index.html</span> </span><br><span class=\"line\">today is 2020-07-18</span><br><span class=\"line\">welcome to nginx</span><br></pre></td></tr></table></figure>\n\n<p>​        新建nginx容器，并将宿主机文件挂载到容器的网站根目录下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 启动容器，如果容器中原本没有映射的目录，在启动容器时，将自动创建映射目录</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker run -d --name web02 -p 8080:80 -v /root/html:/usr/share/nginx/html  0901fa9da894</span></span><br><span class=\"line\">204f493ce2cc29df1d86c408a4cfd5f797cc33f0861da2e0b7f586f9d1deda96</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker ps    <span class=\"comment\"># 检查启动状态</span></span></span><br><span class=\"line\">CONTAINER ID    IMAGE       COMMAND                 CREATED    STATUS            PORTS             NAMES</span><br><span class=\"line\">204f493ce2cc 0901fa9da894 &quot;/docker-entrypoint.…&quot; 17 seconds ago Up 16 seconds 0.0.0.0:8080-&gt;80/tcp web02</span><br><span class=\"line\">b203bce1e8cf 0901fa9da894 &quot;/docker-entrypoint.…&quot; 21 hours ago Up 18 minutes 10.138.3.15:80-&gt;80/tcp web01</span><br></pre></td></tr></table></figure>\n\n<p>​        进入容器进行查看映射目录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker <span class=\"built_in\">exec</span> -it 204f493ce2cc  /bin/bash</span></span><br><span class=\"line\">root@204f493ce2cc:/# ls /usr/share/nginx/html/</span><br><span class=\"line\">date.html  index.html</span><br><span class=\"line\">root@204f493ce2cc:/# cat  /usr/share/nginx/html/date.html </span><br><span class=\"line\">today is 2020-07-18</span><br><span class=\"line\">root@204f493ce2cc:/# cat  /usr/share/nginx/html/index.html </span><br><span class=\"line\">welcome to nginx</span><br></pre></td></tr></table></figure>\n\n<p>通过浏览器nginx容器的两个文件：</p>\n<p><img src=\"../dockerImage/image-20200718152847345.png\" alt=\"image-20200718152847345\"></p>\n<p>​        此时，我们就可以在宿主机上修改nginx根目录中的文件内容，从而不再需要登录到容器内，即使在容器销毁后，宿主机中的nginx根目录也存在，从而达到了数据的持久性存储。</p>\n<p>查看主机与容器卷的映射关系</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker container inspect 204f493ce2cc</span></span><br><span class=\"line\">···</span><br><span class=\"line\">&quot;Mounts&quot;: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                &quot;Type&quot;: &quot;bind&quot;,</span><br><span class=\"line\">                &quot;Source&quot;: &quot;/root/html&quot;,</span><br><span class=\"line\">                &quot;Destination&quot;: &quot;/usr/share/nginx/html&quot;,</span><br><span class=\"line\">                &quot;Mode&quot;: &quot;&quot;,</span><br><span class=\"line\">                &quot;RW&quot;: true,</span><br><span class=\"line\">                &quot;Propagation&quot;: &quot;rprivate&quot;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">····</span><br></pre></td></tr></table></figure>\n\n<p>​        我们可以通过启动多个容器，映射同一个目录，从而实现nginx的高可用</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker run -d --name web03 -p 8000:80 -v /root/html:/usr/share/nginx/html  0901fa9da894</span></span><br><span class=\"line\">2e5eeb728f82e138ba7fc638e1f168f6dfa2200a3d83f14e34c96edaf2eb8069</span><br></pre></td></tr></table></figure>\n\n<p>​        上面我们启动了两个nginx容器，这两个nginx容器都将宿主机上的目录(等同于共享存储)与nginx容器的nginx服务根目录做了映射，因此我们访问两个nginx容器将得到相同的内容。</p>\n<p><img src=\"../dockerImage/image-20200718155403030.png\" alt=\"image-20200718155403030\"></p>\n<h3 id=\"2-数据卷volumes：\"><a href=\"#2-数据卷volumes：\" class=\"headerlink\" title=\"2 数据卷volumes：\"></a>2 数据卷volumes：</h3><p>​        docker提供了数据卷volumes来实现数据的持久化，默认位于/var/lib/docker/volumes 目录中，在启动容器时可以指定数据卷volumes，这样就将数据卷挂载到了容器中给容器使用，容器销毁或停止后，数据卷依旧存在，并能够继续给其他容器使用。</p>\n<h4 id=\"2-1-新建数据卷\"><a href=\"#2-1-新建数据卷\" class=\"headerlink\" title=\"2.1 新建数据卷\"></a>2.1 新建数据卷</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker volume ls</span></span><br><span class=\"line\">DRIVER    VOLUME NAME</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> </span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker volume --<span class=\"built_in\">help</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">Usage:  docker volume COMMAND</span><br><span class=\"line\"></span><br><span class=\"line\">Manage volumes</span><br><span class=\"line\"></span><br><span class=\"line\">Commands:</span><br><span class=\"line\">  create      Create a volume   # 新建卷</span><br><span class=\"line\">  inspect     Display detailed information on one or more volumes  # 查看卷信息</span><br><span class=\"line\">  ls          List volumes     # 列出当前系统上的容器卷</span><br><span class=\"line\">  prune       Remove all unused local volumes   # 移除所有未使用的本地卷</span><br><span class=\"line\">  rm          Remove one or more volumes        # 删除卷</span><br><span class=\"line\"></span><br><span class=\"line\">Run &#x27;docker volume COMMAND --help&#x27; for more information on a command.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 新建存储卷</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker volume create nginx-vol</span></span><br><span class=\"line\">nginx-vol</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker volume ls</span></span><br><span class=\"line\">DRIVER    VOLUME NAME</span><br><span class=\"line\">local     nginx-vol</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker volume inspect  nginx-vol</span></span><br><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &quot;CreatedAt&quot;: &quot;2021-04-01T16:01:18+08:00&quot;,</span><br><span class=\"line\">        &quot;Driver&quot;: &quot;local&quot;,</span><br><span class=\"line\">        &quot;Labels&quot;: &#123;&#125;,</span><br><span class=\"line\">        &quot;Mountpoint&quot;: &quot;/var/lib/docker/volumes/nginx-vol/_data&quot;,   # 挂载点，宿主机路径</span><br><span class=\"line\">        &quot;Name&quot;: &quot;nginx-vol&quot;,</span><br><span class=\"line\">        &quot;Options&quot;: &#123;&#125;,</span><br><span class=\"line\">        &quot;Scope&quot;: &quot;local&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ll  /var/lib/docker/volumes/</span></span><br><span class=\"line\">total 24</span><br><span class=\"line\">brw------- 1 root root 253, 0 Apr  1 10:59 backingFsBlockDev</span><br><span class=\"line\">-rw------- 1 root root  32768 Apr  1 15:49 metadata.db </span><br><span class=\"line\">drwx-----x 3 root root     19 Apr  1 15:49 nginx-vol   # 刚刚新建的容器卷</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-启动容器并挂载数据卷\"><a href=\"#2-2-启动容器并挂载数据卷\" class=\"headerlink\" title=\"2.2 启动容器并挂载数据卷\"></a>2.2 启动容器并挂载数据卷</h4><ul>\n<li><p>格式：<code>docker run -d --name Container_name -v 数据卷名称:container_dir image_name</code></p>\n<p>如果数据卷不存在，则会自动新建数据卷(详见下文2.3)，默认存储路径仍然是<code>/var/lib/docker/volumes/</code></p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker run -d --name nginx-web01 --mount src=nginx-vol,dst=/usr/share/nginx/html nginx</span></span><br><span class=\"line\">5b001e1b7aa012f677b733bba3186cee072b89d0f2845e3dbdc99c46e93b6674</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 上面的写法也可以使用-v，如下</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker run -d --name nginx-web01 -v nginx-vol:/usr/share/nginx/html nginx</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看宿主机上容器卷默认路径下指定数据卷目录下的文件</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls /var/lib/docker/volumes/nginx-vol/_data/</span></span><br><span class=\"line\">50x.html  index.html   # 使用volume后，把nginx根目录中的文件保留了下来</span><br></pre></td></tr></table></figure>\n\n<p>​        进入容器中，查看nginx根目录下文件并新建文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker <span class=\"built_in\">exec</span> -it nginx-web01 bash   <span class=\"comment\"># 进入到容器中查看nginx的根目录</span></span></span><br><span class=\"line\">root@5b001e1b7aa0:/# ls /usr/share/nginx/html/</span><br><span class=\"line\">50x.html  index.html</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 在容器中nginx根目录或者容器卷中新建文件或目录，容器内和宿主机上的容器卷都是一样的显示内容</span></span><br><span class=\"line\">root@5b001e1b7aa0:/usr/share/nginx/html# echo `date` &gt; date.html  # 在容器内新建文件</span><br><span class=\"line\">root@5b001e1b7aa0:/usr/share/nginx/html# cat date.html </span><br><span class=\"line\">Thu Apr 1 07:58:05 UTC 2021</span><br></pre></td></tr></table></figure>\n\n<p>​        在宿主机上访问nginx容器指定文件，并新建文件或目录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls /var/lib/docker/volumes/nginx-vol/_data/    <span class=\"comment\"># 查看数据卷nginx-vol下的文件</span></span></span><br><span class=\"line\">50x.html  date.html  index.html</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> curl 172.17.0.4/date.html    <span class=\"comment\"># 访问nginx容器中的指定文件</span></span></span><br><span class=\"line\">Thu Apr 1 07:58:05 UTC 2021</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 在宿主机容器卷nginx-vol内新建文件，查看容器内nginx根目录的变化</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> mkdir /var/lib/docker/volumes/nginx-vol/_data/data</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls /var/lib/docker/volumes/nginx-vol/_data/</span></span><br><span class=\"line\">50x.html  data  date.html  index.html</span><br></pre></td></tr></table></figure>\n\n<p>​        进入容器中，查看nginx容器中网站根目录中文件的变化</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@5b001e1b7aa0:/usr/share/nginx/html# ls </span><br><span class=\"line\">50x.html  data\tdate.html  index.html</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-不定义数据卷也可以直接使用数据卷\"><a href=\"#2-3-不定义数据卷也可以直接使用数据卷\" class=\"headerlink\" title=\"2.3 不定义数据卷也可以直接使用数据卷\"></a>2.3 不定义数据卷也可以直接使用数据卷</h4><p>​        如果我们没有新建数据卷，也可以直接使用数据卷，因为docker会默认帮我们创建数据卷，即当我们使用<code>docker run</code>指定数据卷启动容器时，docker会帮我们检查数据卷名称，如果数据卷名称存在，则直接挂载数据卷，如果不存在，则新建数据卷，然后挂载数据卷。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker volume ls</span> </span><br><span class=\"line\">DRIVER    VOLUME NAME</span><br><span class=\"line\">local     nginx-vol</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker run -d --name nginx-web02 -v nginx-vol2:/usr/share/nginx/html nginx</span></span><br><span class=\"line\">50b894e5d6889fcc276f1f200491365b0dc9f7a0e865cd8616c1759436e2dfce</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls /var/lib/docker/volumes/</span></span><br><span class=\"line\">backingFsBlockDev  metadata.db        nginx-vol/         nginx-vol2/        </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls /var/lib/docker/volumes/nginx-vol2/</span></span><br><span class=\"line\">_data</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker volume ls</span> </span><br><span class=\"line\">DRIVER    VOLUME NAME</span><br><span class=\"line\">local     nginx-vol</span><br><span class=\"line\">local     nginx-vol2</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-数据卷容器\"><a href=\"#3-数据卷容器\" class=\"headerlink\" title=\"3. 数据卷容器\"></a>3. 数据卷容器</h3><p>​        我们知道，可以通过<code>-v</code>参数进行容器与主机磁盘的映射，那么如果有成百上千个容器都需要挂载，那么手动使用<code>-v</code>参数进行挂载将是一件可怕的事情。</p>\n<p>​        在集中化管理集群中，大批量的容器都需要挂载相通的多个数据卷时，可以使用数据卷容器进行统一挂载和管理。并且即使数据卷容器故障(宕机)，也不会影响挂载数据卷容器的容器。</p>\n<h4 id=\"3-1-新建数据卷容器\"><a href=\"#3-1-新建数据卷容器\" class=\"headerlink\" title=\"3.1 新建数据卷容器\"></a>3.1 新建数据卷容器</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 宿主机模拟数据目录</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> tree /opt/Volume/</span></span><br><span class=\"line\">/opt/Volume/</span><br><span class=\"line\">├── a</span><br><span class=\"line\">│?? └── a.txt</span><br><span class=\"line\">└── b</span><br><span class=\"line\">    └── b.txt</span><br><span class=\"line\"></span><br><span class=\"line\">2 directories, 2 files</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cat /opt/Volume/a/a.txt  /opt/Volume/b/b.txt</span> </span><br><span class=\"line\">a  # /opt/Volume/a/a.txt中的内容</span><br><span class=\"line\">b  # /opt/Volume/b/b.txt中的内容</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 创建并启动数据卷容器，下面命令中的镜像ID-f1cb7c7d58b7是一个centos镜像</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker run -it --name nginx_volumes -v /opt/Volume/a:/opt/a -v /opt/Volume/b:/opt/b f1cb7c7d58b7 /bin/bash</span> </span><br><span class=\"line\">[root@26d2c849bc9b /]# ls /opt/a/</span><br><span class=\"line\">a.txt</span><br><span class=\"line\">[root@26d2c849bc9b /]# ls /opt/b/</span><br><span class=\"line\">b.txt</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ctrl + p,q退出终端，以达到容器不停止</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-2-使用数据卷容器\"><a href=\"#3-2-使用数据卷容器\" class=\"headerlink\" title=\"3.2 使用数据卷容器\"></a>3.2 使用数据卷容器</h4><p>​        使用数据卷容器也很简单，在启动容器时直接使用<code>--volumes-from 数据卷容器名称</code>即可，下面我们分别启动两个容器，引用同一个数据卷容器。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker run -d -p 8001:80 --volumes-from nginx_volumes --name web04  0901fa9da894</span></span><br><span class=\"line\">0e7af67dafde5175aa4c0492e1e28f47e90c311ffffd11cd45adcb9763c139a8</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker run -d -p 8002:80 --volumes-from nginx_volumes --name web05  0901fa9da894</span></span><br><span class=\"line\">608d643b5142c0a49314ec8d0a67e00ee8d4f2974b005fd5af8b5ea63b2a8169</span><br></pre></td></tr></table></figure>\n\n<p>验证：</p>\n<ul>\n<li>通过<code>docker exec</code>登录到容器内进行检查</li>\n<li>通过<code>docker container inspect</code>查看容器详细信息进行检查</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker container inspect web04</span></span><br><span class=\"line\">···</span><br><span class=\"line\">&quot;Mounts&quot;: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                &quot;Type&quot;: &quot;bind&quot;,</span><br><span class=\"line\">                &quot;Source&quot;: &quot;/opt/Volume/a&quot;,</span><br><span class=\"line\">                &quot;Destination&quot;: &quot;/opt/a&quot;,</span><br><span class=\"line\">                &quot;Mode&quot;: &quot;&quot;,</span><br><span class=\"line\">                &quot;RW&quot;: true,</span><br><span class=\"line\">                &quot;Propagation&quot;: &quot;rprivate&quot;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                &quot;Type&quot;: &quot;bind&quot;,</span><br><span class=\"line\">                &quot;Source&quot;: &quot;/opt/Volume/b&quot;,</span><br><span class=\"line\">                &quot;Destination&quot;: &quot;/opt/b&quot;,</span><br><span class=\"line\">                &quot;Mode&quot;: &quot;&quot;,</span><br><span class=\"line\">                &quot;RW&quot;: true,</span><br><span class=\"line\">                &quot;Propagation&quot;: &quot;rprivate&quot;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">···</span><br></pre></td></tr></table></figure>\n\n<p>​        这样的好处是，即使数据卷容器宕掉后，也不影响使用数据卷的其他容器。</p>\n<p>案例：停止数据卷容器，查看web04和web05中是否还存在挂载的目录文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker container stop nginx_volumes</span> </span><br><span class=\"line\">nginx_volumes    # 停止数据卷容器</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker <span class=\"built_in\">exec</span> -it  web04 /bin/bash  <span class=\"comment\"># 进入web04容器</span></span></span><br><span class=\"line\">root@0e7af67dafde:/# ls /opt/   # 该容器中仍然存在数据卷容器挂载的目录</span><br><span class=\"line\">a  b</span><br><span class=\"line\">root@0e7af67dafde:/# ls /opt/a/a.txt </span><br><span class=\"line\">/opt/a/a.txt</span><br><span class=\"line\">root@0e7af67dafde:/# ls /opt/b/b.txt </span><br><span class=\"line\">/opt/b/b.txt</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>tips：数据卷容器简化了容器目录映射的方式，即使数据卷容器宕机，也不影响其他容器对挂载文件的使用。</p>\n</blockquote>\n<h3 id=\"4-容器与宿主机的手动数据交互–docker-cp\"><a href=\"#4-容器与宿主机的手动数据交互–docker-cp\" class=\"headerlink\" title=\"4. 容器与宿主机的手动数据交互–docker cp\"></a>4. 容器与宿主机的手动数据交互–<code>docker cp</code></h3><p>​        如何手动将宿主机与容器进行数据交互呢？docker提供了<code>docker cp</code>命令，可以将容器或宿主机上的文件进行拷贝传输，跟<code>scp</code>命令类似。</p>\n<ul>\n<li>将容器中的文件拷贝到宿主机中：<code>docker container cp container_name:container_Path host_Path</code></li>\n<li>将宿主机文件拷贝到容器中：<code>docker container cp host_Path container_name:container_Path</code></li>\n</ul>\n<blockquote>\n<p>tips：该方法只使用于量小的文件拷贝</p>\n</blockquote>\n<p><code>docker container cp</code>的用法</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker container cp --<span class=\"built_in\">help</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">Usage:\tdocker container cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH</span><br><span class=\"line\">\t    docker cp [OPTIONS] SRC_PATH|- CONTAINER:DEST_PATH</span><br><span class=\"line\"></span><br><span class=\"line\">Copy files/folders between a container and the local filesystem</span><br><span class=\"line\"></span><br><span class=\"line\">Use &#x27;-&#x27; as the source to read a tar archive from stdin</span><br><span class=\"line\">and extract it to a directory destination in a container.</span><br><span class=\"line\">Use &#x27;-&#x27; as the destination to stream a tar archive of a</span><br><span class=\"line\">container source to stdout.</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\">  -a, --archive       Archive mode (copy all uid/gid information)</span><br><span class=\"line\">  -L, --follow-link   Always follow symbol link in SRC_PATH</span><br></pre></td></tr></table></figure>\n\n<p>将宿主机上的文件拷贝到容器中：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">echo</span> <span class=\"string\">&quot;today is `date +%F`&quot;</span> &gt; date.html</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker container cp ./date.html  web01:/usr/share/nginx/html/</span></span><br></pre></td></tr></table></figure>\n\n<p>通过浏览器访问，结果如下：</p>\n<p><img src=\"../dockerImage/image-20200718151059368.png\" alt=\"image-20200718151059368\"></p>\n<p>将nginx容器中的文件拷贝到宿主机：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker container cp  web01:/usr/share/nginx/html/index.html .</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cat index.html</span> </span><br><span class=\"line\">hello nginx</span><br></pre></td></tr></table></figure>\n","comments":true,"permalink":"https://qingdalf.github.io/2021-05/dockerVolumes/","categories":[{"name":"kubernets","slug":"kubernets","permalink":"https://qingdalf.github.io/categories/kubernets/"}],"tags":[]},{"title":"两个常见的容器网络问题","date":"2021-05-04T07:19:51.000Z","path":"2021-05/dockerNetQuestion/","content":"<h4 id=\"1-容器2引用容器1的网络，当容器1宕掉后，容器2的网络还能正常吗？\"><a href=\"#1-容器2引用容器1的网络，当容器1宕掉后，容器2的网络还能正常吗？\" class=\"headerlink\" title=\"1 容器2引用容器1的网络，当容器1宕掉后，容器2的网络还能正常吗？\"></a>1 容器2引用容器1的网络，当容器1宕掉后，容器2的网络还能正常吗？</h4><p>​        不能。容器1宕掉后会销毁网络，因此容器2此时只有lo网络了，不再拥有与容器1共享的网络。</p>\n<span id=\"more\"></span>\n<p>实验如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 清除掉所有容器</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker container rm `docker container ls -a -q`</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker container ls -a</span> </span><br><span class=\"line\">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 1.新建容器1</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker run -td --name share-net f1cb7c7d58b7 bash</span></span><br><span class=\"line\">ead309a3e0bc3f769c6e08451bab0a47fb89106bf572d7751a7a0165624cdd69</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 2.新建容器2，使容器2共享容器1的网络</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker run -td --name net-son --network container:share-net  f1cb7c7d58b7 bash</span></span><br><span class=\"line\">825c2559f41e7c5b0999feefd0630d1b4bdbe4e907e82ae94e5b521a84148d81</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 3.检查两个容器是否同一个网络</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker container ls -a -q</span> </span><br><span class=\"line\">825c2559f41e</span><br><span class=\"line\">ead309a3e0bc</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker cp /usr/sbin/ifconfig 825c2559f41e:/usr/sbin/</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker cp /usr/sbin/ifconfig ead309a3e0bc:/usr/sbin/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker <span class=\"built_in\">exec</span> -it 825c2559f41e bash  <span class=\"comment\"># 进入容器1</span></span></span><br><span class=\"line\">[root@ead309a3e0bc /]# ifconfig eth0   # 容器1，将要被共享网络的容器</span><br><span class=\"line\">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class=\"line\">        inet 172.17.0.2  netmask 255.255.0.0  broadcast 172.17.255.255</span><br><span class=\"line\">        ether 02:42:ac:11:00:02  txqueuelen 0  (Ethernet)</span><br><span class=\"line\">        RX packets 8  bytes 656 (656.0 B)</span><br><span class=\"line\">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class=\"line\">        TX packets 0  bytes 0 (0.0 B)</span><br><span class=\"line\">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker <span class=\"built_in\">exec</span> -it 825c2559f41e bash</span></span><br><span class=\"line\">[root@ead309a3e0bc /]# ifconfig  eth0  #容器2，共享容器1网络的容器</span><br><span class=\"line\">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class=\"line\">        inet 172.17.0.2  netmask 255.255.0.0  broadcast 172.17.255.255</span><br><span class=\"line\">        ether 02:42:ac:11:00:02  txqueuelen 0  (Ethernet)</span><br><span class=\"line\">        RX packets 8  bytes 656 (656.0 B)</span><br><span class=\"line\">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class=\"line\">        TX packets 0  bytes 0 (0.0 B)</span><br><span class=\"line\">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 3.宕掉容器1，查看容器2的网络状况</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker container stop ead309a3e0bc</span></span><br><span class=\"line\">ead309a3e0bc</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker container ls -a</span> </span><br><span class=\"line\">CONTAINER ID   IMAGE         COMMAND  CREATED      STATUS          PORTS         NAMES</span><br><span class=\"line\">825c2559f41e   f1cb7c7d58b7  &quot;bash&quot;   8 minutes ago  Up 8 minutes                net-son</span><br><span class=\"line\">ead309a3e0bc   f1cb7c7d58b7  &quot;bash&quot;   9 minutes ago  Exited (137) 31 seconds ago share-net</span><br><span class=\"line\"></span><br><span class=\"line\">[root@ead309a3e0bc /]# ifconfig   # 此时只有一个网络了，容器并没有退出</span><br><span class=\"line\">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class=\"line\">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class=\"line\">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class=\"line\">        RX packets 0  bytes 0 (0.0 B)</span><br><span class=\"line\">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class=\"line\">        TX packets 0  bytes 0 (0.0 B)</span><br><span class=\"line\">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 需要注意的是，如果容器1没有启动，是不能重启容器2的，因此容器2的启动依赖于容器1的网络，即启动的顺序是：容器1启动完成后，才能启动容器2</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker container restart 825c2559f41e</span></span><br><span class=\"line\">Error response from daemon: Cannot restart container 825c2559f41e: cannot join network of a non running container: ead309a3e0bc3f769c6e08451bab0a47fb89106bf572d7751a7a0165624cdd69</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-同一个项目中的容器如何通信\"><a href=\"#2-同一个项目中的容器如何通信\" class=\"headerlink\" title=\"2.同一个项目中的容器如何通信\"></a>2.同一个项目中的容器如何通信</h4><p>​        我们知道，容器的IP地址随着容器的启停会不断变化，那么在项目中通过IP地址定位容器的方式是不可取的，那么同一个项目中的多个容器之间应该如何进行通信呢？</p>\n<p>​        <strong>通常的做法是新建网桥，通过主机名识别相关联的项目容器</strong>。</p>\n<p>​        在docker主机上新建一个网桥，可以通过主机名进行通信，默认网桥只能通过ip地址通信。下面通过在同一网段(两个不同网桥，莫i人网桥和新建网桥)下ping另一个容器的IP地址和主机名进行测试。</p>\n<h4 id=\"2-1-新建网桥new-net\"><a href=\"#2-1-新建网桥new-net\" class=\"headerlink\" title=\"2.1 新建网桥new_net\"></a>2.1 新建网桥new_net</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker network create new_net</span></span><br><span class=\"line\">f72b4eaaf552cc24efc467f3b630031c86ab649c2e0318ac26de1f1d72b79f21</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker network ls</span> </span><br><span class=\"line\">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class=\"line\">b3064d19f20d   bridge    bridge    local</span><br><span class=\"line\">bca4b3029dbe   host      host      local</span><br><span class=\"line\">f72b4eaaf552   new_net   bridge    local     # 新建网桥，默认也是桥接</span><br><span class=\"line\">ecd4e3687fb9   none      null      local</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看默认网桥bridge的详细信息</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker network inspect bridge</span></span><br><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &quot;Name&quot;: &quot;bridge&quot;,</span><br><span class=\"line\">        &quot;Id&quot;: &quot;b3064d19f20d631d2a7f3c298a4ee6583a1544ae15c7966f61941d26954670ef&quot;,</span><br><span class=\"line\">        &quot;Created&quot;: &quot;2021-04-01T10:59:13.315953055+08:00&quot;,</span><br><span class=\"line\">        &quot;Scope&quot;: &quot;local&quot;,</span><br><span class=\"line\">        &quot;Driver&quot;: &quot;bridge&quot;,</span><br><span class=\"line\">        &quot;EnableIPv6&quot;: false,</span><br><span class=\"line\">        &quot;IPAM&quot;: &#123;</span><br><span class=\"line\">            &quot;Driver&quot;: &quot;default&quot;,</span><br><span class=\"line\">            &quot;Options&quot;: null,</span><br><span class=\"line\">            &quot;Config&quot;: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    &quot;Subnet&quot;: &quot;172.17.0.0/16&quot;,   # 默认网桥默认网段是172.17.0.0/16</span><br><span class=\"line\">                    &quot;Gateway&quot;: &quot;172.17.0.1&quot;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;Internal&quot;: false,</span><br><span class=\"line\">        &quot;Attachable&quot;: false,</span><br><span class=\"line\">        &quot;Ingress&quot;: false,</span><br><span class=\"line\">        &quot;ConfigFrom&quot;: &#123;</span><br><span class=\"line\">            &quot;Network&quot;: &quot;&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;ConfigOnly&quot;: false,</span><br><span class=\"line\">        &quot;Containers&quot;: &#123;&#125;,</span><br><span class=\"line\">        &quot;Options&quot;: &#123;</span><br><span class=\"line\">            &quot;com.docker.network.bridge.default_bridge&quot;: &quot;true&quot;,</span><br><span class=\"line\">            &quot;com.docker.network.bridge.enable_icc&quot;: &quot;true&quot;,</span><br><span class=\"line\">            &quot;com.docker.network.bridge.enable_ip_masquerade&quot;: &quot;true&quot;,</span><br><span class=\"line\">            &quot;com.docker.network.bridge.host_binding_ipv4&quot;: &quot;0.0.0.0&quot;,</span><br><span class=\"line\">            &quot;com.docker.network.bridge.name&quot;: &quot;docker0&quot;,</span><br><span class=\"line\">            &quot;com.docker.network.driver.mtu&quot;: &quot;1500&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;Labels&quot;: &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">查看新建网桥new_net的详细信息</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker network inspect new_net</span></span><br><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &quot;Name&quot;: &quot;new_net&quot;,</span><br><span class=\"line\">        &quot;Id&quot;: &quot;f72b4eaaf552cc24efc467f3b630031c86ab649c2e0318ac26de1f1d72b79f21&quot;,</span><br><span class=\"line\">        &quot;Created&quot;: &quot;2021-04-01T21:36:27.933857446+08:00&quot;,</span><br><span class=\"line\">        &quot;Scope&quot;: &quot;local&quot;,</span><br><span class=\"line\">        &quot;Driver&quot;: &quot;bridge&quot;,</span><br><span class=\"line\">        &quot;EnableIPv6&quot;: false,</span><br><span class=\"line\">        &quot;IPAM&quot;: &#123;</span><br><span class=\"line\">            &quot;Driver&quot;: &quot;default&quot;,</span><br><span class=\"line\">            &quot;Options&quot;: &#123;&#125;,</span><br><span class=\"line\">            &quot;Config&quot;: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    &quot;Subnet&quot;: &quot;172.18.0.0/16&quot;,    # 网段，默认网段是172.18.0.0/16</span><br><span class=\"line\">                    &quot;Gateway&quot;: &quot;172.18.0.1&quot;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;Internal&quot;: false,</span><br><span class=\"line\">        &quot;Attachable&quot;: false,</span><br><span class=\"line\">        &quot;Ingress&quot;: false,</span><br><span class=\"line\">        &quot;ConfigFrom&quot;: &#123;</span><br><span class=\"line\">            &quot;Network&quot;: &quot;&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;ConfigOnly&quot;: false,</span><br><span class=\"line\">        &quot;Containers&quot;: &#123;&#125;,</span><br><span class=\"line\">        &quot;Options&quot;: &#123;&#125;,</span><br><span class=\"line\">        &quot;Labels&quot;: &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-默认网桥实验\"><a href=\"#2-2-默认网桥实验\" class=\"headerlink\" title=\"2.2 默认网桥实验\"></a>2.2 默认网桥实验</h4><p>​        使用默认网桥新建两个容器，分别在两个容器中通过IP地址和主机名进行ping测试。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker run  -it busybox sh   <span class=\"comment\"># 新建容器1</span></span></span><br><span class=\"line\">/ # ifconfig eth0 </span><br><span class=\"line\">eth0      Link encap:Ethernet  HWaddr 02:42:AC:11:00:02  </span><br><span class=\"line\">          inet addr:172.17.0.2  Bcast:172.17.255.255  Mask:255.255.0.0</span><br><span class=\"line\">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class=\"line\">          RX packets:7 errors:0 dropped:0 overruns:0 frame:0</span><br><span class=\"line\">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class=\"line\">          collisions:0 txqueuelen:0 </span><br><span class=\"line\">          RX bytes:586 (586.0 B)  TX bytes:0 (0.0 B)</span><br><span class=\"line\">/ # hostname </span><br><span class=\"line\">14c9f17fe0fc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker run  -it busybox sh    <span class=\"comment\"># 新建容器2--默认网桥</span></span></span><br><span class=\"line\">/ # ifconfig eth0 </span><br><span class=\"line\">eth0      Link encap:Ethernet  HWaddr 02:42:AC:11:00:03  </span><br><span class=\"line\">          inet addr:172.17.0.3  Bcast:172.17.255.255  Mask:255.255.0.0</span><br><span class=\"line\">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class=\"line\">          RX packets:6 errors:0 dropped:0 overruns:0 frame:0</span><br><span class=\"line\">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class=\"line\">          collisions:0 txqueuelen:0 </span><br><span class=\"line\">          RX bytes:516 (516.0 B)  TX bytes:0 (0.0 B)</span><br><span class=\"line\">/ # hostname </span><br><span class=\"line\">a0532f2f769a</span><br></pre></td></tr></table></figure>\n\n<p>在容器1中ping容器2的IP地址和主机名</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/ # ping 172.17.0.3 -c 1          </span><br><span class=\"line\">PING 172.17.0.3 (172.17.0.3): 56 data bytes</span><br><span class=\"line\">64 bytes from 172.17.0.3: seq=0 ttl=64 time=0.049 ms</span><br><span class=\"line\"></span><br><span class=\"line\">--- 172.17.0.3 ping statistics ---</span><br><span class=\"line\">1 packets transmitted, 1 packets received, 0% packet loss</span><br><span class=\"line\">round-trip min/avg/max = 0.049/0.049/0.049 ms</span><br><span class=\"line\"></span><br><span class=\"line\">/ # ping a0532f2f769a    </span><br><span class=\"line\">ping: bad address &#x27;a0532f2f769a&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>在容器2中ping容器1的IP地址和主机名</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/ # ping 172.17.0.2 -c 1             </span><br><span class=\"line\">PING 172.17.0.2 (172.17.0.2): 56 data bytes</span><br><span class=\"line\">64 bytes from 172.17.0.2: seq=0 ttl=64 time=6.461 ms</span><br><span class=\"line\"></span><br><span class=\"line\">--- 172.17.0.2 ping statistics ---</span><br><span class=\"line\">1 packets transmitted, 1 packets received, 0% packet loss</span><br><span class=\"line\">round-trip min/avg/max = 6.461/6.461/6.461 ms</span><br><span class=\"line\"></span><br><span class=\"line\">/ # ping 14c9f17fe0fc              # 在容器2中ping容器1的主机名，失败</span><br><span class=\"line\">ping: bad address &#x27;14c9f17fe0fc&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>​        由此可知，在同一台宿主机上，默认网桥可以通过IP地址通信，不能通过主机名通信。</p>\n<h4 id=\"2-3-使用新建网桥\"><a href=\"#2-3-使用新建网桥\" class=\"headerlink\" title=\"2.3 使用新建网桥\"></a>2.3 使用新建网桥</h4><p>​        使用新建网桥<code>new_net</code>新建两个容器，分别在两个容器中通过IP地址和主机名进行ping测试。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker run  -it --network new_net  busybox sh  <span class=\"comment\"># 新建容器1</span></span></span><br><span class=\"line\">/ # ifconfig eth0 </span><br><span class=\"line\">eth0      Link encap:Ethernet  HWaddr 02:42:AC:12:00:02  </span><br><span class=\"line\">          inet addr:172.18.0.2  Bcast:172.18.255.255  Mask:255.255.0.0</span><br><span class=\"line\">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class=\"line\">          RX packets:13 errors:0 dropped:0 overruns:0 frame:0</span><br><span class=\"line\">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class=\"line\">          collisions:0 txqueuelen:0 </span><br><span class=\"line\">          RX bytes:1102 (1.0 KiB)  TX bytes:0 (0.0 B)</span><br><span class=\"line\"></span><br><span class=\"line\">/ # hostname </span><br><span class=\"line\">d0999162dce9</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker run  -it --network new_net  busybox sh  <span class=\"comment\"># 新建容器2</span></span></span><br><span class=\"line\">/ # ifconfig eth0 </span><br><span class=\"line\">eth0      Link encap:Ethernet  HWaddr 02:42:AC:12:00:03  </span><br><span class=\"line\">          inet addr:172.18.0.3  Bcast:172.18.255.255  Mask:255.255.0.0</span><br><span class=\"line\">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class=\"line\">          RX packets:7 errors:0 dropped:0 overruns:0 frame:0</span><br><span class=\"line\">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class=\"line\">          collisions:0 txqueuelen:0 </span><br><span class=\"line\">          RX bytes:586 (586.0 B)  TX bytes:0 (0.0 B)</span><br><span class=\"line\"></span><br><span class=\"line\">/ # hostname </span><br><span class=\"line\">f4743940a945</span><br></pre></td></tr></table></figure>\n\n<p>​        在容器1中ping容器2的IP地址和主机名。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 在容器1中通过ping命令ping容器2IP地址和容器2主机名</span></span><br><span class=\"line\">/ # ping 172.18.0.3 -c 1                         # 在容器1中ping容器2IP地址成功</span><br><span class=\"line\">PING 172.18.0.3 (172.18.0.3): 56 data bytes</span><br><span class=\"line\">64 bytes from 172.18.0.3: seq=0 ttl=64 time=0.094 ms</span><br><span class=\"line\"></span><br><span class=\"line\">--- 172.18.0.3 ping statistics ---</span><br><span class=\"line\">1 packets transmitted, 1 packets received, 0% packet loss</span><br><span class=\"line\">round-trip min/avg/max = 0.094/0.094/0.094 ms</span><br><span class=\"line\">/ # </span><br><span class=\"line\">/ # ping f4743940a945 -c 1                      # 在容器1中ping容器2主机名成功，并自动解析出IP地址</span><br><span class=\"line\">PING f4743940a945 (172.18.0.3): 56 data bytes   # 通过主机名f4743940a945解析出IP地址--172.18.0.3</span><br><span class=\"line\">64 bytes from 172.18.0.3: seq=0 ttl=64 time=0.057 ms</span><br><span class=\"line\"></span><br><span class=\"line\">--- f4743940a945 ping statistics ---</span><br><span class=\"line\">1 packets transmitted, 1 packets received, 0% packet loss</span><br><span class=\"line\">round-trip min/avg/max = 0.057/0.057/0.057 ms</span><br></pre></td></tr></table></figure>\n\n<p>​        在容器2中ping容器1的IP地址和主机名</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 在容器2中通过Ping命令ping容器1的IP地址和主机名</span></span><br><span class=\"line\">/ # ping 172.18.0.2 -c 1                     # 在容器1中ping容器1IP地址成功</span><br><span class=\"line\">PING 172.18.0.2 (172.18.0.2): 56 data bytes</span><br><span class=\"line\">64 bytes from 172.18.0.2: seq=0 ttl=64 time=0.050 ms</span><br><span class=\"line\"></span><br><span class=\"line\">--- 172.18.0.2 ping statistics ---</span><br><span class=\"line\">1 packets transmitted, 1 packets received, 0% packet loss</span><br><span class=\"line\">round-trip min/avg/max = 0.050/0.050/0.050 ms</span><br><span class=\"line\"></span><br><span class=\"line\">/ # ping d0999162dce9 -c 1                    # 在容器2中ping容器1IP地址成功</span><br><span class=\"line\">PING d0999162dce9 (172.18.0.2): 56 data bytes</span><br><span class=\"line\">64 bytes from 172.18.0.2: seq=0 ttl=64 time=0.060 ms</span><br><span class=\"line\"></span><br><span class=\"line\">--- d0999162dce9 ping statistics ---</span><br><span class=\"line\">1 packets transmitted, 1 packets received, 0% packet loss</span><br><span class=\"line\">round-trip min/avg/max = 0.060/0.060/0.060 ms</span><br></pre></td></tr></table></figure>\n","comments":true,"permalink":"https://qingdalf.github.io/2021-05/dockerNetQuestion/","categories":[{"name":"kubernets","slug":"kubernets","permalink":"https://qingdalf.github.io/categories/kubernets/"}],"tags":[]},{"title":"docker网络进阶","date":"2021-05-04T07:16:13.000Z","path":"2021-05/dockerNetAdvance/","content":"<h3 id=\"1-网络变化\"><a href=\"#1-网络变化\" class=\"headerlink\" title=\"1 网络变化\"></a>1 网络变化</h3><p>​        我们从下面两个方面来查看网络的变化情况。</p>\n<ol>\n<li><p>安装和启动docker前后，宿主机上网络的变化</p>\n</li>\n<li><p>启动一个容器后，查看容器内发收数据包与网桥docker0上新增的端口收发数据包的情况</p>\n<span id=\"more\"></span>\n<h4 id=\"1-1-安装和启动docker前后\"><a href=\"#1-1-安装和启动docker前后\" class=\"headerlink\" title=\"1.1 安装和启动docker前后\"></a>1.1 安装和启动docker前后</h4></li>\n</ol>\n<ul>\n<li><p><strong>安装docker前，宿主机上的网络情况</strong></p>\n<p>​    在未安装docker软件包之前，使用<code>ip a</code>查看宿主机网络信息如下：</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ip a</span></span><br><span class=\"line\">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class=\"line\">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class=\"line\">    inet 127.0.0.1/8 scope host lo</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 ::1/128 scope host </span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class=\"line\">    link/ether 00:0c:29:46:24:04 brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 10.138.3.130/24 brd 10.138.3.255 scope global noprefixroute ens33</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 fe80::9ecf:f41f:ee57:9f86/64 scope link noprefixroute </span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">       </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> iptables-save   <span class=\"comment\"># iptables规则为空</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># yum  -y install bridge-utils   # 网桥管理工具</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> brctl show</span></span><br><span class=\"line\">bridge name\t     bridge id\t\t STP enabled\t  interfaces    # 无数据信息</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> </span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong>安装docker后，宿主机的网络情况</strong></p>\n<p>​    安装docker软件包并启动docker(<code>systemctl start docker</code>)后，使用<code>ip a</code>查看宿主机网络信息如下：</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> systemctl start docker</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ip a</span></span><br><span class=\"line\">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class=\"line\">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class=\"line\">    inet 127.0.0.1/8 scope host lo</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 ::1/128 scope host </span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class=\"line\">    link/ether 00:0c:29:46:24:04 brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 10.138.3.130/24 brd 10.138.3.255 scope global noprefixroute ens33</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 fe80::9ecf:f41f:ee57:9f86/64 scope link noprefixroute </span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">3: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default </span><br><span class=\"line\">    link/ether 02:42:d9:02:ec:81 brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">            </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> brctl  show</span></span><br><span class=\"line\">bridge name\t  bridge id\t\t       STP enabled\t  interfaces</span><br><span class=\"line\">docker0\t\t  8000.0242d902ec81\t   no\t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> iptables-save</span> </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Generated by iptables-save v1.4.21 on Tue Feb 16 14:11:28 2021</span></span><br><span class=\"line\">*nat</span><br><span class=\"line\">:PREROUTING ACCEPT [0:0]</span><br><span class=\"line\">:INPUT ACCEPT [0:0]</span><br><span class=\"line\">:OUTPUT ACCEPT [1:124]</span><br><span class=\"line\">:POSTROUTING ACCEPT [1:124]</span><br><span class=\"line\">:DOCKER - [0:0]</span><br><span class=\"line\">-A PREROUTING -m addrtype --dst-type LOCAL -j DOCKER</span><br><span class=\"line\">-A OUTPUT ! -d 127.0.0.0/8 -m addrtype --dst-type LOCAL -j DOCKER</span><br><span class=\"line\">-A POSTROUTING -s 172.17.0.0/16 ! -o docker0 -j MASQUERADE</span><br><span class=\"line\">-A DOCKER -i docker0 -j RETURN</span><br><span class=\"line\">COMMIT</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Completed on Tue Feb 16 14:11:28 2021</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Generated by iptables-save v1.4.21 on Tue Feb 16 14:11:28 2021</span></span><br><span class=\"line\">*filter</span><br><span class=\"line\">:INPUT ACCEPT [17:1096]</span><br><span class=\"line\">:FORWARD DROP [0:0]</span><br><span class=\"line\">:OUTPUT ACCEPT [11:2692]</span><br><span class=\"line\">:DOCKER - [0:0]</span><br><span class=\"line\">:DOCKER-ISOLATION-STAGE-1 - [0:0]</span><br><span class=\"line\">:DOCKER-ISOLATION-STAGE-2 - [0:0]</span><br><span class=\"line\">:DOCKER-USER - [0:0]</span><br><span class=\"line\">-A FORWARD -j DOCKER-USER</span><br><span class=\"line\">-A FORWARD -j DOCKER-ISOLATION-STAGE-1</span><br><span class=\"line\">-A FORWARD -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT</span><br><span class=\"line\">-A FORWARD -o docker0 -j DOCKER</span><br><span class=\"line\">-A FORWARD -i docker0 ! -o docker0 -j ACCEPT</span><br><span class=\"line\">-A FORWARD -i docker0 -o docker0 -j ACCEPT</span><br><span class=\"line\">-A DOCKER-ISOLATION-STAGE-1 -i docker0 ! -o docker0 -j DOCKER-ISOLATION-STAGE-2</span><br><span class=\"line\">-A DOCKER-ISOLATION-STAGE-1 -j RETURN</span><br><span class=\"line\">-A DOCKER-ISOLATION-STAGE-2 -o docker0 -j DROP</span><br><span class=\"line\">-A DOCKER-ISOLATION-STAGE-2 -j RETURN</span><br><span class=\"line\">-A DOCKER-USER -j RETURN</span><br><span class=\"line\">COMMIT</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Completed on Tue Feb 16 14:11:28 2021</span></span><br></pre></td></tr></table></figure>\n\n<p>​        有上述可知，在启动docker时，新建了一个名叫docker0的网桥</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ifconfig docker0</span></span><br><span class=\"line\">docker0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500</span><br><span class=\"line\">        inet 172.17.0.1  netmask 255.255.0.0  broadcast 172.17.255.255</span><br><span class=\"line\">        ether 02:42:55:5e:01:6e  txqueuelen 0  (Ethernet)</span><br><span class=\"line\">        RX packets 0  bytes 0 (0.0 B) # 显示接收的数据包，所有的容器都是通过docker0网桥接收的数据包，这里是汇总</span><br><span class=\"line\">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class=\"line\">        TX packets 0  bytes 0 (0.0 B)  # 显示发送的数据包，所有的容器都是通过docker0网桥发送的数据包，这里是汇总</span><br><span class=\"line\">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-2-启动容器后\"><a href=\"#1-2-启动容器后\" class=\"headerlink\" title=\"1.2 启动容器后\"></a>1.2 启动容器后</h4><p>​        此时我们启动一个容器，查看<strong>网桥docker0上新增端口</strong>数据包的变化</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker image ls</span></span><br><span class=\"line\">REPOSITORY   TAG              IMAGE ID       CREATED         SIZE</span><br><span class=\"line\">nginx        latest           0901fa9da894   7 months ago    132MB</span><br><span class=\"line\">busybox      latest           c7c37e472d31   7 months ago    1.22MB</span><br><span class=\"line\">centos       centos7.6.1810   f1cb7c7d58b7   23 months ago   202MB</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker run -d -p 80:80 --name web01 0901fa9da894   <span class=\"comment\"># 启动一个nginx的容器</span></span></span><br><span class=\"line\">ed8ac3e3190d411b5485d9dd58563cb503235c4d3c2b8e4ed0301c163d1c8bc2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker container ls</span> </span><br><span class=\"line\">CONTAINER ID  IMAGE      COMMAND               CREATED        STATUS        PORTS          NAMES</span><br><span class=\"line\">ed8ac3e3190d  0901fa9da894  &quot;/docker-entrypoint.…&quot;  1 minutes ago Up 1 minutes 0.0.0.0:80-&gt;80/tcp web01</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> brctl  show</span></span><br><span class=\"line\">bridge name\tbridge id\t\tSTP enabled\tinterfaces</span><br><span class=\"line\">docker0\t\t8000.0242555e016e\tno\t\tveth830784a   # 启动容器后，docker0上新增了一个端口</span><br><span class=\"line\"></span><br><span class=\"line\">[root@docker20 ~]# ifconfig veth830784a</span><br><span class=\"line\">veth830784a: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class=\"line\">        inet6 fe80::38dc:e3ff:fe14:a6fc  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class=\"line\">        ether 3a:dc:e3:14:a6:fc  txqueuelen 0  (Ethernet)</span><br><span class=\"line\">        RX packets 0  bytes 0 (0.0 B)</span><br><span class=\"line\">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class=\"line\">        TX packets 8  bytes 656 (656.0 B)</span><br><span class=\"line\">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure>\n\n<p>​        容器启动后，使用windows主机访问nginx网页</p>\n<p><img src=\"../dockerImage/image-20210215184302351.png\" alt=\"image-20210215184302351\"></p>\n<p>此时查看<strong>docker0中新增端口</strong>的网络流量跟nginx容器的网络流量</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker0中新增端口的网络流量：</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ifconfig veth830784a</span></span><br><span class=\"line\">veth830784a: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class=\"line\">        inet6 fe80::38dc:e3ff:fe14:a6fc  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class=\"line\">        ether 3a:dc:e3:14:a6:fc  txqueuelen 0  (Ethernet)</span><br><span class=\"line\">        RX packets 81  bytes 4314 (4.2 KiB)</span><br><span class=\"line\">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class=\"line\">        TX packets 89  bytes 5890 (5.7 KiB)</span><br><span class=\"line\">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看nginx容器的网络流量：首先进入nginx容器中，然后执行ifconfig命令，最后对比数据包的大小</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker cp /usr/sbin/ifconfig ed8ac3e3190d:/usr/sbin  <span class=\"comment\"># 将ifconfig命令导入到容器中</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker <span class=\"built_in\">exec</span> -it ed8ac3e3190d bash  <span class=\"comment\"># 进入容器</span></span></span><br><span class=\"line\">root@ed8ac3e3190d:/# ifconfig eth0</span><br><span class=\"line\">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class=\"line\">        inet 172.17.0.2  netmask 255.255.0.0  broadcast 172.17.255.255</span><br><span class=\"line\">        ether 02:42:ac:11:00:02  txqueuelen 0  (Ethernet)</span><br><span class=\"line\">        RX packets 89  bytes 5890 (5.7 KiB)  # 流出的流量，对应网桥docker0新增端口veth830784a流入的流量</span><br><span class=\"line\">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class=\"line\">        TX packets 81  bytes 4314 (4.2 KiB)  # 流入的流量，对应网桥docker0新增端口veth830784a流出的流量</span><br><span class=\"line\">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure>\n\n<p>此时截图如下：</p>\n<p><img src=\"../dockerImage/image-20210215195308307.png\" alt=\"image-20210215195308307\"></p>\n<h3 id=\"2-同台宿主机上两个容器的数据包走向\"><a href=\"#2-同台宿主机上两个容器的数据包走向\" class=\"headerlink\" title=\"2 同台宿主机上两个容器的数据包走向\"></a>2 同台宿主机上两个容器的数据包走向</h3><p>​        在同台宿主机上开启两个容器，在两个容器中互ping，查看流量走向</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 新建两个容器，并同时通过xshell界面连接进入容器</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker run -it -d --name Centos7-01 f1cb7c7d58b7  /bin/bash</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker run -it -d --name Centos7-02 f1cb7c7d58b7  /bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker container ls</span> </span><br><span class=\"line\">CONTAINER ID   IMAGE          COMMAND       CREATED         STATUS         PORTS     NAMES</span><br><span class=\"line\">b8d07e8812fb   f1cb7c7d58b7   &quot;/bin/bash&quot;   2 minutes ago   Up 2 minutes             Centos7-02</span><br><span class=\"line\">a7495c7a321a   f1cb7c7d58b7   &quot;/bin/bash&quot;   4 minutes ago   Up 4 minutes             Centos7-01</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 进入容器1，并安装tcpdump</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker <span class=\"built_in\">exec</span> -it a7495c7a321a  bash</span></span><br><span class=\"line\">[root@a7495c7a321a /]# yum -y install tcpdump</span><br><span class=\"line\">[root@a7495c7a321a /]# ifconfig  eth0 </span><br><span class=\"line\">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class=\"line\">        inet 172.17.0.2  netmask 255.255.0.0  broadcast 172.17.255.255</span><br><span class=\"line\">        ether 02:42:ac:11:00:02  txqueuelen 0  (Ethernet)</span><br><span class=\"line\">        RX packets 4015  bytes 13691921 (13.0 MiB)</span><br><span class=\"line\">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class=\"line\">        TX packets 3103  bytes 171543 (167.5 KiB)</span><br><span class=\"line\">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 进入容器2，并安装tcpdump</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker <span class=\"built_in\">exec</span> -it b8d07e8812fb bash</span></span><br><span class=\"line\">[root@b8d07e8812fb /]# yum -y install tcpdump</span><br><span class=\"line\">[root@b8d07e8812fb /]# ifconfig  eth0</span><br><span class=\"line\">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class=\"line\">        inet 172.17.0.3  netmask 255.255.0.0  broadcast 172.17.255.255</span><br><span class=\"line\">        ether 02:42:ac:11:00:03  txqueuelen 0  (Ethernet)</span><br><span class=\"line\">        RX packets 4423  bytes 13712937 (13.0 MiB)</span><br><span class=\"line\">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class=\"line\">        TX packets 3334  bytes 184083 (179.7 KiB)</span><br><span class=\"line\">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 在容器2中ping容器1(容器2-b8d07e8812fb打开两个xhsell界面，一个用着ping，一个用着抓包)</span></span><br><span class=\"line\">[root@b8d07e8812fb /]# ping 172.17.0.2 -c 1</span><br><span class=\"line\">PING 172.17.0.2 (172.17.0.2) 56(84) bytes of data.</span><br><span class=\"line\">64 bytes from 172.17.0.2: icmp_seq=1 ttl=64 time=0.188 ms</span><br><span class=\"line\"></span><br><span class=\"line\">--- 172.17.0.2 ping statistics ---</span><br><span class=\"line\">1 packets transmitted, 1 received, 0% packet loss, time 0ms</span><br><span class=\"line\">rtt min/avg/max/mdev = 0.188/0.188/0.188/0.000 ms</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 在ping的同时，在容器1和容器2以及宿主机上执行tcpdump命令，分别查看容器1和容器2中网卡eth0和宿主机上对应容器1和容器2的端口和docker0的icmp流量的情况</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 1. 容器1中eth0的抓包情况</span></span></span><br><span class=\"line\">[root@a7495c7a321a /]# tcpdump -i eth0 icmp</span><br><span class=\"line\">tcpdump: verbose output suppressed, use -v or -vv for full protocol decode</span><br><span class=\"line\">listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class=\"line\">13:08:06.501115 IP 172.17.0.3 &gt; a7495c7a321a: ICMP echo request, id 113, seq 1, length 64</span><br><span class=\"line\">13:08:06.501171 IP a7495c7a321a &gt; 172.17.0.3: ICMP echo reply, id 113, seq 1, length 64</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 2. 与容器1中eth0对应的接口veth5526b5c的抓包情况</span></span></span><br><span class=\"line\">[root@docker20 ~]# tcpdump -i veth5526b5c icmp</span><br><span class=\"line\">tcpdump: verbose output suppressed, use -v or -vv for full protocol decode</span><br><span class=\"line\">listening on veth5526b5c, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class=\"line\">21:08:06.501112 IP 172.17.0.3 &gt; 172.17.0.2: ICMP echo request, id 113, seq 1, length 64</span><br><span class=\"line\">21:08:06.501173 IP 172.17.0.2 &gt; 172.17.0.3: ICMP echo reply, id 113, seq 1, length 64</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 3. 容器2中eth0的抓包情况</span></span></span><br><span class=\"line\">[root@b8d07e8812fb /]# tcpdump -i eth0 icmp</span><br><span class=\"line\">tcpdump: verbose output suppressed, use -v or -vv for full protocol decode</span><br><span class=\"line\">listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class=\"line\">13:08:06.501012 IP b8d07e8812fb &gt; 172.17.0.2: ICMP echo request, id 113, seq 1, length 64</span><br><span class=\"line\">13:08:06.501181 IP 172.17.0.2 &gt; b8d07e8812fb: ICMP echo reply, id 113, seq 1, length 64</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 4. 容器2中eth0对应的接口veth1abfdc9的抓包情况</span></span></span><br><span class=\"line\">[root@docker20 ~]# tcpdump -i veth1abfdc9 icmp </span><br><span class=\"line\">tcpdump: verbose output suppressed, use -v or -vv for full protocol decode</span><br><span class=\"line\">listening on veth1abfdc9, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class=\"line\">21:08:06.501046 IP 172.17.0.3 &gt; 172.17.0.2: ICMP echo request, id 113, seq 1, length 64</span><br><span class=\"line\">21:08:06.501180 IP 172.17.0.2 &gt; 172.17.0.3: ICMP echo reply, id 113, seq 1, length 64</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 5. 宿主机docker0的抓包情况</span></span></span><br><span class=\"line\">[root@docker20 ~]# tcpdump  -i docker0 icmp</span><br><span class=\"line\">tcpdump: verbose output suppressed, use -v or -vv for full protocol decode</span><br><span class=\"line\">listening on docker0, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class=\"line\">21:08:06.501046 IP 172.17.0.3 &gt; 172.17.0.2: ICMP echo request, id 113, seq 1, length 64</span><br><span class=\"line\">21:08:06.501173 IP 172.17.0.2 &gt; 172.17.0.3: ICMP echo reply, id 113, seq 1, length 64</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 此时，宿主机和容器1和容器2中的路由信息如下：</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> route -n</span> </span><br><span class=\"line\">Kernel IP routing table</span><br><span class=\"line\">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class=\"line\">0.0.0.0         10.138.3.2      0.0.0.0         UG    100    0        0 ens33</span><br><span class=\"line\">10.138.3.0      0.0.0.0         255.255.255.0   U     100    0        0 ens33</span><br><span class=\"line\">172.17.0.0      0.0.0.0         255.255.0.0     U     0      0        0 docker0</span><br><span class=\"line\"></span><br><span class=\"line\">[root@a7495c7a321a /]# route -n </span><br><span class=\"line\">Kernel IP routing table</span><br><span class=\"line\">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class=\"line\">0.0.0.0         172.17.0.1      0.0.0.0         UG    0      0        0 eth0</span><br><span class=\"line\">172.17.0.0      0.0.0.0         255.255.0.0     U     0      0        0 eth0</span><br><span class=\"line\"></span><br><span class=\"line\">[root@b8d07e8812fb /]# route  -n </span><br><span class=\"line\">Kernel IP routing table</span><br><span class=\"line\">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class=\"line\">0.0.0.0         172.17.0.1      0.0.0.0         UG    0      0        0 eth0</span><br><span class=\"line\">172.17.0.0      0.0.0.0         255.255.0.0     U     0      0        0 eth0</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>​        由上述四个网卡和一个网桥的抓包情况可以看出，同一台宿主机上同网段容器之间是通过网桥docker0直接互通，流程图如下：</p>\n<p><img src=\"../dockerImage/image-20210215212140788.png\" alt=\"image-20210215212140788\"></p>\n<p>同一宿主机上容器网络流量走向总结：</p>\n<p>​        同一台宿主机中，我们在容器2中ping容器1，首先在容器2中查询路由表，得到最优路径(目标地址为172.17.0.2，是属于目标地址为172.17.0.0的路由表，因此会使用该路由信息进行数据传递)，此时流量是从容器2的eth0网卡走向容器2对应在docker0上的接口veth1abfdc9，达到网桥docker0后，发现是同网段的ip地址，通过查询mac地址表，找出容器1的IP地址对应的mac地址，将数据包通过docker0上与容器1相连接的veth5526b5c端口将数据发送给容器1的网卡，数据包返回时操作流程也是一样。</p>\n<h3 id=\"3-容器连接外网时的数据包走向–源地址转换\"><a href=\"#3-容器连接外网时的数据包走向–源地址转换\" class=\"headerlink\" title=\"3 容器连接外网时的数据包走向–源地址转换\"></a>3 容器连接外网时的数据包走向–源地址转换</h3><p><img src=\"../dockerImage/image-20210402103617452.png\" alt=\"image-20210402103617452\"></p>\n<p>​        在容器1(IP地址为172.17.0.3)中ping百度，抓取容器2的网卡、docker0、ens33，查看数据包的走向</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ping百度</span></span><br><span class=\"line\">[root@b8d07e8812fb /]# ping baidu.com -c 2</span><br><span class=\"line\">PING baidu.com (220.181.38.148) 56(84) bytes of data.</span><br><span class=\"line\">64 bytes from baidu.com (220.181.38.148): icmp_seq=1 ttl=127 time=12.2 ms</span><br><span class=\"line\">64 bytes from baidu.com (220.181.38.148): icmp_seq=2 ttl=127 time=9.94 ms</span><br><span class=\"line\"></span><br><span class=\"line\">--- baidu.com ping statistics ---</span><br><span class=\"line\">2 packets transmitted, 2 received, 0% packet loss, time 1004ms</span><br><span class=\"line\">rtt min/avg/max/mdev = 9.942/11.119/12.296/1.177 ms</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 抓包情况</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 1.容器2中eth0的抓包和路由信息</span></span></span><br><span class=\"line\">[root@b8d07e8812fb /]# tcpdump -i eth0 icmp -w eth0.cap  # 将输出信息保存到eth0.cap中，</span><br><span class=\"line\">tcpdump: listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class=\"line\">^C4 packets captured</span><br><span class=\"line\">4 packets received by filter</span><br><span class=\"line\">0 packets dropped by kernel</span><br><span class=\"line\"></span><br><span class=\"line\">[root@b8d07e8812fb /]# route -n </span><br><span class=\"line\">Kernel IP routing table</span><br><span class=\"line\">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class=\"line\">0.0.0.0         172.17.0.1      0.0.0.0         UG    0      0        0 eth0  # 走这一条路由</span><br><span class=\"line\">172.17.0.0      0.0.0.0         255.255.0.0     U     0      0        0 eth0</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 2.宿主机上docker0的抓包</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> tcpdump  -i docker0 icmp -w docker0.cap</span></span><br><span class=\"line\">tcpdump: listening on docker0, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class=\"line\">^C14 packets captured</span><br><span class=\"line\">14 packets received by filter</span><br><span class=\"line\">0 packets dropped by kernel</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 3.宿主机上ens33的抓包</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> tcpdump -i ens33  icmp  -w ens33.cap</span></span><br><span class=\"line\">tcpdump: listening on ens33, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class=\"line\">^C4 packets captured</span><br><span class=\"line\">4 packets received by filter</span><br><span class=\"line\">0 packets dropped by kernel</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker cp b8d07e8812fb:/eth0.cap .  <span class=\"comment\"># 将容器中的eth0.cap拷贝到宿主机上</span></span></span><br><span class=\"line\">[root@docker20 ~]# ll -h *.cap  # 导出，通过wireshark打开数据包，进行网络走向分析</span><br><span class=\"line\">-rw-r--r-- 1 tcpdump tcpdump 480 Feb 15 22:55 docker0.cap</span><br><span class=\"line\">-rw-r--r-- 1 tcpdump tcpdump 480 Feb 15 22:55 ens33.cap</span><br><span class=\"line\">-rw-r--r-- 1 root    root    480 Feb 15 22:55 eth0.cap</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 4.宿主机的iptables规则</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> iptables-save</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Generated by iptables-save v1.4.21 on Mon Feb 15 21:39:23 2021</span></span><br><span class=\"line\">*filter</span><br><span class=\"line\">:INPUT ACCEPT [4043:876124]</span><br><span class=\"line\">:FORWARD DROP [0:0]</span><br><span class=\"line\">:OUTPUT ACCEPT [2946:334234]</span><br><span class=\"line\">:DOCKER - [0:0]</span><br><span class=\"line\">:DOCKER-ISOLATION-STAGE-1 - [0:0]</span><br><span class=\"line\">:DOCKER-ISOLATION-STAGE-2 - [0:0]</span><br><span class=\"line\">:DOCKER-USER - [0:0]</span><br><span class=\"line\">-A FORWARD -j DOCKER-USER</span><br><span class=\"line\">-A FORWARD -j DOCKER-ISOLATION-STAGE-1</span><br><span class=\"line\">-A FORWARD -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT</span><br><span class=\"line\">-A FORWARD -o docker0 -j DOCKER</span><br><span class=\"line\">-A FORWARD -i docker0 ! -o docker0 -j ACCEPT</span><br><span class=\"line\">-A FORWARD -i docker0 -o docker0 -j ACCEPT</span><br><span class=\"line\">-A DOCKER-ISOLATION-STAGE-1 -i docker0 ! -o docker0 -j DOCKER-ISOLATION-STAGE-2</span><br><span class=\"line\">-A DOCKER-ISOLATION-STAGE-1 -j RETURN</span><br><span class=\"line\">-A DOCKER-ISOLATION-STAGE-2 -o docker0 -j DROP</span><br><span class=\"line\">-A DOCKER-ISOLATION-STAGE-2 -j RETURN</span><br><span class=\"line\">-A DOCKER-USER -j RETURN</span><br><span class=\"line\">COMMIT</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Completed on Mon Feb 15 21:39:23 2021</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Generated by iptables-save v1.4.21 on Mon Feb 15 21:39:23 2021</span></span><br><span class=\"line\">*nat</span><br><span class=\"line\">:PREROUTING ACCEPT [146:9425]</span><br><span class=\"line\">:INPUT ACCEPT [7:474]</span><br><span class=\"line\">:OUTPUT ACCEPT [49:3260]</span><br><span class=\"line\">:POSTROUTING ACCEPT [53:3596]</span><br><span class=\"line\">:DOCKER - [0:0]</span><br><span class=\"line\">-A PREROUTING -m addrtype --dst-type LOCAL -j DOCKER</span><br><span class=\"line\">-A OUTPUT ! -d 127.0.0.0/8 -m addrtype --dst-type LOCAL -j DOCKER</span><br><span class=\"line\">-A POSTROUTING -s 172.17.0.0/16 ! -o docker0 -j MASQUERADE</span><br><span class=\"line\">-A DOCKER -i docker0 -j RETURN</span><br><span class=\"line\">COMMIT</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Completed on Mon Feb 15 21:39:23 2021</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>详解iptables规则：-A POSTROUTING -s 172.17.0.0/16 ! -o docker0 -j MASQUERADE，这条iptables规则是将源地址为172.17.0.0/16的数据包(也就是docker容器产生的数据包，容器的网关是docker0的地址，因此必然会经过docker0)，而不是docker0网卡直接发出的数据包，进行源地址转换，转换成docker主机网卡的地址，再发送出去</p>\n</blockquote>\n<p>下面我们通过<code>wireshark软件</code>打开三个文件，按照<code>容器eth0--&gt;docker0--&gt;ens33</code>查看数据包流出(即请求信息request)情况，再通过<code>ens33--&gt;docker0--&gt;容器eth0</code>查看数据包流入(即回复信息reply)情况</p>\n<h4 id=\"3-1-数据包流出-request-情况\"><a href=\"#3-1-数据包流出-request-情况\" class=\"headerlink\" title=\"3.1 数据包流出(request)情况\"></a>3.1 数据包流出(request)情况</h4><ul>\n<li><strong>容器网卡eth0.cap的流量流出走向</strong></li>\n</ul>\n<p><img src=\"../dockerImage/image-20210215230122269.png\" alt=\"image-20210215230122269\"></p>\n<ul>\n<li><strong>网桥docker0的流量流出走向</strong></li>\n</ul>\n<p><img src=\"../dockerImage/image-20210215230242488.png\" alt=\"image-20210215230242488\"></p>\n<ul>\n<li><strong>宿主机网卡ens33的流量流出走向</strong></li>\n</ul>\n<p><img src=\"../dockerImage/image-20210215230443133.png\" alt=\"image-20210215230443133\"></p>\n<h4 id=\"3-2-数据包流入-reply-情况\"><a href=\"#3-2-数据包流入-reply-情况\" class=\"headerlink\" title=\"3.2 数据包流入(reply)情况\"></a>3.2 数据包流入(reply)情况</h4><ul>\n<li><strong>宿主机网卡ens33.cap数据包流入：</strong></li>\n</ul>\n<p><img src=\"../dockerImage/image-20210215231639194.png\" alt=\"image-20210215231639194\"></p>\n<ul>\n<li><strong>网桥docker0.cap数据包流入：</strong></li>\n</ul>\n<p><img src=\"../dockerImage/image-20210215231850469.png\" alt=\"image-20210215231850469\"></p>\n<ul>\n<li><strong>容器网卡eth0.cap的流量流入：</strong></li>\n</ul>\n<p><img src=\"../dockerImage/image-20210215232001560.png\" alt=\"image-20210215232001560\"></p>\n<p>因此数据流量的走向如下图所示：</p>\n<p><img src=\"../dockerImage/image-20210215215133565.png\" alt=\"image-20210215215133565\"></p>\n<p>​        容器2在ping百度的时候，查询路由表，发现要达到百度需要通过目标地址为<code>0.0.0.0</code> 的路由，因此将数据包发送给容器2的网卡<code>eth0</code>，<code>eth0</code>将数据包发送到网桥<code>docker0</code>上的端口<code>veth1abfdc9</code>，此时，由于目标地址不是同网段，因此就不能直接广播了，就需要将数据包通过<code>docker0</code>转发出去，此时Linux的<code>iptables</code>规则就发挥作用了，首先通过<code>snat</code>规则将数据包传输到公网上，待百度服务器响应后，再将数据包传输给容器2的网卡，最后完成数据包的传递。</p>\n<h3 id=\"4-容器连接外网时的数据包走向–目标地址转换\"><a href=\"#4-容器连接外网时的数据包走向–目标地址转换\" class=\"headerlink\" title=\"4 容器连接外网时的数据包走向–目标地址转换\"></a>4 容器连接外网时的数据包走向–目标地址转换</h3><p><img src=\"../dockerImage/image-20210402103500231.png\" alt=\"image-20210402103500231\"></p>\n<p>​        启动一个CentOS7的容器，通过外网访问(SSH协议)该容器，查看访问过程.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker run -td -p 10.138.3.130:20022:22 --name Centos7-ssh f1cb7c7d58b7  /bin/bash</span></span><br><span class=\"line\">40c86bbddc3a9ab53ddd2742f29e5abc7b48796c37fad26b126706bf5d9857ea</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker ps</span> </span><br><span class=\"line\">CONTAINER ID   IMAGE          COMMAND       CREATED      STATUS          PORTS     NAMES</span><br><span class=\"line\">40c86bbddc3a f1cb7c7d58b7 &quot;/bin/bash&quot; 5 seconds ago Up 4 seconds  10.138.3.130:20022-&gt;22/tcp Centos7-ssh</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker port 40c86bbddc3a</span></span><br><span class=\"line\">22/tcp -&gt; 10.138.3.130:20022</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 进入容器并安装启动openssh服务</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker <span class=\"built_in\">exec</span> -it 40c86bbddc3a bash</span></span><br><span class=\"line\">[root@40c86bbddc3a ~]# yum -y install openssh*</span><br><span class=\"line\">[root@40c86bbddc3a init.d]# ./sshd start</span><br><span class=\"line\">[root@40c86bbddc3a ~]# netstat -lntp </span><br><span class=\"line\">Active Internet connections (only servers)</span><br><span class=\"line\">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class=\"line\">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      227/sshd            </span><br><span class=\"line\">tcp6       0      0 :::22                   :::*                    LISTEN      227/sshd </span><br><span class=\"line\"></span><br><span class=\"line\">[root@40c86bbddc3a ~]# echo &quot;root:root&quot; | chpasswd    # 给root用户设置密码为root</span><br></pre></td></tr></table></figure>\n\n<p>此时就可以通过xshell进行远程连接了</p>\n<p><img src=\"../dockerImage/image-20210216105143956.png\" alt=\"image-20210216105143956\"></p>\n<p>我们通过抓包，查看数据包流量走向</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 容器的数据包</span></span><br><span class=\"line\">[root@40c86bbddc3a ~]# tcpdump -i eth0 -w eth0.cap</span><br><span class=\"line\">tcpdump: listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class=\"line\">^C36 packets captured</span><br><span class=\"line\">36 packets received by filter</span><br><span class=\"line\">0 packets dropped by kernel</span><br><span class=\"line\">[root@40c86bbddc3a ~]# ll </span><br><span class=\"line\">total 12</span><br><span class=\"line\">-rw------- 1 root    root    3322 Dec  4  2018 anaconda-ks.cfg</span><br><span class=\"line\">-rw-r--r-- 1 tcpdump tcpdump 7988 Feb 16 02:56 eth0.cap</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 宿主机上docker0的数据包</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> tcpdump -i docker0 -w docker0.cap</span></span><br><span class=\"line\">tcpdump: listening on docker0, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class=\"line\">^C40 packets captured</span><br><span class=\"line\">40 packets received by filter</span><br><span class=\"line\">0 packets dropped by kernel</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 宿主机上ens33的数据包</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> tcpdump -i ens33 -w ens33.cap</span></span><br><span class=\"line\">tcpdump: listening on ens33, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class=\"line\">^C74 packets captured</span><br><span class=\"line\">76 packets received by filter</span><br><span class=\"line\">0 packets dropped by kernel</span><br></pre></td></tr></table></figure>\n\n<p>将容器和宿主机上的数据包传输到pc上通过Wireshark打开</p>\n<ul>\n<li><strong>宿主机网卡enss33的抓包信息ens33.cap</strong></li>\n</ul>\n<p><img src=\"../dockerImage/image-20210216110825122.png\" alt=\"image-20210216110825122\"></p>\n<ul>\n<li><strong>网桥docker0的抓包信息docker0.cap</strong></li>\n</ul>\n<p><img src=\"../dockerImage/image-20210216111142142.png\" alt=\"image-20210216111142142\"></p>\n<ul>\n<li>容器网卡eth0的抓包信息eth0.cap</li>\n</ul>\n<p><img src=\"../dockerImage/image-20210216111332412.png\" alt=\"image-20210216111332412\"></p>\n<p>通过上述抓包可以知道，ens33到docker0之间进行了目标地址和端口转换，流程图如下所示：</p>\n<p><img src=\"../dockerImage/image-20210216112509074.png\" alt=\"image-20210216112509074\"></p>\n<p>此时docker主机上的iptables规则如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> iptables-save</span> </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Generated by iptables-save v1.4.21 on Tue Feb 16 11:25:21 2021</span></span><br><span class=\"line\">*nat</span><br><span class=\"line\">:PREROUTING ACCEPT [119:7629]</span><br><span class=\"line\">:INPUT ACCEPT [21:1394]</span><br><span class=\"line\">:OUTPUT ACCEPT [4:267]</span><br><span class=\"line\">:POSTROUTING ACCEPT [9:527]</span><br><span class=\"line\">:DOCKER - [0:0]</span><br><span class=\"line\">-A PREROUTING -m addrtype --dst-type LOCAL -j DOCKER</span><br><span class=\"line\">-A OUTPUT ! -d 127.0.0.0/8 -m addrtype --dst-type LOCAL -j DOCKER</span><br><span class=\"line\">-A POSTROUTING -s 172.17.0.0/16 ! -o docker0 -j MASQUERADE</span><br><span class=\"line\">-A POSTROUTING -s 172.17.0.2/32 -d 172.17.0.2/32 -p tcp -m tcp --dport 22 -j MASQUERADE</span><br><span class=\"line\">-A DOCKER -i docker0 -j RETURN</span><br><span class=\"line\">-A DOCKER -d 10.138.3.130/32 ! -i docker0 -p tcp -m tcp --dport 20022 -j DNAT --to-destination 172.17.0.2:22</span><br><span class=\"line\">COMMIT</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Completed on Tue Feb 16 11:25:21 2021</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Generated by iptables-save v1.4.21 on Tue Feb 16 11:25:21 2021</span></span><br><span class=\"line\">*filter</span><br><span class=\"line\">:INPUT ACCEPT [2761:180272]</span><br><span class=\"line\">:FORWARD DROP [0:0]</span><br><span class=\"line\">:OUTPUT ACCEPT [2414:539236]</span><br><span class=\"line\">:DOCKER - [0:0]</span><br><span class=\"line\">:DOCKER-ISOLATION-STAGE-1 - [0:0]</span><br><span class=\"line\">:DOCKER-ISOLATION-STAGE-2 - [0:0]</span><br><span class=\"line\">:DOCKER-USER - [0:0]</span><br><span class=\"line\">-A FORWARD -j DOCKER-USER</span><br><span class=\"line\">-A FORWARD -j DOCKER-ISOLATION-STAGE-1</span><br><span class=\"line\">-A FORWARD -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT</span><br><span class=\"line\">-A FORWARD -o docker0 -j DOCKER</span><br><span class=\"line\">-A FORWARD -i docker0 ! -o docker0 -j ACCEPT</span><br><span class=\"line\">-A FORWARD -i docker0 -o docker0 -j ACCEPT</span><br><span class=\"line\">-A DOCKER -d 172.17.0.2/32 ! -i docker0 -o docker0 -p tcp -m tcp --dport 22 -j ACCEPT</span><br><span class=\"line\">-A DOCKER-ISOLATION-STAGE-1 -i docker0 ! -o docker0 -j DOCKER-ISOLATION-STAGE-2</span><br><span class=\"line\">-A DOCKER-ISOLATION-STAGE-1 -j RETURN</span><br><span class=\"line\">-A DOCKER-ISOLATION-STAGE-2 -o docker0 -j DROP</span><br><span class=\"line\">-A DOCKER-ISOLATION-STAGE-2 -j RETURN</span><br><span class=\"line\">-A DOCKER-USER -j RETURN</span><br><span class=\"line\">COMMIT</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Completed on Tue Feb 16 11:25:21 2021</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>解析DNAT规则：-A DOCKER -d 10.138.3.130/32 ! -i docker0 -p tcp -m tcp –dport 20022 -j DNAT –to-destination 172.17.0.2:22，意思是源地址是10.138.3.130，目标端口是20022，并且不是发送给docker0的数据包(在系统看来docker0和ens33是同一个网卡)，通过DNAT转换，将数据包发送给172.17.0.2的22号端口</p>\n</blockquote>\n<img src=\"../dockerImage/image-20210402104606695.png\" alt=\"image-20210402104606695\" style=\"zoom:67%;\" />\n","comments":true,"permalink":"https://qingdalf.github.io/2021-05/dockerNetAdvance/","categories":[{"name":"kubernets","slug":"kubernets","permalink":"https://qingdalf.github.io/categories/kubernets/"}],"tags":[]},{"title":"docker容器四种网络模式","date":"2021-05-03T12:01:50.000Z","path":"2021-05/dockerNetwork/","content":"<h3 id=\"1-四类网络模式\"><a href=\"#1-四类网络模式\" class=\"headerlink\" title=\"1 四类网络模式\"></a>1 四类网络模式</h3><table>\n<thead>\n<tr>\n<th>Docker网络模式</th>\n<th>配置</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>host模式(开放式容器)</td>\n<td>–net=host</td>\n<td>容器和宿主机共享Network namespace。</td>\n</tr>\n<tr>\n<td>container模式(联盟式容器)</td>\n<td>–net=container:NAME_or_ID</td>\n<td>容器和另外一个容器共享Network namespace，使用同一块网卡，各容器相互间可以使用lo进行同信。 kubernetes中的pod就是多个容器共享一个Network namespace。</td>\n</tr>\n<tr>\n<td>none模式(封闭式容器)</td>\n<td>–net=none</td>\n<td>容器有独立的Network namespace，但并没有对其进行任何网络设置，如分配veth pair和网桥连接，配置IP等，即网络孤岛，没有网络流量进出。</td>\n</tr>\n<tr>\n<td>bridge模式(桥接式容器)</td>\n<td>–net=bridge</td>\n<td>拥有一个lo回环网卡和私有网络接口，默认模式</td>\n</tr>\n</tbody></table>\n<span id=\"more\"></span>\n<h4 id=\"1-1-host模式\"><a href=\"#1-1-host模式\" class=\"headerlink\" title=\"1.1 host模式\"></a>1.1 host模式</h4><p>​        如果启动容器的时候使用<strong>host模式</strong>，那么这个容器将不会获得一个独立的Network Namespace，而是<strong>和宿主机共用一个Network Namespace</strong>。容器将不会虚拟出自己的网卡，配置自己的IP等，而是<strong>使用宿主机的IP、端口和主机名等</strong>。但是，容器的其他方面，如文件系统、进程列表等还是和宿主机隔离的。</p>\n<p>​        使用host模式的容器可以直接使用宿主机的IP地址与外界通信，容器内部的服务端口也可以使用宿主机的端口，不需要进行NAT，<strong>host最大的优势就是网络性能比较好，但是docker host上已经使用的端口就不能再用了，网络的隔离性不好</strong>。</p>\n<p>Host模式如下图所示：</p>\n<img src=\"../dockerImage/image-20200717140502390.png\" alt=\"image-20200717140502390\" style=\"zoom:67%;\" />\n\n<center>Host模式</center>\n\n<p>我们以host模式启动一个容器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker image ls</span> </span><br><span class=\"line\">REPOSITORY     TAG       IMAGE ID        CREATED       SIZE</span><br><span class=\"line\">scaven/nginx   1.2       0901fa9da894    6 days ago    132MB</span><br><span class=\"line\">ubuntu         15.10     9b9cb95443b5    3 years ago   137MB</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker  run -d -it --name web_n1 --net=host 0901fa9da894</span></span><br><span class=\"line\">06b4c8ad24f39b5e5ca1595b66eaf2227eb4fb994460f5697fa35d876fae5576</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 容器内部跟宿主机很像，可以通过敲docker命令区分，宿主机有该命令，容器无该命令</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 宿主机的当前目录为/root--&gt;[root@docker ~]<span class=\"comment\">#，而容器的当前目录是/--&gt;[root@docker /]#</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker container inspect 06b4c8ad24f3</span></span><br><span class=\"line\">····</span><br><span class=\"line\">            &quot;Networks&quot;: &#123;</span><br><span class=\"line\">                &quot;host&quot;: &#123;</span><br><span class=\"line\">                    &quot;IPAMConfig&quot;: null,</span><br><span class=\"line\">                    &quot;Links&quot;: null,</span><br><span class=\"line\">                    &quot;Aliases&quot;: null,</span><br><span class=\"line\">                    &quot;NetworkID&quot;: &quot;86c30ec766859f24472ff5508cf08cbd5924a38b954e823f4e46da6c41fb2cb8&quot;,</span><br><span class=\"line\">                    &quot;EndpointID&quot;: &quot;d21e11627b5a1bd4a7e96ba8c0b4bcbd01aa1fce8517742464e6e96545a019bc&quot;,</span><br><span class=\"line\">                    &quot;Gateway&quot;: &quot;&quot;,    # 未显示网关地址</span><br><span class=\"line\">                    &quot;IPAddress&quot;: &quot;&quot;,  # 未显示IP地址</span><br><span class=\"line\">                    &quot;IPPrefixLen&quot;: 0,</span><br><span class=\"line\">                    &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class=\"line\">                    &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class=\"line\">                    &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class=\"line\">                    &quot;MacAddress&quot;: &quot;&quot;,</span><br><span class=\"line\">                    &quot;DriverOpts&quot;: null</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker port 06b4c8ad24f3  <span class=\"comment\"># 没有端口映射，即容器将使用宿主机的端口</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看物理机本地端口使用情况</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> netstat  -lntp   <span class=\"comment\"># 本地的80端口被使用，如下</span></span></span><br><span class=\"line\">Active Internet connections (only servers)</span><br><span class=\"line\">Proto Recv-Q Send-Q Local Address  Foreign Address  State    PID/Program name </span><br><span class=\"line\">tcp      0      0   0.0.0.0:80     0.0.0.0:*        LISTEN   19590/nginx: master # 占用宿主机端口80</span><br><span class=\"line\">tcp      0      0   127.0.0.1:25   0.0.0.0:*        LISTEN   9446/master         </span><br><span class=\"line\">tcp      0      0  0.0.0.0:10022   0.0.0.0:*        LISTEN   9191/sshd           </span><br><span class=\"line\">tcp6     0      0  :::80           :::*             LISTEN   19590/nginx: master </span><br><span class=\"line\">tcp6     0      0  ::1:25          :::*             LISTEN   9446/master         </span><br><span class=\"line\">tcp6     0      0  :::10022        :::*             LISTEN   9191/sshd </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ip a  <span class=\"comment\"># 此处没有多出容器的IP地址，若此时进入容器06b4c8ad24f3内，看到的信息跟此处的信息一样</span></span></span><br><span class=\"line\">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class=\"line\">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class=\"line\">    inet 127.0.0.1/8 scope host lo</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 ::1/128 scope host </span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class=\"line\">    link/ether 00:0c:29:64:2a:59 brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 10.138.3.15/24 brd 10.138.3.255 scope global noprefixroute ens33</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 fe80::b6e4:fced:d3d3:35ee/64 scope link noprefixroute </span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">3: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default </span><br><span class=\"line\">    link/ether 02:42:36:01:0b:3f brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 进入容器查看ip a的输出</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">  ip a  <span class=\"comment\"># 跟在宿主机里面执行ip a得到的结果一样</span></span></span><br><span class=\"line\">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class=\"line\">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class=\"line\">    inet 127.0.0.1/8 scope host lo</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 ::1/128 scope host </span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class=\"line\">    link/ether 00:0c:29:64:2a:59 brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 10.138.3.15/24 brd 10.138.3.255 scope global noprefixroute ens33</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 fe80::b6e4:fced:d3d3:35ee/64 scope link noprefixroute </span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">3: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default </span><br><span class=\"line\">    link/ether 02:42:36:01:0b:3f brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 我们直接访问nginx</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> curl -I 10.138.3.15:80  <span class=\"comment\"># 使用宿主机IP地址和端口访问nginx</span></span></span><br><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">Server: nginx/1.19.1</span><br><span class=\"line\">Date: Fri, 17 Jul 2020 06:18:20 GMT</span><br><span class=\"line\">Content-Type: text/html</span><br><span class=\"line\">Content-Length: 612</span><br><span class=\"line\">Last-Modified: Tue, 07 Jul 2020 15:52:25 GMT</span><br><span class=\"line\">Connection: keep-alive</span><br><span class=\"line\">ETag: &quot;5f049a39-264&quot;</span><br><span class=\"line\">Accept-Ranges: bytes</span><br></pre></td></tr></table></figure>\n\n<p>下面，我们通过浏览器直接访问nginx访问：</p>\n<p><img src=\"../dockerImage/image-20200717142321013.png\" alt=\"image-20200717142321013\"></p>\n<h4 id=\"1-2-container模式\"><a href=\"#1-2-container模式\" class=\"headerlink\" title=\"1.2 container模式\"></a>1.2 container模式</h4><p>​        <strong>这个模式指定新创建的容器和已经存在的一个容器共享一个 <code>Network Namespace</code>，而不是和宿主机共享</strong>。<strong>新创建的容器不会创建自己的网卡，配置自己的 IP，而是和一个指定的容器共享 IP、主机名、端口范围等</strong>。同样，两个容器除了网络方面，其他的如文件系统、进程列表等还是隔离的。<strong>两个容器的进程可以通过 lo 网卡设备通信</strong>。</p>\n<p>Container模式示意图：</p>\n<img src=\"../dockerImage/image-20200717142956583.png\" alt=\"image-20200717142956583\" style=\"zoom:67%;\" />\n\n<center>Container网络模式</center>\n\n<p>案例展示：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker run -it --name centos7.6 --net=container:web_n1 f1cb7c7d58b7</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ip a    <span class=\"comment\"># 请注意，这里我们已经进入了容器内，工作目录发生了变化</span></span></span><br><span class=\"line\">bash: ip: command not found</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ifconfig</span>    </span><br><span class=\"line\">bash: ifconfig: command not found</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 由于查看不到IP地址，因此我们先安装软件包</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum -y install net-tools</span>  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ifconfig   <span class=\"comment\"># 由下可知，使用的仍然是主机的网络名称空间</span></span></span><br><span class=\"line\">docker0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500</span><br><span class=\"line\">        inet 172.17.0.1  netmask 255.255.0.0  broadcast 172.17.255.255</span><br><span class=\"line\">        ether 02:42:36:01:0b:3f  txqueuelen 0  (Ethernet)</span><br><span class=\"line\">        RX packets 0  bytes 0 (0.0 B)A</span><br><span class=\"line\">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class=\"line\">        TX packets 0  bytes 0 (0.0 B)</span><br><span class=\"line\">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class=\"line\"></span><br><span class=\"line\">ens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class=\"line\">        inet 10.138.3.15  netmask 255.255.255.0  broadcast 10.138.3.255</span><br><span class=\"line\">        inet6 fe80::b6e4:fced:d3d3:35ee  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class=\"line\">        ether 00:0c:29:64:2a:59  txqueuelen 1000  (Ethernet)</span><br><span class=\"line\">        RX packets 171689  bytes 239863139 (228.7 MiB)</span><br><span class=\"line\">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class=\"line\">        TX packets 44482  bytes 3775713 (3.6 MiB)</span><br><span class=\"line\">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class=\"line\"></span><br><span class=\"line\">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class=\"line\">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class=\"line\">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class=\"line\">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class=\"line\">        RX packets 20  bytes 1700 (1.6 KiB)</span><br><span class=\"line\">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class=\"line\">        TX packets 20  bytes 1700 (1.6 KiB)</span><br><span class=\"line\">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure>\n\n<p>​        宿主机网络和centos7.6容器网络截图比较如下(容器web_n1由于只有nginx的最小运行环境，因此没有yum命令，也没有网络相关命令，因此此处就直接跟宿主机网络做比较了)：</p>\n<p><img src=\"../dockerImage/image-20200717145845698.png\" alt=\"image-20200717145845698\"></p>\n<h4 id=\"1-3-none模式\"><a href=\"#1-3-none模式\" class=\"headerlink\" title=\"1.3 none模式\"></a>1.3 none模式</h4><p>​        使用none模式，Docker容器拥有自己的Network Namespace，但是，并不为Docker容器进行任何网络配置。也就是说，这个Docker容器没有网卡、IP、路由等信息。需要我们自己为Docker容器添加网卡、配置IP等。</p>\n<p>​        <strong>这种网络模式下容器只有lo回环网络，没有其他网卡</strong>。none模式可以在容器创建时通过<code>--network=none</code>来指定。<strong>这种类型的网络没有办法联网，封闭的网络能很好的保证容器的安全性，因此常用于不需要网络的情况下</strong>。</p>\n<p>None模式示意图:</p>\n<p><img src=\"../dockerImage/image-20200717151140261.png\" alt=\"image-20200717151140261\"></p>\n<center>None网络模式</center>\n\n<h4 id=\"1-4-bridge模式-默认模式\"><a href=\"#1-4-bridge模式-默认模式\" class=\"headerlink\" title=\"1.4 bridge模式(默认模式)\"></a>1.4 bridge模式(默认模式)</h4><p>​        当Docker进程启动时，会在主机上创建一个名为docker0的虚拟网桥，此主机上启动的Docker容器会连接到这个虚拟网桥上。虚拟网桥的工作方式和物理交换机类似，这样主机上的所有容器就通过交换机连在了一个二层网络中。</p>\n<p>​        <strong>从docker0子网中分配一个IP给容器使用，并设置docker0的IP地址为容器的默认网关。在主机上创建一对虚拟网卡veth pair设备，Docker将veth pair设备的一端放在新创建的容器中，并命名为eth0（容器的网卡），另一端放在主机中，以vethxxx这样类似的名字命名，并将这个网络设备加入到docker0网桥中。可以通过brctl show命令查看</strong>。</p>\n<p>​       <strong>bridge模式是docker的默认网络模式</strong>，不写–net参数，就是bridge模式。使用<code>docker run -p</code>时，docker实际是在iptables做了DNAT规则，实现端口转发功能。可以使用<code>iptables -t nat -vnL</code>查看。</p>\n<p>bridge模式如下图所示：</p>\n<img src=\"../dockerImage/image-20200717152228588.png\" alt=\"image-20200717152228588\" style=\"zoom:67%;\" />\n\n<center>Docker的网络实现</center>\n\n<p>案例展示：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker container rm `docker container ls -a -q`  <span class=\"comment\"># 删除本地服务器上的所有容器</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 启动桥接式容器前宿主机上的网络信息如下</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ip a</span></span><br><span class=\"line\">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class=\"line\">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class=\"line\">    inet 127.0.0.1/8 scope host lo</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 ::1/128 scope host </span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class=\"line\">    link/ether 00:0c:29:64:2a:59 brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 10.138.3.15/24 brd 10.138.3.255 scope global noprefixroute ens33</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 fe80::b6e4:fced:d3d3:35ee/64 scope link noprefixroute </span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">3: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default </span><br><span class=\"line\">    link/ether 02:42:36:01:0b:3f brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 以默认网络模式启动容器</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker run -d  --name web_n1 0901fa9da894</span>  </span><br><span class=\"line\">fd963117694015a936e5cb3068b99642460c000f01e0a69b2715af5995700c1d</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 以默认网络模式启动容器后，物理机上会多出一个网卡</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ip a</span></span><br><span class=\"line\">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class=\"line\">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class=\"line\">    inet 127.0.0.1/8 scope host lo</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 ::1/128 scope host </span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class=\"line\">    link/ether 00:0c:29:64:2a:59 brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 10.138.3.15/24 brd 10.138.3.255 scope global noprefixroute ens33</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 fe80::b6e4:fced:d3d3:35ee/64 scope link noprefixroute </span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">3: docker0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default </span><br><span class=\"line\">    link/ether 02:42:36:01:0b:3f brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 fe80::42:36ff:fe01:b3f/64 scope link </span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">7: vethadf4fe6@if6: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP group default </span><br><span class=\"line\">    link/ether ba:76:a8:62:25:f5 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class=\"line\">    inet6 fe80::b876:a8ff:fe62:25f5/64 scope link </span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 此时容器对外网络是连通的，宿主机以外的外部网络不能访问容器，除非暴露端口，该宿主机上的容器可以相互访问</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ping 127.17.0.2</span></span><br><span class=\"line\">PING 127.17.0.2 (127.17.0.2) 56(84) bytes of data.</span><br><span class=\"line\">64 bytes from 127.17.0.2: icmp_seq=1 ttl=64 time=0.033 ms</span><br><span class=\"line\">64 bytes from 127.17.0.2: icmp_seq=2 ttl=64 time=0.055 ms</span><br><span class=\"line\">^C</span><br><span class=\"line\">--- 127.17.0.2 ping statistics ---</span><br><span class=\"line\">2 packets transmitted, 2 received, 0% packet loss, time 1001ms</span><br><span class=\"line\">rtt min/avg/max/mdev = 0.033/0.044/0.055/0.011 ms</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> iptables -t nat -vnL</span></span><br><span class=\"line\">Chain PREROUTING (policy ACCEPT 47 packets, 6015 bytes)</span><br><span class=\"line\"> pkts bytes target     prot opt in     out     source          destination         </span><br><span class=\"line\">    9   468 DOCKER     all  --  *      *       0.0.0.0/0       0.0.0.0/0      ADDRTYPE match dst-type LOCAL</span><br><span class=\"line\"></span><br><span class=\"line\">Chain INPUT (policy ACCEPT 47 packets, 6015 bytes)</span><br><span class=\"line\"> pkts bytes target     prot opt in     out     source               destination   </span><br><span class=\"line\"></span><br><span class=\"line\">Chain OUTPUT (policy ACCEPT 84 packets, 5287 bytes)</span><br><span class=\"line\"> pkts bytes target     prot opt in     out     source         destination         </span><br><span class=\"line\">    2   120 DOCKER     all  --  *      *       0.0.0.0/0      !127.0.0.0/8   ADDRTYPE match dst-type LOCAL</span><br><span class=\"line\"></span><br><span class=\"line\">Chain POSTROUTING (policy ACCEPT 84 packets, 5287 bytes)  # 该命令展示结果如下图所示</span><br><span class=\"line\"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class=\"line\">    0     0 MASQUERADE  all  --  *      !docker0  172.17.0.0/16        0.0.0.0/0   </span><br><span class=\"line\"></span><br><span class=\"line\">Chain DOCKER (2 references)</span><br><span class=\"line\"> pkts bytes target     prot opt in     out     source               destination   </span><br><span class=\"line\">    0     0 RETURN     all  --  docker0 *       0.0.0.0/0            0.0.0.0/0    </span><br></pre></td></tr></table></figure>\n\n<p>​       上文iptables转发如下图所示：</p>\n <img src=\"../dockerImage/image-20200717164244473.png\" alt=\"image-20200717164244473\" style=\"zoom:67%;\" />\n\n<ul>\n<li>外网如何访问容器？通过端口映射以及选项指定映射端口</li>\n<li>外网访问容器用到了<code>docker-proxy</code>和<code>iptables DNAT </code>宿主机访问本机容器使用的是<code>iptables DNAT</code>外部主机访问容器或容器之间的访问是<code>docker-proxy</code>实现</li>\n</ul>\n<h3 id=\"2-桥接模式下暴露端口\"><a href=\"#2-桥接模式下暴露端口\" class=\"headerlink\" title=\"2 桥接模式下暴露端口\"></a>2 桥接模式下暴露端口</h3><p><code>docker run [-p/-P]</code> ：为容器暴露的所有端口进行映射。</p>\n<p>-P：<strong>将容器内部开放的网络端口随机映射到宿主机的一个端口上</strong>。</p>\n<p>-p：<strong>指定要映射的端口，可以指定宿主机上的端口，容器的端口或两者都指定</strong>。</p>\n<p>有四种方式：</p>\n<ul>\n<li><strong>ContainerPort</strong><br><code>docker run -p 80 -i -t IMAGE /bin/bash</code><br>指定容器端口，宿主机端口随机映射</li>\n<li><strong>hostPort:Container:Port</strong><br><code>docker run -p 8080:80 -i -t IMAGE /bin/bash</code><br>同时指定宿主机和容器的端口</li>\n<li><strong>ip::containerPort</strong><br><code>docker run -p 0.0.0.0:80 -i -t IMAGE /bin/bash</code></li>\n<li><strong>ip:hostPort:containerPort</strong><br><code>docker run -p 0.0.0.0:8080:80 -i -t IMAGE /bin/bash</code><br>指定ip，宿主机端口，容器的端口</li>\n</ul>\n<h4 id=\"2-1-暴露随机端口\"><a href=\"#2-1-暴露随机端口\" class=\"headerlink\" title=\"2.1 暴露随机端口\"></a>2.1 暴露随机端口</h4><ul>\n<li>-P的使用方法：将容器内开放的端口随机映射到宿主机的高位端口上，通过访问宿主机的该端口就能访问到容器中的相应的服务。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker images</span></span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">scaven/nginx        1.2                 0901fa9da894        6 days ago          132MB</span><br><span class=\"line\">centos              centos7.6.1810      f1cb7c7d58b7        16 months ago       202MB</span><br><span class=\"line\">ubuntu              15.10               9b9cb95443b5        3 years ago         137MB</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker run -d -P --name web01  0901fa9da894   <span class=\"comment\"># 启动容器</span></span></span><br><span class=\"line\">3f1cbb448709d5d7a22e56c5b505ca1fcce972e7daf14e33a23a58125ae7bb18</span><br></pre></td></tr></table></figure>\n\n<p>此时查看防火墙转发规则如下：</p>\n<p><img src=\"../dockerImage/image-20200717173433753.png\" alt=\"image-20200717173433753\"></p>\n<p>由于已经暴露了端口，因此可以进行远程访问nginx服务：</p>\n<p><img src=\"../dockerImage/image-20200717173637134.png\" alt=\"image-20200717173637134\"></p>\n<ul>\n<li>-p：使用<code>-p 容器端口</code>进行随机端口映射</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker run -d -p 80 --name web03  0901fa9da894</span></span><br><span class=\"line\">6cdfd996b45cdddf670666f0697db57b500cbfa189646ab4910cdf485bf826e2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker port 6cdfd996b45c</span></span><br><span class=\"line\">80/tcp -&gt; 0.0.0.0:32769</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> iptables -t nat -vnL</span></span><br></pre></td></tr></table></figure>\n\n<p>此时查看防火墙转发规则如下：</p>\n<p><img src=\"../dockerImage/image-20200717174757495.png\" alt=\"image-20200717174757495\"></p>\n<p>主机上端口的使用情况：</p>\n<p><img src=\"../dockerImage/image-20200717175052992.png\" alt=\"image-20200717175052992\"></p>\n<ul>\n<li>-p：使用<code>-p ip::容器端口</code>进行随机端口映射</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker run -d -p 127.0.0.1::80 --name web04  0901fa9da894</span></span><br><span class=\"line\">5a1d7105ef29a9ad9e4b31e05f2487427564beed1de185f378ad3223c53eeff9</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker port 5a1d7105ef29</span></span><br><span class=\"line\">80/tcp -&gt; 127.0.0.1:32770</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> iptables -t nat -vnL</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 由于是暴露了127.0.0.1:32700端口，因此只能本机访问</span></span><br></pre></td></tr></table></figure>\n\n<p>此时查看防火墙转发规则和主机端口映射情况如下：</p>\n<p><img src=\"../dockerImage/image-20200717175511320.png\" alt=\"image-20200717175511320\"></p>\n<h4 id=\"2-2-暴露指定端口\"><a href=\"#2-2-暴露指定端口\" class=\"headerlink\" title=\"2.2 暴露指定端口\"></a>2.2 暴露指定端口</h4><ul>\n<li>-p：使用<code>-p 宿主机端口:容器端口</code>进行指定端口映射</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker run -d -p 8080:80 --name web02  0901fa9da894</span></span><br><span class=\"line\">3a51900386cb2962e8bc52ba19e64fe8554bd29965b00170c426cfe87b6eab07</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker port 3a51900386cb</span></span><br><span class=\"line\">80/tcp -&gt; 0.0.0.0:8080</span><br></pre></td></tr></table></figure>\n\n<p>端口映射情况如下图所示：</p>\n<p><img src=\"../dockerImage/image-20200717174102237.png\" alt=\"image-20200717174102237\"></p>\n<p>主机上端口的使用情况：</p>\n<p><img src=\"../dockerImage/image-20200717174304064.png\" alt=\"image-20200717174304064\"></p>\n<ul>\n<li>p：使用<code>-p 宿主机IP:宿主机端口:容器端口</code>进行指定端口映射</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker run -d -p 10.138.3.15:9999:80 --name web06  0901fa9da894</span></span><br><span class=\"line\">95b7279dbe9d046b98e59c37ba222c76b727842c71bcb75b9dfca78f2852cd2f</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker port 95b7279dbe9d</span></span><br><span class=\"line\">80/tcp -&gt; 10.138.3.15:9999</span><br></pre></td></tr></table></figure>\n\n<p>防火墙转发规则如下：</p>\n<p><img src=\"../dockerImage/image-20200717180410967.png\" alt=\"image-20200717180410967\"></p>\n<p>外部访问：</p>\n<p><img src=\"../dockerImage/image-20200717180202403.png\" alt=\"image-20200717180202403\"></p>\n<h3 id=\"4-3-跨主机间的docker网络–macvlan\"><a href=\"#4-3-跨主机间的docker网络–macvlan\" class=\"headerlink\" title=\"4.3 跨主机间的docker网络–macvlan\"></a>4.3 跨主机间的docker网络–macvlan</h3><p>​        macvlan可以实现两台主机上的容器相互访问，做法是在两台宿主机上都新建macvlan类型的网络，macvlan等同于将在两台宿主机之间新建了一个用于容器通信的交换机。</p>\n<p>步骤： </p>\n<ul>\n<li>新建网络类型</li>\n<li>创建新容器时指定该类型的网络</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 在两台宿主机上分别执行以下的命令</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker network create --driver macvlan --subnet=10.0.0.0/24 --gateway=10.0.0.254 -o parent=ens33 macvlan_1</span></span><br><span class=\"line\">4e2b6de803cc06d2cbed2823f46175c6f2fd82fd758e0fb862872359a6e17420</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker network create --driver macvlan --subnet=10.0.0.0/24 --gateway=10.0.0.254 -o parent=ens33 macvlan_1</span></span><br><span class=\"line\">c44710c51f5fb2abdeec89920df103b4aac71b5986ca478e9d118818d09f614f</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 新建成功后，可以看到多了一个网络类型</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker network ls</span></span><br><span class=\"line\">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class=\"line\">b7becea03c6a        bridge              bridge              local</span><br><span class=\"line\">86c30ec76685        host                host                local</span><br><span class=\"line\">c44710c51f5f        macvlan_1           macvlan             local</span><br><span class=\"line\">c2385d5ccbf9        none                null                local</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 新建容器</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker run -it --network macvlan_1 centos:centos6.10 /bin/bash</span></span><br><span class=\"line\">[root@4017011864b7 /]# ifconfig </span><br><span class=\"line\">eth0      Link encap:Ethernet  HWaddr 02:42:0A:00:00:01  </span><br><span class=\"line\">          inet addr:10.0.0.1  Bcast:10.0.0.255  Mask:255.255.255.0</span><br><span class=\"line\">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class=\"line\">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class=\"line\">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class=\"line\">          collisions:0 txqueuelen:0 </span><br><span class=\"line\">          RX bytes:0 (0.0 b)  TX bytes:0 (0.0 b)</span><br><span class=\"line\"></span><br><span class=\"line\">lo        Link encap:Local Loopback  </span><br><span class=\"line\">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class=\"line\">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class=\"line\">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class=\"line\">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class=\"line\">          collisions:0 txqueuelen:1000 </span><br><span class=\"line\">          RX bytes:0 (0.0 b)  TX bytes:0 (0.0 b)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 在另一台主机上新建容器</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker run -it --network macvlan_1 centos:centos6.10 /bin/bash</span></span><br><span class=\"line\">[root@f1486558f4e7 /]# ifconfig </span><br><span class=\"line\">eth0      Link encap:Ethernet  HWaddr 02:42:0A:00:00:01  </span><br><span class=\"line\">          inet addr:10.0.0.1  Bcast:10.0.0.255  Mask:255.255.255.0</span><br><span class=\"line\">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class=\"line\">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class=\"line\">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class=\"line\">          collisions:0 txqueuelen:0 </span><br><span class=\"line\">          RX bytes:0 (0.0 b)  TX bytes:0 (0.0 b)</span><br><span class=\"line\"></span><br><span class=\"line\">lo        Link encap:Local Loopback  </span><br><span class=\"line\">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class=\"line\">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class=\"line\">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class=\"line\">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class=\"line\">          collisions:0 txqueuelen:1000 </span><br><span class=\"line\">          RX bytes:0 (0.0 b)  TX bytes:0 (0.0 b)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>​        此时，我们可以看到，如果不手动指定容器的IP地址，将都分配10.0.0.1的IP地址(没有统一的网络管理，需人工手动指定IP地址，因此使用较少)，因此下面我们在启动容器时，指定容器的IPi地址</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 启动容器时通过--ip=xx.xx.xx.xx指定IP地址</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker run -it --network macvlan_1 --ip=10.0.0.11 centos:centos6.10 /bin/bash</span></span><br><span class=\"line\">[root@e74abdd244aa /]# ifconfig </span><br><span class=\"line\">eth0      Link encap:Ethernet  HWaddr 02:42:0A:00:00:0B  </span><br><span class=\"line\">          inet addr:10.0.0.11  Bcast:10.0.0.255  Mask:255.255.255.0</span><br><span class=\"line\">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class=\"line\">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class=\"line\">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class=\"line\">          collisions:0 txqueuelen:0 </span><br><span class=\"line\">          RX bytes:0 (0.0 b)  TX bytes:0 (0.0 b)</span><br><span class=\"line\"></span><br><span class=\"line\">lo        Link encap:Local Loopback  </span><br><span class=\"line\">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class=\"line\">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class=\"line\">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class=\"line\">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class=\"line\">          collisions:0 txqueuelen:1000 </span><br><span class=\"line\">          RX bytes:0 (0.0 b)  TX bytes:0 (0.0 b)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 下面启动一个centos7.6的镜像，7.6有ping命令，可以用于测试网络</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker run -it --network macvlan_1 --ip=10.0.0.12 centos:centos7.6.1810 /bin/bash</span>       </span><br><span class=\"line\">[root@9ce61bc01548 /]# ping 10.0.0.11  # 可以ping通另一台主机上的容器</span><br><span class=\"line\">PING 10.0.0.11 (10.0.0.11) 56(84) bytes of data.</span><br><span class=\"line\">64 bytes from 10.0.0.11: icmp_seq=1 ttl=64 time=0.178 ms</span><br><span class=\"line\">64 bytes from 10.0.0.11: icmp_seq=2 ttl=64 time=0.090 ms</span><br><span class=\"line\">^C</span><br><span class=\"line\">--- 10.0.0.11 ping statistics ---</span><br><span class=\"line\">2 packets transmitted, 2 received, 0% packet loss, time 1001ms</span><br><span class=\"line\">rtt min/avg/max/mdev = 0.090/0.134/0.178/0.044 ms</span><br><span class=\"line\">[root@9ce61bc01548 /]# ping baidu.com  # 不能访问外网</span><br><span class=\"line\">ping: baidu.com: Name or service not known</span><br><span class=\"line\"></span><br><span class=\"line\">[root@9ce61bc01548 /]# ping 10.138.3.13  # 不能访问宿主机</span><br><span class=\"line\">PING 10.138.3.13 (10.138.3.13) 56(84) bytes of data.</span><br><span class=\"line\">From 10.0.0.12 icmp_seq=1 Destination Host Unreachable</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-4-docker容器的一般性管理\"><a href=\"#4-4-docker容器的一般性管理\" class=\"headerlink\" title=\"4.4 docker容器的一般性管理\"></a>4.4 docker容器的一般性管理</h3><p>​        docker容器由于只有程序运行的最小环境，因此我们进入容器后，很难使用管理命令进行查询(命令未安装)，因此，一般情况下我们对容器的管理都是在宿主机上直接管理，而不是进入容器内。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker ps  <span class=\"comment\"># 查看主机上的容器进程</span></span></span><br><span class=\"line\">CONTAINER ID    IMAGE     COMMAND      CREATED       STATUS        PORTS               NAMES</span><br><span class=\"line\">95b7279dbe9d    0901fa9da894  &quot;/docker-entrypoint.…&quot;  12 minutes ago   Up 12 minutes  10.138.3.15:9999-&gt;80/tcp   web06</span><br><span class=\"line\">5a1d7105ef29    0901fa9da894  &quot;/docker-entrypoint.…&quot;   21 minutes ago  Up 21 minutes  127.0.0.1:32770-&gt;80/tcp   web04</span><br><span class=\"line\">6cdfd996b45c    0901fa9da894  &quot;/docker-entrypoint.…&quot;   28 minutes ago  Up 28 minutes  0.0.0.0:32769-&gt;80/tcp   web03</span><br><span class=\"line\">3f1cbb448709    0901fa9da894  &quot;/docker-entrypoint.…&quot;   44 minutes ago  Up 44 minutes  0.0.0.0:32768-&gt;80/tcp   web01</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker container top 95b7279dbe9d  <span class=\"comment\"># 查看指定容器内的进程</span></span></span><br><span class=\"line\">UID    PID      PPID        C     STIME      TTY    TIME         CMD</span><br><span class=\"line\">root   21685    21667       0     18:01      ?    00:00:00   nginx: master process nginx -g daemon off;</span><br><span class=\"line\">101    21739    21685       0     18:01      ?    00:00:00   nginx: worker process</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看容器运行日志</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker container logs --<span class=\"built_in\">help</span></span> </span><br><span class=\"line\">Usage:\tdocker container logs [OPTIONS] CONTAINER</span><br><span class=\"line\">Fetch the logs of a container</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\">      --details        Show extra details provided to logs</span><br><span class=\"line\">  -f, --follow         Follow log output</span><br><span class=\"line\">      --since string   Show logs since timestamp (e.g. 2013-01-02T13:23:37) or relative (e.g. 42m for 42 minutes)</span><br><span class=\"line\">      --tail string    Number of lines to show from the end of the logs (default &quot;all&quot;)</span><br><span class=\"line\">  -t, --timestamps     Show timestamps  # 显示时间</span><br><span class=\"line\">      --until string   Show logs before a timestamp (e.g. 2013-01-02T13:23:37) or relative (e.g. 42m for 42 minutes)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看指定容器的日志信息</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker container logs 95b7279dbe9d</span></span><br><span class=\"line\">/docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration</span><br><span class=\"line\">/docker-entrypoint.sh: Looking for shell scripts in /docker-entrypoint.d/</span><br><span class=\"line\">/docker-entrypoint.sh: Launching /docker-entrypoint.d/10-listen-on-ipv6-by-default.sh</span><br><span class=\"line\">10-listen-on-ipv6-by-default.sh: Getting the checksum of /etc/nginx/conf.d/default.conf</span><br><span class=\"line\">10-listen-on-ipv6-by-default.sh: Enabled listen on IPv6 in /etc/nginx/conf.d/default.conf</span><br><span class=\"line\">/docker-entrypoint.sh: Launching /docker-entrypoint.d/20-envsubst-on-templates.sh</span><br><span class=\"line\">/docker-entrypoint.sh: Configuration complete; ready for start up</span><br><span class=\"line\">10.138.3.1 - - [17/Jul/2020:10:01:50 +0000] &quot;GET / HTTP/1.1&quot; 200 612 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36&quot; &quot;-&quot;</span><br><span class=\"line\">2020/07/17 10:01:50 [error] 28#28: *1 open() &quot;/usr/share/nginx/html/favicon.ico&quot; failed (2: No such file or directory), client: 10.138.3.1, server: localhost, request: &quot;GET /favicon.ico HTTP/1.1&quot;, host: &quot;10.138.3.15:9999&quot;, referrer: &quot;http://10.138.3.15:9999/&quot;</span><br><span class=\"line\">10.138.3.1 - - [17/Jul/2020:10:01:50 +0000] &quot;GET /favicon.ico HTTP/1.1&quot; 404 555 &quot;http://10.138.3.15:9999/&quot; &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36&quot; &quot;-&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看指定容器的最近5条日志信息</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker container logs -tf --tail 5  95b7279dbe9d</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> -t 显示日志时间； -f ；--tail 动态显示日志</span></span><br><span class=\"line\">2020-07-17T10:01:05.405618181Z /docker-entrypoint.sh: Launching /docker-entrypoint.d/20-envsubst-on-templates.sh</span><br><span class=\"line\">2020-07-17T10:01:05.407662304Z /docker-entrypoint.sh: Configuration complete; ready for start up</span><br><span class=\"line\">2020-07-17T10:01:50.787156188Z 10.138.3.1 - - [17/Jul/2020:10:01:50 +0000] &quot;GET / HTTP/1.1&quot; 200 612 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36&quot; &quot;-&quot;</span><br><span class=\"line\">2020-07-17T10:01:50.885303440Z 2020/07/17 10:01:50 [error] 28#28: *1 open() &quot;/usr/share/nginx/html/favicon.ico&quot; failed (2: No such file or directory), client: 10.138.3.1, server: localhost, request: &quot;GET /favicon.ico HTTP/1.1&quot;, host: &quot;10.138.3.15:9999&quot;, referrer: &quot;http://10.138.3.15:9999/&quot;</span><br><span class=\"line\">2020-07-17T10:01:50.885398127Z 10.138.3.1 - - [17/Jul/2020:10:01:50 +0000] &quot;GET /favicon.ico HTTP/1.1&quot; 404 555 &quot;http://10.138.3.15:9999/&quot; &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36&quot; &quot;-&quot;</span><br></pre></td></tr></table></figure>\n","comments":true,"permalink":"https://qingdalf.github.io/2021-05/dockerNetwork/","categories":[{"name":"kubernets","slug":"kubernets","permalink":"https://qingdalf.github.io/categories/kubernets/"}],"tags":[]},{"title":"docker镜像","date":"2021-05-03T06:29:55.000Z","path":"2021-05/dockerImage/","content":"<p>​        镜像是容器的<strong>基石</strong>，容器基于镜像启动和运行。镜像保存的<strong>容器启动的各种条件(依赖)<strong>。<code>Docker Image</code>是一个</strong>层叠的只读文件系统</strong>。</p>\n<p><img src=\"v2-5b6bf4c2cf1196e5949d674a7018e64b_720w.jpg\" alt=\"img\"></p>\n<span id=\"more\"></span>\n<p>​        如上图所示，容器启动时，从下而上<strong>加载需要的镜像</strong>，镜像被依次<strong>移到内存</strong>中，最后，<code>bootfs</code>（引导文件系统）会被<strong>卸载</strong>。</p>\n<p>​        在Docker中，<code>rootfs</code>（root文件系统）<strong>永远只读</strong>，利用<strong>联合加载技术</strong>，在root文件系统的基础上加载更多的只读文件系统。将这样的文件系统称之为镜像，对，没错，镜像就是一堆<strong>文件系统的集合</strong>。</p>\n<blockquote>\n<p>​        联合加载技术是<strong>一次加载多个文件系统</strong>，但是在外面看来好像只有一个文件系统。最终将各层文件<strong>叠加到一起</strong>，最终的文件系统包含所有的底层文件和目录。  </p>\n<p>​        一个镜像可以放到另一个镜像的顶部，称为下一个镜像的<strong>父镜像</strong>。最底部的镜像称为<strong>基础镜像</strong>。</p>\n</blockquote>\n<h3 id=\"1-docker镜像仓库\"><a href=\"#1-docker镜像仓库\" class=\"headerlink\" title=\"1 docker镜像仓库\"></a>1 docker镜像仓库</h3><p>​        镜像仓库(用于镜像存放)官网：<a href=\"https://hub.docker.com/\">https://hub.docker.com/</a></p>\n<p>官网的使用和简介：</p>\n<ul>\n<li>搜索指定镜像，任何人都可以注册使用docker镜像仓库，上传下载和使用镜像</li>\n</ul>\n<p><img src=\"image-20200716151141854.png\" alt=\"image-20200716151141854\"></p>\n<p>点击进入官方nginx镜像仓库：</p>\n<p><img src=\"image-20200716151648043.png\" alt=\"image-20200716151648043\"></p>\n<p>查看”Reviews”–展示用户对镜像的评价信息</p>\n<p><img src=\"image-20200716153928518.png\" alt=\"image-20200716153928518\"></p>\n<p>选择‘Tags’查看–展示镜像的所有标签信息</p>\n<p><img src=\"image-20200716151921503.png\" alt=\"image-20200716151921503\"></p>\n<p>唯一标识一个镜像的方法：</p>\n<ul>\n<li>镜像id：sha256:64位，默认只截取12位</li>\n<li>镜像标签：tag</li>\n</ul>\n<h3 id=\"2-docker镜像相关命令\"><a href=\"#2-docker镜像相关命令\" class=\"headerlink\" title=\"2 docker镜像相关命令\"></a>2 docker镜像相关命令</h3><p>有关镜像的相关命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker image --<span class=\"built_in\">help</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">Usage:\tdocker image COMMAND</span><br><span class=\"line\"></span><br><span class=\"line\">Manage images</span><br><span class=\"line\"></span><br><span class=\"line\">Commands:</span><br><span class=\"line\">  build       Build an image from a Dockerfile  # 通过Dockerfile文件构建一个镜像</span><br><span class=\"line\">  history     Show the history of an image      # 构建镜像的历史命令</span><br><span class=\"line\">  import      Import the contents from a tarball to create a filesystem image</span><br><span class=\"line\">  inspect     Display detailed information on one or more images  # 查看镜像的详细信息</span><br><span class=\"line\">  load        Load an image from a tar archive or STDIN  # 导入一个tar包的镜像文件</span><br><span class=\"line\">  ls          List images</span><br><span class=\"line\">  prune       Remove unused images  # 移除没使用的镜像</span><br><span class=\"line\">  pull        Pull an image or a repository from a registry   # 拉取镜像，默认是docker hub仓库</span><br><span class=\"line\">  push        Push an image or a repository to a registry     # 推送镜像到docker仓库，默认是docker hub</span><br><span class=\"line\">  rm          Remove one or more images    # 删除镜像</span><br><span class=\"line\">  save        Save one or more images to a tar archive (streamed to STDOUT by default)# 将镜像保存为tar文件</span><br><span class=\"line\">  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE  # 给镜像打标签</span><br><span class=\"line\"></span><br><span class=\"line\">Run &#x27;docker image COMMAND --help&#x27; for more information on a command.</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>详细解释如下</p>\n<table>\n<thead>\n<tr>\n<th>build   Build an image from a Dockerfile</th>\n<th>从Dockerfile生成图像</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>history</strong>   Show the history of an image</td>\n<td>历史展示一个镜像的历史</td>\n</tr>\n<tr>\n<td><strong>import</strong>   Import the contents from a tarball to create a filesystem image</td>\n<td>导入从tarball导入内容以创建文件系统镜像</td>\n</tr>\n<tr>\n<td><strong>inspect</strong>   Display detailed information on one or more images</td>\n<td>检查显示一个或多个镜像的详细信息</td>\n</tr>\n<tr>\n<td><strong>load</strong>   Load an image from a tar archive or STDIN</td>\n<td>从tar存档或stdin加载镜像</td>\n</tr>\n<tr>\n<td><strong>ls</strong>    List images</td>\n<td>列出系统上现有的镜像</td>\n</tr>\n<tr>\n<td><strong>prune</strong>   Remove unused images</td>\n<td>删除未使用的镜像</td>\n</tr>\n<tr>\n<td><strong>pull</strong>   Pull an image or a repository from a registry</td>\n<td>从仓库中拉取镜像</td>\n</tr>\n<tr>\n<td><strong>push</strong>   Push an image or a repository to a registry</td>\n<td>将镜像推送到远端仓库中</td>\n</tr>\n<tr>\n<td><strong>rm</strong>    Remove one or more images</td>\n<td>rm删除一个或多个镜像</td>\n</tr>\n<tr>\n<td><strong>save</strong>   Save one or more images to a tar archive (streamed to STDOUT by  default)</td>\n<td>将一个或多个镜像保存到tar存档（默认情况下流式传输到stdout）</td>\n</tr>\n<tr>\n<td><strong>tag</strong>   Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE</td>\n<td>给镜像打标签</td>\n</tr>\n</tbody></table>\n<p>docker 镜像常用操作：</p>\n<h4 id=\"2-1-下载镜像\"><a href=\"#2-1-下载镜像\" class=\"headerlink\" title=\"2.1 下载镜像\"></a>2.1 下载镜像</h4><p>首先，我们可以去docker hub官网进行查找指定镜像，如我们查找centos 7.6的镜像，找到后就可以直接复制红框中的命令进行下载</p>\n<p><img src=\"image-20200716214404996.png\" alt=\"image-20200716214404996\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 当然，我们也可以在测试机上进行简单的搜索</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker search  centos</span></span><br><span class=\"line\">NAME   DESCRIPTION                   STARS     OFFICIAL   AUTOMATED   </span><br><span class=\"line\">centos  The official build of CentOS.  6090     [OK]                </span><br><span class=\"line\">ansible/centos7-ansible   Ansible on Centos7    132        [OK]</span><br><span class=\"line\">····</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 下载centos官方镜像，不指定标签则默认拉取最新的镜像</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker pull centos</span></span><br><span class=\"line\">latest: Pulling from library/centos</span><br><span class=\"line\">6910e5a164f7: Pull complete </span><br><span class=\"line\">Digest: sha256:4062bbdd1bb0801b0aa38e0f83dece70fb7a5e9bce223423a68de2d8b784b43b</span><br><span class=\"line\">Status: Downloaded newer image for centos:latest</span><br><span class=\"line\">docker.io/library/centos:latest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 下载后的镜像一般存储在/var/lib/docker中</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls /var/lib/docker</span></span><br><span class=\"line\">builder  buildkit  containers  image  network  overlay2  plugins  runtimes  swarm  tmp  trust  volumes</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 下载指定版本</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker pull centos:centos7.6.1810</span> </span><br><span class=\"line\">centos7.6.1810: Pulling from library/centos</span><br><span class=\"line\">ac9208207ada: Pull complete </span><br><span class=\"line\">Digest: sha256:62d9e1c2daa91166139b51577fe4f4f6b4cc41a3a2c7fc36bd895e2a17a3e4e6</span><br><span class=\"line\">Status: Downloaded newer image for centos:centos7.6.1810</span><br><span class=\"line\">docker.io/library/centos:centos7.6.1810</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker image ls</span> </span><br><span class=\"line\">REPOSITORY      TAG     IMAGE ID       CREATED             SIZE</span><br><span class=\"line\">nginx           latest  0901fa9da894        5 days ago          132MB</span><br><span class=\"line\">centos          latest  831691599b88        4 weeks ago         215MB</span><br><span class=\"line\">centos          centos7.6.1810  f1cb7c7d58b7 16 months ago      202MB</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-打标签\"><a href=\"#2-2-打标签\" class=\"headerlink\" title=\"2.2 打标签\"></a>2.2 <strong>打标签</strong></h4><ul>\n<li>通过镜像名称和现有标签打标签：<code>docker image tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]</code></li>\n<li>通过镜像id打标签：<code>docker image tag SOURCE_IMAGE_ID TARGET_IMAGE[:TAG]</code></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker image tag --<span class=\"built_in\">help</span></span></span><br><span class=\"line\">Usage:\tdocker image tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]</span><br><span class=\"line\">Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker image ls</span></span><br><span class=\"line\">REPOSITORY   TAG        IMAGE ID      CREATED      SIZE</span><br><span class=\"line\">nginx        latest     0901fa9da894  5 days ago   132MB</span><br><span class=\"line\">ubuntu       15.10      9b9cb95443b5  3 years ago  137MB</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker image tag 0901fa9da894 scaven/nginx:1.1.1</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker image ls</span></span><br><span class=\"line\">REPOSITORY   TAG        IMAGE ID      CREATED      SIZE</span><br><span class=\"line\">nginx        latest     0901fa9da894  5 days ago   132MB</span><br><span class=\"line\">scaven/nginx 1.1.1      0901fa9da894  5 days ago   132MB</span><br><span class=\"line\">ubuntu       15.10      9b9cb95443b5  3 years ago  137MB</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-删除镜像\"><a href=\"#2-3-删除镜像\" class=\"headerlink\" title=\"2.3 删除镜像\"></a>2.3 <strong>删除镜像</strong></h4><blockquote>\n<p>建议使用<code>镜像:标签</code>或者<code>镜像ID</code>来删除镜像，因为这样才是唯一标识了一个镜像</p>\n</blockquote>\n<ul>\n<li>格式：<code>docker image rm [OPTIONS] IMAGE [IMAGE...]</code></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 使用镜像ID删除镜像</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker image rm 0901fa9da894</span></span><br><span class=\"line\">Error response from daemon: conflict: unable to delete 0901fa9da894 (must be forced) - image is referenced in multiple repositories</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 报错的意思是该镜像id标识了两个仓库的镜像，因此不能使用该方法删除，由此可知要删除两个镜像id一样的镜像，只能使用`镜像仓库:标签`的方法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker image rm scaven/nginx:1.1.1</span></span><br><span class=\"line\">Untagged: scaven/nginx:1.1.1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker image ls</span></span><br><span class=\"line\">REPOSITORY   TAG        IMAGE ID      CREATED      SIZE</span><br><span class=\"line\">nginx        latest     0901fa9da894  5 days ago   132MB</span><br><span class=\"line\">ubuntu       15.10      9b9cb95443b5  3 years ago  137MB</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker image rm 0901fa9da894</span></span><br><span class=\"line\">Error response from daemon: conflict: unable to delete 0901fa9da894 (must be forced) - image is being used by stopped container 2a2bbb830211</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 报错是指，该镜像关联了一个停止中的容器，需要使用-f参数才能强制删除，如果是一个运行中的容器，不能强制删除</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 使用-f参数，强制删除容器镜像</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker image rm -f 0901fa9da894</span></span><br><span class=\"line\">Untagged: nginx:latest</span><br><span class=\"line\">Deleted: sha256:0901fa9da894a8e9de5cb26d6749eaffb67b373dc1ff8a26c46b23b1175c913a</span><br><span class=\"line\">[root@docker ~]# docker image ls </span><br><span class=\"line\">REPOSITORY   TAG        IMAGE ID      CREATED      SIZE</span><br><span class=\"line\">ubuntu       15.10      9b9cb95443b5  3 years ago  137MB</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 重启被删除镜像的容器，容器运行正常</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker container start 79a9b0e8c074</span></span><br><span class=\"line\">79a9b0e8c074</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker ps</span> </span><br><span class=\"line\">CONTAINER ID  IMAGE   COMMAND CREATED   STATUS   PORTS    NAMES</span><br><span class=\"line\">79a9b0e8c074        0901fa9da894        &quot;/docker-entrypoint.…&quot;   19 hours ago        Up 39 seconds       0.0.0.0:32768-&gt;80/tcp   webapp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 删除全部镜像</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker image rm -f `docker image ls -q`</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> `docker image ls -q`命令是显示所有镜像的镜像ID</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-4-导入和导出镜像\"><a href=\"#2-4-导入和导出镜像\" class=\"headerlink\" title=\"2.4 导入和导出镜像\"></a>2.4 <strong>导入和导出镜像</strong></h4><ul>\n<li>导出镜像：docker image save -o IMAGE.tar IMAGE [IMAGE…]</li>\n<li>导入镜像：docker image load -i IMAGE.tar</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 在删除nginx镜像之前做了导出镜像，如下</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker image save 0901fa9da894 &gt; /tmp/nginx.tar</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls /tmp/nginx.tar</span> </span><br><span class=\"line\">/tmp/nginx.tar</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 在另外一台docker主机上导入镜像</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker load -i nginx.tar</span></span><br><span class=\"line\">Loaded image ID: sha256:0901fa9da894a8e9de5cb26d6749eaffb67b373dc1ff8a26c46b23b1175c913a</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker image ls</span></span><br><span class=\"line\">REPOSITORY   TAG        IMAGE ID      CREATED      SIZE</span><br><span class=\"line\">&lt;none&gt;        &lt;none&gt;    0901fa9da894  5 days ago   132MB</span><br><span class=\"line\">ubuntu       15.10      9b9cb95443b5  3 years ago  137MB</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 使用docker image save 0901fa9da894 &gt; /tmp/nginx.tar这个命令导出的镜像文件在导入时，不能继承源镜像的仓库和标签，需要收到打标签</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 给没有指定仓库和标签的镜像打标签，此处只能使用镜像ID来标识该镜像</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker image tag 0901fa9da894 scaven/nginx:1.2</span> </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker image ls</span></span><br><span class=\"line\">REPOSITORY   TAG        IMAGE ID      CREATED      SIZE</span><br><span class=\"line\">scaven/nginx 1.2        0901fa9da894  5 days ago   132MB</span><br><span class=\"line\">ubuntu       15.10      9b9cb95443b5  3 years ago  137MB</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-5-上传自制镜像到docker官方仓库\"><a href=\"#2-5-上传自制镜像到docker官方仓库\" class=\"headerlink\" title=\"2.5 上传自制镜像到docker官方仓库\"></a>2.5 上传自制镜像到docker官方仓库</h4><blockquote>\n<p>此处以centos镜像为例，首先创建镜像仓库</p>\n</blockquote>\n<p><img src=\"image-20200716221423032.png\" alt=\"image-20200716221423032\"></p>\n<p>创建完成后，如下：</p>\n<p><img src=\"image-20200716221551532.png\" alt=\"image-20200716221551532\"></p>\n<p>接下来我们上传镜像到scaven/os仓库中</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 首先登录docker官方仓库</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker login</span></span><br><span class=\"line\">Login with your Docker ID to push and pull images from Docker Hub. If you don&#x27;t have a Docker ID, head over to https://hub.docker.com to create one.</span><br><span class=\"line\">Username: scaven  # 输入用户名</span><br><span class=\"line\">Password:         # 输入密码</span><br><span class=\"line\">WARNING! Your password will be stored unencrypted in /root/.docker/config.json.</span><br><span class=\"line\">Configure a credential helper to remove this warning. See</span><br><span class=\"line\">https://docs.docker.com/engine/reference/commandline/login/#credentials-store</span><br><span class=\"line\"></span><br><span class=\"line\">Login Succeeded   # 提示登录成功</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 登录成功后，就可以推送镜像到docker hub中</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker image tag centos:centos7.6.1810 scvaen/os:centos7.6.1810</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 将本地镜像中的仓库名称修改成镜像仓库中的仓库名称</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker image ls</span></span><br><span class=\"line\">REPOSITORY    TAG       IMAGE ID        CREATED             SIZE</span><br><span class=\"line\">nginx         latest    0901fa9da894    5 days ago          132MB</span><br><span class=\"line\">centos        latest    831691599b88        4 weeks ago     215MB</span><br><span class=\"line\">centos        centos7.6.1810  f1cb7c7d58b7  16 months ago   202MB</span><br><span class=\"line\">scaven/os     centos7.6.1810  f1cb7c7d58b7  16 months ago   202MB</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker push scaven/os:centos7.6.1810</span></span><br><span class=\"line\">The push refers to repository [docker.io/scaven/os]</span><br><span class=\"line\">89169d87dbe2: Mounted from library/centos </span><br><span class=\"line\">centos7.6.1810: digest: sha256:747b2de199b6197a26eb1a24d69740d25483995842b2d2f75824095e9d1d19eb size: 529</span><br></pre></td></tr></table></figure>\n\n<p>命令执行成功后，我们可以在镜像仓库中查看到已经上传的镜像信息，如下</p>\n<p><img src=\"image-20200716223356907.png\" alt=\"image-20200716223356907\"></p>\n<h4 id=\"2-6-查看下载镜像的详细信息\"><a href=\"#2-6-查看下载镜像的详细信息\" class=\"headerlink\" title=\"2.6 查看下载镜像的详细信息\"></a>2.6 查看下载镜像的详细信息</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker image ls</span></span><br><span class=\"line\">REPOSITORY   TAG        IMAGE ID      CREATED      SIZE</span><br><span class=\"line\">scaven/nginx 1.2        0901fa9da894  5 days ago   132MB</span><br><span class=\"line\">ubuntu       15.10      9b9cb95443b5  3 years ago  137MB</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker image inspect 0901fa9da894</span>  </span><br><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &quot;Id&quot;: &quot;sha256:0901fa9da894a8e9de5cb26d6749eaffb67b373dc1ff8a26c46b23b1175c913a&quot;,</span><br><span class=\"line\">        &quot;RepoTags&quot;: [  # 镜像标签新信息</span><br><span class=\"line\">            &quot;scaven/nginx:1.2&quot;</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        &quot;RepoDigests&quot;: [],</span><br><span class=\"line\">        &quot;Parent&quot;: &quot;&quot;,</span><br><span class=\"line\">        &quot;Comment&quot;: &quot;&quot;,</span><br><span class=\"line\">        &quot;Created&quot;: &quot;2020-07-10T20:26:44.624785651Z&quot;,  # 创建时间</span><br><span class=\"line\">        &quot;Container&quot;: &quot;348c3ade7f4bdc0366f3f390ea4cfaebfb355ad7d621547eaf73728136d3bd2d&quot;,</span><br><span class=\"line\">        &quot;ContainerConfig&quot;: &#123;  # 容器配置信息</span><br><span class=\"line\">            &quot;Hostname&quot;: &quot;348c3ade7f4b&quot;,  # 启动后的主机名--镜像ID前12位</span><br><span class=\"line\">            &quot;Domainname&quot;: &quot;&quot;,</span><br><span class=\"line\">            &quot;User&quot;: &quot;&quot;,</span><br><span class=\"line\">            &quot;AttachStdin&quot;: false,</span><br><span class=\"line\">            &quot;AttachStdout&quot;: false,</span><br><span class=\"line\">            &quot;AttachStderr&quot;: false,</span><br><span class=\"line\">            &quot;ExposedPorts&quot;: &#123;</span><br><span class=\"line\">                &quot;80/tcp&quot;: &#123;&#125;   # 启动的端口</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;Tty&quot;: false,</span><br><span class=\"line\">            &quot;OpenStdin&quot;: false,</span><br><span class=\"line\">            &quot;StdinOnce&quot;: false,</span><br><span class=\"line\">            &quot;Env&quot;: [  # 容器环境变量信息</span><br><span class=\"line\">                &quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;,</span><br><span class=\"line\">                &quot;NGINX_VERSION=1.19.1&quot;,</span><br><span class=\"line\">                &quot;NJS_VERSION=0.4.2&quot;,</span><br><span class=\"line\">                &quot;PKG_RELEASE=1~buster&quot;</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            &quot;Cmd&quot;: [  # 启动后指定的指定命令</span><br><span class=\"line\">                &quot;/bin/sh&quot;,</span><br><span class=\"line\">                &quot;-c&quot;,</span><br><span class=\"line\">                &quot;#(nop) &quot;,</span><br><span class=\"line\">                &quot;CMD [\\&quot;nginx\\&quot; \\&quot;-g\\&quot; \\&quot;daemon off;\\&quot;]&quot;</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            &quot;ArgsEscaped&quot;: true,</span><br><span class=\"line\">            &quot;Image&quot;: &quot;sha256:8a6dfc8c21a1b3f3679b7755fc7869a22b5f8583778cf7835b5ee5387a73ae5e&quot;,</span><br><span class=\"line\">            &quot;Volumes&quot;: null,   # 存储卷信息</span><br><span class=\"line\">            &quot;WorkingDir&quot;: &quot;&quot;,  # 工作目录</span><br><span class=\"line\">            &quot;Entrypoint&quot;: [</span><br><span class=\"line\">                &quot;/docker-entrypoint.sh&quot;</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            &quot;OnBuild&quot;: null,</span><br><span class=\"line\">            &quot;Labels&quot;: &#123;</span><br><span class=\"line\">                &quot;maintainer&quot;: &quot;NGINX Docker Maintainers &lt;docker-maint@nginx.com&gt;&quot;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;StopSignal&quot;: &quot;SIGTERM&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;DockerVersion&quot;: &quot;18.09.7&quot;,  # docker版本信息</span><br><span class=\"line\">        &quot;Author&quot;: &quot;&quot;,</span><br><span class=\"line\">        &quot;Config&quot;: &#123;    # 配置信息</span><br><span class=\"line\">            &quot;Hostname&quot;: &quot;&quot;,</span><br><span class=\"line\">            &quot;Domainname&quot;: &quot;&quot;,</span><br><span class=\"line\">            &quot;User&quot;: &quot;&quot;,</span><br><span class=\"line\">            &quot;AttachStdin&quot;: false,</span><br><span class=\"line\">            &quot;AttachStdout&quot;: false,</span><br><span class=\"line\">            &quot;AttachStderr&quot;: false,</span><br><span class=\"line\">            &quot;ExposedPorts&quot;: &#123;</span><br><span class=\"line\">                &quot;80/tcp&quot;: &#123;&#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;Tty&quot;: false,</span><br><span class=\"line\">            &quot;OpenStdin&quot;: false,</span><br><span class=\"line\">            &quot;StdinOnce&quot;: false,</span><br><span class=\"line\">            &quot;Env&quot;: [</span><br><span class=\"line\">                &quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;,</span><br><span class=\"line\">                &quot;NGINX_VERSION=1.19.1&quot;,</span><br><span class=\"line\">                &quot;NJS_VERSION=0.4.2&quot;,</span><br><span class=\"line\">                &quot;PKG_RELEASE=1~buster&quot;</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            &quot;Cmd&quot;: [</span><br><span class=\"line\">                &quot;nginx&quot;,</span><br><span class=\"line\">                &quot;-g&quot;,</span><br><span class=\"line\">                &quot;daemon off;&quot;</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            &quot;ArgsEscaped&quot;: true,</span><br><span class=\"line\">            &quot;Image&quot;: &quot;sha256:8a6dfc8c21a1b3f3679b7755fc7869a22b5f8583778cf7835b5ee5387a73ae5e&quot;,</span><br><span class=\"line\">            &quot;Volumes&quot;: null,</span><br><span class=\"line\">            &quot;WorkingDir&quot;: &quot;&quot;,</span><br><span class=\"line\">            &quot;Entrypoint&quot;: [</span><br><span class=\"line\">                &quot;/docker-entrypoint.sh&quot;</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            &quot;OnBuild&quot;: null,</span><br><span class=\"line\">            &quot;Labels&quot;: &#123;</span><br><span class=\"line\">                &quot;maintainer&quot;: &quot;NGINX Docker Maintainers &lt;docker-maint@nginx.com&gt;&quot;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;StopSignal&quot;: &quot;SIGTERM&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;Architecture&quot;: &quot;amd64&quot;,   # 架构</span><br><span class=\"line\">        &quot;Os&quot;: &quot;linux&quot;,   # 操作系统 </span><br><span class=\"line\">        &quot;Size&quot;: 132484492,  # 镜像大小</span><br><span class=\"line\">        &quot;VirtualSize&quot;: 132484492,</span><br><span class=\"line\">        &quot;GraphDriver&quot;: &#123;</span><br><span class=\"line\">            &quot;Data&quot;: &#123;</span><br><span class=\"line\">                &quot;LowerDir&quot;: &quot;/var/lib/docker/overlay2/9167e98f0c6eedbce79f55ad73db84fdbdc65a80dd0ff8b57e6d068aa8828c8d/diff:/var/lib/docker/overlay2/5908a0b08cecf7d93c0bfc6822ee52af619a872a4196c3091fffa2eb82588b0f/diff:/var/lib/docker/overlay2/dc038e093dc9db0c8996635b1d6cf79dae163ed7cd93922824fef535668fb84e/diff:/var/lib/docker/overlay2/93c919ef9bab4ad8c9b570275d0d8abcc1c530aea546e70630a9d14060b61195/diff&quot;,</span><br><span class=\"line\">                &quot;MergedDir&quot;: &quot;/var/lib/docker/overlay2/78476f806a7f8215910d9d6f1a55aa7f432562dc3dca97d28e69f6e2e6d17149/merged&quot;,</span><br><span class=\"line\">                &quot;UpperDir&quot;: &quot;/var/lib/docker/overlay2/78476f806a7f8215910d9d6f1a55aa7f432562dc3dca97d28e69f6e2e6d17149/diff&quot;,</span><br><span class=\"line\">                &quot;WorkDir&quot;: &quot;/var/lib/docker/overlay2/78476f806a7f8215910d9d6f1a55aa7f432562dc3dca97d28e69f6e2e6d17149/work&quot;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;Name&quot;: &quot;overlay2&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;RootFS&quot;: &#123;</span><br><span class=\"line\">            &quot;Type&quot;: &quot;layers&quot;,</span><br><span class=\"line\">            &quot;Layers&quot;: [</span><br><span class=\"line\">                &quot;sha256:13cb14c2acd34e45446a50af25cb05095a17624678dbafbcc9e26086547c1d74&quot;,</span><br><span class=\"line\">                &quot;sha256:0e32546a8af0cd04ad451d6a9d22e650e500e5da3636a32648c9f5aca96a0ff7&quot;,</span><br><span class=\"line\">                &quot;sha256:7ef35766ef7d5d3d958022405b308d5c105b41190e1b63b2037c4055c6950c9e&quot;,</span><br><span class=\"line\">                &quot;sha256:4856db5e4f59384c413c20c46cd5403a860e1b07c8fdbad24df1ffd9209d44e7&quot;,</span><br><span class=\"line\">                &quot;sha256:2808ec4a8ea71c2660284d06cf7e25354b70b58504edb46ac3e705fb7e6ea519&quot;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;Metadata&quot;: &#123;   # 元数据</span><br><span class=\"line\">            &quot;LastTagTime&quot;: &quot;2020-07-16T16:30:36.781611539+08:00&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n","comments":true,"permalink":"https://qingdalf.github.io/2021-05/dockerImage/","categories":[{"name":"kubernets","slug":"kubernets","permalink":"https://qingdalf.github.io/categories/kubernets/"}],"tags":[]},{"title":"docker生命周期","date":"2021-05-03T06:09:21.000Z","path":"2021-05/dockerLifeCycle/","content":"<p>​        Docker采用<code>C/S</code>架构，<code>Docker daemon </code>作为服务端接受来自客户的请求，并处理这些请求（创建、运行、分发容器）。 客户端和服务端既可以运行在一个机器上，也可通过<code>socket</code>或者<code>RESTful API </code>来进行通信。</p>\n<span id=\"more\"></span>\n<p>​        此处docker生命周期不包含镜像制作，镜像制作请参考后续章节。</p>\n<p><img src=\"image-20200717180651705.png\" alt=\"image-20200717180651705\"></p>\n<center>docker生命周期全景图</center>\n\n<h4 id=\"1-docker客户端命令\"><a href=\"#1-docker客户端命令\" class=\"headerlink\" title=\"1 docker客户端命令\"></a>1 docker客户端命令</h4><p>​        docker 客户端非常简单 ,我们可以直接输入 <code>docker</code> 命令来查看到 Docker 客户端的所有命令选项。</p>\n<ul>\n<li>docker命令解析，下面展示通过三个命令查看docker的命令方法<ul>\n<li>命令格式：<code>docker [OPTIONS] COMMAND</code></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker [--<span class=\"built_in\">help</span>]</span></span><br><span class=\"line\"></span><br><span class=\"line\">Usage:\tdocker [OPTIONS] COMMAND</span><br><span class=\"line\"></span><br><span class=\"line\">A self-sufficient runtime for containers</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\">      --config string      Location of client config files (default &quot;/root/.docker&quot;)</span><br><span class=\"line\">  -c, --context string     Name of the context to use to connect to the daemon (overrides DOCKER_HOST env var and default context</span><br><span class=\"line\">                           set with &quot;docker context use&quot;)</span><br><span class=\"line\">  -D, --debug              Enable debug mode</span><br><span class=\"line\">  -H, --host list          Daemon socket(s) to connect to</span><br><span class=\"line\">  -l, --log-level string   Set the logging level (&quot;debug&quot;|&quot;info&quot;|&quot;warn&quot;|&quot;error&quot;|&quot;fatal&quot;) (default &quot;info&quot;)</span><br><span class=\"line\">      --tls                Use TLS; implied by --tlsverify</span><br><span class=\"line\">      --tlscacert string   Trust certs signed only by this CA (default &quot;/root/.docker/ca.pem&quot;)</span><br><span class=\"line\">      --tlscert string     Path to TLS certificate file (default &quot;/root/.docker/cert.pem&quot;)</span><br><span class=\"line\">      --tlskey string      Path to TLS key file (default &quot;/root/.docker/key.pem&quot;)</span><br><span class=\"line\">      --tlsverify          Use TLS and verify the remote</span><br><span class=\"line\">  -v, --version            Print version information and quit</span><br><span class=\"line\"></span><br><span class=\"line\">Management Commands:  # 管理命令</span><br><span class=\"line\">  builder     Manage builds</span><br><span class=\"line\">  config      Manage Docker configs</span><br><span class=\"line\">  container   Manage containers  # 管理容器</span><br><span class=\"line\">  context     Manage contexts</span><br><span class=\"line\">  engine      Manage the docker engine  # 管理docker引擎</span><br><span class=\"line\">  image       Manage images     # 管理镜像</span><br><span class=\"line\">  network     Manage networks   # 管理网络</span><br><span class=\"line\">  node        Manage Swarm nodes</span><br><span class=\"line\">  plugin      Manage plugins    # 管理插件</span><br><span class=\"line\">  secret      Manage Docker secrets</span><br><span class=\"line\">  service     Manage services   # 管理服务</span><br><span class=\"line\">  stack       Manage Docker stacks</span><br><span class=\"line\">  swarm       Manage Swarm</span><br><span class=\"line\">  system      Manage Docker    # 管理docker的启停</span><br><span class=\"line\">  trust       Manage trust on Docker images</span><br><span class=\"line\">  volume      Manage volumes   # 管理存储卷</span><br><span class=\"line\"></span><br><span class=\"line\">Commands: # 这下面的所有命令都可以通过docker COMMAND --help查看更详细命令</span><br><span class=\"line\">  attach      Attach local standard input, output, and error streams to a running container  </span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\"> 进入本地一个运行的容器，此命令进入的pid为1的shell，退出后容器就退出了</span></span><br><span class=\"line\">  build       Build an image from a Dockerfile  # 新建一个docker镜像</span><br><span class=\"line\">  commit      Create a new image from a container&#x27;s changes  # 提交一个被修改的容器为docker镜像</span><br><span class=\"line\">  cp          Copy files/folders between a container and the local filesystem # 物理机和容器之间的文件复制</span><br><span class=\"line\">  create      Create a new container  # 创建一个容器</span><br><span class=\"line\">  diff        Inspect changes to files or directories on a container&#x27;s filesystem</span><br><span class=\"line\">  events      Get real time events from the server</span><br><span class=\"line\">  exec        Run a command in a running container  # 新开一个shell进入一个运行的容器</span><br><span class=\"line\">  export      Export a container&#x27;s filesystem as a tar archive</span><br><span class=\"line\">  history     Show the history of an image  # 查看docker镜像制作的历史命令</span><br><span class=\"line\">  images      List images  # 列出当前系统上的docker镜像</span><br><span class=\"line\">  import      Import the contents from a tarball to create a filesystem image</span><br><span class=\"line\">  info        Display system-wide information</span><br><span class=\"line\">  inspect     Return low-level information on Docker objects  # 查看一个容器的详细信息</span><br><span class=\"line\">  kill        Kill one or more running containers  # 杀掉运行中的容器</span><br><span class=\"line\">  load        Load an image from a tar archive or STDIN  # 从tar包中导入一个镜像</span><br><span class=\"line\">  login       Log in to a Docker registry      # 登录docker仓库，若不指定仓库地址，默认是docker hub</span><br><span class=\"line\">  logout      Log out from a Docker registry  # 退出docker仓库</span><br><span class=\"line\">  logs        Fetch the logs of a container  # 查看容器日志</span><br><span class=\"line\">  pause       Pause all processes within one or more containers  # 暂停容器运行</span><br><span class=\"line\">  port        List port mappings or a specific mapping for the container  # 列出容器使用的端口</span><br><span class=\"line\">  ps          List containers   # 查看容器进程信息</span><br><span class=\"line\">  pull        Pull an image or a repository from a registry   # 从仓库中下载镜像，默认是docker hub</span><br><span class=\"line\">  push        Push an image or a repository to a registry</span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\"> 将本地镜像推送到仓库，需要先登录，进行认证后才能推送镜像到仓库</span></span><br><span class=\"line\">  rename      Rename a container  # 重命名容器</span><br><span class=\"line\">  restart     Restart one or more containers  # 重启容器</span><br><span class=\"line\">  rm          Remove one or more containers   # 删除容器</span><br><span class=\"line\">  rmi         Remove one or more images       # 删除镜像</span><br><span class=\"line\">  run         Run a command in a new container  # 运行容器</span><br><span class=\"line\">  save        Save one or more images to a tar archive (streamed to STDOUT by default)  </span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\"> 将镜像文件保存为tar文件</span></span><br><span class=\"line\">  search      Search the Docker Hub for images   # 在docker仓库中搜索镜像</span><br><span class=\"line\">  start       Start one or more stopped containers   # 启动一个停止的容器</span><br><span class=\"line\">  stats       Display a live stream of container(s) resource usage statistics  </span><br><span class=\"line\">  stop        Stop one or more running containers   # 停止运行的容器</span><br><span class=\"line\">  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE   # 给镜像打标签</span><br><span class=\"line\">  top         Display the running processes of a container    # 查看容器的ps信息</span><br><span class=\"line\">  unpause     Unpause all processes within one or more containers   # 解除暂停</span><br><span class=\"line\">  update      Update configuration of one or more containers    # 修改容器的资源限制信息</span><br><span class=\"line\">  version     Show the Docker version information  </span><br><span class=\"line\">  wait        Block until one or more containers stop, then print their exit codes</span><br><span class=\"line\"></span><br><span class=\"line\">Run &#x27;docker COMMAND --help&#x27; for more information on a command.</span><br></pre></td></tr></table></figure>\n\n<p>查看<code>docker container</code>命令的帮助信息</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker container --<span class=\"built_in\">help</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">Usage:\tdocker container COMMAND</span><br><span class=\"line\"></span><br><span class=\"line\">Manage containers</span><br><span class=\"line\"></span><br><span class=\"line\">Commands:</span><br><span class=\"line\">  attach      Attach local standard input, output, and error streams to a running container</span><br><span class=\"line\">  commit      Create a new image from a container&#x27;s changes</span><br><span class=\"line\">  cp          Copy files/folders between a container and the local filesystem</span><br><span class=\"line\">  create      Create a new container</span><br><span class=\"line\">  diff        Inspect changes to files or directories on a container&#x27;s filesystem</span><br><span class=\"line\">  exec        Run a command in a running container</span><br><span class=\"line\">  export      Export a container&#x27;s filesystem as a tar archive</span><br><span class=\"line\">  inspect     Display detailed information on one or more containers</span><br><span class=\"line\">  kill        Kill one or more running containers</span><br><span class=\"line\">  logs        Fetch the logs of a container</span><br><span class=\"line\">  ls          List containers</span><br><span class=\"line\">  pause       Pause all processes within one or more containers</span><br><span class=\"line\">  port        List port mappings or a specific mapping for the container</span><br><span class=\"line\">  prune       Remove all stopped containers</span><br><span class=\"line\">  rename      Rename a container</span><br><span class=\"line\">  restart     Restart one or more containers</span><br><span class=\"line\">  rm          Remove one or more containers</span><br><span class=\"line\">  run         Run a command in a new container</span><br><span class=\"line\">  start       Start one or more stopped containers</span><br><span class=\"line\">  stats       Display a live stream of container(s) resource usage statistics</span><br><span class=\"line\">  stop        Stop one or more running containers</span><br><span class=\"line\">  top         Display the running processes of a container</span><br><span class=\"line\">  unpause     Unpause all processes within one or more containers</span><br><span class=\"line\">  update      Update configuration of one or more containers</span><br><span class=\"line\">  wait        Block until one or more containers stop, then print their exit codes</span><br><span class=\"line\"></span><br><span class=\"line\">Run &#x27;docker container COMMAND --help&#x27; for more information on a command.</span><br></pre></td></tr></table></figure>\n\n<p>详细解释如下：</p>\n<table>\n<thead>\n<tr>\n<th>attach</th>\n<th>将本地标准输入、输出和错误流附加到正在运行的容器</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>commit</strong></td>\n<td>根据容器的更改创建新图像</td>\n</tr>\n<tr>\n<td><strong>cp</strong></td>\n<td>在容器和本地文件系统之间复制文件/文件夹</td>\n</tr>\n<tr>\n<td><strong>create</strong></td>\n<td>创建新容器</td>\n</tr>\n<tr>\n<td><strong>diff</strong></td>\n<td>检查对容器文件系统上的文件或目录的更改</td>\n</tr>\n<tr>\n<td><strong>exec</strong></td>\n<td>在正在运行的容器中运行命令</td>\n</tr>\n<tr>\n<td><strong>export</strong></td>\n<td>将一个容器的文件系统导出为tar存档，跟save有本质区别</td>\n</tr>\n<tr>\n<td><strong>inspect</strong></td>\n<td>显示一个或多个容器上的详细信息</td>\n</tr>\n<tr>\n<td><strong>kill</strong></td>\n<td>杀死一个或多个正在运行的容</td>\n</tr>\n<tr>\n<td><strong>logs</strong></td>\n<td>获取容器的日志</td>\n</tr>\n<tr>\n<td><strong>ls</strong></td>\n<td>列表容器</td>\n</tr>\n<tr>\n<td><strong>pause</strong></td>\n<td>暂停一个或多个容器中的所有进程</td>\n</tr>\n<tr>\n<td><strong>port</strong></td>\n<td>列表端口映射或容器的特定映射</td>\n</tr>\n<tr>\n<td><strong>prune</strong></td>\n<td>删除所有停止的容器</td>\n</tr>\n<tr>\n<td><strong>rename</strong></td>\n<td>重命名容器</td>\n</tr>\n<tr>\n<td><strong>restart</strong></td>\n<td>重新启动一个或多个容器</td>\n</tr>\n<tr>\n<td><strong>rm</strong></td>\n<td>移除一个或多个容器</td>\n</tr>\n<tr>\n<td><strong>run</strong></td>\n<td>运行新容器中命令</td>\n</tr>\n<tr>\n<td><strong>start</strong></td>\n<td>启动一个或多个停止的容器(容器已存在)</td>\n</tr>\n<tr>\n<td><strong>stats</strong></td>\n<td>显示容器资源使用统计的实时流</td>\n</tr>\n<tr>\n<td><strong>stop</strong></td>\n<td>停止一个或多个正在运行的容器</td>\n</tr>\n<tr>\n<td><strong>top</strong></td>\n<td>显示容器的运行进程</td>\n</tr>\n<tr>\n<td><strong>unpause</strong></td>\n<td>取消暂停一个或多个容器中的所有进程</td>\n</tr>\n<tr>\n<td><strong>update</strong></td>\n<td>更新一个或多个容器的更新配置</td>\n</tr>\n<tr>\n<td><strong>wait</strong></td>\n<td>等待块，直到一个或多个容器停止，然后打印它们的退出代码</td>\n</tr>\n</tbody></table>\n<p>​        查看<code>docker container ls</code>命令的帮助信息，通过<code>docker container ls</code>可以查看系统上正在运行的容器，加上选项<code>-a</code>可以查看本机上所有容器(状态为运行中和停止中的容器)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker container ls --<span class=\"built_in\">help</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">Usage:\tdocker container ls [OPTIONS]  # 命令格式</span><br><span class=\"line\">List containers   # 列出容器</span><br><span class=\"line\">Aliases:</span><br><span class=\"line\">  ls, ps, list</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\">  -a, --all             Show all containers (default shows just running)  # 显示说有容器，包括运行和未运行的</span><br><span class=\"line\">  -f, --filter filter   Filter output based on conditions provided</span><br><span class=\"line\">      --format string   Pretty-print containers using a Go template</span><br><span class=\"line\">  -n, --last int        Show n last created containers (includes all states) (default -1)  # 指定显示n个最近创建的容器</span><br><span class=\"line\">  -l, --latest          Show the latest created container (includes all states)  # 显示最近创建的容器</span><br><span class=\"line\">      --no-trunc        Don&#x27;t truncate output</span><br><span class=\"line\">  -q, --quiet           Only display numeric IDs  # 只显示容器id</span><br><span class=\"line\">  -s, --size            Display total file sizes  # 显示文件大小</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-获取镜像\"><a href=\"#2-获取镜像\" class=\"headerlink\" title=\"2 获取镜像\"></a>2 获取镜像</h4><p>​        镜像是容器运行的根本，<code>docker daemon</code>收到用户<code>docker run</code>的命令后，首先检查本地是否存在运行容器的镜像，如果不存在则先向仓库请求下载镜像，下载完成后再启动容器。</p>\n<ul>\n<li>如果可以连接网络，直接<code>docker pull</code>即可下载镜像</li>\n<li>如果是内网网络的话，可以先联网将镜像下载到pc上，然后再从pc上通过<code>docker save</code>命令将镜像文件保存为tar文件然后将tar包导入到内网环境中，再通过<code>docker load</code>命令还原成镜像文件，如下：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 在能联网的pc上操作</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker search nginx   <span class=\"comment\"># 搜索指定名称镜像</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker search nginx  --filter=stars=1000  <span class=\"comment\"># 搜索星星数大于1000的nginx镜像</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker pull nginx     <span class=\"comment\"># 从仓库下载镜像</span></span></span><br><span class=\"line\">Using default tag: latest</span><br><span class=\"line\">latest: Pulling from library/nginx</span><br><span class=\"line\">8559a31e96f4: Pull complete </span><br><span class=\"line\">1cf27aa8120b: Pull complete </span><br><span class=\"line\">67d252a8c1e1: Pull complete </span><br><span class=\"line\">9c2b660fcff6: Pull complete </span><br><span class=\"line\">4584011f2cd1: Pull complete </span><br><span class=\"line\">Digest: sha256:a93c8a0b0974c967aebe868a186e5c205f4d3bcb5423a56559f2f9599074bbcd</span><br><span class=\"line\">Status: Downloaded newer image for nginx:latest</span><br><span class=\"line\">docker.io/library/nginx:latest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker image ls</span> </span><br><span class=\"line\">REPOSITORY    TAG           IMAGE ID        CREATED         SIZE</span><br><span class=\"line\">nginx         latest        0901fa9da894    4 days ago      132MB</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker image <span class=\"built_in\">history</span> nginx   <span class=\"comment\"># 查看容器制作的历史命令(过程)</span></span></span><br><span class=\"line\">IMAGE          CREATED        CREATED BY                                      SIZE      COMMENT</span><br><span class=\"line\">0901fa9da894   8 months ago   /bin/sh -c #(nop)  CMD [&quot;nginx&quot; &quot;-g&quot; &quot;daemon…   0B        </span><br><span class=\"line\">&lt;missing&gt;      8 months ago   /bin/sh -c #(nop)  STOPSIGNAL SIGTERM           0B        </span><br><span class=\"line\">&lt;missing&gt;      8 months ago   /bin/sh -c #(nop)  EXPOSE 80                    0B        </span><br><span class=\"line\">&lt;missing&gt;      8 months ago   /bin/sh -c #(nop)  ENTRYPOINT [&quot;/docker-entr…   0B        </span><br><span class=\"line\">&lt;missing&gt;      8 months ago   /bin/sh -c #(nop) COPY file:0fd5fca330dcd6a7…   1.04kB    </span><br><span class=\"line\">&lt;missing&gt;      8 months ago   /bin/sh -c #(nop) COPY file:1d0a4127e78a26c1…   1.96kB    </span><br><span class=\"line\">&lt;missing&gt;      8 months ago   /bin/sh -c #(nop) COPY file:e7e183879c35719c…   1.2kB     </span><br><span class=\"line\">&lt;missing&gt;      8 months ago   /bin/sh -c set -x     &amp;&amp; addgroup --system -…   63.3MB    </span><br><span class=\"line\">&lt;missing&gt;      8 months ago   /bin/sh -c #(nop)  ENV PKG_RELEASE=1~buster     0B        </span><br><span class=\"line\">&lt;missing&gt;      8 months ago   /bin/sh -c #(nop)  ENV NJS_VERSION=0.4.2        0B        </span><br><span class=\"line\">&lt;missing&gt;      8 months ago   /bin/sh -c #(nop)  ENV NGINX_VERSION=1.19.1     0B        </span><br><span class=\"line\">&lt;missing&gt;      9 months ago   /bin/sh -c #(nop)  LABEL maintainer=NGINX Do…   0B        </span><br><span class=\"line\">&lt;missing&gt;      9 months ago   /bin/sh -c #(nop)  CMD [&quot;bash&quot;]                 0B        </span><br><span class=\"line\">&lt;missing&gt;      9 months ago   /bin/sh -c #(nop) ADD file:4d35f6c8bbbe6801c…   69.2MB  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 将该镜像保存为tar文件，并上传到本地服务器使用，save和load是针对镜像导出(入)</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker save  -o nginx.tar nginx</span> </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> -o 表示输出的tar文件名称，后面的nginx表示镜像名称，如果是多个镜像，可继续写镜像名称</span></span><br></pre></td></tr></table></figure>\n\n<p>导入内网环境：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker load的用法</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker load --<span class=\"built_in\">help</span></span>  </span><br><span class=\"line\">Usage:\tdocker load [OPTIONS]</span><br><span class=\"line\">Load an image from a tar archive or STDIN</span><br><span class=\"line\">Options:</span><br><span class=\"line\">  -i, --input string   Read from tar archive file, instead of STDIN</span><br><span class=\"line\">  -q, --quiet          Suppress the load output</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ll nginx.tar  -h</span> </span><br><span class=\"line\">-rw-r--r-- 1 root root 131M Jul 15 21:09 nginx.tar</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker load -i nginx.tar</span> </span><br><span class=\"line\">2808ec4a8ea7: Loading layer [==================================================&gt;]  3.584kB/3.584kB</span><br><span class=\"line\">Loaded image: nginx:latest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker image ls</span> </span><br><span class=\"line\">REPOSITORY    TAG           IMAGE ID        CREATED         SIZE</span><br><span class=\"line\">nginx         latest        0901fa9da894    4 days ago      132MB</span><br><span class=\"line\">ubuntu        15.10         9b9cb95443b5    3 years ago     137MB</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-启动容器\"><a href=\"#3-启动容器\" class=\"headerlink\" title=\"3 启动容器\"></a>3 启动容器</h4><p>以下命令使用 nginx镜像启动一个容器，参数为以命令行模式进入该容器：</p>\n<ul>\n<li><p>常用命令参数</p>\n<ul>\n<li><code>-i -t</code> 运行容器后打开交互式终端，进入容器</li>\n<li><code>-d</code> 在后台运行容器，即使用<code>exit</code>命令退出容易也不终止容器的运行</li>\n<li><code>--name </code> 指定容器的名称</li>\n<li><code>-P</code> 暴露随机端口，让外部网络访问，如果不暴露端口，则只有本地主机能访问，外部网络不能访问</li>\n<li><code>-p 8080:80</code>  暴露指定端口，即将主机的8080端口映射给容器的80端口，外露网络通过访问主机ip:8080就可以访问到容器的80端口</li>\n</ul>\n<blockquote>\n<p>容器启动后，默认是可以访问外部网络和本地主机上的其他容器，只是不能被外部访问而已</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker run -d -P --name webapp nginx:latest /bin/bash</span> </span><br></pre></td></tr></table></figure>\n\n<p>启动容器后，我们可以通过<code>docker ps</code>或<code>docker container ls</code>获取容器的<code>CONTAINER ID</code>或<code>NAMES</code>对容器进行管理</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 启动一个停止的容器，不进入容器</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker container start 79a9b0e8c074</span></span><br><span class=\"line\">79a9b0e8c074</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 启动一个停止的容器，并立马进入容器</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker container start -i 79a9b0e8c074</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker ps</span></span><br><span class=\"line\">CONTAINER ID  IMAGE   COMMAND   CREATED    STATUS     PORTS    NAMES</span><br><span class=\"line\">79a9b0e8c074  0901fa9da894 &quot;/docker-entrypoint.…&quot;   26 hours ago        Up 5 seconds     0.0.0.0:32769-&gt;80/tcp   webapp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker container ls</span> </span><br><span class=\"line\">CONTAINER ID  IMAGE   COMMAND   CREATED    STATUS     PORTS    NAMES</span><br><span class=\"line\">79a9b0e8c074  0901fa9da894  &quot;/docker-entrypoint.…&quot;   26 hours ago        Up 14 seconds       0.0.0.0:32769-&gt;80/tcp   webapp</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-获取容器的详细信息\"><a href=\"#4-获取容器的详细信息\" class=\"headerlink\" title=\"4 获取容器的详细信息\"></a>4 获取容器的详细信息</h4><blockquote>\n<p>可以获取容器的网络(IP地址)，端口信息(容器端口和主机端口映射关系)，存储，启动容器后运行的脚本等信息</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker container inspect 79a9b0e8c074</span></span><br><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &quot;Id&quot;: &quot;79a9b0e8c0745bff1f4b4333e53dc738bbb3bf2015591220069fffe010e0024c&quot;,</span><br><span class=\"line\">        &quot;Created&quot;: &quot;2020-07-15T13:17:36.663642734Z&quot;,</span><br><span class=\"line\">        &quot;Path&quot;: &quot;/docker-entrypoint.sh&quot;,</span><br><span class=\"line\">        &quot;Args&quot;: [</span><br><span class=\"line\">            &quot;/bin/bash&quot;</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        &quot;State&quot;: &#123;</span><br><span class=\"line\">            &quot;Status&quot;: &quot;running&quot;,</span><br><span class=\"line\">            &quot;Running&quot;: true,</span><br><span class=\"line\">            &quot;Paused&quot;: false,</span><br><span class=\"line\">            &quot;Restarting&quot;: false,</span><br><span class=\"line\">            &quot;OOMKilled&quot;: false,</span><br><span class=\"line\">            &quot;Dead&quot;: false,</span><br><span class=\"line\">            &quot;Pid&quot;: 12148,</span><br><span class=\"line\">            &quot;ExitCode&quot;: 0,</span><br><span class=\"line\">            &quot;Error&quot;: &quot;&quot;,</span><br><span class=\"line\">            &quot;StartedAt&quot;: &quot;2020-07-16T14:51:07.597037016Z&quot;,</span><br><span class=\"line\">            &quot;FinishedAt&quot;: &quot;2020-07-16T08:29:53.611158447Z&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;Image&quot;: &quot;sha256:0901fa9da894a8e9de5cb26d6749eaffb67b373dc1ff8a26c46b23b1175c913a&quot;,</span><br><span class=\"line\">        &quot;ResolvConfPath&quot;: &quot;/var/lib/docker/containers/79a9b0e8c0745bff1f4b4333e53dc738bbb3bf2015591220069fffe010e0024c/resolv.conf&quot;,</span><br><span class=\"line\">        &quot;HostnamePath&quot;: &quot;/var/lib/docker/containers/79a9b0e8c0745bff1f4b4333e53dc738bbb3bf2015591220069fffe010e0024c/hostname&quot;,</span><br><span class=\"line\">        &quot;HostsPath&quot;: &quot;/var/lib/docker/containers/79a9b0e8c0745bff1f4b4333e53dc738bbb3bf2015591220069fffe010e0024c/hosts&quot;,</span><br><span class=\"line\">        &quot;LogPath&quot;: &quot;/var/lib/docker/containers/79a9b0e8c0745bff1f4b4333e53dc738bbb3bf2015591220069fffe010e0024c/79a9b0e8c0745bff1f4b4333e53dc738bbb3bf2015591220069fffe010e0024c-json.log&quot;,</span><br><span class=\"line\">        &quot;Name&quot;: &quot;/webapp&quot;,</span><br><span class=\"line\">        &quot;RestartCount&quot;: 0,</span><br><span class=\"line\">        &quot;Driver&quot;: &quot;overlay2&quot;,</span><br><span class=\"line\">        &quot;Platform&quot;: &quot;linux&quot;,</span><br><span class=\"line\">        &quot;MountLabel&quot;: &quot;&quot;,</span><br><span class=\"line\">        &quot;ProcessLabel&quot;: &quot;&quot;,</span><br><span class=\"line\">        &quot;AppArmorProfile&quot;: &quot;&quot;,</span><br><span class=\"line\">        &quot;ExecIDs&quot;: null,</span><br><span class=\"line\">        &quot;HostConfig&quot;: &#123;</span><br><span class=\"line\">            &quot;Binds&quot;: null,</span><br><span class=\"line\">            &quot;ContainerIDFile&quot;: &quot;&quot;,</span><br><span class=\"line\">            &quot;LogConfig&quot;: &#123;</span><br><span class=\"line\">                &quot;Type&quot;: &quot;json-file&quot;,</span><br><span class=\"line\">                &quot;Config&quot;: &#123;&#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;NetworkMode&quot;: &quot;default&quot;,</span><br><span class=\"line\">            &quot;PortBindings&quot;: &#123;&#125;,</span><br><span class=\"line\">            &quot;RestartPolicy&quot;: &#123;</span><br><span class=\"line\">                &quot;Name&quot;: &quot;no&quot;,</span><br><span class=\"line\">                &quot;MaximumRetryCount&quot;: 0</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;AutoRemove&quot;: false,</span><br><span class=\"line\">            &quot;VolumeDriver&quot;: &quot;&quot;,</span><br><span class=\"line\">            &quot;VolumesFrom&quot;: null,</span><br><span class=\"line\">            &quot;CapAdd&quot;: null,</span><br><span class=\"line\">            &quot;CapDrop&quot;: null,</span><br><span class=\"line\">            &quot;Capabilities&quot;: null,</span><br><span class=\"line\">            &quot;Dns&quot;: [],</span><br><span class=\"line\">            &quot;DnsOptions&quot;: [],</span><br><span class=\"line\">            &quot;DnsSearch&quot;: [],</span><br><span class=\"line\">            &quot;ExtraHosts&quot;: null,</span><br><span class=\"line\">            &quot;GroupAdd&quot;: null,</span><br><span class=\"line\">            &quot;IpcMode&quot;: &quot;private&quot;,</span><br><span class=\"line\">            &quot;Cgroup&quot;: &quot;&quot;,</span><br><span class=\"line\">            &quot;Links&quot;: null,</span><br><span class=\"line\">            &quot;OomScoreAdj&quot;: 0,</span><br><span class=\"line\">            &quot;PidMode&quot;: &quot;&quot;,</span><br><span class=\"line\">            &quot;Privileged&quot;: false,</span><br><span class=\"line\">            &quot;PublishAllPorts&quot;: true,</span><br><span class=\"line\">            &quot;ReadonlyRootfs&quot;: false,</span><br><span class=\"line\">            &quot;SecurityOpt&quot;: null,</span><br><span class=\"line\">            &quot;UTSMode&quot;: &quot;&quot;,</span><br><span class=\"line\">            &quot;UsernsMode&quot;: &quot;&quot;,</span><br><span class=\"line\">            &quot;ShmSize&quot;: 67108864,</span><br><span class=\"line\">            &quot;Runtime&quot;: &quot;runc&quot;,</span><br><span class=\"line\">            &quot;ConsoleSize&quot;: [</span><br><span class=\"line\">                0,</span><br><span class=\"line\">                0</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            &quot;Isolation&quot;: &quot;&quot;,</span><br><span class=\"line\">            &quot;CpuShares&quot;: 0,</span><br><span class=\"line\">            &quot;Memory&quot;: 0,</span><br><span class=\"line\">            &quot;NanoCpus&quot;: 0,</span><br><span class=\"line\">            &quot;CgroupParent&quot;: &quot;&quot;,</span><br><span class=\"line\">            &quot;BlkioWeight&quot;: 0,</span><br><span class=\"line\">            &quot;BlkioWeightDevice&quot;: [],</span><br><span class=\"line\">            &quot;BlkioDeviceReadBps&quot;: null,</span><br><span class=\"line\">            &quot;BlkioDeviceWriteBps&quot;: null,</span><br><span class=\"line\">            &quot;BlkioDeviceReadIOps&quot;: null,</span><br><span class=\"line\">            &quot;BlkioDeviceWriteIOps&quot;: null,</span><br><span class=\"line\">            &quot;CpuPeriod&quot;: 0,</span><br><span class=\"line\">            &quot;CpuQuota&quot;: 0,</span><br><span class=\"line\">            &quot;CpuRealtimePeriod&quot;: 0,</span><br><span class=\"line\">            &quot;CpuRealtimeRuntime&quot;: 0,</span><br><span class=\"line\">            &quot;CpusetCpus&quot;: &quot;&quot;,</span><br><span class=\"line\">            &quot;CpusetMems&quot;: &quot;&quot;,</span><br><span class=\"line\">            &quot;Devices&quot;: [],</span><br><span class=\"line\">            &quot;DeviceCgroupRules&quot;: null,</span><br><span class=\"line\">            &quot;DeviceRequests&quot;: null,</span><br><span class=\"line\">            &quot;KernelMemory&quot;: 0,</span><br><span class=\"line\">            &quot;KernelMemoryTCP&quot;: 0,</span><br><span class=\"line\">            &quot;MemoryReservation&quot;: 0,</span><br><span class=\"line\">            &quot;MemorySwap&quot;: 0,</span><br><span class=\"line\">            &quot;MemorySwappiness&quot;: null,</span><br><span class=\"line\">            &quot;OomKillDisable&quot;: false,</span><br><span class=\"line\">            &quot;PidsLimit&quot;: null,</span><br><span class=\"line\">            &quot;Ulimits&quot;: null,</span><br><span class=\"line\">            &quot;CpuCount&quot;: 0,</span><br><span class=\"line\">            &quot;CpuPercent&quot;: 0,</span><br><span class=\"line\">            &quot;IOMaximumIOps&quot;: 0,</span><br><span class=\"line\">            &quot;IOMaximumBandwidth&quot;: 0,</span><br><span class=\"line\">            &quot;MaskedPaths&quot;: [</span><br><span class=\"line\">                &quot;/proc/asound&quot;,</span><br><span class=\"line\">                &quot;/proc/acpi&quot;,</span><br><span class=\"line\">                &quot;/proc/kcore&quot;,</span><br><span class=\"line\">                &quot;/proc/keys&quot;,</span><br><span class=\"line\">                &quot;/proc/latency_stats&quot;,</span><br><span class=\"line\">                &quot;/proc/timer_list&quot;,</span><br><span class=\"line\">                &quot;/proc/timer_stats&quot;,</span><br><span class=\"line\">                &quot;/proc/sched_debug&quot;,</span><br><span class=\"line\">                &quot;/proc/scsi&quot;,</span><br><span class=\"line\">                &quot;/sys/firmware&quot;</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            &quot;ReadonlyPaths&quot;: [</span><br><span class=\"line\">                &quot;/proc/bus&quot;,</span><br><span class=\"line\">                &quot;/proc/fs&quot;,</span><br><span class=\"line\">                &quot;/proc/irq&quot;,</span><br><span class=\"line\">                &quot;/proc/sys&quot;,</span><br><span class=\"line\">                &quot;/proc/sysrq-trigger&quot;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;GraphDriver&quot;: &#123;</span><br><span class=\"line\">            &quot;Data&quot;: &#123;</span><br><span class=\"line\">                &quot;LowerDir&quot;: &quot;/var/lib/docker/overlay2/c2bd00f63da5353bd7378d8cc61428825a6912df7d4915ddd1ccbb1e64c4bcd5-init/diff:/var/lib/docker/overlay2/78476f806a7f8215910d9d6f1a55aa7f432562dc3dca97d28e69f6e2e6d17149/diff:/var/lib/docker/overlay2/9167e98f0c6eedbce79f55ad73db84fdbdc65a80dd0ff8b57e6d068aa8828c8d/diff:/var/lib/docker/overlay2/5908a0b08cecf7d93c0bfc6822ee52af619a872a4196c3091fffa2eb82588b0f/diff:/var/lib/docker/overlay2/dc038e093dc9db0c8996635b1d6cf79dae163ed7cd93922824fef535668fb84e/diff:/var/lib/docker/overlay2/93c919ef9bab4ad8c9b570275d0d8abcc1c530aea546e70630a9d14060b61195/diff&quot;,</span><br><span class=\"line\">                &quot;MergedDir&quot;: &quot;/var/lib/docker/overlay2/c2bd00f63da5353bd7378d8cc61428825a6912df7d4915ddd1ccbb1e64c4bcd5/merged&quot;,</span><br><span class=\"line\">                &quot;UpperDir&quot;: &quot;/var/lib/docker/overlay2/c2bd00f63da5353bd7378d8cc61428825a6912df7d4915ddd1ccbb1e64c4bcd5/diff&quot;,</span><br><span class=\"line\">                &quot;WorkDir&quot;: &quot;/var/lib/docker/overlay2/c2bd00f63da5353bd7378d8cc61428825a6912df7d4915ddd1ccbb1e64c4bcd5/work&quot;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;Name&quot;: &quot;overlay2&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;Mounts&quot;: [],</span><br><span class=\"line\">        &quot;Config&quot;: &#123;</span><br><span class=\"line\">            &quot;Hostname&quot;: &quot;79a9b0e8c074&quot;,</span><br><span class=\"line\">            &quot;Domainname&quot;: &quot;&quot;,</span><br><span class=\"line\">            &quot;User&quot;: &quot;&quot;,</span><br><span class=\"line\">            &quot;AttachStdin&quot;: false,</span><br><span class=\"line\">            &quot;AttachStdout&quot;: false,</span><br><span class=\"line\">            &quot;AttachStderr&quot;: false,</span><br><span class=\"line\">            &quot;ExposedPorts&quot;: &#123;</span><br><span class=\"line\">                &quot;80/tcp&quot;: &#123;&#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;Tty&quot;: true,</span><br><span class=\"line\">            &quot;OpenStdin&quot;: true,</span><br><span class=\"line\">            &quot;StdinOnce&quot;: false,</span><br><span class=\"line\">            &quot;Env&quot;: [</span><br><span class=\"line\">                &quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;,</span><br><span class=\"line\">                &quot;NGINX_VERSION=1.19.1&quot;,</span><br><span class=\"line\">                &quot;NJS_VERSION=0.4.2&quot;,</span><br><span class=\"line\">                &quot;PKG_RELEASE=1~buster&quot;</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            &quot;Cmd&quot;: [</span><br><span class=\"line\">                &quot;/bin/bash&quot;</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            &quot;Image&quot;: &quot;nginx:latest&quot;,</span><br><span class=\"line\">            &quot;Volumes&quot;: null,</span><br><span class=\"line\">            &quot;WorkingDir&quot;: &quot;&quot;,</span><br><span class=\"line\">            &quot;Entrypoint&quot;: [</span><br><span class=\"line\">                &quot;/docker-entrypoint.sh&quot;</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            &quot;OnBuild&quot;: null,</span><br><span class=\"line\">            &quot;Labels&quot;: &#123;</span><br><span class=\"line\">                &quot;maintainer&quot;: &quot;NGINX Docker Maintainers &lt;docker-maint@nginx.com&gt;&quot;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;StopSignal&quot;: &quot;SIGTERM&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;NetworkSettings&quot;: &#123;</span><br><span class=\"line\">            &quot;Bridge&quot;: &quot;&quot;,</span><br><span class=\"line\">            &quot;SandboxID&quot;: &quot;96cf346aca900378933b0b005e8bffdd160b730d5e82121b66202f98d89496b0&quot;,</span><br><span class=\"line\">            &quot;HairpinMode&quot;: false,</span><br><span class=\"line\">            &quot;LinkLocalIPv6Address&quot;: &quot;&quot;,</span><br><span class=\"line\">            &quot;LinkLocalIPv6PrefixLen&quot;: 0,</span><br><span class=\"line\">            &quot;Ports&quot;: &#123;</span><br><span class=\"line\">                &quot;80/tcp&quot;: [</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        &quot;HostIp&quot;: &quot;0.0.0.0&quot;,</span><br><span class=\"line\">                        &quot;HostPort&quot;: &quot;32769&quot;   # 主机映射的端口</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;SandboxKey&quot;: &quot;/var/run/docker/netns/96cf346aca90&quot;,</span><br><span class=\"line\">            &quot;SecondaryIPAddresses&quot;: null,</span><br><span class=\"line\">            &quot;SecondaryIPv6Addresses&quot;: null,</span><br><span class=\"line\">            &quot;EndpointID&quot;: &quot;450ac478bd79a67255d97466ad6eaefbaaecce13ebcb5681d06d334caf9fb4e9&quot;,</span><br><span class=\"line\">            &quot;Gateway&quot;: &quot;172.17.0.1&quot;,</span><br><span class=\"line\">            &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class=\"line\">            &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class=\"line\">            &quot;IPAddress&quot;: &quot;172.17.0.2&quot;,</span><br><span class=\"line\">            &quot;IPPrefixLen&quot;: 16,</span><br><span class=\"line\">            &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class=\"line\">            &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,</span><br><span class=\"line\">            &quot;Networks&quot;: &#123;</span><br><span class=\"line\">                &quot;bridge&quot;: &#123;</span><br><span class=\"line\">                    &quot;IPAMConfig&quot;: null,</span><br><span class=\"line\">                    &quot;Links&quot;: null,</span><br><span class=\"line\">                    &quot;Aliases&quot;: null,</span><br><span class=\"line\">                    &quot;NetworkID&quot;: &quot;f7bbc1dcbfdba55eb6081ac3571fcc6cb9cb5aa03d6e583e564b8901da45ea91&quot;,</span><br><span class=\"line\">                    &quot;EndpointID&quot;: &quot;450ac478bd79a67255d97466ad6eaefbaaecce13ebcb5681d06d334caf9fb4e9&quot;,</span><br><span class=\"line\">                    &quot;Gateway&quot;: &quot;172.17.0.1&quot;,</span><br><span class=\"line\">                    &quot;IPAddress&quot;: &quot;172.17.0.2&quot;,  # 容器使用的IP地址</span><br><span class=\"line\">                    &quot;IPPrefixLen&quot;: 16,</span><br><span class=\"line\">                    &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class=\"line\">                    &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class=\"line\">                    &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class=\"line\">                    &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,</span><br><span class=\"line\">                    &quot;DriverOpts&quot;: null</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看端口映射信息</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker port 79a9b0e8c074</span></span><br><span class=\"line\">80/tcp -&gt; 0.0.0.0:32769  </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 标识127.17.0.2:80(IP地址可以通过docker inspect查看)端口映射到主机的32769端口</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 我们可以在本机上(如果不使用-p或-P参数，将只能在本机访问)访问nginx，如下：</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> curl -I 172.17.0.2</span></span><br><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">Server: nginx/1.19.1</span><br><span class=\"line\">Date: Thu, 16 Jul 2020 15:04:03 GMT</span><br><span class=\"line\">Content-Type: text/html</span><br><span class=\"line\">Content-Length: 612</span><br><span class=\"line\">Last-Modified: Tue, 07 Jul 2020 15:52:25 GMT</span><br><span class=\"line\">Connection: keep-alive</span><br><span class=\"line\">ETag: &quot;5f049a39-264&quot;</span><br><span class=\"line\">Accept-Ranges: bytes</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>外部访问nginx访问：</p>\n<p><img src=\"image-20200716232426521.png\" alt=\"image-20200716232426521\"></p>\n<h4 id=\"5-停止容器\"><a href=\"#5-停止容器\" class=\"headerlink\" title=\"5 停止容器\"></a>5 停止容器</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker container stop 79a9b0e8c074</span></span><br><span class=\"line\">79a9b0e8c074  # 命令中的container可以忽略不写</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 使用Kill命令暴力终止容器</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker container <span class=\"built_in\">kill</span> 79a9b0e8c074</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-重启容器或启动停止的容器\"><a href=\"#6-重启容器或启动停止的容器\" class=\"headerlink\" title=\"6 重启容器或启动停止的容器\"></a>6 重启容器或启动停止的容器</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 启动停止的容器</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker container start  79a9b0e8c074</span></span><br><span class=\"line\">79a9b0e8c074</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker ps</span></span><br><span class=\"line\">CONTAINER ID  IMAGE   COMMAND  CREATED  STATUS   PORTS     NAMES</span><br><span class=\"line\">79a9b0e8c074  nginx:latest   &quot;/docker-entrypoint.…&quot;   5 minutes ago       Up 2 seconds        0.0.0.0:32771-&gt;80/tcp   webapp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 此时可以查看本地服务器32771端口使用情况</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ps -ef | grep 32771</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 此处表明本地端口跟容器端口做了映射</span></span><br><span class=\"line\">root      20003   9219  0 21:23 ?        00:00:00 /usr/bin/docker-proxy -proto tcp -host-ip 0.0.0.0 -host-port 32771 -container-ip 172.17.0.2 -container-port 80</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 我们也可以使用下面的命令查看指定容器端口映射情况</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker container  port 79a9b0e8c074</span></span><br><span class=\"line\">80/tcp -&gt; 0.0.0.0:32771  # 上面命令中的container可省略不写</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 重启一个容器</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker container restart 79a9b0e8c074</span></span><br><span class=\"line\">79a9b0e8c074  # 上面命令中的container可省略不写</span><br></pre></td></tr></table></figure>\n<h4 id=\"7-进入容器\"><a href=\"#7-进入容器\" class=\"headerlink\" title=\"7 进入容器\"></a>7 进入容器</h4><p>​        在使用 <strong>-d</strong> 参数时，容器启动后会进入后台。此时想要进入容器，可以通过以下指令进入：</p>\n<ul>\n<li><strong>docker attach + 容器id</strong>：如果从这个容器退出，会导致容器的停止，如果多个用户使用该方式进入容器，其实进入的是同一个shell，可以看到的是同一个屏幕</li>\n<li><strong>docker exec + 容器id</strong>：使用exec进入容器，需要使用-it和/bin/bash重新分配一个终端，等同于进入了一个子shell中，因此退出容器终端，不会导致容器的停止。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 方法1：不推荐</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker attach 79a9b0e8c074</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 方法2：推荐</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker <span class=\"built_in\">exec</span> -it  79a9b0e8c074 /bin/bash</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"8-导入和导出容器\"><a href=\"#8-导入和导出容器\" class=\"headerlink\" title=\"8 导入和导出容器\"></a>8 导入和导出容器</h4><p>​        这种方式常用于由于网络原因，在两台服务器之间的镜像导入和导出，亦或将外网镜像导入到内网环境中。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 将docker镜像导出为tar文件，等同于docker image save 0901fa9da894 &gt; /tmp/nginx.tar</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker save  -o nginx.tar nginx:latest</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 将tar文件导出为docker镜像</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker load -i nginx.tar</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"9-删除容器\"><a href=\"#9-删除容器\" class=\"headerlink\" title=\"9 删除容器\"></a>9 删除容器</h4><blockquote>\n<p>值得注意的是，无论我们使用哪种方式启动容器，然后停止容器后，容器都存在于本机中，后续我们可以继续启动某个容器，即<strong>只要我们不执行删除操作，容器会一直存在于本地服务器上，长期占用本地磁盘空间</strong></p>\n</blockquote>\n<ul>\n<li>执行删除指定容器的命令</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker container rm 79a9b0e8c074</span></span><br><span class=\"line\">79a9b0e8c074  # 直接将运行的容器杀掉，container可省略不写</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用<code>--rm</code>启动容器时，指定容器运行完成后自动删除容器</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker image ls</span></span><br><span class=\"line\">REPOSITORY      TAG     IMAGE ID      CREATED           SIZE</span><br><span class=\"line\">scaven/nginx    1.2     0901fa9da894  5 days ago        132MB</span><br><span class=\"line\">ubuntu          15.10   9b9cb95443b5  3 years ago       137MB</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 在执行完任务后，退出容器就直接删除容器，常用于开发、测试、临时性任务等</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker container run -it --name ubuntu --rm  9b9cb95443b5</span></span><br><span class=\"line\">root@6eff441bf994:/# echo $HOSTNAME  </span><br><span class=\"line\">6eff441bf994</span><br><span class=\"line\">root@6eff441bf994:/# exit</span><br><span class=\"line\">exit</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 此时通过docker container ls -a查看将查询不到一个名叫ubuntu的容器</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除本机上的所有容器</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker container rm `docker container ls -a -q`</span></span><br></pre></td></tr></table></figure>\n","comments":true,"permalink":"https://qingdalf.github.io/2021-05/dockerLifeCycle/","categories":[],"tags":[]},{"title":"安装docker和运行容器的方式","date":"2021-05-03T05:33:03.000Z","path":"2021-05/dockerInstall/","content":"<h3 id=\"1-docker的安装：\"><a href=\"#1-docker的安装：\" class=\"headerlink\" title=\"1 docker的安装：\"></a>1 docker的安装：</h3><p>​       Linux系统自带了docker软件包，但该软件包版本较低，一般不直接安装系统自带的docker。</p>\n<span id=\"more\"></span>\n<img src=\"image-20200715151851920.png\" alt=\"image-20200715151851920\" style=\"zoom: 67%;\" />\n\n<p>​       我们可以在虚拟机中使用yum repolist命令，同步系统自带的软件包，发现结果都是1.13.1版本的docker，如下图：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum info docker  <span class=\"comment\"># 查看服务器上的docker信息</span></span></span><br><span class=\"line\">Loaded plugins: fastestmirror</span><br><span class=\"line\">Loading mirror speeds from cached hostfile</span><br><span class=\"line\"> * base: mirrors.aliyun.com</span><br><span class=\"line\"> * extras: mirrors.aliyun.com</span><br><span class=\"line\"> * updates: mirrors.aliyun.com</span><br><span class=\"line\">Available Packages</span><br><span class=\"line\">Name        : docker   # 软件包名称</span><br><span class=\"line\">Arch        : x86_64   # 适用平台</span><br><span class=\"line\">Epoch       : 2</span><br><span class=\"line\">Version     : 1.13.1   # docker版本信息</span><br><span class=\"line\">Release     : 162.git64e9980.el7.centos</span><br><span class=\"line\">Size        : 18 M     # 软件包大小</span><br><span class=\"line\">Repo        : extras/7/x86_64   # 软件包仓库</span><br><span class=\"line\">Summary     : Automates deployment of containerized applications</span><br><span class=\"line\">URL         : https://github.com/docker/docker   # 软件包的url地址</span><br><span class=\"line\">License     : ASL 2.0</span><br><span class=\"line\">Description : Docker is an open-source engine that automates the deployment of any</span><br><span class=\"line\">描述信息     : application as a lightweight, portable, self-sufficient container that will</span><br><span class=\"line\">            : run virtually anywhere.</span><br><span class=\"line\">            : </span><br><span class=\"line\">            : Docker containers can encapsulate any payload, and will run consistently on</span><br><span class=\"line\">            : and between virtually any server. The same container that a developer builds</span><br><span class=\"line\">            : and tests on a laptop will run at scale, in production*, on VMs, bare-metal</span><br><span class=\"line\">            : servers, OpenStack clusters, public instances, or combinations of the above.</span><br></pre></td></tr></table></figure>\n\n<p>接下来，我们来查看阿里镜像网站上的docker的版本信息：</p>\n<p>输入网址<a href=\"https://mirrors.aliyun.com/\">https://mirrors.aliyun.com/</a> 进入阿里镜像网站，选择docker-ce进入子页面(子页面中有Linux、mac、win三个子目录)，选择对应的Linux子目录进入Linux版本的docker目录，接下来选择系统版本(该页面显示主要的Linux发行版)，此处根据Linux系统版本进行选择，点击进入centos子目录，如下图：</p>\n<img src=\"image-20200715151930491.png\" alt=\"image-20200715151930491\" style=\"zoom:67%;\" />\n\n<p>​        我们可以直接配置并使用该仓库进行docker的安装，如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装前关闭firewalld和selinux</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum install -y yum-utils device-mapper-persistent-data lvm2  <span class=\"comment\"># 安装必要的软件</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 添加docker仓库，添加完成后就是国内阿里源仓库了，如果下载了国外的docker镜像仓库，可将网址替换成国内源</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span>  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum clean all &amp;&amp; yum repolist</span></span><br><span class=\"line\">repo id             repo name                             status</span><br><span class=\"line\">base/7/x86_64       CentOS-7 - Base - mirrors.aliyun.com  10,070</span><br><span class=\"line\">docker-ce-stable/x86_64    Docker CE Stable - x86_64      79</span><br><span class=\"line\">epel/x86_64    Extra Packages for Enterprise Linux 7 - x86_64 13,376</span><br><span class=\"line\">extras/7/x86_64    CentOS-7 - Extras - mirrors.aliyun.com   412</span><br><span class=\"line\">updates/7/x86_64   CentOS-7 - Updates - mirrors.aliyun.com  890</span><br><span class=\"line\">repolist: 24,827  # 配置完成后如上所示</span><br></pre></td></tr></table></figure>\n\n<p>​        较旧的Docker版本称为docker或docker-engine。如果已安装这些程序，请卸载它们以及相关的依赖项。在进行安装之前先卸载系统自带的docker。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> rpm -qi docker-ce   <span class=\"comment\"># 查看docker是否已经安装，如果安装需卸载</span></span></span><br><span class=\"line\">package docker-ce is not installed</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> rpm -qi docker</span></span><br><span class=\"line\">package docker is not installed</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 如果显示已经安装了docker，需要使用下面的命令卸载docker，再安装新版本的docker</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-engine</span></span><br></pre></td></tr></table></figure>\n\n<p>安装docker</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum -y install docker-ce   <span class=\"comment\"># 主要安装了如下的软件</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 也可以安装指定版本的docker，使用yum时指定版本即可</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看docker版本信息</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker version</span>  </span><br><span class=\"line\">Client: Docker Engine - Community  # docker客户端信息</span><br><span class=\"line\"> Version:           19.03.12</span><br><span class=\"line\"> API version:       1.40</span><br><span class=\"line\"> Go version:        go1.13.10</span><br><span class=\"line\"> Git commit:        48a66213fe</span><br><span class=\"line\"> Built:             Mon Jun 22 15:46:54 2020   # 安装时间</span><br><span class=\"line\"> OS/Arch:           linux/amd64   # 系统类型</span><br><span class=\"line\"> Experimental:      false</span><br><span class=\"line\">Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 提示docker daemon未运行，运行后会显示docker daemon的信息</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> rpm -qi docker-ce  <span class=\"comment\"># 查看安装的docker-ce信息</span></span></span><br><span class=\"line\">Name        : docker-ce</span><br><span class=\"line\">Epoch       : 3</span><br><span class=\"line\">Version     : 19.03.12</span><br><span class=\"line\">Release     : 3.el7</span><br><span class=\"line\">Architecture: x86_64</span><br><span class=\"line\">Install Date: Wed 15 Jul 2020 03:32:29 PM CST</span><br><span class=\"line\">Group       : Tools/Docker</span><br><span class=\"line\">Size        : 106714688</span><br><span class=\"line\">License     : ASL 2.0</span><br><span class=\"line\">Signature   : RSA/SHA512, Tue 23 Jun 2020 05:21:51 AM CST, Key ID c52feb6b621e9f35</span><br><span class=\"line\">Source RPM  : docker-ce-19.03.12-3.el7.src.rpm</span><br><span class=\"line\">Build Date  : Mon 22 Jun 2020 11:46:41 PM CST</span><br><span class=\"line\">Build Host  : 7d52e4e2ee0b</span><br><span class=\"line\">Relocations : (not relocatable)</span><br><span class=\"line\">Packager    : Docker &lt;support@docker.com&gt;</span><br><span class=\"line\">Vendor      : Docker   # vendor [ˈvendər]  小贩，这里指软件提供厂商</span><br><span class=\"line\">URL         : https://www.docker.com   # 官方url地址</span><br><span class=\"line\">Summary     : The open-source application container engine</span><br><span class=\"line\">Description :  # 描述信息</span><br><span class=\"line\">Docker is a product for you to build, ship and run any application as a</span><br><span class=\"line\">lightweight container.</span><br><span class=\"line\"></span><br><span class=\"line\">Docker containers are both hardware-agnostic and platform-agnostic. This means</span><br><span class=\"line\">they can run anywhere, from your laptop to the largest cloud compute instance and</span><br><span class=\"line\">everything in between - and they don&#x27;t require you to use a particular</span><br><span class=\"line\">language, framework or packaging system. That makes them great building blocks</span><br><span class=\"line\">for deploying and scaling web apps, databases, and backend services without</span><br><span class=\"line\">depending on a particular stack or provider.</span><br></pre></td></tr></table></figure>\n\n<p>​        到此，dockers就安装完成了。</p>\n<p>​        给docker镜像加速，我们在创建容器的时候，是需要到官网上下载指定版本的软件的，因此下载镜像的快慢是我们必须关注的话题，一般可以使用官网的docker cn、阿里云加速器、中国科技大学加速器、163加速器等。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls /etc/docker</span></span><br><span class=\"line\">ls: cannot access /etc/docker: No such file or directory</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> mkdir /etc/docker</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> vim /etc/docker/daemon.json <span class=\"comment\"># 镜像加速，自建该文件</span></span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com&quot;,&quot;http://hub-mirror.c.163.com&quot;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 启动docker</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> systemctl start docker  &amp;&amp; systemctl <span class=\"built_in\">enable</span> docker</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker version</span></span><br><span class=\"line\">Client: Docker Engine - Community   # docker客户端信息</span><br><span class=\"line\"> Version:           19.03.12</span><br><span class=\"line\"> API version:       1.40</span><br><span class=\"line\"> Go version:        go1.13.10</span><br><span class=\"line\"> Git commit:        48a66213fe</span><br><span class=\"line\"> Built:             Mon Jun 22 15:46:54 2020</span><br><span class=\"line\"> OS/Arch:           linux/amd64</span><br><span class=\"line\"> Experimental:      false</span><br><span class=\"line\"></span><br><span class=\"line\">Server: Docker Engine - Community   # docker服务端信息</span><br><span class=\"line\"> Engine:</span><br><span class=\"line\">  Version:          19.03.12</span><br><span class=\"line\">  API version:      1.40 (minimum version 1.12)</span><br><span class=\"line\">  Go version:       go1.13.10</span><br><span class=\"line\">  Git commit:       48a66213fe</span><br><span class=\"line\">  Built:            Mon Jun 22 15:45:28 2020</span><br><span class=\"line\">  OS/Arch:          linux/amd64</span><br><span class=\"line\">  Experimental:     false</span><br><span class=\"line\"> containerd:</span><br><span class=\"line\">  Version:          1.2.13</span><br><span class=\"line\">  GitCommit:        7ad184331fa3e55e52b890ea95e65ba581ae3429</span><br><span class=\"line\"> runc:</span><br><span class=\"line\">  Version:          1.0.0-rc10</span><br><span class=\"line\">  GitCommit:        dc9208a3303feef5b3839f4323d9beb36df0a9dd</span><br><span class=\"line\"> docker-init:</span><br><span class=\"line\">  Version:          0.18.0</span><br><span class=\"line\">  GitCommit:        fec3683</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker info  <span class=\"comment\"># docker容器信息</span></span></span><br><span class=\"line\">Client:</span><br><span class=\"line\"> Debug Mode: false</span><br><span class=\"line\"></span><br><span class=\"line\">Server:</span><br><span class=\"line\"> Containers: 0  # 容器</span><br><span class=\"line\">  Running: 0    # 运行的容器个数</span><br><span class=\"line\">  Paused: 0     # 暂停的容器个数</span><br><span class=\"line\">  Stopped: 0    # 停止的容器个数</span><br><span class=\"line\"> Images: 0      # docker镜像个数</span><br><span class=\"line\"> Server Version: 19.03.12   # docker服务端版本</span><br><span class=\"line\"> Storage Driver: overlay2   # 存储</span><br><span class=\"line\">  Backing Filesystem: xfs   # 文件系统</span><br><span class=\"line\">  Supports d_type: true</span><br><span class=\"line\">  Native Overlay Diff: true</span><br><span class=\"line\"> Logging Driver: json-file</span><br><span class=\"line\"> Cgroup Driver: cgroupfs</span><br><span class=\"line\"> Plugins:          # 插件</span><br><span class=\"line\">  Volume: local</span><br><span class=\"line\">  Network: bridge host ipvlan macvlan null overlay</span><br><span class=\"line\">  Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog</span><br><span class=\"line\"> Swarm: inactive</span><br><span class=\"line\"> Runtimes: runc</span><br><span class=\"line\"> Default Runtime: runc</span><br><span class=\"line\"> Init Binary: docker-init</span><br><span class=\"line\"> containerd version: 7ad184331fa3e55e52b890ea95e65ba581ae3429</span><br><span class=\"line\"> runc version: dc9208a3303feef5b3839f4323d9beb36df0a9dd</span><br><span class=\"line\"> init version: fec3683</span><br><span class=\"line\"> Security Options:    # 安全选项</span><br><span class=\"line\">  seccomp</span><br><span class=\"line\">   Profile: default</span><br><span class=\"line\"> Kernel Version: 3.10.0-957.el7.x86_64   # 本地服务器内核版本</span><br><span class=\"line\"> Operating System: CentOS Linux 7 (Core)  # 本地服务器操作系统</span><br><span class=\"line\"> OSType: linux       # 操作系统类型</span><br><span class=\"line\"> Architecture: x86_64    # 本地服务器架构</span><br><span class=\"line\"> CPUs: 4     # cpu个数</span><br><span class=\"line\"> Total Memory: 7.62GiB   # 本地服务器内存大小</span><br><span class=\"line\"> Name: docker     # 本地服务器主机名</span><br><span class=\"line\"> ID: CTSU:SHD4:IUXR:4NUI:BC2G:D2JO:OVS2:2VNN:3OP5:GOV5:EUO7:NI2A</span><br><span class=\"line\"> Docker Root Dir: /var/lib/docker   # docker根目录</span><br><span class=\"line\"> Debug Mode: false</span><br><span class=\"line\"> Registry: https://index.docker.io/v1/   # 默认docker仓库地址</span><br><span class=\"line\"> Labels:</span><br><span class=\"line\"> Experimental: false</span><br><span class=\"line\"> Insecure Registries:</span><br><span class=\"line\">  127.0.0.0/8</span><br><span class=\"line\"> Registry Mirrors:     # 加速镜像地址</span><br><span class=\"line\">  https://registry.docker-cn.com/    # 在/etc/docker/daemon.json定义</span><br><span class=\"line\">  http://hub-mirror.c.163.com/</span><br><span class=\"line\"> Live Restore Enabled: false</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker根目录下的文件夹</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ll  /var/lib/docker</span>    </span><br><span class=\"line\">total 4</span><br><span class=\"line\">drwx--x--x  4 root root  120 Feb 15 10:49 buildkit</span><br><span class=\"line\">drwx-----x  5 root root  222 Mar 31 19:51 containers   </span><br><span class=\"line\">drwx------  3 root root   22 Feb 15 10:49 image        </span><br><span class=\"line\">drwxr-x---  3 root root   19 Feb 15 10:49 network     </span><br><span class=\"line\">drwx-----x 19 root root 4096 Mar 31 19:51 overlay2</span><br><span class=\"line\">drwx------  4 root root   32 Feb 15 10:49 plugins</span><br><span class=\"line\">drwx------  2 root root    6 Mar 31 19:46 runtimes</span><br><span class=\"line\">drwx------  2 root root    6 Feb 15 10:49 swarm</span><br><span class=\"line\">drwx------  2 root root    6 Mar 31 19:46 tmp</span><br><span class=\"line\">drwx------  2 root root    6 Feb 15 10:49 trust</span><br><span class=\"line\">drwx-----x  2 root root   50 Mar 31 19:46 volumes</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装完成后系统上将会多出一个docker0的网络，该网卡随着容器的运行而运行，如果没有容器运行该网卡状态为down</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ifconfig  docker0</span>  </span><br><span class=\"line\">docker0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500</span><br><span class=\"line\">        inet 172.17.0.1  netmask 255.255.0.0  broadcast 172.17.255.255</span><br><span class=\"line\">        inet6 fe80::42:c0ff:febc:f72a  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class=\"line\">        ether 02:42:c0:bc:f7:2a  txqueuelen 0  (Ethernet)</span><br><span class=\"line\">        RX packets 0  bytes 0 (0.0 B)</span><br><span class=\"line\">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class=\"line\">        TX packets 2  bytes 180 (180.0 B)</span><br><span class=\"line\">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 运行容器后，会多出容器的IP信息，网络将后后面的章节详细讲解，这里不赘述</span></span><br></pre></td></tr></table></figure>\n\n<p> Docker程序环境：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 默认安装的文件如下</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> rpm -ql docker-ce</span> </span><br><span class=\"line\">/usr/bin/docker-init</span><br><span class=\"line\">/usr/bin/docker-proxy</span><br><span class=\"line\">/usr/bin/dockerd</span><br><span class=\"line\">/usr/lib/systemd/system/docker.service</span><br><span class=\"line\">/usr/lib/systemd/system/docker.socket</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker的配置文件可手动新建</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># docker网络文件--/etc/sysconfig/docker-network</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># docker存储文件--/etc/sysconfig/docker-storage</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># docker主配置文件--/etc/sysconfig/docker</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># Docker registry配置文件--/etc/conftainers/registries.conf</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># Docker镜像加速文件--/etc/docker/daemon.json</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-运行容器\"><a href=\"#2-运行容器\" class=\"headerlink\" title=\"2 运行容器\"></a>2 运行容器</h3><p>​        容器通过镜像启动。镜像出现在Docker生命周期中的<strong>构建和打包阶段</strong>，容器存在于<strong>启动和执行</strong>阶段。</p>\n<p><img src=\"v2-e1dfe4005b07181a1d5c5a7ae0fa32b8_720w.jpg\" alt=\"img\"></p>\n<p>​        当一个容器启动时，Docker会在镜像的<strong>最顶层</strong>加载一个<strong>读写文件系统</strong>。程序就在这一层执行，第一个启动时，这一层是空的，当文件系统变化时，都会应用到这一层。</p>\n<p>​        <strong>写时复制</strong>。如果想要修改一文件，就会先将它复制到可写层。</p>\n<p><strong>Docker容器的能力 ：</strong></p>\n<ul>\n<li>文件系统隔离：每个容器都有自己的root文件系统。</li>\n<li>进程隔离：每个容器都运行在自己的进程环境中。</li>\n<li>网络隔离：容器间的虚拟网络接口和IP地址都是分开的。</li>\n<li>资源隔离和分组：使用cgroups将CPU和内存之间的资源独立分配给每个Docker容器。</li>\n</ul>\n<h4 id=\"2-1-运行一次性容器\"><a href=\"#2-1-运行一次性容器\" class=\"headerlink\" title=\"2.1 运行一次性容器\"></a>2.1 运行一次性容器</h4><p>​        <strong>该类型的容器，执行完任务后就自动销毁。</strong></p>\n<p>​        Docker允许你在容器内运行应用程序， 使用 <code>docker run</code>命令来在容器内运行一个应用程序。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker container run ubuntu:15.10 /bin/<span class=\"built_in\">echo</span> <span class=\"string\">&quot;Hello world&quot;</span></span></span><br><span class=\"line\">Unable to find image &#x27;ubuntu:15.10&#x27; locally # 提示本地没有ubuntu:15.10镜像，则自动去镜像仓库拉取镜像</span><br><span class=\"line\">15.10: Pulling from library/ubuntu  # 然后从仓库中下载指定镜像</span><br><span class=\"line\">7dcf5a444392: Pull complete </span><br><span class=\"line\">759aa75f3cee: Pull complete </span><br><span class=\"line\">3fa871dc8a2b: Pull complete </span><br><span class=\"line\">224c42ae46e7: Pull complete </span><br><span class=\"line\">Digest: sha256:02521a2d079595241c6793b2044f02eecf294034f31d6e235ac4b2b54ffc41f3   # 校验码</span><br><span class=\"line\">Status: Downloaded newer image for ubuntu:15.10  # 提示下载镜像的信息</span><br><span class=\"line\">Hello world  # 输出运行结果</span><br></pre></td></tr></table></figure>\n\n<p>各个参数解析：</p>\n<ul>\n<li><strong><code>docker</code></strong>: <code>Docker</code> 的二进制执行文件。</li>\n<li><strong><code>run</code></strong>: 与前面的 <code>docker </code>组合来运行一个容器。</li>\n<li><strong><code>ubuntu:15.10</code></strong> 指定要运行的镜像，Docker 首先从本地主机上查找镜像是否存在，如果不存在，<code>Docker </code>就会从镜像仓库 <code>Docker Hub</code> 下载公共镜像。</li>\n<li><strong><code>/bin/echo &quot;Hello world&quot;</code>:</strong> 在启动的容器里执行的命令</li>\n</ul>\n<p>以上命令完整的意思可以解释为：<code>Docker </code>以 <code>ubuntu15.10 </code>镜像创建一个新容器，然后在容器里执行 <code>bin/echo &quot;Hello world&quot;</code>，然后输出结果。</p>\n<p>运行完成后docker自动停止，因为我们没有让该<code>container</code>一直运行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker image ls</span> </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 镜像        镜像标签        镜像的id         镜像创建时间          镜像大小</span></span><br><span class=\"line\">REPOSITORY    TAG           IMAGE ID        CREATED             SIZE</span><br><span class=\"line\">ubuntu        15.10         9b9cb95443b5    3 years ago         137MB</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker container ls   <span class=\"comment\"># 查看在运行的容器，显示为空</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 容器id       镜像    运行的命令    创建时间   状态    端口    容器名称</span></span><br><span class=\"line\">CONTAINER ID  IMAGE   COMMAND    CREATED   STATUS  PORTS  NAMES</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker container ls  -a</span></span><br><span class=\"line\">CONTAINER ID     IMAGE     COMMAND            CREATED    STATUS    PORTS  NAMES</span><br><span class=\"line\">fa95ac9f0d3d     ubuntu:15.10  &quot;/bin/echo &#x27;Hello wo…&quot;   About a minute ago   Exited (0) About a minute ago    crazy_lehmann</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 注意这里的两个About a minute ago，容器启动并执行了任务后就立马终止，要想不立马启动执行任务完成后就停止，那么就需要使用交互式模式或后台模式启动容器</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-运行交互式的容器\"><a href=\"#2-2-运行交互式的容器\" class=\"headerlink\" title=\"2.2 运行交互式的容器\"></a>2.2 运行交互式的容器</h4><p>​        <strong>该类型的容器，用户退出容器后，容器自动销毁，只要不退出窗口，容器会一直运行。</strong></p>\n<p>​        我们通过<code> docker</code> 的两个参数<code> -i -t</code>，让 <code>docker</code> 运行的容器实现**”对话”**的能力：</p>\n<p>常用参数解析：</p>\n<ul>\n<li><strong>-t:</strong> 在新容器内指定一个伪终端或终端</li>\n<li><strong>-i:</strong> 允许你对容器内的标准输入 (STDIN) 进行交互，一般与<code>-t</code>一起使用</li>\n<li><strong>-d</strong>：运行容器到后台</li>\n<li><strong>-e</strong>：设置环境变量，可使用多个<code>-e</code>设置多个环境变量</li>\n<li><strong>-p</strong>：发布容器端口到主机</li>\n<li><strong>-P</strong>：发布容器的所有EXPOSE端口到宿主机的随机端口</li>\n<li><strong>–name</strong>：设置运行容器的名称，唯一标识</li>\n<li><strong>-h</strong>：设置容器的主机名，不设置的话，默认使用容器id前几位作为主机名，并写入hostname文件中</li>\n<li><strong>–ip</strong>：指定容器的IP，只能用于自定义网络</li>\n<li><strong>–dns</strong>：设置容器的DNS，容器默认会加载宿主机的resolv.conf文件</li>\n<li><strong>–network</strong>：连接容器到一个网络，指定的网络(容器的网络)必须已经存在</li>\n<li><strong>–mount</strong>：将文件系统附加到容器</li>\n<li><strong>-v</strong>：绑定挂载一个卷</li>\n<li><strong>–restart</strong>：容器退出时重启策略，默认为<code>no</code>，可选值为<code>always</code>、<code>no-failure</code></li>\n<li>资源限制参数，如果不限制容器使用的资源，容器默认使用宿主机的所有资源<ul>\n<li>-m：设置容器能使用的最大内存量</li>\n<li>–memory-swap=xxm：运行交换到磁盘的内存量</li>\n<li>–memory-swappiness=&lt;0-100&gt;：rongqi 使用swap分区交换百分比，默认为-1</li>\n<li>–oom-kill-disable：禁用OOM killer</li>\n<li>–cpus：容器能够使用的cpu数量</li>\n<li>–cpuset-cpus==0-3：限制容器使用特点的cpu核心，如0-3，0，2，注意cpu从0开始计算</li>\n<li>–cpu-shares：cpu共享(相对权重)</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 启动容器时就进入容器</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker run -i -t ubuntu:15.10 /bin/bash</span></span><br><span class=\"line\">root@0e2bcf007d3e:/# ls  # 查看容器内部文件，是一个完整的操作系统文件</span><br><span class=\"line\">bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class=\"line\"></span><br><span class=\"line\">root@0e2bcf007d3e:/# uname  -a</span><br><span class=\"line\">Linux 0e2bcf007d3e 3.10.0-957.el7.x86_64 #1 SMP Thu Nov 8 23:39:32 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux</span><br><span class=\"line\"></span><br><span class=\"line\">root@0e2bcf007d3e:/# echo &quot;hello docker!&quot;  # 在容器中执行Linux命令</span><br><span class=\"line\">hello docker!</span><br><span class=\"line\"></span><br><span class=\"line\">root@0e2bcf007d3e:/# exit   # 退出后，容器就被销毁了</span><br><span class=\"line\">exit</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Q：如果我们又想退出窗口，又不想终止该容器，怎么办呢？</p>\n<p>​        在容器内部，按住crl键+p+q三个键，先按住ctl键(不松开)，再按p键，最后按q键。</p>\n<p>​        如果还想回到上面的窗口，使用<code>docker container attach +容器id/容器名</code>，如果此时从该shell中使用<code>exit</code>退出容器，则容器销毁。</p>\n<p>​        使用<code>docker exec</code>将不能进入之前的窗口，而是打开了一个新窗口，因此这种方式使用<code>exit</code>退出shell时，容器仍然会继续运行。</p>\n<p><strong>在未退出容器之前，我们重新开一个shell，查看docker的信息</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker info  <span class=\"comment\"># 显示有一个容器运行，一个停止，有一个镜像</span></span></span><br><span class=\"line\">Client:</span><br><span class=\"line\"> Debug Mode: false</span><br><span class=\"line\"></span><br><span class=\"line\">Server:</span><br><span class=\"line\"> Containers: 2</span><br><span class=\"line\">  Running: 1</span><br><span class=\"line\">  Paused: 0</span><br><span class=\"line\">  Stopped: 1</span><br><span class=\"line\"> Images: 1</span><br><span class=\"line\">·····</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看在运行的容器信息如下</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker container ls</span> </span><br><span class=\"line\">CONTAINER ID     IMAGE     COMMAND            CREATED    STATUS    PORTS  NAMES</span><br><span class=\"line\">0e2bcf007d3e     ubuntu:15.10  &quot;/bin/bash&quot; 16 seconds ago  Up 15 seconds  epic_newton</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看所有容器(运行和未运行)信息</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker container ls  -a</span></span><br><span class=\"line\">CONTAINER ID     IMAGE     COMMAND            CREATED    STATUS    PORTS  NAMES</span><br><span class=\"line\">0e2bcf007d3e     ubuntu:15.10  &quot;/bin/bash&quot; 16 seconds ago  Up 15 seconds  epic_newton</span><br><span class=\"line\">fa95ac9f0d3d     ubuntu:15.10  &quot;/bin/echo &#x27;Hello wo…&quot;  11 minutes ago  Exited (0) 11 minutes ago      crazy_lehmann</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 此时查看ip信息，省略lo和ens33两张网卡的信息：</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ip a</span></span><br><span class=\"line\">·····</span><br><span class=\"line\">3: docker0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default </span><br><span class=\"line\">    link/ether 02:42:c0:bc:f7:2a brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 fe80::42:c0ff:febc:f72a/64 scope link </span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">9: vethec18bf2@if8: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP group default </span><br><span class=\"line\">    link/ether aa:5f:ae:2b:63:d6 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class=\"line\">    inet6 fe80::a85f:aeff:fe2b:63d6/64 scope link </span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看容器的详细信息</span></span><br><span class=\"line\">[root@docker ~]# docker inspect 0e2bcf007d3e  </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 此处的容器id为docker container ls查询出的id，关闭后重启容器，该id值将发生变化</span></span><br><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &quot;Id&quot;: &quot;0e2bcf007d3e250473914f2214ace1f6d5417357e8f7598cb525ff2f453d3abf&quot;, # 容器id</span><br><span class=\"line\">        &quot;Created&quot;: &quot;2020-07-15T08:28:12.797341308Z&quot;,  # 新建容器时间</span><br><span class=\"line\">        &quot;Path&quot;: &quot;/bin/bash&quot;,  </span><br><span class=\"line\">        &quot;Args&quot;: [],</span><br><span class=\"line\">        &quot;State&quot;: &#123;   # 容器的状态</span><br><span class=\"line\">            &quot;Status&quot;: &quot;running&quot;,  # 运行</span><br><span class=\"line\">            &quot;Running&quot;: true,    # 正在运行</span><br><span class=\"line\">            &quot;Paused&quot;: false,</span><br><span class=\"line\">            &quot;Restarting&quot;: false,</span><br><span class=\"line\">            &quot;OOMKilled&quot;: false,</span><br><span class=\"line\">            &quot;Dead&quot;: false,</span><br><span class=\"line\">            &quot;Pid&quot;: 35071,   # 进行的pid，通过ps -ef | grep 35071 可以查看到该pid的进行信息</span><br><span class=\"line\">            &quot;ExitCode&quot;: 0,</span><br><span class=\"line\">            &quot;Error&quot;: &quot;&quot;,</span><br><span class=\"line\">            &quot;StartedAt&quot;: &quot;2020-07-15T08:28:13.017085499Z&quot;,</span><br><span class=\"line\">            &quot;FinishedAt&quot;: &quot;0001-01-01T00:00:00Z&quot;   </span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;Image&quot;:  # 容器使用的镜像信息和运行的绝对路径信息</span><br><span class=\"line\">        &quot;sha256:9b9cb95443b5f846cd3c8cfa3f64e63b6ba68de2618a08875a119c81a8f96698&quot;,</span><br><span class=\"line\">        &quot;ResolvConfPath&quot;:# 容器的绝对路径</span><br><span class=\"line\">  &quot;/var/lib/docker/containers/0e2bcf007d3e250473914f2214ace1f6d5417357e8f7598cb525ff2f453d3abf/resolv.conf&quot;,</span><br><span class=\"line\">        &quot;HostnamePath&quot;: &quot;/var/lib/docker/containers/0e2bcf007d3e250473914f2214ace1f6d5417357e8f7598cb525ff2f453d3abf/hostname&quot;,</span><br><span class=\"line\">        &quot;HostsPath&quot;: &quot;/var/lib/docker/containers/0e2bcf007d3e250473914f2214ace1f6d5417357e8f7598cb525ff2f453d3abf/hosts&quot;,</span><br><span class=\"line\">        &quot;LogPath&quot;: &quot;/var/lib/docker/containers/0e2bcf007d3e250473914f2214ace1f6d5417357e8f7598cb525ff2f453d3abf/0e2bcf007d3e250473914f2214ace1f6d5417357e8f7598cb525ff2f453d3abf-json.log&quot;,</span><br><span class=\"line\">        &quot;Name&quot;: &quot;/heuristic_booth&quot;,</span><br><span class=\"line\">        &quot;RestartCount&quot;: 0,</span><br><span class=\"line\">        &quot;Driver&quot;: &quot;overlay2&quot;,</span><br><span class=\"line\">        &quot;Platform&quot;: &quot;linux&quot;,</span><br><span class=\"line\">        &quot;MountLabel&quot;: &quot;&quot;,</span><br><span class=\"line\">        &quot;ProcessLabel&quot;: &quot;&quot;,</span><br><span class=\"line\">        &quot;AppArmorProfile&quot;: &quot;&quot;,</span><br><span class=\"line\">        &quot;ExecIDs&quot;: null,</span><br><span class=\"line\">        &quot;HostConfig&quot;: &#123;</span><br><span class=\"line\">            &quot;Binds&quot;: null,</span><br><span class=\"line\">            &quot;ContainerIDFile&quot;: &quot;&quot;,</span><br><span class=\"line\">            &quot;LogConfig&quot;: &#123;</span><br><span class=\"line\">                &quot;Type&quot;: &quot;json-file&quot;,</span><br><span class=\"line\">                &quot;Config&quot;: &#123;&#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;NetworkMode&quot;: &quot;default&quot;,</span><br><span class=\"line\">            &quot;PortBindings&quot;: &#123;&#125;,</span><br><span class=\"line\">            &quot;RestartPolicy&quot;: &#123;</span><br><span class=\"line\">                &quot;Name&quot;: &quot;no&quot;,</span><br><span class=\"line\">                &quot;MaximumRetryCount&quot;: 0</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;AutoRemove&quot;: false,</span><br><span class=\"line\">            &quot;VolumeDriver&quot;: &quot;&quot;,</span><br><span class=\"line\">            &quot;VolumesFrom&quot;: null,</span><br><span class=\"line\">            &quot;CapAdd&quot;: null,</span><br><span class=\"line\">            &quot;CapDrop&quot;: null,</span><br><span class=\"line\">            &quot;Capabilities&quot;: null,</span><br><span class=\"line\">            &quot;Dns&quot;: [],</span><br><span class=\"line\">            &quot;DnsOptions&quot;: [],</span><br><span class=\"line\">            &quot;DnsSearch&quot;: [],</span><br><span class=\"line\">            &quot;ExtraHosts&quot;: null,</span><br><span class=\"line\">            &quot;GroupAdd&quot;: null,</span><br><span class=\"line\">            &quot;IpcMode&quot;: &quot;private&quot;,</span><br><span class=\"line\">            &quot;Cgroup&quot;: &quot;&quot;,</span><br><span class=\"line\">            &quot;Links&quot;: null,</span><br><span class=\"line\">            &quot;OomScoreAdj&quot;: 0,</span><br><span class=\"line\">            &quot;PidMode&quot;: &quot;&quot;,</span><br><span class=\"line\">            &quot;Privileged&quot;: false,</span><br><span class=\"line\">            &quot;PublishAllPorts&quot;: false,</span><br><span class=\"line\">            &quot;ReadonlyRootfs&quot;: false,</span><br><span class=\"line\">            &quot;SecurityOpt&quot;: null,</span><br><span class=\"line\">            &quot;UTSMode&quot;: &quot;&quot;,</span><br><span class=\"line\">            &quot;UsernsMode&quot;: &quot;&quot;,</span><br><span class=\"line\">            &quot;ShmSize&quot;: 67108864,</span><br><span class=\"line\">            &quot;Runtime&quot;: &quot;runc&quot;,</span><br><span class=\"line\">            &quot;ConsoleSize&quot;: [</span><br><span class=\"line\">                0,</span><br><span class=\"line\">                0</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            &quot;Isolation&quot;: &quot;&quot;,</span><br><span class=\"line\">            &quot;CpuShares&quot;: 0,</span><br><span class=\"line\">            &quot;Memory&quot;: 0,</span><br><span class=\"line\">            &quot;NanoCpus&quot;: 0,</span><br><span class=\"line\">            &quot;CgroupParent&quot;: &quot;&quot;,</span><br><span class=\"line\">            &quot;BlkioWeight&quot;: 0,</span><br><span class=\"line\">            &quot;BlkioWeightDevice&quot;: [],</span><br><span class=\"line\">            &quot;BlkioDeviceReadBps&quot;: null,</span><br><span class=\"line\">            &quot;BlkioDeviceWriteBps&quot;: null,</span><br><span class=\"line\">            &quot;BlkioDeviceReadIOps&quot;: null,</span><br><span class=\"line\">            &quot;BlkioDeviceWriteIOps&quot;: null,</span><br><span class=\"line\">            &quot;CpuPeriod&quot;: 0,</span><br><span class=\"line\">            &quot;CpuQuota&quot;: 0,</span><br><span class=\"line\">            &quot;CpuRealtimePeriod&quot;: 0,</span><br><span class=\"line\">            &quot;CpuRealtimeRuntime&quot;: 0,</span><br><span class=\"line\">            &quot;CpusetCpus&quot;: &quot;&quot;,</span><br><span class=\"line\">            &quot;CpusetMems&quot;: &quot;&quot;,</span><br><span class=\"line\">            &quot;Devices&quot;: [],</span><br><span class=\"line\">            &quot;DeviceCgroupRules&quot;: null,</span><br><span class=\"line\">            &quot;DeviceRequests&quot;: null,</span><br><span class=\"line\">            &quot;KernelMemory&quot;: 0,</span><br><span class=\"line\">            &quot;KernelMemoryTCP&quot;: 0,</span><br><span class=\"line\">            &quot;MemoryReservation&quot;: 0,</span><br><span class=\"line\">            &quot;MemorySwap&quot;: 0,</span><br><span class=\"line\">            &quot;MemorySwappiness&quot;: null,</span><br><span class=\"line\">            &quot;OomKillDisable&quot;: false,</span><br><span class=\"line\">            &quot;PidsLimit&quot;: null,</span><br><span class=\"line\">            &quot;Ulimits&quot;: null,</span><br><span class=\"line\">            &quot;CpuCount&quot;: 0,</span><br><span class=\"line\">            &quot;CpuPercent&quot;: 0,</span><br><span class=\"line\">            &quot;IOMaximumIOps&quot;: 0,</span><br><span class=\"line\">            &quot;IOMaximumBandwidth&quot;: 0,</span><br><span class=\"line\">            &quot;MaskedPaths&quot;: [</span><br><span class=\"line\">                &quot;/proc/asound&quot;,</span><br><span class=\"line\">                &quot;/proc/acpi&quot;,</span><br><span class=\"line\">                &quot;/proc/kcore&quot;,</span><br><span class=\"line\">                &quot;/proc/keys&quot;,</span><br><span class=\"line\">                &quot;/proc/latency_stats&quot;,</span><br><span class=\"line\">                &quot;/proc/timer_list&quot;,</span><br><span class=\"line\">                &quot;/proc/timer_stats&quot;,</span><br><span class=\"line\">                &quot;/proc/sched_debug&quot;,</span><br><span class=\"line\">                &quot;/proc/scsi&quot;,</span><br><span class=\"line\">                &quot;/sys/firmware&quot;</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            &quot;ReadonlyPaths&quot;: [</span><br><span class=\"line\">                &quot;/proc/bus&quot;,</span><br><span class=\"line\">                &quot;/proc/fs&quot;,</span><br><span class=\"line\">                &quot;/proc/irq&quot;,</span><br><span class=\"line\">                &quot;/proc/sys&quot;,</span><br><span class=\"line\">                &quot;/proc/sysrq-trigger&quot;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;GraphDriver&quot;: &#123;</span><br><span class=\"line\">            &quot;Data&quot;: &#123;</span><br><span class=\"line\">                &quot;LowerDir&quot;: &quot;/var/lib/docker/overlay2/ff16a32c0b96e85d19c86a809ffd62d63ad853f11518bdfa6e07b1b30b911c0e-init/diff:/var/lib/docker/overlay2/7b0037a8aafcf18688d9c17601dd4ecc75b6339e7f73a17ab83f26f2922ca9e7/diff:/var/lib/docker/overlay2/eb78645b5c86e6c9dded5eaf9fd15f2007da65e730663deb6b17d455320be3f2/diff:/var/lib/docker/overlay2/ac39c7f3c1f4701de1c3898fa26186579ee523463d88a52857dbe899ae258afe/diff:/var/lib/docker/overlay2/9f19d7f0e3016023666d32dcbd8592355b84ff1056aa1e95085e1e651ee19102/diff&quot;,</span><br><span class=\"line\">                &quot;MergedDir&quot;: &quot;/var/lib/docker/overlay2/ff16a32c0b96e85d19c86a809ffd62d63ad853f11518bdfa6e07b1b30b911c0e/merged&quot;,</span><br><span class=\"line\">                &quot;UpperDir&quot;: &quot;/var/lib/docker/overlay2/ff16a32c0b96e85d19c86a809ffd62d63ad853f11518bdfa6e07b1b30b911c0e/diff&quot;,</span><br><span class=\"line\">                &quot;WorkDir&quot;: &quot;/var/lib/docker/overlay2/ff16a32c0b96e85d19c86a809ffd62d63ad853f11518bdfa6e07b1b30b911c0e/work&quot;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;Name&quot;: &quot;overlay2&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;Mounts&quot;: [],</span><br><span class=\"line\">        &quot;Config&quot;: &#123;</span><br><span class=\"line\">            &quot;Hostname&quot;: &quot;0e2bcf007d3e&quot;,</span><br><span class=\"line\">            &quot;Domainname&quot;: &quot;&quot;,</span><br><span class=\"line\">            &quot;User&quot;: &quot;&quot;,</span><br><span class=\"line\">            &quot;AttachStdin&quot;: true,</span><br><span class=\"line\">            &quot;AttachStdout&quot;: true,</span><br><span class=\"line\">            &quot;AttachStderr&quot;: true,</span><br><span class=\"line\">            &quot;Tty&quot;: true,</span><br><span class=\"line\">            &quot;OpenStdin&quot;: true,</span><br><span class=\"line\">            &quot;StdinOnce&quot;: true,</span><br><span class=\"line\">            &quot;Env&quot;: [  # 环境变量</span><br><span class=\"line\">                &quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            &quot;Cmd&quot;: [   # 默认允许的命令</span><br><span class=\"line\">                &quot;/bin/bash&quot;</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            &quot;Image&quot;: &quot;ubuntu:15.10&quot;,  # 使用的镜像名称</span><br><span class=\"line\">            &quot;Volumes&quot;: null,  # 使用卷(存储)信息</span><br><span class=\"line\">            &quot;WorkingDir&quot;: &quot;&quot;,  # 默认工作目录</span><br><span class=\"line\">            &quot;Entrypoint&quot;: null,</span><br><span class=\"line\">            &quot;OnBuild&quot;: null,</span><br><span class=\"line\">            &quot;Labels&quot;: &#123;&#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;NetworkSettings&quot;: &#123;  # 容器网络设置信息</span><br><span class=\"line\">            &quot;Bridge&quot;: &quot;&quot;,  # 桥接信息</span><br><span class=\"line\">            &quot;SandboxID&quot;: &quot;d1da8aaf46c12ec574ae824e3696bb1a020dda849b720e1673287464aacc2090&quot;,</span><br><span class=\"line\">            &quot;HairpinMode&quot;: false,</span><br><span class=\"line\">            &quot;LinkLocalIPv6Address&quot;: &quot;&quot;,</span><br><span class=\"line\">            &quot;LinkLocalIPv6PrefixLen&quot;: 0,</span><br><span class=\"line\">            &quot;Ports&quot;: &#123;&#125;,  # 使用的端口</span><br><span class=\"line\">            &quot;SandboxKey&quot;: &quot;/var/run/docker/netns/d1da8aaf46c1&quot;,</span><br><span class=\"line\">            &quot;SecondaryIPAddresses&quot;: null,</span><br><span class=\"line\">            &quot;SecondaryIPv6Addresses&quot;: null,</span><br><span class=\"line\">            &quot;EndpointID&quot;: &quot;a9a0746dbcafb0de315968d6b0ed61709584db5b0d3a1325ae4ccef56f799181&quot;,</span><br><span class=\"line\">            &quot;Gateway&quot;: &quot;172.17.0.1&quot;,</span><br><span class=\"line\">            &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class=\"line\">            &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class=\"line\">            &quot;IPAddress&quot;: &quot;172.17.0.2&quot;,</span><br><span class=\"line\">            &quot;IPPrefixLen&quot;: 16,</span><br><span class=\"line\">            &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class=\"line\">            &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,</span><br><span class=\"line\">            &quot;Networks&quot;: &#123;   # 网络详细信息</span><br><span class=\"line\">                &quot;bridge&quot;: &#123;</span><br><span class=\"line\">                    &quot;IPAMConfig&quot;: null,</span><br><span class=\"line\">                    &quot;Links&quot;: null,</span><br><span class=\"line\">                    &quot;Aliases&quot;: null,</span><br><span class=\"line\">                    &quot;NetworkID&quot;:   # 网络id信息</span><br><span class=\"line\">                    &quot;b474a443cb3eed5a8e5915f61a4be93553de4f17d468d524525d801f1382ccd3&quot;,</span><br><span class=\"line\">                    &quot;EndpointID&quot;: </span><br><span class=\"line\">                    &quot;a9a0746dbcafb0de315968d6b0ed61709584db5b0d3a1325ae4ccef56f799181&quot;,</span><br><span class=\"line\">                    &quot;Gateway&quot;: &quot;172.17.0.1&quot;,  # 网关地址，即docker0的地址</span><br><span class=\"line\">                    &quot;IPAddress&quot;: &quot;172.17.0.2&quot;,  # 该容器的IP地址</span><br><span class=\"line\">                    &quot;IPPrefixLen&quot;: 16,</span><br><span class=\"line\">                    &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class=\"line\">                    &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class=\"line\">                    &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class=\"line\">                    &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,  # 容器的mac地址</span><br><span class=\"line\">                    &quot;DriverOpts&quot;: null</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-守护式-后台运行-容器\"><a href=\"#2-3-守护式-后台运行-容器\" class=\"headerlink\" title=\"2.3 守护式(后台运行)容器\"></a>2.3 守护式(后台运行)容器</h4><p>​        <strong>该模式下，容器会一直处于运行状态，除非我们手动终止或设置了终止时间</strong></p>\n<ul>\n<li>-d：表示将容器运行于后台，在这个过程中，可以进入容器，也可以停止容器</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 以后台模式启动一个容器，让容器一直输出<span class=\"string\">&quot;hello world&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker run -d ubuntu:15.10 /bin/sh -c <span class=\"string\">&quot;while true; do echo hello world; sleep 1; done&quot;</span></span>  </span><br><span class=\"line\">a67eafc7e2d056b52adebaeabe968746782efacaa9a2709f1fa8cf002df60448  # 输出了容器的id信息</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker ps  <span class=\"comment\"># 查看正在运行的容器进行信息</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 容器 ID        镜像    启动时运行的命令 创建时间   状态          端口或连接类型    容器名称</span></span><br><span class=\"line\">CONTAINER ID     IMAGE    COMMAND    CREATED        STATUS       PORTS         NAMES</span><br><span class=\"line\">a67eafc7e2d0     ubuntu:15.10   &quot;/bin/sh -c &#x27;while t…&quot;   About a minute ago   Up About a minute   charming_leavitt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker logs a67eafc7e2d0  | wc -l  <span class=\"comment\"># 查看容器的日志信息的行数</span></span></span><br><span class=\"line\">109</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker logs a67eafc7e2d0  | wc -l  <span class=\"comment\"># 隔1分钟左右后再次查看的行数</span></span></span><br><span class=\"line\">200</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 进入容器内部查看，此处可以用容器id或容器名称，推荐使用<span class=\"built_in\">exec</span>进入(退出后容器不终止)，而不是attach</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker <span class=\"built_in\">exec</span> -it a67eafc7e2d0 /bin/bash</span> </span><br><span class=\"line\">root@a67eafc7e2d0:/# ps -ef  # 此时等于是重新开了一个连接终端，查看该容器内的程序</span><br><span class=\"line\">UID         PID   PPID  C STIME TTY          TIME CMD</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> pid为1进程是我们在命令行指定容器运行的命令</span></span><br><span class=\"line\">root          1      0  0 09:14 ?     00:00:00 /bin/sh -c while true; do echo hello world; sleep 1; done </span><br><span class=\"line\">root         33      0  0 09:15 pts/0    00:00:00 /bin/bash  # 这是刚执行进入时打开的shell</span><br><span class=\"line\">root         58      1  0 09:15 ?        00:00:00 sleep 1</span><br><span class=\"line\">root         59     33  0 09:15 pts/0    00:00:00 ps -ef  # 这是在容器内输入的命令</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 使用attach进入连接的是运行pid为1的命令的shell</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker attach a67eafc7e2d0</span></span><br><span class=\"line\">hello world</span><br><span class=\"line\">hello world</span><br><span class=\"line\">hello world  # 此时一直在输出该信息，退出后容器就终止了</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 停止容器，此处可以用容器id或容器名称</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker stop a67eafc7e2d0</span></span><br></pre></td></tr></table></figure>\n\n<p><code>docker ps</code> 命令中的<strong>STATUS:</strong> 容器状态解释</p>\n<p>状态有7种：</p>\n<ul>\n<li>created（已创建）</li>\n<li>restarting（重启中）</li>\n<li>running（运行中）</li>\n<li>removing（迁移中）</li>\n<li>paused（暂停）</li>\n<li>exited（停止）</li>\n<li>dead（死亡）</li>\n</ul>\n<h4 id=\"2-4-三种容器运行方式的总结\"><a href=\"#2-4-三种容器运行方式的总结\" class=\"headerlink\" title=\"2.4 三种容器运行方式的总结\"></a>2.4 三种容器运行方式的总结</h4><ul>\n<li><p>容器(镜像)是为了完成特定的任务而制作的，任务完成后，容器就应该被停止，基于这种思想，上面三种容器实质上都是一次性容器，只是工作时间长短的区别</p>\n</li>\n<li><p>如何让一个容器成为一个长时间(永久)运行的容器</p>\n<ul>\n<li>以交互式方式启动容器，然后永远不退出当前shell或使用ctrl +p,q退出当前shell</li>\n<li>启动容器时给容器执行死循环任务</li>\n<li>启动容器时加入后台运行</li>\n</ul>\n</li>\n<li><p>交互式容器跟后台容器的关系：其实简单来说，后台容器是在交互式容器的基础上加了一个<code>-d参数</code>罢了</p>\n</li>\n</ul>\n<p><img src=\"image-20200717002403131.png\" alt=\"image-20200717002403131\"></p>\n<p>​        值得注意的是，我们仍然可以通过其他的shell通过命令<code>docker attach + 容器id/容器名</code>进入当前容器运行的shell或使用<code>docker exec</code>进入当前shell的子进程，并不是说我们就不能管理该容器。</p>\n<p>限制容器使用资源的举例：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker run -d -m 512m --cpus=<span class=\"string\">&#x27;.5&#x27;</span> nginx</span></span><br><span class=\"line\">dc6d2297d670ff91bc2dc1fe0e1f7c38563d6f0279a26e4664d7c87ec96ea86b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker stats + 容器id：显示容器资源的使用率</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker stats dc6d2297d670ff91bc2dc1fe0e1f7c38563d6f0279a26e4664d7c87ec96ea86b</span></span><br><span class=\"line\">CONTAINER ID   NAME             CPU %     MEM USAGE / LIMIT   MEM %     NET I/O   BLOCK I/O        PIDS</span><br><span class=\"line\">dc6d2297d670   vibrant_hawking  0.00%     1.945MiB / 512MiB   0.38%    656B / 0B  18.7MB / 21.5kB   2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 修改容器资源限制</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker update --<span class=\"built_in\">help</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">Usage:  docker update [OPTIONS] CONTAINER [CONTAINER...]</span><br><span class=\"line\"></span><br><span class=\"line\">Update configuration of one or more containers</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\">      --blkio-weight uint16        Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0)</span><br><span class=\"line\">      --cpu-period int             Limit CPU CFS (Completely Fair Scheduler) period</span><br><span class=\"line\">      --cpu-quota int              Limit CPU CFS (Completely Fair Scheduler) quota</span><br><span class=\"line\">      --cpu-rt-period int          Limit the CPU real-time period in microseconds</span><br><span class=\"line\">      --cpu-rt-runtime int         Limit the CPU real-time runtime in microseconds</span><br><span class=\"line\">  -c, --cpu-shares int             CPU shares (relative weight)</span><br><span class=\"line\">      --cpus decimal               Number of CPUs</span><br><span class=\"line\">      --cpuset-cpus string         CPUs in which to allow execution (0-3, 0,1)</span><br><span class=\"line\">      --cpuset-mems string         MEMs in which to allow execution (0-3, 0,1)</span><br><span class=\"line\">      --kernel-memory bytes        Kernel memory limit</span><br><span class=\"line\">  -m, --memory bytes               Memory limit</span><br><span class=\"line\">      --memory-reservation bytes   Memory soft limit</span><br><span class=\"line\">      --memory-swap bytes          Swap limit equal to memory plus swap: &#x27;-1&#x27; to enable unlimited swap</span><br><span class=\"line\">      --pids-limit int             Tune container pids limit (set -1 for unlimited)</span><br><span class=\"line\">      --restart string             Restart policy to apply when a container exits</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker update -m 1G dc6d2297d670ff91bc2dc1fe0e1f7c38563d6f0279a26e4664d7c87ec96ea86b</span></span><br><span class=\"line\">dc6d2297d670ff91bc2dc1fe0e1f7c38563d6f0279a26e4664d7c87ec96ea86b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker stats dc6d2297d670ff91bc2dc1fe0e1f7c38563d6f0279a26e4664d7c87ec96ea86b</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 内存值从512M变成了1G</span></span><br><span class=\"line\">CONTAINER ID   NAME             CPU %     MEM USAGE / LIMIT   MEM %   NET I/O   BLOCK I/O         PIDS</span><br><span class=\"line\">dc6d2297d670   vibrant_hawking  0.00%     1.945MiB / 1GiB     0.19%   656B / 0B 18.7MB / 21.5kB   2</span><br></pre></td></tr></table></figure>\n","comments":true,"permalink":"https://qingdalf.github.io/2021-05/dockerInstall/","categories":[{"name":"kubernets","slug":"kubernets","permalink":"https://qingdalf.github.io/categories/kubernets/"}],"tags":[]},{"title":"docker简介","date":"2021-05-03T04:49:44.000Z","path":"2021-05/dockerIntroduction/","content":"<h3 id=\"1-1-docker介绍\"><a href=\"#1-1-docker介绍\" class=\"headerlink\" title=\"1.1 docker介绍\"></a>1.1 docker介绍</h3><p>官网：<a href=\"https://www.docker.com/\">https://www.docker.com/</a></p>\n<p>官网文档：<a href=\"https://docs.docker.com/\">https://docs.docker.com/</a></p>\n<p>​        docker是<a href=\"https://baike.baidu.com/item/PaaS\">PaaS</a>提供商dotCloud开源的一个基于<a href=\"https://baike.baidu.com/item/LXC\">LXC</a>的高级容器引擎，源代码托管在<a href=\"https://baike.baidu.com/item/Github\">Github</a>上，基于<a href=\"https://www.runoob.com/go/go-tutorial.html\">Go 语言</a>并遵从Apache2.0协议开源，docker是容器的一个管理工具，并不是容器。</p>\n<span id=\"more\"></span>\n<p>​       docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制（沙箱就是一个限制应用程序对系统资源的访问的运行环境），相互之间不会有任何接口（类似 iPhone的app）,更重要的是容器性能开销极低。</p>\n<p>​        docker从17.03版本之后分为CE（Community Edition: 社区版）和EE（Enterprise Edition: 企业版）。</p>\n<p>​        Docker自2013年以来非常火热，无论是从github上的代码活跃度，还是<a href=\"https://baike.baidu.com/item/Redhat\">Redhat</a>在RHEL6.5中集成对Docker的支持, 就连Google的Compute Engine也支持docker在其之上运行。</p>\n<p><strong>docker发展的历史背景：</strong></p>\n<ul>\n<li><p><strong>环境管理复杂</strong> - 从各种OS到各种中间件到各种app, 一款产品能够成功作为开发者需要关心的东西太多，且难于管理，这个问题几乎在所有现代IT相关行业都需要面对。</p>\n</li>\n<li><p><strong>云计算时代的到来</strong> - AWS的成功, 引导开发者将应用转移到 cloud 上, 解决了硬件管理的问题，然而中间件相关的问题依然存在 (所以openstack HEAT和 AWS cloudformation 都着力解决这个问题)。开发者思路变化提供了可能性。</p>\n</li>\n<li><p><strong>虚拟化手段的变化</strong> - cloud 时代采用标配硬件来降低成本，采用虚拟化手段来满足用户按需使用的需求以及保证可用性和隔离性。然而无论是KVM还是Xen在 docker 看来,都在浪费资源，因为用户需要的是高效运行环境而非OS, GuestOS既浪费资源又难于管理, 更加轻量级的LXC更加灵活和快速</p>\n</li>\n<li><p><strong>LXC的移动性</strong> - LXC在 linux 2.6 的 kernel 里就已经存在了，但是其设计之初并非为云计算考虑的，缺少标准化的描述手段和容器的可迁移性，决定其构建出的环境难于迁移和标准化管理(相对于KVM之类image和snapshot的概念)。docker 就在这个问题上做出实质性的革新。这是docker最独特的地方。</p>\n</li>\n</ul>\n<p>​       面对上述几个问题，docker设想是交付运行环境如同海运，OS如同一个货轮，每一个在OS基础上的软件都如同一个集装箱，用户可以通过标准化手段自由组装运行环境，同时集装箱的内容可以由用户自定义，也可以由专业人员制造。这样，交付一个软件，就是一系列标准化组件的集合的交付，如同乐高积木，用户只需要选择合适的积木组合，并且在最顶端署上自己的名字(最后一个标准化组件是用户的app)。这也就是基于docker的PaaS产品的原型。</p>\n<h3 id=\"1-2-Docker-架构\"><a href=\"#1-2-Docker-架构\" class=\"headerlink\" title=\"1.2 Docker 架构\"></a>1.2 Docker 架构</h3><p>​        Docker使用客户端-服务器 (C/S) 架构模式，使用远程API来管理和创建Docker容器。Docker容器通过Docker镜像来创建。容器与镜像的关系类似于面向对象编程中的对象与类，可以理解为程序和进程的关系，镜像是静态的，容器是动态的有生命周期的。</p>\n<table>\n<thead>\n<tr>\n<th>docker</th>\n<th>面向对象</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>容器</td>\n<td>对象</td>\n</tr>\n<tr>\n<td>镜像</td>\n<td>类</td>\n</tr>\n</tbody></table>\n<img src=\"clip_image002.png\" alt=\"img\" style=\"zoom:67%;\" />\n\n<center>架构图一</center>\n\n<p>​        Docker采用C/S架构，<code>Docker daemon</code> 作为服务端接受来自客户的请求，并处理这些请求（创建、运行、分发容器）。 客户端和服务端既可以运行在一个机器上，也可通过 socket 或者RESTful API 来进行通信。</p>\n<p>​        <code>Docker daemon</code>一般在宿主主机后台运行，等待接收来自客户端的消息。 Docker 客户端则为用户提供一系列可执行命令，用户用这些命令实现跟<code>Docker daemon</code>交互。</p>\n<img src=\"image-20200717170409141.png\" alt=\"image-20200717170409141\" style=\"zoom:67%;\" />\n\n<center>架构图二</center>\n\n<p>​        不难发现，docker由内到外是docker daemon（守护进程），docker client（客户端），container（容器），image（镜像），network（网络），data volumes（数据卷）</p>\n<p><strong>Docker的基本组成有：</strong></p>\n<ul>\n<li>Docker Client：客户端，Docker客户端通过命令行或者其他工具使用Docker SDK与Docker的守护进程通信</li>\n<li>Docker Daemon：守护进程，</li>\n<li>Docker Image：镜像，Docker镜像是用于创建Docker容器的模板。</li>\n<li>Docker Container：容器，容器是独立运行的一个或一组应用</li>\n<li>Docker Registry：仓库，Docker仓库用来保存镜像，可以理解为代码控制中的代码仓库。  Docker Hub(<a href=\"https://hub.docker.com/\">https://hub.docker.com</a>) 提供了庞大的镜像集合供使用。用户可创建自己的私有仓库。默认使用https协议进行访问。  拥有两层功能，提供镜像存储的仓库，提供用户获取镜像时的认证</li>\n<li>Docker Host：docker运行的主机，一个物理或者虚拟的机器用于执行Docker守护进程和容器。</li>\n<li>Containerd：是一个简单的守护进程，向上给Docker Daemon提供接口，向下通过containerd-shim结合runC管理容器</li>\n<li>runC：一个命令行工具，它根据OCI标准来创建和运行容器。</li>\n</ul>\n<img src=\"image-20210401142134762.png\" alt=\"image-20210401142134762\" style=\"zoom:67%;\" />\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ps ajxf   <span class=\"comment\"># 执行结果如下，他们之间的pid存在相互关联的关系</span></span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"image-20210401143510994.png\" alt=\"image-20210401143510994\"></p>\n<h3 id=\"1-3-docker的优缺点\"><a href=\"#1-3-docker的优缺点\" class=\"headerlink\" title=\"1.3 docker的优缺点\"></a>1.3 docker的优缺点</h3><h4 id=\"1-3-1-docker优点\"><a href=\"#1-3-1-docker优点\" class=\"headerlink\" title=\"1.3.1 docker优点\"></a>1.3.1 docker优点</h4><p>​        Docker 是一个用于开发，交付和运行应用程序的开放平台。Docker 使您能够将应用程序与基础架构分开，从而可以快速交付软件。借助 Docker，您可以与管理应用程序相同的方式来管理基础架构。通过利用 Docker 的方法来快速交付，测试和部署代码，您可以大大减少编写代码和在生产环境中运行代码之间的延迟。</p>\n<ul>\n<li><p><strong>快速，一致地交付您的应用程序</strong></p>\n<ul>\n<li>Docker 允许开发人员使用您提供的应用程序或服务的本地容器在标准化环境中工作，从而简化了开发的生命周期。</li>\n<li>容器非常适合持续集成和持续交付（CI / CD）工作流程，请考虑以下示例方案：<ul>\n<li>您的开发人员在本地编写代码，并使用 Docker 容器与同事共享他们的工作。</li>\n<li>他们使用 Docker 将其应用程序推送到测试环境中，并执行自动或手动测试。</li>\n<li>当开发人员发现错误时，他们可以在开发环境中对其进行修复，然后将其重新部署到测试环境中，以进行测试和验证。</li>\n<li>测试完成后，将修补程序推送给生产环境，就像将更新的镜像推送到生产环境一样简单。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>响应式部署和扩展</strong></p>\n<ul>\n<li>Docker 是基于容器的平台，允许高度可移植的工作负载。Docker 容器可以在开发人员的本机上，数据中心的物理或虚拟机上，云服务上或混合环境中运行。</li>\n<li>Docker 的可移植性和轻量级的特性，还可以使您轻松地完成动态管理的工作负担，并根据业务需求指示，实时扩展或拆除应用程序和服务。</li>\n</ul>\n</li>\n<li><p><strong>在同一硬件上运行更多工作负载</strong></p>\n<ul>\n<li>Docker 轻巧快速。它为基于虚拟机管理程序的虚拟机提供了可行、经济、高效的替代方案，因此您可以利用更多的计算能力来实现业务目标。Docker 非常适合于高密度环境以及中小型部署，而您可以用更少的资源做更多的事情。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"1-3-2-docker局限\"><a href=\"#1-3-2-docker局限\" class=\"headerlink\" title=\"1.3.2 docker局限\"></a>1.3.2 docker局限</h4><p>Docker并不是全能的，设计之初也不是KVM之类虚拟化手段的替代品，简单总结几点：</p>\n<ul>\n<li><p>Docker是基于Linux 64bit的，无法在32bit的linux/Windows/unix环境下使用</p>\n</li>\n<li><p>LXC是基于cgroup等linux kernel功能的，因此container的guest系统只能是linux base的</p>\n</li>\n<li><p>隔离性相比KVM之类的虚拟化方案还是有些欠缺，所有container公用一部分的运行库</p>\n</li>\n<li><p>网络管理相对简单，主要是基于namespace隔离</p>\n</li>\n<li><p>cgroup的cpu和cpuset提供的cpu功能相比KVM的等虚拟化方案相比难以度量(所以dotcloud主要是按内存收费)</p>\n</li>\n<li><p>Docker对disk的管理比较有限</p>\n</li>\n<li><p>container随着用户进程的停止而销毁，container中的log等用户数据不便收集</p>\n</li>\n</ul>\n<p>​       针对1-2，有windows base应用的需求的基本可以pass了; 3-5主要是看用户的需求，到底是需要一个container还是一个VM, 同时也决定了docker作为 IaaS 不太可行。</p>\n<p>​       针对6,7虽然是docker本身不支持的功能，但是可以通过其他手段解决(disk quota, mount –bind)。总之，选用container还是vm, 就是在隔离性和资源复用性上做权衡。</p>\n<p>​      <strong>Docker在本质上是一个附加系统</strong>。使用文件系统的不同层构建一个应用是有可能的。每个组件被添加到之前已经创建的组件之上，可以比作为一个文件系统更明智。分层架构带来另一方面的效率提升，当你重建存在变化的Docker镜像时，不需要重建整个Docker镜像，只需要重建变化的部分。</p>\n<p>​        可能更为重要的是，Docker旨在用于弹性计算。每个Docker实例的运营生命周期有限，实例数量根据需求增减。在一个管理适度的系统中，这些实例生而平等，不再需要时便各自消亡了。</p>\n<p>​        针对Docker环境存在的不足，意味着在开始部署Docker前需要考虑如下几个问题。首先，Docker实例是无状态的。这意味着它们不应该承载任何交易数据，所有数据应该保存在数据库服务器中。</p>\n<p>​        其次，开发Docker实例并不像创建一台虚拟机、添加应用然后克隆那样简单。为成功创建并使用Docker基础设施，管理员需要对系统管理的各个方面有一个全面的理解，包括Linux管理、编排及配置工具比如Puppet、Chef以及Salt。这些工具生来就基于命令行以及脚本。</p>\n<h3 id=\"1-4-docker应用场景\"><a href=\"#1-4-docker应用场景\" class=\"headerlink\" title=\"1.4 docker应用场景\"></a>1.4 docker应用场景</h3><p>​        在docker的网站上提到了docker的典型场景：</p>\n<ul>\n<li><p>Automating the packaging and deployment of applications（使应用的打包与部署自动化）</p>\n</li>\n<li><p>Creation of lightweight, private PAAS environments（创建轻量、私密的PAAS环境）</p>\n</li>\n<li><p>Automated testing and continuous integration/deployment（实现自动化测试和持续的集成/部署）</p>\n</li>\n<li><p>Deploying and scaling web apps, databases and backend services（部署与扩展webapp、数据库和后台服务）</p>\n</li>\n</ul>\n<p><strong>该文内容来自docker官网和网络上其他blog文件</strong></p>\n","comments":true,"permalink":"https://qingdalf.github.io/2021-05/dockerIntroduction/","categories":[{"name":"kubernets","slug":"kubernets","permalink":"https://qingdalf.github.io/categories/kubernets/"}],"tags":[]},{"title":"docker开篇：容器","date":"2021-05-03T03:27:45.000Z","path":"2021-05/dockerPre/","content":"<h3 id=\"1-1什么是容器？\"><a href=\"#1-1什么是容器？\" class=\"headerlink\" title=\"1.1什么是容器？\"></a>1.1什么是容器？</h3><p>​        容器技术是一种<strong>虚拟化的方案</strong>。容器虚拟化也就是操作系统级别的虚拟化，只能运行相同或相似内核的操作系统(也就是说一个基于ubuntu的容器能够运行在centos之上)。Docker使用的容器技术依赖于Linux内核的<strong>Namespaces</strong>和<strong>Cgroups</strong>，这两个技术就是为了让操作系统<strong>资源被区隔成独立区间</strong>。</p>\n<span id=\"more\"></span>\n<p>Docker依赖的<strong>Linux内核特性</strong>：</p>\n<ul>\n<li>Namespaces：命名空间</li>\n<li>Controller groups（cgroups）：控制组</li>\n</ul>\n<h4 id=\"1-1-1-NameSpace\"><a href=\"#1-1-1-NameSpace\" class=\"headerlink\" title=\"1.1.1 NameSpace\"></a>1.1.1 <strong>NameSpace</strong></h4><p>​        为确保提供的是<strong>轻量级虚拟化服务</strong>，Docker使用了NameSpace。<strong>命名空间提供了系统资源的隔离，资源包括进程、网络、文件系统等。</strong></p>\n<p>​        在同一个Namespace下的进程可以<strong>感知彼此的变化</strong>，而对其他的Namespace一无所知。让容器置身于独立的系统环境中。</p>\n<p>Namespace的种类 ：</p>\n<ul>\n<li>PID（Process ID） ：进程隔离</li>\n<li>NET（Network） ：管理网络接口</li>\n<li>IPC（InterProcess Communication） ：管理跨进程通信的访问</li>\n<li>MNT（Mount） ：管理挂载点</li>\n<li>UTS（Unix Timesharing System） ：隔离内核和版本标识</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ll  /proc/$$/ns   <span class=\"comment\"># $$表示当前进程的id，即1，systemd进程</span></span></span><br><span class=\"line\">total 0</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 Mar 31 22:48 ipc -&gt; ipc:[4026531839]</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 Mar 31 22:48 mnt -&gt; mnt:[4026531840]</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 Mar 31 22:48 net -&gt; net:[4026531956]</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 Mar 31 22:48 pid -&gt; pid:[4026531836]</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 Mar 31 22:48 user -&gt; user:[4026531837]</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 Mar 31 22:48 uts -&gt; uts:[4026531838]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-1-2-Controller-groups\"><a href=\"#1-1-2-Controller-groups\" class=\"headerlink\" title=\"1.1.2 Controller groups\"></a>1.1.2 <strong>Controller groups</strong></h4><p>​        <strong>cgroups是一种Linux提供用于限制、控制、管理资源的机制</strong>，所有的任务就是运行在系统中的一个进程，而Cgroups以某种标准将一组进程为目标进行资源分配和控制，例如cpu、内存、带宽等，并且可以动态配置。</p>\n<p>cgroups的主要功能：</p>\n<ul>\n<li><strong>资源限制</strong>(Resource limitation)：可以为进程组设定资源使用上限。</li>\n<li><strong>优先级设定</strong>(Prioritization)：哪些进程组使用更多的资源，可以为进程组分配特定的CPU、磁盘IO吞吐量等。</li>\n<li><strong>资源计量</strong>(Accounting)：记录进程组使用资源的数量–统计。</li>\n<li><strong>进程组控制</strong>(Control)：能够将进程组挂起和恢复。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ll  /sys/fs/cgroup/   <span class=\"comment\"># cgroup执行的资源限制</span></span></span><br><span class=\"line\">total 0</span><br><span class=\"line\">drwxr-xr-x 4 root root  0 Apr  1 10:59 blkio     # 对块设备的io进行限制</span><br><span class=\"line\">lrwxrwxrwx 1 root root 11 Apr  1 10:59 cpu -&gt; cpu,cpuacct   # 限制cpu时间片的分配，与cpuacct挂载同一目录</span><br><span class=\"line\">lrwxrwxrwx 1 root root 11 Apr  1 10:59 cpuacct -&gt; cpu,cpuacct   </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 生产cgroup中的任务占用cpu资源的报告，与cpu挂载同一目录</span></span><br><span class=\"line\">drwxr-xr-x 4 root root  0 Apr  1 10:59 cpu,cpuacct   </span><br><span class=\"line\">drwxr-xr-x 2 root root  0 Apr  1 10:59 cpuset    # 给cgroup的任务分配独立的cpu和内存节点</span><br><span class=\"line\">drwxr-xr-x 4 root root  0 Apr  1 10:59 devices   # 允许或者拒绝cgroup中的任务访问设备</span><br><span class=\"line\">drwxr-xr-x 2 root root  0 Apr  1 10:59 freezer   # 暂停/恢复cgroup中的任务</span><br><span class=\"line\">drwxr-xr-x 2 root root  0 Apr  1 10:59 hugetlb   # 限制使用的内存页数量</span><br><span class=\"line\">drwxr-xr-x 4 root root  0 Apr  1 10:59 memory    # 对cgroup中任务的可用内存进行限制，并自动生产资源占用报告</span><br><span class=\"line\">lrwxrwxrwx 1 root root 16 Apr  1 10:59 net_cls -&gt; net_cls,net_prio   # 使用等级识别符(classid)标记网络数据包，这让Linux流量控制程序(tc)可以识别来自特定从cgroup任务的数据包，并进行网络限制</span><br><span class=\"line\">drwxr-xr-x 2 root root  0 Apr  1 10:59 net_cls,net_prio  </span><br><span class=\"line\">lrwxrwxrwx 1 root root 16 Apr  1 10:59 net_prio -&gt; net_cls,net_prio  # 允许基于cgroup设置网络流量的优先级</span><br><span class=\"line\">drwxr-xr-x 2 root root  0 Apr  1 10:59 perf_event   # 运行使用perf工具来监控cgroup</span><br><span class=\"line\">drwxr-xr-x 4 root root  0 Apr  1 10:59 pids    # 限制任务的数量</span><br><span class=\"line\">drwxr-xr-x 4 root root  0 Apr  1 10:59 systemd</span><br></pre></td></tr></table></figure>\n\n<p>​        容器实际资源限制文件路径：/sys/fs/cgroup/&lt;资源名&gt;/docker/&lt;容器id&gt;</p>\n<p>​        cgroup为每个容器都创建了相应的限制目录，<strong>直接修改容器目录中的资源限制类型就能达到限制容器使用资源的目标</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker container ls</span> </span><br><span class=\"line\">CONTAINER ID   IMAGE  COMMAND                  CREATED        STATUS              PORTS     NAMES</span><br><span class=\"line\">dc6d2297d670   nginx  &quot;/docker-entrypoint.…&quot;   15 hours ago   Up About a minute   80/tcp vibrant_hawking</span><br><span class=\"line\">60ffca766bde   f1cb7c7d58b7   &quot;bash&quot;                   6 weeks ago    Up About a minute             c1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cpu目录下的资源限制文件，跟/sys/fs/cgroup/cpu/下的内容大同小异</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls /sys/fs/cgroup/cpu/docker/   <span class=\"comment\"># 下面的dc6d2297d670和60ffca766bde就是正在运行的两个容器</span></span></span><br><span class=\"line\">60ffca766bdea3ba772bc8fff9e15a5b569d213d06980f1cb56b0d50a66315cf  cpuacct.usage_percpu  cpu.stat</span><br><span class=\"line\">cgroup.clone_children                                             cpu.cfs_period_us     dc6d2297d670ff91bc2dc1fe0e1f7c38563d6f0279a26e4664d7c87ec96ea86b</span><br><span class=\"line\">cgroup.event_control                                              cpu.cfs_quota_us      notify_on_release</span><br><span class=\"line\">cgroup.procs                                                      cpu.rt_period_us      tasks</span><br><span class=\"line\">cpuacct.stat                                                      cpu.rt_runtime_us</span><br><span class=\"line\">cpuacct.usage                                                     cpu.shares</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls   /sys/fs/cgroup/cpu/docker/dc6d2297d670ff91bc2dc1fe0e1f7c38563d6f0279a26e4664d7c87ec96ea86b/</span></span><br><span class=\"line\">cgroup.clone_children  cgroup.procs  cpuacct.usage         cpu.cfs_period_us  cpu.rt_period_us   cpu.shares  notify_on_release</span><br><span class=\"line\">cgroup.event_control   cpuacct.stat  cpuacct.usage_percpu  cpu.cfs_quota_us   cpu.rt_runtime_us  cpu.stat    tasks</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cat    /sys/fs/cgroup/cpu/docker/dc6d2297d670ff91bc2dc1fe0e1f7c38563d6f0279a26e4664d7c87ec96ea86b/tasks</span> </span><br><span class=\"line\">19652    # nginx容器的父进程--master进程</span><br><span class=\"line\">19700    # nginx容器的子进程--worker进程</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ps -ef | grep [1]9652</span></span><br><span class=\"line\">root      19652  19623  0 13:46 ?        00:00:00 nginx: master process nginx -g daemon off;</span><br><span class=\"line\">101       19700  19652  0 13:46 ?        00:00:00 nginx: worker process</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> memory下的资源限制目录，跟/sys/fs/cgroup/memory/下的内容大同小异</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls   /sys/fs/cgroup/memory/docker/dc6d2297d670ff91bc2dc1fe0e1f7c38563d6f0279a26e4664d7c87ec96ea86b/</span></span><br><span class=\"line\">cgroup.clone_children       memory.kmem.max_usage_in_bytes      memory.limit_in_bytes            memory.numa_stat            memory.use_hierarchy</span><br><span class=\"line\">cgroup.event_control        memory.kmem.slabinfo                memory.max_usage_in_bytes        memory.oom_control          notify_on_release</span><br><span class=\"line\">cgroup.procs                memory.kmem.tcp.failcnt             memory.memsw.failcnt             memory.pressure_level       tasks</span><br><span class=\"line\">memory.failcnt              memory.kmem.tcp.limit_in_bytes      memory.memsw.limit_in_bytes      memory.soft_limit_in_bytes</span><br><span class=\"line\">memory.force_empty          memory.kmem.tcp.max_usage_in_bytes  memory.memsw.max_usage_in_bytes  memory.stat</span><br><span class=\"line\">memory.kmem.failcnt         memory.kmem.tcp.usage_in_bytes      memory.memsw.usage_in_bytes      memory.swappiness</span><br><span class=\"line\">memory.kmem.limit_in_bytes  memory.kmem.usage_in_bytes          memory.move_charge_at_immigrate  memory.usage_in_bytes</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cat    /sys/fs/cgroup/memory/docker/dc6d2297d670ff91bc2dc1fe0e1f7c38563d6f0279a26e4664d7c87ec96ea86b/tasks</span> </span><br><span class=\"line\">19652    # nginx容器的父进程--master进程</span><br><span class=\"line\">19700    # nginx容器的子进程--worker进程</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ps -ef | grep [1]9652</span></span><br><span class=\"line\">root      19652  19623  0 13:46 ?        00:00:00 nginx: master process nginx -g daemon off;</span><br><span class=\"line\">101       19700  19652  0 13:46 ?        00:00:00 nginx: worker process</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cat    /sys/fs/cgroup/memory/docker/dc6d2297d670ff91bc2dc1fe0e1f7c38563d6f0279a26e4664d7c87ec96ea86b/memory.limit_in_bytes</span> </span><br><span class=\"line\">1073741824     # 显示现在分配的内存是1073741824 / 1024 / 1024 /1024 = 1g  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker stats dc6d2297d670ff91bc2dc1fe0e1f7c38563d6f0279a26e4664d7c87ec96ea86b</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看该容器的资源限制情况，显示内存限制是1G</span></span><br><span class=\"line\">CONTAINER ID   NAME              CPU %     MEM USAGE / LIMIT   MEM %     NET I/O      BLOCK I/O     PIDS</span><br><span class=\"line\">dc6d2297d670   vibrant_hawking   0.00%     2.531MiB / 1GiB     0.25%     1.01kB / 0B  22.3MB / 0B   2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 修改容器内存限制，需要注意的是，修改的内存值大于限制值时将修改失败，可以改小，不能改大</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">echo</span> <span class=\"string\">&quot;200M&quot;</span> &gt;  /sys/fs/cgroup/memory/docker/dc6d2297d670ff91bc2dc1fe0e1f7c38563d6f0279a26e4664d7c87ec96ea86b/memory.limit_in_bytes</span>   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cat    /sys/fs/cgroup/memory/docker/dc6d2297d670ff91bc2dc1fe0e1f7c38563d6f0279a26e4664d7c87ec96ea86b/memory.limit_in_bytes</span> </span><br><span class=\"line\">209715200    # 209715200 / 1024 / 1024 = 200M</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 修改完成后查看容器内存限制，内存值已经变成了200m</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker stats dc6d2297d670ff91bc2dc1fe0e1f7c38563d6f0279a26e4664d7c87ec96ea86b</span></span><br><span class=\"line\">CONTAINER ID   NAME              CPU %     MEM USAGE / LIMIT   MEM %     NET I/O     BLOCK I/O     PIDS</span><br><span class=\"line\">dc6d2297d670   vibrant_hawking   0.00%     2.531MiB / 200MiB   1.27%     1.01kB / 0B 22.3MB / 0B   2</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>​        除了直接修改容器下指定文件来修改限制容器使用资源外，还可以通过下面的命令行命令进行修改。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker update --<span class=\"built_in\">help</span>   <span class=\"comment\"># docker资源限制主要是下面的几个类型</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">Usage:  docker update [OPTIONS] CONTAINER [CONTAINER...]</span><br><span class=\"line\"></span><br><span class=\"line\">Update configuration of one or more containers</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\">      --blkio-weight uint16        Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0)</span><br><span class=\"line\">      --cpu-period int             Limit CPU CFS (Completely Fair Scheduler) period</span><br><span class=\"line\">      --cpu-quota int              Limit CPU CFS (Completely Fair Scheduler) quota</span><br><span class=\"line\">      --cpu-rt-period int          Limit the CPU real-time period in microseconds</span><br><span class=\"line\">      --cpu-rt-runtime int         Limit the CPU real-time runtime in microseconds</span><br><span class=\"line\">  -c, --cpu-shares int             CPU shares (relative weight)</span><br><span class=\"line\">      --cpus decimal               Number of CPUs</span><br><span class=\"line\">      --cpuset-cpus string         CPUs in which to allow execution (0-3, 0,1)</span><br><span class=\"line\">      --cpuset-mems string         MEMs in which to allow execution (0-3, 0,1)</span><br><span class=\"line\">      --kernel-memory bytes        Kernel memory limit</span><br><span class=\"line\">  -m, --memory bytes               Memory limit</span><br><span class=\"line\">      --memory-reservation bytes   Memory soft limit</span><br><span class=\"line\">      --memory-swap bytes          Swap limit equal to memory plus swap: &#x27;-1&#x27; to enable unlimited swap</span><br><span class=\"line\">      --pids-limit int             Tune container pids limit (set -1 for unlimited)</span><br><span class=\"line\">      --restart string             Restart policy to apply when a container exits</span><br></pre></td></tr></table></figure>\n\n<p><strong>1.2 虚拟化技术</strong></p>\n<p>​        虚拟化技术是一种计算机资源管理技术，将内存，网络，CPU等资源进行抽象，让硬件透明，目的是让用户合理地使用操作系统资源。</p>\n<p><strong>容器与虚拟化</strong></p>\n<p><img src=\"image-20200715143707656.png\" alt=\"image-20200715143707656\"></p>\n<p>​        <strong>容器</strong>是应用程序层的抽象，将代码和依赖项打包在一起。<strong>多个容器可以在同一台计算机上运行，并与其他容器共享操作系统内核，每个容器在用户空间中作为隔离的进程运行</strong>。<strong>容器占用的空间少于VM</strong>（容器映像的大小通常为几十MB），可以处理更多的应用程序，并且需要的VM和操作系统更少。</p>\n<p>​        <strong>虚拟机（VM）</strong>是将一台服务器转变为多台服务器的物理硬件的抽象。系统管理程序允许多个VM在单台计算机上运行。每个VM都包含<strong>操作系统，应用程序，必要的二进制文件和库的完整副本</strong></p>\n<p>​       <strong>虚拟机和容器都有优势和劣势</strong>，如何选择取决于具体的需求，但有些规则可以参考。</p>\n<ul>\n<li><p>VM非常适合当应用运行时<strong>需要所有OS资源和功能的场景</strong>，如果需要运行多个这样的应该，可以使用VMs。</p>\n</li>\n<li><p>容器适合在更少的server上运行更多的应用。</p>\n</li>\n</ul>\n<p>​        服务器好比运输码头：拥有场地和各种设备（服务器硬件资源），服务器虚拟化好比作码头上的仓库：拥有独立的空间堆放各种货物或集装箱(仓库之间完全独立，都拥有独立的应用系统和操作系统）。</p>\n<p>​        Docker比作集装箱：各种货物的打包，将各种应用程序和他们所依赖的运行环境打包成标准的容器,容器之间隔离。Docker有着小巧、迁移部署快速、运行高效等特点，但隔离性比服务器虚拟化差：不同的集装箱属于不同的运行单位（Docker上运行不同的应用实例），相互独立（隔离）。但由同一个库管人员管理（主机操作系统内核），因此通过库管人员可以看到所有集装箱的相关信息（因为共享操作系统内核，因此相关信息会共享）。</p>\n<p>​       服务器虚拟化就好比在码头上（物理主机及虚拟化层），建立了多个独立的“小码头”—仓库（虚拟机）。其拥有完全独立（隔离）的空间，属于不同的客户（虚拟机所有者）。每个仓库有各自的库管人员（当前虚拟机的操作系统内核），无法管理其它仓库。不存在信息共享的情况</p>\n<p>​       因此，我们需要根据不同的应用场景和需求采用不同的方式使用Docker技术或使用服务器虚拟化技术。例如一个典型的Docker应用场景是当主机上的Docker实例属于单一用户的情况下，在保证安全的同时可以充分发挥Docker的技术优势。对于隔离要求较高的环境如混合用户环境，就可以使用服务器虚拟化技术。</p>\n","comments":true,"permalink":"https://qingdalf.github.io/2021-05/dockerPre/","categories":[{"name":"kubernets","slug":"kubernets","permalink":"https://qingdalf.github.io/categories/kubernets/"}],"tags":[]},{"title":"PythonVarString","date":"2021-05-02T06:16:03.000Z","path":"2021-05/pVarString/","content":"<h2 id=\"3-字符串\"><a href=\"#3-字符串\" class=\"headerlink\" title=\"3.字符串\"></a>3.字符串</h2><p>字符串常见操作官方文档：<a href=\"https://docs.python.org/zh-cn/3.9/library/string.html?highlight=%E5%AD%97%E7%AC%A6%E4%B8%B2\">https://docs.python.org/zh-cn/3.9/library/string.html?highlight=字符串</a></p>\n<p>​        大多数程序都定义并收集某种数据，然后使用它们来做些有意义的事情。鉴于此，对数据进行分类大有裨益。其中字符串就是一个基础的数据类型。</p>\n<span id=\"more\"></span>\n<h3 id=\"3-1-字符串的定义\"><a href=\"#3-1-字符串的定义\" class=\"headerlink\" title=\"3.1 字符串的定义\"></a>3.1 字符串的定义</h3><p>​        在 Python 中处理文本数据是使用 <a href=\"https://docs.python.org/zh-cn/3.9/library/stdtypes.html#str\"><code>str</code></a> 对象，也称为 <em>字符串</em>。 字符串是由 Unicode 码位构成的不可变 <a href=\"https://docs.python.org/zh-cn/3.9/library/stdtypes.html#typesseq\">序列</a>。 字符串字面值有多种不同的写法：</p>\n<ul>\n<li><p>单引号: <code>&#39;允许包含有 &quot;双&quot; 引号&#39;</code></p>\n</li>\n<li><p>双引号: <code>&quot;允许包含有 &#39;单&#39; 引号&quot;</code>。</p>\n</li>\n<li><p>三重引号: <code>&#39;&#39;&#39;三重单引号&#39;&#39;&#39;</code>, <code>&quot;&quot;&quot;三重双引号&quot;&quot;&quot;</code></p>\n<p>​    使用三重引号的字符串可以跨越多行 —— 其中所有的空白字符都将包含在该字符串字面值中。</p>\n</li>\n</ul>\n<p><strong>字符串中本身不含引号的情况</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>var1 = <span class=\"string\">&quot;This is a string.&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>var2 = <span class=\"string\">&#x27;This is also a string.&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>字符串中本身含有引号的情况</strong>：如果字符串中包含某种引号(如单引号)，则在定义字符串的时候应该使用另外的两种引号</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>var3 = <span class=\"string\">&#x27;I told my friend, &quot;Python is my favorite language!&quot;&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>var4 = <span class=\"string\">&quot;The language &#x27;Python&#x27; is named after Monty Python, not the snake.&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>var5 = <span class=\"string\">&quot;One of Python&#x27;s strengths is its diverse and supportive community.&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>三字符串</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">str</span> = <span class=\"string\">&quot;&quot;&quot;登鹳雀楼</span></span><br><span class=\"line\"><span class=\"string\">唐 王之涣 </span></span><br><span class=\"line\"><span class=\"string\">白日依山尽，</span></span><br><span class=\"line\"><span class=\"string\">黄河入海流。</span></span><br><span class=\"line\"><span class=\"string\">欲穷千里目，</span></span><br><span class=\"line\"><span class=\"string\">更上一层楼。</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"built_in\">str</span>)</span><br><span class=\"line\">登鹳雀楼</span><br><span class=\"line\">唐 王之涣 </span><br><span class=\"line\">白日依山尽，</span><br><span class=\"line\">黄河入海流。</span><br><span class=\"line\">欲穷千里目，</span><br><span class=\"line\">更上一层楼。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-字符串的转义\"><a href=\"#3-2-字符串的转义\" class=\"headerlink\" title=\"3.2 字符串的转义\"></a>3.2 字符串的转义</h3><p>​        在字符串的定义中，可能会使用到一些特殊字符，如制表符<code>\\t</code>、换行符<code>\\n</code>，这写字符具有特殊含义，将被python识别成指定的格式，如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">str</span> = <span class=\"string\">&quot;&quot;&quot;登鹳雀楼\\n唐 王之涣\\n白日依山尽，\\n黄河入海流。\\n欲穷千里目，\\n更上一层楼。&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"built_in\">str</span>)</span><br><span class=\"line\">登鹳雀楼</span><br><span class=\"line\">唐 王之涣</span><br><span class=\"line\">白日依山尽，</span><br><span class=\"line\">黄河入海流。</span><br><span class=\"line\">欲穷千里目，</span><br><span class=\"line\">更上一层楼。</span><br></pre></td></tr></table></figure>\n\n<p>​        在python中，使用<code>\\</code>对特殊字符进行转义，比如我们想要上面的变量<code>str</code>的值换行输出，但是我们仍然想要输出的结果中包含<code>\\n</code>是，我们可以通过<code>\\</code>对<code>\\n</code>进行转义(即<code>\\\\n</code>)。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">str</span> = <span class=\"string\">&quot;&quot;&quot;登鹳雀楼\\\\n唐 王之涣\\\\n白日依山尽，\\\\n黄河入海流。\\\\n欲穷千里目，\\\\n更上一层楼。&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"built_in\">str</span>)</span><br><span class=\"line\">登鹳雀楼\\n唐 王之涣\\n白日依山尽，\\n黄河入海流。\\n欲穷千里目，\\n更上一层楼。</span><br></pre></td></tr></table></figure>\n\n<p>我们也可以通过在字符串前加一个<code>r</code>进行转义</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">str</span> = <span class=\"string\">r&quot;&quot;&quot;登鹳雀楼\\n唐 王之涣\\n白日依山尽，\\n黄河入海流。\\n欲穷千里目，\\n更上一层楼。&quot;&quot;&quot;</span></span><br><span class=\"line\">上一层楼。<span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\">&gt;&gt;&gt; </span>print(str)</span></span><br><span class=\"line\"><span class=\"string\">登鹳雀楼\\n唐 王之涣\\n白日依山尽，\\n黄河入海流。\\n欲穷千里目，\\n更上一层楼。</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"3-3-字符串的常用方法\"><a href=\"#3-3-字符串的常用方法\" class=\"headerlink\" title=\"3.3 字符串的常用方法\"></a>3.3 字符串的常用方法</h3><p>​        对于字符串的操作，通常有修改字符串的大小写、拼接字符串、切割、等待。</p>\n<h4 id=\"3-3-1-修改字符串的大小写\"><a href=\"#3-3-1-修改字符串的大小写\" class=\"headerlink\" title=\"3.3.1 修改字符串的大小写\"></a>3.3.1 修改字符串的大小写</h4><p>​        我们可以通过字符串的指定方法修改字符串的大小写，如将字母全部为小写的字符串修改成大写字母，反义亦然；将全部为字符的字符串的首字母大写等。</p>\n<p>(1).<strong>首字母大写</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>name = <span class=\"string\">&quot;ada lovelace&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(name.title())</span><br><span class=\"line\">Ada Lovelace</span><br></pre></td></tr></table></figure>\n\n<p>​        在这个示例中，小写的字符串”ada lovelace”存储到了变量name中。在print()语句中，方法title()出现在这个变量的后面。<strong>方法是Python可对数据执行的操作</strong>。<strong>在name.title()中，name后面的句点（.）让Python对变量name执行方法title()指定的操作。每个方法后面都跟着一对括号，这是因为方法通常需要额外的信息来完成其工作。这种信息是在括号内提供的。</strong>函数title()不需要额外的信息，因此它后面的括号是空的。title()以首字母大写的方式显示每个单词，即将每个单词的首字母都改为大写。这很有用，因为你经常需要将名字视为信息。例如，你可能希望程序将值Ada、ADA和ada视为同一个名字，并将它们都显示为Ada。</p>\n<p>(2).<strong>全部大写</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(name.upper())</span><br><span class=\"line\">ADA LOVELACE</span><br></pre></td></tr></table></figure>\n\n<p>(3).<strong>全部小写</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(name.lower())</span><br><span class=\"line\">ada lovelace</span><br></pre></td></tr></table></figure>\n\n<p>​        存储数据时，方法lower()很有用。很多时候，你无法依靠用户来提供正确的大小写，因此需要将字符串先转换为小写，再存储它们。以后需要显示这些信息时，再将其转换为最合适的大小写方式。</p>\n<p>(4).<strong>将大小写转换</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>name = <span class=\"string\">&quot;ZhangSan&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(name.swapcase())</span><br><span class=\"line\">zHANGsAN</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"3-3-2-合并（拼接）字符串\"><a href=\"#3-3-2-合并（拼接）字符串\" class=\"headerlink\" title=\"3.3.2 合并（拼接）字符串\"></a>3.3.2 合并（拼接）字符串</h4><p>​        合并(拼接)字符串是指将两个字符串进行合并(拼接)起来，以便按照我们想要的方式一起输出或存储。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>first_name = <span class=\"string\">&quot;ada&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>last_name = <span class=\"string\">&quot;lovelace&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>full_name = first_name + <span class=\"string\">&quot; &quot;</span> + last_name</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(full_name)</span><br><span class=\"line\">ada lovelace</span><br></pre></td></tr></table></figure>\n\n<p>​        对于上面的案例，我们可以不定义<code>full_name</code>这个变量也能达到合并输出的效果，这两种方式在本质上都是一样的，只不过上面的方法是将合并(拼接)的结果存储在了变量<code>full_name</code>中，下面的方式是直接进行字符串的拼接并通过<code>print()</code>函数输出</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(first_name + <span class=\"string\">&quot; &quot;</span> + last_name)</span><br><span class=\"line\">ada lovelace</span><br></pre></td></tr></table></figure>\n\n<p>​        通过字符串的合并(拼接)功能，我们可以输出一些有意义的表达式，如当用户登陆的时候，我们可以跟用户打招呼。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>name = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;please, input your username: &quot;</span>)</span><br><span class=\"line\">please, <span class=\"built_in\">input</span> your username: zhangsan</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Hello, &quot;</span> + name.title() + <span class=\"string\">&quot;!&quot;</span> + <span class=\"string\">&quot; welcome login.&quot;</span>)</span><br><span class=\"line\">Hello, Zhangsan! welcome login.</span><br></pre></td></tr></table></figure>\n\n<p>​        其实，print()函数本身提供了字符串合并(拼接)的功能，当然这是print()函数的功能，并不是字符串的功能。</p>\n<p><strong>print()函数默认以空格为分隔符将字符串输出</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&quot;apples&quot;</span>, <span class=\"string\">&quot;oranges&quot;</span>, <span class=\"string\">&quot;bananas&quot;</span>)</span><br><span class=\"line\">apples oranges bananas</span><br></pre></td></tr></table></figure>\n\n<p><strong>指定print()函数的分隔符</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 以逗号(&quot;,&quot;)为分隔符输出</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&quot;apples&quot;</span>, <span class=\"string\">&quot;oranges&quot;</span>, <span class=\"string\">&quot;bananas&quot;</span>, sep=<span class=\"string\">&quot;,&quot;</span>)</span><br><span class=\"line\">apples,oranges,bananas</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 以横杠(&quot;-&quot;)为分隔符输出</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&quot;apples&quot;</span>, <span class=\"string\">&quot;oranges&quot;</span>, <span class=\"string\">&quot;bananas&quot;</span>, sep=<span class=\"string\">&quot;-&quot;</span>)</span><br><span class=\"line\">apples-oranges-bananas</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-3-3-使用制表符或换行符来添加空白\"><a href=\"#3-3-3-使用制表符或换行符来添加空白\" class=\"headerlink\" title=\"3.3.3 使用制表符或换行符来添加空白\"></a>3.3.3 使用制表符或换行符来添加空白</h4><p>​        <strong>在编程中，空白泛指任何非打印字符，如空格、制表符和换行符</strong>。你可使用空白来组织输出，以使其更易读。要在字符串中添加制表符，可使用字符组合<code>\\t</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Hello, Python&quot;</span>)</span><br><span class=\"line\">Hello, Python</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\tHello, Python&quot;</span>)</span><br><span class=\"line\">\tHello, Python            <span class=\"comment\"># 此处的输出中Hello, Python前面有四个空格(\\t制表符的输出结果)</span></span><br></pre></td></tr></table></figure>\n\n<p>​        要在字符串中添加换行符，可使用<code>\\n</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Languages:\\nPython\\nC\\nJavaScript&quot;</span>)</span><br><span class=\"line\">Languages:</span><br><span class=\"line\">Python</span><br><span class=\"line\">C</span><br><span class=\"line\">JavaScript</span><br></pre></td></tr></table></figure>\n\n<p>​        为了更加美观和已读，我们可以混用换行符<code>\\n</code>和制表符<code>\\t</code>。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Languages:\\n\\tPython\\n\\tC\\n\\tJavaScript&quot;</span>)</span><br><span class=\"line\">Languages:</span><br><span class=\"line\">\tPython</span><br><span class=\"line\">\tC</span><br><span class=\"line\">\tJavaScript</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-3-4-删除空白\"><a href=\"#3-3-4-删除空白\" class=\"headerlink\" title=\"3.3.4 删除空白\"></a>3.3.4 删除空白</h4><p>​        在程序中，额外的空白可能令人迷惑。对程序员来说，’python’和’python ‘看起来几乎没什么两样，但对程序来说，它们却是两个不同的字符串。Python能够发现’python ‘中额外的空白，并认为它是有意义的——除非你告诉它不是这样的。<br>​        空白很重要，因为你经常需要比较两个字符串是否相同。例如，一个重要的示例是，在用户登录网站时检查其用户名。但在一些简单得多的情形下，额外的空格也可能令人迷惑。所幸在Python中，删除用户输入的数据中的多余的空白易如反掌。</p>\n<p>​        Python能够找出字符串开头和末尾多余的空白。在python中，可以使用rstrip()删除字符串末尾的空白，使用lstrip()删除字符串前方的空白，使用strip()删除字符串前后的空白。</p>\n<p>​        下面的案例中，我在输入用户名的时候，分别在<code>zhangsan</code>前面和后面各加了两个和一个空格</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>name = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;please, input your username: &quot;</span>)</span><br><span class=\"line\">please, <span class=\"built_in\">input</span> your username:   zhangsan    </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(name)   <span class=\"comment\"># 直接输出&quot;zhangsan&quot;我们很难分辨出字符串前后的空格</span></span><br><span class=\"line\">  zhangsan </span><br></pre></td></tr></table></figure>\n\n<p>如何分辨我输出的空格呢？</p>\n<p><strong>方法1：</strong>通过len()函数比较两个字符串的长度</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(<span class=\"string\">&quot;zhangsan&quot;</span>))    <span class=\"comment\"># 字符串&quot;zhangsan&quot;的长度是8</span></span><br><span class=\"line\"><span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(name))     <span class=\"comment\"># 变量name的长度为11，则证明name前后必然有空格，但是前后空格的个数，我们不知道</span></span><br><span class=\"line\"><span class=\"number\">11</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>方法2：</strong>除了比较长度外，我们也可以通过下面的方法比较两个字符串是否是同一个字符串</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(name == <span class=\"string\">&quot;zhangsan&quot;</span>)</span><br><span class=\"line\"><span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>方法3：</strong>通过字符串的替换功能，将空格替换成易识别的其他字符</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>name.replace(<span class=\"string\">&quot; &quot;</span>,<span class=\"string\">&quot;-&quot;</span>)  <span class=\"comment\"># 将空格替换成横杠&quot;-&quot;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;--zhangsan-&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-3-4-1-删除字符串末尾的空白\"><a href=\"#3-3-4-1-删除字符串末尾的空白\" class=\"headerlink\" title=\"3.3.4.1 删除字符串末尾的空白\"></a>3.3.4.1 删除字符串末尾的空白</h5><p>​        为了方便查看删除效果，我们使用字符串的替换功能进行检验</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(name.rstrip())</span><br><span class=\"line\">  zhangsan</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(name.rstrip().replace(<span class=\"string\">&quot; &quot;</span>,<span class=\"string\">&quot;-&quot;</span>))</span><br><span class=\"line\">--zhangsan</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-3-4-2-删除字符串左边的空白\"><a href=\"#3-3-4-2-删除字符串左边的空白\" class=\"headerlink\" title=\"3.3.4.2 删除字符串左边的空白\"></a>3.3.4.2 删除字符串左边的空白</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(name.lstrip())</span><br><span class=\"line\">zhangsan </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(name.lstrip().replace(<span class=\"string\">&quot; &quot;</span>,<span class=\"string\">&quot;-&quot;</span>))</span><br><span class=\"line\">zhangsan-</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-2-4-3-删除字符串首未的空白\"><a href=\"#3-2-4-3-删除字符串首未的空白\" class=\"headerlink\" title=\"3.2.4.3 删除字符串首未的空白\"></a>3.2.4.3 删除字符串首未的空白</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(name.strip())   <span class=\"comment\"># 默认删除空格</span></span><br><span class=\"line\">zhangsan</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(name.strip().replace(<span class=\"string\">&quot; &quot;</span>,<span class=\"string\">&quot;-&quot;</span>))   <span class=\"comment\"># 没有空格，将不能进行替换</span></span><br><span class=\"line\">zhangsan</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(name.strip()))   <span class=\"comment\"># 查看长度，删除字符串首尾的空格后，字符串的长度跟字符串&quot;zhangsan&quot;的长度一样</span></span><br><span class=\"line\"><span class=\"number\">8</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-2-4-4-删除字符串首尾的指定字符串\"><a href=\"#3-2-4-4-删除字符串首尾的指定字符串\" class=\"headerlink\" title=\"3.2.4.4 删除字符串首尾的指定字符串\"></a>3.2.4.4 删除字符串首尾的指定字符串</h5><p>​        strip()方法不仅仅可以删除字符串首尾的空格(默认情况下，strip()是删除字符串首尾的空格)，我们还可以删除指定的字符。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\"># 删除字符串首尾的空格、字母z、字母n、字母b</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(name.strip(<span class=\"string\">&quot; znb&quot;</span>)) </span><br><span class=\"line\">hangsa</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-3-5-替换字符串\"><a href=\"#3-3-5-替换字符串\" class=\"headerlink\" title=\"3.3.5 替换字符串\"></a>3.3.5 替换字符串</h4><p>​        将字符串中的某些字符替换成其他字符，格式：<code>str.replace(old,new[,max])</code>，其中<code>max</code>为可选参数，默认都替换，<code>max</code>可以指定替换此处</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>name = <span class=\"string\">&quot;zhangsan&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(name.replace(<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;A&quot;</span>))   <span class=\"comment\"># 不指定max参数时，默认全部替换</span></span><br><span class=\"line\">zhAngsAn</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>name = <span class=\"string\">&quot;Zhang san&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(name)</span><br><span class=\"line\">Zhang san</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(name.replace(<span class=\"string\">&quot; &quot;</span>,<span class=\"string\">&quot;+++++&quot;</span>))</span><br><span class=\"line\">Zhang+++++san</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>name = <span class=\"string\">&quot;zhangsan&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(name.replace(<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;A&quot;</span>,<span class=\"number\">1</span>))   <span class=\"comment\"># 指定替换次数，此处将只替换第一a,第二个a将保持不变</span></span><br><span class=\"line\">zhAngsan</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-3-6-字符串的截取\"><a href=\"#3-3-6-字符串的截取\" class=\"headerlink\" title=\"3.3.6 字符串的截取\"></a>3.3.6 字符串的截取</h4><p>​        Python 访问子字符串，可以使用方括号<code> []</code> 来截取字符串，字符串的截取的语法格式如下：<code>变量[头下标:尾下标]</code></p>\n<p>​        首先我们了解下索引，索引主要包括以下几点：</p>\n<ul>\n<li><p>索引包括正向索引和反向作用，正向作用从左到右，从0开始计数；反向索引从右到左，从-1开始计数；</p>\n</li>\n<li><p>索引是<code>前包后不包</code>，str[m,n]用数学表示为[m,n)，其中m&lt;n；</p>\n</li>\n<li><p>如果从第一个字符或最后一个字符进行截取，可以使用<code>:</code>，而不用标注<code>0</code>或者<code>-1</code>；</p>\n</li>\n<li><p>可以连续截取，也可以指定步长，如str[m,n,2]表示，从m开始直到n(不包括n)，步长为2进行截取；</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">str</span> = <span class=\"string\">&quot;I love Python&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>​        字符串<code>&quot;I love Python&quot;</code>的正向和反向索引如下：</p>\n<p><img src=\"image-20210425091117807.png\" alt=\"image-20210425091117807\"></p>\n<p>​        通过变量<code>str</code>获取<code>love</code>，通过上面的图片可以知道<code>love</code>的索引是从<code>2-5</code>，共<code>4</code>个字符，但是索引是包含<code>2</code>，不包含<code>5</code>，因此要取到<code>e</code>，末尾的索引值应该是<code>6</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"built_in\">str</span>[<span class=\"number\">2</span>:<span class=\"number\">6</span>])</span><br><span class=\"line\"> love</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(<span class=\"built_in\">str</span>[<span class=\"number\">2</span>:<span class=\"number\">6</span>]))</span><br><span class=\"line\"><span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n\n<p>​        通过变量str获取python</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"built_in\">str</span>[<span class=\"number\">7</span>:<span class=\"number\">13</span>])</span><br><span class=\"line\">Python</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 由于pyhton后面已经没有字符了，因此可以使用str[m:]进行截取</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"built_in\">str</span>[<span class=\"number\">7</span>:])</span><br><span class=\"line\">Python</span><br></pre></td></tr></table></figure>\n\n<p>​        设置步长进行截取，如从头到尾设置步长为2进行截取，即获取所有索引为偶数的字符</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"built_in\">str</span>[::<span class=\"number\">2</span>])</span><br><span class=\"line\">Ilv yhn</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-3-7-对字符串进行切片\"><a href=\"#3-3-7-对字符串进行切片\" class=\"headerlink\" title=\"3.3.7 对字符串进行切片\"></a>3.3.7 对字符串进行切片</h4><p>​        格式：<code>str.split(st=&quot;&quot;,num=string.count(str))</code>,其中st代表分隔符，默认为空格；num表示分割的次数，返回的结果为分割后的新字符串</p>\n<p><strong>(1). 以空格对字符串进行切片</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"built_in\">str</span>.split())     <span class=\"comment\"># 默认以空格做分隔符</span></span><br><span class=\"line\">[<span class=\"string\">&#x27;I&#x27;</span>, <span class=\"string\">&#x27;love&#x27;</span>, <span class=\"string\">&#x27;Python&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"built_in\">str</span>.split(<span class=\"string\">&quot; &quot;</span>))  <span class=\"comment\"># 上面的代码等同于</span></span><br><span class=\"line\">[<span class=\"string\">&#x27;I&#x27;</span>, <span class=\"string\">&#x27;love&#x27;</span>, <span class=\"string\">&#x27;Python&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p>​        通过上面的结果可以看出，得到的结果是一个列表，并别<code>split()</code>方法指定的分隔符(即空格)被丢弃</p>\n<p><strong>(2). 以字母o对字符串进行切片</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"built_in\">str</span>.split(<span class=\"string\">&quot;o&quot;</span>))</span><br><span class=\"line\">[<span class=\"string\">&#x27;I l&#x27;</span>, <span class=\"string\">&#x27;ve Pyth&#x27;</span>, <span class=\"string\">&#x27;n&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p><strong>(3). 以字母o对字符串进行切片1次</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"built_in\">str</span>.split(<span class=\"string\">&quot;o&quot;</span>,<span class=\"number\">1</span>))  <span class=\"comment\"># 指定切割的次数</span></span><br><span class=\"line\">[<span class=\"string\">&#x27;I l&#x27;</span>, <span class=\"string\">&#x27;ve Python&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-3-8-查找字符串中是否存在某字符\"><a href=\"#3-3-8-查找字符串中是否存在某字符\" class=\"headerlink\" title=\"3.3.8 查找字符串中是否存在某字符\"></a>3.3.8 查找字符串中是否存在某字符</h4><p>​        在python中，有时我们需要检查一个字符串中是否包含某个字符(单个或多个字符)，可以使用find()方法，格式：<code>str.find(str,查询开始的索引值,查询结束的索引值)</code>，如果查找的字符存在与字符串中，就返回字符在字符串中的第一个索引的值，否则返回-1</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>name = <span class=\"string\">&quot;zhangsan&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查找a字符在name中的位置，如果有多个，则只返回第一个a的索引</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(name.find(<span class=\"string\">&quot;a&quot;</span>))  </span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查找san字符在name中的位置，返回san第一个字符的索引</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(name.find(<span class=\"string\">&quot;san&quot;</span>))  </span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查找san字符在name中的位置，sn不存在与字符串name中，因此返回-1</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(name.find(<span class=\"string\">&quot;sn&quot;</span>))  </span><br><span class=\"line\">-<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从指定位置开始查找字符串a，索引3-6表示字符串name中的&quot;ngs&quot;，不存在a字符，因此返回-1</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(name.find(<span class=\"string\">&quot;a&quot;</span>,<span class=\"number\">3</span>,<span class=\"number\">6</span>))  </span><br><span class=\"line\">-<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从指定位置开始查找字符串a，索引3-7表示字符串name中的&quot;ngsa&quot;，存在a字符，因此返回a字符在name中此处ngsa中a的索引</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(name.find(<span class=\"string\">&quot;a&quot;</span>,<span class=\"number\">3</span>,<span class=\"number\">7</span>))</span><br><span class=\"line\"><span class=\"number\">6</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-3-9-连接字符串\"><a href=\"#3-3-9-连接字符串\" class=\"headerlink\" title=\"3.3.9 连接字符串\"></a>3.3.9 连接字符串</h4><p>​        <code>join()</code>方法用于将序列中的元素以指定字符连接成一个新字符串，格式：<code>str.join(sequence)</code>，sequence代表要连接的元素序列，返回结果为生成的新字符串。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>name = [<span class=\"string\">&quot;zhangsan&quot;</span>, <span class=\"string\">&quot;lisi&quot;</span>, <span class=\"string\">&quot;wangwu&quot;</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot; &quot;</span>.join(name)</span><br><span class=\"line\"><span class=\"string\">&#x27;zhangsan lisi wangwu&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>name = (<span class=\"string\">&quot;zhangsan&quot;</span>, <span class=\"string\">&quot;lisi&quot;</span>, <span class=\"string\">&quot;wangwu&quot;</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;-&quot;</span>.join(name)</span><br><span class=\"line\"><span class=\"string\">&#x27;zhangsan-lisi-wangwu&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-3-10-查询开头结尾的特定字符串\"><a href=\"#3-3-10-查询开头结尾的特定字符串\" class=\"headerlink\" title=\"3.3.10 查询开头结尾的特定字符串\"></a>3.3.10 查询开头结尾的特定字符串</h4><p><strong>(1).startswith()：</strong>表示以什么开头，如果以指定字符结尾则返回True，否则返回False</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>var = <span class=\"string\">&quot;I love python!&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>var.startswith(<span class=\"string\">&quot;I&quot;</span>)</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>var.startswith(<span class=\"string\">&quot;I lo&quot;</span>)</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>var.startswith(<span class=\"string\">&quot;i&quot;</span>)</span><br><span class=\"line\"><span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>(2).endswith()：</strong>表示以什么开头，如果以指定字符结尾则返回True，否则返回False</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>var.endswith(<span class=\"string\">&quot;python!&quot;</span>)</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>var.endswith(<span class=\"string\">&quot;on!&quot;</span>)</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>var.endswith(<span class=\"string\">&quot;on&quot;</span>)</span><br><span class=\"line\"><span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"4-数字\"><a href=\"#4-数字\" class=\"headerlink\" title=\"4 数字\"></a>4 数字</h2><p>​        在编程中，经常使用数字来记录游戏得分、表示可视化数据、存储Web应用信息等。Python根据数字的用法以不同的方式处理它们。鉴于整数使用起来最简单，下面就先来看看Python是如何管理它们的。</p>\n<h3 id=\"4-1-整数\"><a href=\"#4-1-整数\" class=\"headerlink\" title=\"4.1 整数\"></a>4.1 整数</h3><p>​        <strong>在Python中，可对整数进行加（+）减（-）乘（*）除（/）四则运算</strong>。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">10</span> + <span class=\"number\">22</span>   <span class=\"comment\"># 加</span></span><br><span class=\"line\"><span class=\"number\">32</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">10</span> - <span class=\"number\">22</span>   <span class=\"comment\"># 减</span></span><br><span class=\"line\">-<span class=\"number\">12</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">10</span> * <span class=\"number\">22</span>  <span class=\"comment\"># 乘</span></span><br><span class=\"line\"><span class=\"number\">220</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">10</span> / <span class=\"number\">22</span>   <span class=\"comment\"># 除，无论是否可以整除，得到的结果都是是浮点数</span></span><br><span class=\"line\"><span class=\"number\">0.45454545454545453</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">23</span> // <span class=\"number\">10</span>    <span class=\"comment\"># 地板除，返回除数的整数部分</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">23</span> % <span class=\"number\">10</span>     <span class=\"comment\"># 取余，返回除数的余数部分</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">2</span> ** <span class=\"number\">10</span>     <span class=\"comment\"># 乘方</span></span><br><span class=\"line\"><span class=\"number\">1024</span></span><br></pre></td></tr></table></figure>\n\n<p>​        <strong>Python还支持运算次序</strong>，因此你可在同一个表达式中使用多种运算。你还可以使用括号来修改运算次序，让Python按你指定的次序执行运算。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">2</span> + <span class=\"number\">3</span>*<span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">14</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>( <span class=\"number\">2</span> + <span class=\"number\">3</span>) * <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">20</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-2-浮点数\"><a href=\"#4-2-浮点数\" class=\"headerlink\" title=\"4.2 浮点数\"></a>4.2 浮点数</h3><p>​        <strong>Python将带小数点的数字都称为浮点数</strong>。大多数编程语言都使用了这个术语，它指出了这样一个事实：小数点可出现在数字的任何位置。每种编程语言都须细心设计，以妥善地处理浮点数，确保不管小数点出现在什么位置，数字的行为都是正常的。从很大程度上说，使用浮点数时都无需考虑其行为。你只需输入要使用的数字，Python通常都会按你期望的方式处理它们：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">0.2</span> + <span class=\"number\">0.2</span></span><br><span class=\"line\"><span class=\"number\">0.4</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">2</span> * <span class=\"number\">0.2</span></span><br><span class=\"line\"><span class=\"number\">0.4</span></span><br></pre></td></tr></table></figure>\n\n<p>​        但需要注意的是，结果包含的小数位数可能是不确定时，结果可能会出现误差，如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">0.1</span> + <span class=\"number\">0.1</span></span><br><span class=\"line\"><span class=\"number\">0.2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">0.1</span> + <span class=\"number\">0.1</span> + <span class=\"number\">0.1</span></span><br><span class=\"line\"><span class=\"number\">0.30000000000000004</span></span><br></pre></td></tr></table></figure>\n\n<p>​        在计算机的世界中，一个普遍存在的问题是浮点数并不能准确地表示为十进制，因此就出现了这种精度问题，那么如何精准的计算呢？</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> decimal <span class=\"keyword\">import</span> Decimal</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(Decimal(<span class=\"string\">&quot;0.1&quot;</span>) + Decimal(<span class=\"string\">&quot;0.1&quot;</span>) + Decimal(<span class=\"string\">&quot;0.1&quot;</span>))</span><br><span class=\"line\"><span class=\"number\">0.3</span></span><br></pre></td></tr></table></figure>\n","comments":true,"permalink":"https://qingdalf.github.io/2021-05/pVarString/","categories":[{"name":"python","slug":"python","permalink":"https://qingdalf.github.io/categories/python/"}],"tags":[]},{"title":"列表简介和列表操作","date":"2021-05-02T05:49:44.000Z","path":"2021-05/pList/","content":"<h2 id=\"1-认识列表\"><a href=\"#1-认识列表\" class=\"headerlink\" title=\"1. 认识列表\"></a>1. 认识列表</h2><h3 id=\"1-1-列表是什么？\"><a href=\"#1-1-列表是什么？\" class=\"headerlink\" title=\"1.1 列表是什么？\"></a>1.1 列表是什么？</h3><p>​        列表是由一系列按特定顺序排列的不相关的元素组成且可以更改的集合。在Python中，用方括号（[]）来表示列表，并用逗号来分隔其中的元素。从描述中，我们可以知道：</p>\n<span id=\"more\"></span>\n<ul>\n<li>列表中的元素是有顺序的，因此可以通过位置(索引)来访问</li>\n<li>列表中的元素可以被更改</li>\n<li>列表是一个集合，可以包含不定个数的元素</li>\n</ul>\n<h3 id=\"1-2-如何定义列表？\"><a href=\"#1-2-如何定义列表？\" class=\"headerlink\" title=\"1.2 如何定义列表？\"></a>1.2 如何定义列表？</h3><p><strong>方法1：直接定义</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L = [<span class=\"string\">&quot;北京&quot;</span>, <span class=\"string\">&quot;天津&quot;</span>, <span class=\"string\">&quot;上海&quot;</span>, <span class=\"string\">&quot;广州&quot;</span>, <span class=\"string\">&quot;重庆&quot;</span>, <span class=\"string\">&quot;西安&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(L)</span><br><span class=\"line\">[<span class=\"string\">&#x27;北京&#x27;</span>, <span class=\"string\">&#x27;天津&#x27;</span>, <span class=\"string\">&#x27;上海&#x27;</span>, <span class=\"string\">&#x27;广州&#x27;</span>, <span class=\"string\">&#x27;重庆&#x27;</span>, <span class=\"string\">&#x27;西安&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看变量L的类型</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">type</span>(L)</span><br><span class=\"line\">&lt;<span class=\"class\"><span class=\"keyword\">class</span> &#x27;<span class=\"title\">list</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>方法2：通过list()函数定义</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>var = <span class=\"string\">&quot;I love Python!&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"built_in\">list</span>(var))</span><br><span class=\"line\">[<span class=\"string\">&#x27;I&#x27;</span>, <span class=\"string\">&#x27; &#x27;</span>, <span class=\"string\">&#x27;l&#x27;</span>, <span class=\"string\">&#x27;o&#x27;</span>, <span class=\"string\">&#x27;v&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span>, <span class=\"string\">&#x27; &#x27;</span>, <span class=\"string\">&#x27;P&#x27;</span>, <span class=\"string\">&#x27;y&#x27;</span>, <span class=\"string\">&#x27;t&#x27;</span>, <span class=\"string\">&#x27;h&#x27;</span>, <span class=\"string\">&#x27;o&#x27;</span>, <span class=\"string\">&#x27;n&#x27;</span>, <span class=\"string\">&#x27;!&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">type</span>(<span class=\"built_in\">list</span>(var))</span><br><span class=\"line\">&lt;<span class=\"class\"><span class=\"keyword\">class</span> &#x27;<span class=\"title\">list</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-访问列表的元素\"><a href=\"#2-访问列表的元素\" class=\"headerlink\" title=\"2 访问列表的元素\"></a>2 访问列表的元素</h2><h3 id=\"2-1-通过索引访问列表的元素\"><a href=\"#2-1-通过索引访问列表的元素\" class=\"headerlink\" title=\"2.1 通过索引访问列表的元素\"></a>2.1 通过索引访问列表的元素</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L = [<span class=\"string\">&quot;北京&quot;</span>, <span class=\"string\">&quot;天津&quot;</span>, <span class=\"string\">&quot;上海&quot;</span>, <span class=\"string\">&quot;广州&quot;</span>, <span class=\"string\">&quot;重庆&quot;</span>, <span class=\"string\">&quot;西安&quot;</span>]</span><br></pre></td></tr></table></figure>\n\n<p>​        上面定义的列表变量<code>L</code>的正向和反向索引如下，和字符串一样，访问列表也是通过索引。</p>\n<p><img src=\"image-20210425191901360.png\" alt=\"image-20210425191901360\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 正向取值</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(L[<span class=\"number\">0</span>])</span><br><span class=\"line\">北京</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 反向取值</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(L[-<span class=\"number\">6</span>])</span><br><span class=\"line\">北京</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 对列表进行切片</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(L[:<span class=\"number\">4</span>])</span><br><span class=\"line\">[<span class=\"string\">&#x27;北京&#x27;</span>, <span class=\"string\">&#x27;天津&#x27;</span>, <span class=\"string\">&#x27;上海&#x27;</span>, <span class=\"string\">&#x27;广州&#x27;</span>]</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 指定步长</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(L[::<span class=\"number\">2</span>])</span><br><span class=\"line\">[<span class=\"string\">&#x27;北京&#x27;</span>, <span class=\"string\">&#x27;上海&#x27;</span>, <span class=\"string\">&#x27;重庆&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将列表排反序，即将列表的元素倒过来</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(L[::-<span class=\"number\">1</span>])   </span><br><span class=\"line\">[<span class=\"string\">&#x27;西安&#x27;</span>, <span class=\"string\">&#x27;重庆&#x27;</span>, <span class=\"string\">&#x27;广州&#x27;</span>, <span class=\"string\">&#x27;上海&#x27;</span>, <span class=\"string\">&#x27;天津&#x27;</span>, <span class=\"string\">&#x27;北京&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-使用列表中的元素\"><a href=\"#2-2-使用列表中的元素\" class=\"headerlink\" title=\"2.2 使用列表中的元素\"></a>2.2 使用列表中的元素</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&quot;我来自&quot;</span> + L[<span class=\"number\">0</span>] + <span class=\"string\">&quot;,&quot;</span> + <span class=\"string\">&quot;我在&quot;</span> + L[-<span class=\"number\">4</span>] + <span class=\"string\">&quot;工作。&quot;</span> + <span class=\"string\">&quot;我想去&quot;</span> + L[<span class=\"number\">4</span>] + <span class=\"string\">&quot;或&quot;</span> + L[<span class=\"number\">5</span>] + <span class=\"string\">&quot;旅游。&quot;</span>)</span><br><span class=\"line\">我来自北京,我在上海工作。我想去重庆或西安旅游。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-修改、添加和删除元素\"><a href=\"#3-修改、添加和删除元素\" class=\"headerlink\" title=\"3 修改、添加和删除元素\"></a>3 修改、添加和删除元素</h2><p>​        列表中的元素是可以被修改、添加和删除。</p>\n<h3 id=\"3-1-修改列表的元素\"><a href=\"#3-1-修改列表的元素\" class=\"headerlink\" title=\"3.1 修改列表的元素\"></a>3.1 修改列表的元素</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L = [<span class=\"string\">&quot;北京&quot;</span>, <span class=\"string\">&quot;天津&quot;</span>, <span class=\"string\">&quot;上海&quot;</span>, <span class=\"string\">&quot;广州&quot;</span>, <span class=\"string\">&quot;重庆&quot;</span>, <span class=\"string\">&quot;西安&quot;</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(L)</span><br><span class=\"line\"><span class=\"number\">1843256916608</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将列表中的第3个元素(索引为2)&quot;上海&quot;修改成&quot;成都&quot;，此时列表的元素已经发生了变化，但是列表的内存地址并未变化</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L[<span class=\"number\">2</span>] = <span class=\"string\">&quot;成都&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(L)</span><br><span class=\"line\">[<span class=\"string\">&#x27;北京&#x27;</span>, <span class=\"string\">&#x27;天津&#x27;</span>, <span class=\"string\">&#x27;成都&#x27;</span>, <span class=\"string\">&#x27;广州&#x27;</span>, <span class=\"string\">&#x27;重庆&#x27;</span>, <span class=\"string\">&#x27;西安&#x27;</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(L)</span><br><span class=\"line\"><span class=\"number\">1843256916608</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-在列表中添加元素\"><a href=\"#3-2-在列表中添加元素\" class=\"headerlink\" title=\"3.2 在列表中添加元素\"></a>3.2 在列表中添加元素</h3><h4 id=\"3-2-1-在列表末尾追加元素\"><a href=\"#3-2-1-在列表末尾追加元素\" class=\"headerlink\" title=\"3.2.1 在列表末尾追加元素\"></a>3.2.1 在列表末尾追加元素</h4><p>​        格式：<code>L.append(&quot;添加的列表元素&quot;)</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L = [<span class=\"string\">&quot;北京&quot;</span>, <span class=\"string\">&quot;天津&quot;</span>, <span class=\"string\">&quot;上海&quot;</span>, <span class=\"string\">&quot;广州&quot;</span>, <span class=\"string\">&quot;重庆&quot;</span>, <span class=\"string\">&quot;西安&quot;</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L.append(<span class=\"string\">&quot;乌鲁木齐&quot;</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(L)</span><br><span class=\"line\">[<span class=\"string\">&#x27;北京&#x27;</span>, <span class=\"string\">&#x27;天津&#x27;</span>, <span class=\"string\">&#x27;上海&#x27;</span>, <span class=\"string\">&#x27;广州&#x27;</span>, <span class=\"string\">&#x27;重庆&#x27;</span>, <span class=\"string\">&#x27;西安&#x27;</span>, <span class=\"string\">&#x27;乌鲁木齐&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-2-2-在指定位置插入元素\"><a href=\"#3-2-2-在指定位置插入元素\" class=\"headerlink\" title=\"3.2.2 在指定位置插入元素\"></a>3.2.2 在指定位置插入元素</h4><p>​        格式：L.insert(“插入的元素”, 索引值)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L = [<span class=\"string\">&quot;北京&quot;</span>, <span class=\"string\">&quot;天津&quot;</span>, <span class=\"string\">&quot;上海&quot;</span>, <span class=\"string\">&quot;广州&quot;</span>, <span class=\"string\">&quot;重庆&quot;</span>, <span class=\"string\">&quot;西安&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从索引为3的地方插入一个元素&quot;乌鲁木齐&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L.insert(<span class=\"number\">3</span>, <span class=\"string\">&quot;乌鲁木齐&quot;</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(L)</span><br><span class=\"line\">[<span class=\"string\">&#x27;北京&#x27;</span>, <span class=\"string\">&#x27;天津&#x27;</span>, <span class=\"string\">&#x27;上海&#x27;</span>, <span class=\"string\">&#x27;乌鲁木齐&#x27;</span>, <span class=\"string\">&#x27;广州&#x27;</span>, <span class=\"string\">&#x27;重庆&#x27;</span>, <span class=\"string\">&#x27;西安&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从索引为0的位置插入</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L = [<span class=\"string\">&quot;北京&quot;</span>, <span class=\"string\">&quot;天津&quot;</span>, <span class=\"string\">&quot;上海&quot;</span>, <span class=\"string\">&quot;广州&quot;</span>, <span class=\"string\">&quot;重庆&quot;</span>, <span class=\"string\">&quot;西安&quot;</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L.insert(<span class=\"number\">0</span>, <span class=\"string\">&quot;杭州&quot;</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(L)</span><br><span class=\"line\">[<span class=\"string\">&#x27;杭州&#x27;</span>, <span class=\"string\">&#x27;北京&#x27;</span>, <span class=\"string\">&#x27;天津&#x27;</span>, <span class=\"string\">&#x27;上海&#x27;</span>, <span class=\"string\">&#x27;广州&#x27;</span>, <span class=\"string\">&#x27;重庆&#x27;</span>, <span class=\"string\">&#x27;西安&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-2-3-从列表中删除元素\"><a href=\"#3-2-3-从列表中删除元素\" class=\"headerlink\" title=\"3.2.3 从列表中删除元素\"></a>3.2.3 从列表中删除元素</h4><p>删除列表元素的两种方法：</p>\n<ul>\n<li>del L[index]：删除指定位置的元素</li>\n<li>L.pop()：默认删除最后一个元素，也可以删除指定位置的元素</li>\n<li>L.remove(“元素”)：移除列表中某个元素的第一个匹配项</li>\n<li>使用场景：如果要从列表中删除一个元素，且不再以任何方式使用它，就使用del语句；如果要在删除元素后还能继续使用它，就使用方法pop()。</li>\n</ul>\n<p><strong>(1).del L[index]</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L = [<span class=\"string\">&quot;北京&quot;</span>, <span class=\"string\">&quot;天津&quot;</span>, <span class=\"string\">&quot;上海&quot;</span>, <span class=\"string\">&quot;广州&quot;</span>, <span class=\"string\">&quot;重庆&quot;</span>, <span class=\"string\">&quot;西安&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除索引为0的元素</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">del</span> L[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(L)</span><br><span class=\"line\">[<span class=\"string\">&#x27;天津&#x27;</span>, <span class=\"string\">&#x27;上海&#x27;</span>, <span class=\"string\">&#x27;广州&#x27;</span>, <span class=\"string\">&#x27;重庆&#x27;</span>, <span class=\"string\">&#x27;西安&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p><strong>(2). L.pop()的用法</strong></p>\n<ul>\n<li>删除最后一个元素</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 通过pop()方法删除元素有返回值，这种方法对于要获取删除值的场景很有用</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L = [<span class=\"string\">&quot;北京&quot;</span>, <span class=\"string\">&quot;天津&quot;</span>, <span class=\"string\">&quot;上海&quot;</span>, <span class=\"string\">&quot;广州&quot;</span>, <span class=\"string\">&quot;重庆&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L.pop()     <span class=\"comment\"># 返回的是一个字符串类型</span></span><br><span class=\"line\"><span class=\"string\">&#x27;重庆&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(L)</span><br><span class=\"line\">[<span class=\"string\">&#x27;北京&#x27;</span>, <span class=\"string\">&#x27;天津&#x27;</span>, <span class=\"string\">&#x27;上海&#x27;</span>, <span class=\"string\">&#x27;广州&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除指定位置的元素，pop()方法可以删除指定位置的元素，只需要将索引告诉pop()即可</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L = [<span class=\"string\">&quot;北京&quot;</span>, <span class=\"string\">&quot;天津&quot;</span>, <span class=\"string\">&quot;上海&quot;</span>, <span class=\"string\">&quot;广州&quot;</span>, <span class=\"string\">&quot;重庆&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L.pop(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;上海&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(L)</span><br><span class=\"line\">[<span class=\"string\">&#x27;北京&#x27;</span>, <span class=\"string\">&#x27;天津&#x27;</span>, <span class=\"string\">&#x27;广州&#x27;</span>, <span class=\"string\">&#x27;重庆&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p><strong>(3). L.remove(“元素”)</strong></p>\n<p>​        方法remove()只删除第一个指定的值。如果要删除的值可能在列表中出现多次，就需要使用循环来判断是否删除了所有这样的值。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L = [<span class=\"string\">&quot;北京&quot;</span>, <span class=\"string\">&quot;天津&quot;</span>, <span class=\"string\">&quot;上海&quot;</span>, <span class=\"string\">&quot;广州&quot;</span>, <span class=\"string\">&quot;重庆&quot;</span>, <span class=\"string\">&quot;上海&quot;</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L.remove(<span class=\"string\">&quot;上海&quot;</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(L)</span><br><span class=\"line\">[<span class=\"string\">&#x27;北京&#x27;</span>, <span class=\"string\">&#x27;天津&#x27;</span>, <span class=\"string\">&#x27;广州&#x27;</span>, <span class=\"string\">&#x27;重庆&#x27;</span>, <span class=\"string\">&#x27;上海&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-3-组织列表\"><a href=\"#3-3-组织列表\" class=\"headerlink\" title=\"3.3 组织列表\"></a>3.3 组织列表</h3><p>​        在你创建的列表中，元素的排列顺序常常是无法预测的，因为你并非总能控制用户提供数据的顺序。这虽然在大多数情况下都是不可避免的，但你经常需要以特定的顺序呈现信息。有时候，你希望保留列表元素最初的排列顺序，而有时候又需要调整排列顺序。Python提供了很多组织列表的方式，可根据具体情况选用。</p>\n<h4 id=\"3-3-1-使用方法-sort-对列表进行永久性排序\"><a href=\"#3-3-1-使用方法-sort-对列表进行永久性排序\" class=\"headerlink\" title=\"3.3.1 使用方法 sort()对列表进行永久性排序\"></a>3.3.1 使用方法 sort()对列表进行永久性排序</h4><p><strong>(1). 正序</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>cars = [<span class=\"string\">&#x27;bmw&#x27;</span>, <span class=\"string\">&#x27;audi&#x27;</span>, <span class=\"string\">&#x27;toyota&#x27;</span>, <span class=\"string\">&#x27;subaru&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 对列表进行排序</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>cars.sort()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列表cars发生了变化，一般性的做饭是，先对原先列表进行备份，然后再进行排序</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(cars)               </span><br><span class=\"line\">[<span class=\"string\">&#x27;audi&#x27;</span>, <span class=\"string\">&#x27;bmw&#x27;</span>, <span class=\"string\">&#x27;subaru&#x27;</span>, <span class=\"string\">&#x27;toyota&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p><strong>(2). 反序</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>cars = [<span class=\"string\">&#x27;bmw&#x27;</span>, <span class=\"string\">&#x27;audi&#x27;</span>, <span class=\"string\">&#x27;toyota&#x27;</span>, <span class=\"string\">&#x27;subaru&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>cars.sort(reverse=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(cars)</span><br><span class=\"line\">[<span class=\"string\">&#x27;toyota&#x27;</span>, <span class=\"string\">&#x27;subaru&#x27;</span>, <span class=\"string\">&#x27;bmw&#x27;</span>, <span class=\"string\">&#x27;audi&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-3-2-使用函数-sorted-对列表进行临时排序\"><a href=\"#3-3-2-使用函数-sorted-对列表进行临时排序\" class=\"headerlink\" title=\"3.3.2 使用函数 sorted()对列表进行临时排序\"></a>3.3.2 使用函数 sorted()对列表进行临时排序</h4><p>​        要保留列表元素原来的排列顺序，同时以特定的顺序呈现它们，可使用函数sorted()。函数sorted()让你能够按特定顺序显示列表元素，同时不影响它们在列表中的原始排列顺序。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>cars = [<span class=\"string\">&#x27;bmw&#x27;</span>, <span class=\"string\">&#x27;audi&#x27;</span>, <span class=\"string\">&#x27;toyota&#x27;</span>, <span class=\"string\">&#x27;subaru&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">sorted</span>(cars)</span><br><span class=\"line\">[<span class=\"string\">&#x27;audi&#x27;</span>, <span class=\"string\">&#x27;bmw&#x27;</span>, <span class=\"string\">&#x27;subaru&#x27;</span>, <span class=\"string\">&#x27;toyota&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列表cars并未发生变化</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(cars)</span><br><span class=\"line\">[<span class=\"string\">&#x27;bmw&#x27;</span>, <span class=\"string\">&#x27;audi&#x27;</span>, <span class=\"string\">&#x27;toyota&#x27;</span>, <span class=\"string\">&#x27;subaru&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-3-3-反向打印列表\"><a href=\"#3-3-3-反向打印列表\" class=\"headerlink\" title=\"3.3.3 反向打印列表\"></a>3.3.3 反向打印列表</h4><p><strong>(1). 使用索引</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>cars = [<span class=\"string\">&#x27;bmw&#x27;</span>, <span class=\"string\">&#x27;audi&#x27;</span>, <span class=\"string\">&#x27;toyota&#x27;</span>, <span class=\"string\">&#x27;subaru&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(cars[::-<span class=\"number\">1</span>])</span><br><span class=\"line\">[<span class=\"string\">&#x27;subaru&#x27;</span>, <span class=\"string\">&#x27;toyota&#x27;</span>, <span class=\"string\">&#x27;audi&#x27;</span>, <span class=\"string\">&#x27;bmw&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p><strong>(2). 使用reverse()方法</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>cars = [<span class=\"string\">&#x27;bmw&#x27;</span>, <span class=\"string\">&#x27;audi&#x27;</span>, <span class=\"string\">&#x27;toyota&#x27;</span>, <span class=\"string\">&#x27;subaru&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>cars.reverse()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(cars)     <span class=\"comment\"># 列表cars发生了变化</span></span><br><span class=\"line\">[<span class=\"string\">&#x27;subaru&#x27;</span>, <span class=\"string\">&#x27;toyota&#x27;</span>, <span class=\"string\">&#x27;audi&#x27;</span>, <span class=\"string\">&#x27;bmw&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p><strong>(2). 使用reversed()函数</strong></p>\n<p>​        reversed()函数的作用是返回一个反转的迭代器</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>cars = [<span class=\"string\">&#x27;bmw&#x27;</span>, <span class=\"string\">&#x27;audi&#x27;</span>, <span class=\"string\">&#x27;toyota&#x27;</span>, <span class=\"string\">&#x27;subaru&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">reversed</span>(cars)</span><br><span class=\"line\">&lt;list_reverseiterator <span class=\"built_in\">object</span> at <span class=\"number\">0x000001D03871A580</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"built_in\">list</span>(<span class=\"built_in\">reversed</span>(cars)))</span><br><span class=\"line\">[<span class=\"string\">&#x27;subaru&#x27;</span>, <span class=\"string\">&#x27;toyota&#x27;</span>, <span class=\"string\">&#x27;audi&#x27;</span>, <span class=\"string\">&#x27;bmw&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-3-4-列表的长度–len\"><a href=\"#3-3-4-列表的长度–len\" class=\"headerlink\" title=\"3.3.4 列表的长度–len()\"></a>3.3.4 列表的长度–len()</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>cars = [<span class=\"string\">&#x27;bmw&#x27;</span>, <span class=\"string\">&#x27;audi&#x27;</span>, <span class=\"string\">&#x27;toyota&#x27;</span>, <span class=\"string\">&#x27;subaru&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(cars))</span><br><span class=\"line\"><span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-3-5-统计某个元素在列表中出现的次数–count\"><a href=\"#3-3-5-统计某个元素在列表中出现的次数–count\" class=\"headerlink\" title=\"3.3.5 统计某个元素在列表中出现的次数–count()\"></a>3.3.5 统计某个元素在列表中出现的次数–count()</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L = [<span class=\"string\">&quot;北京&quot;</span>, <span class=\"string\">&quot;天津&quot;</span>, <span class=\"string\">&quot;上海&quot;</span>, <span class=\"string\">&quot;广州&quot;</span>, <span class=\"string\">&quot;重庆&quot;</span>, <span class=\"string\">&quot;上海&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(L.count(<span class=\"string\">&quot;上海&quot;</span>))</span><br><span class=\"line\"><span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-3-6-获取列表中某元素第一次出现的索引值\"><a href=\"#3-3-6-获取列表中某元素第一次出现的索引值\" class=\"headerlink\" title=\"3.3.6 获取列表中某元素第一次出现的索引值\"></a>3.3.6 获取列表中某元素第一次出现的索引值</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L = [<span class=\"string\">&quot;北京&quot;</span>, <span class=\"string\">&quot;天津&quot;</span>, <span class=\"string\">&quot;上海&quot;</span>, <span class=\"string\">&quot;广州&quot;</span>, <span class=\"string\">&quot;重庆&quot;</span>, <span class=\"string\">&quot;上海&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(L.index(<span class=\"string\">&quot;上海&quot;</span>))</span><br><span class=\"line\"><span class=\"number\">2</span>      <span class=\"comment\"># 注意这里的2是指索引，是第三个元素</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-3-7-清空列表和删除列表\"><a href=\"#3-3-7-清空列表和删除列表\" class=\"headerlink\" title=\"3.3.7 清空列表和删除列表\"></a>3.3.7 清空列表和删除列表</h4><ul>\n<li>清空列表：是指列表中的元素个数为0，列表还存在</li>\n<li>删除列表：列表被删除，内存空间被回收，列表不存在</li>\n</ul>\n<p><strong>(1). 清空列表</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L = [<span class=\"string\">&quot;北京&quot;</span>, <span class=\"string\">&quot;天津&quot;</span>, <span class=\"string\">&quot;上海&quot;</span>, <span class=\"string\">&quot;广州&quot;</span>, <span class=\"string\">&quot;重庆&quot;</span>, <span class=\"string\">&quot;上海&quot;</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(L)         <span class=\"comment\"># 清空列表前，列表的内存值</span></span><br><span class=\"line\"><span class=\"number\">1993811645504</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L.clear()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(L)</span><br><span class=\"line\">[]             <span class=\"comment\"># 表示一个空列表，列表长度为0的列表</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">len</span>(L)     <span class=\"comment\"># 列表长度为0，即列表中不存在元素</span></span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(L)     <span class=\"comment\"># 列表的内存值未发生变化</span></span><br><span class=\"line\"><span class=\"number\">1993811645504</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>(2). 删除列表</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L = [<span class=\"string\">&quot;北京&quot;</span>, <span class=\"string\">&quot;天津&quot;</span>, <span class=\"string\">&quot;上海&quot;</span>, <span class=\"string\">&quot;广州&quot;</span>, <span class=\"string\">&quot;重庆&quot;</span>, <span class=\"string\">&quot;上海&quot;</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(L)</span><br><span class=\"line\"><span class=\"number\">1993808982720</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">del</span> L</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(L)    <span class=\"comment\"># 提示列表L未被定义，即不存在列表L</span></span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">&quot;&lt;pyshell#86&gt;&quot;</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(L)</span><br><span class=\"line\">NameError: name <span class=\"string\">&#x27;L&#x27;</span> <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> defined</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">len</span>(L)    <span class=\"comment\"># 提示列表L未被定义，即不存在列表L</span></span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">&quot;&lt;pyshell#87&gt;&quot;</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    <span class=\"built_in\">len</span>(L)</span><br><span class=\"line\">NameError: name <span class=\"string\">&#x27;L&#x27;</span> <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> defined</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(L)    <span class=\"comment\"># 提示列表L未被定义，即不存在列表L</span></span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">&quot;&lt;pyshell#88&gt;&quot;</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    <span class=\"built_in\">id</span>(L)</span><br><span class=\"line\">NameError: name <span class=\"string\">&#x27;L&#x27;</span> <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> defined</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-3-8-复制列表\"><a href=\"#3-3-8-复制列表\" class=\"headerlink\" title=\"3.3.8 复制列表\"></a>3.3.8 复制列表</h4><p><strong>(1). 通过L.copy()方法复制列表</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L = [<span class=\"string\">&quot;北京&quot;</span>, <span class=\"string\">&quot;天津&quot;</span>, <span class=\"string\">&quot;广州&quot;</span>, <span class=\"string\">&quot;重庆&quot;</span>, <span class=\"string\">&quot;上海&quot;</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(L)</span><br><span class=\"line\"><span class=\"number\">1993811792448</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>NEW = L.copy()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(NEW)</span><br><span class=\"line\">[<span class=\"string\">&#x27;北京&#x27;</span>, <span class=\"string\">&#x27;天津&#x27;</span>, <span class=\"string\">&#x27;广州&#x27;</span>, <span class=\"string\">&#x27;重庆&#x27;</span>, <span class=\"string\">&#x27;上海&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(NEW)    <span class=\"comment\"># 复制后的列表NEW和复制前的列表内存值不一样，说明不是同一个列表</span></span><br><span class=\"line\"><span class=\"number\">1993811791936</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 对列表NEW进行修改，看看是否会影响原列表</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">del</span> NEW[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(NEW)</span><br><span class=\"line\">[<span class=\"string\">&#x27;天津&#x27;</span>, <span class=\"string\">&#x27;上海&#x27;</span>, <span class=\"string\">&#x27;广州&#x27;</span>, <span class=\"string\">&#x27;重庆&#x27;</span>, <span class=\"string\">&#x27;上海&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(L)             <span class=\"comment\"># 删除复制后列表的元素，原列表未变化</span></span><br><span class=\"line\">[<span class=\"string\">&#x27;北京&#x27;</span>, <span class=\"string\">&#x27;天津&#x27;</span>, <span class=\"string\">&#x27;上海&#x27;</span>, <span class=\"string\">&#x27;广州&#x27;</span>, <span class=\"string\">&#x27;重庆&#x27;</span>, <span class=\"string\">&#x27;上海&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p>复制前后的内存地址变化</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列表L和列表L中元素的内存地址</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(L)</span><br><span class=\"line\"><span class=\"number\">2788859105152</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(L[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"number\">2788859139152</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(L[<span class=\"number\">1</span>])</span><br><span class=\"line\"><span class=\"number\">2788859139056</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(L[<span class=\"number\">2</span>])</span><br><span class=\"line\"><span class=\"number\">2788859139248</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(L[<span class=\"number\">3</span>])</span><br><span class=\"line\"><span class=\"number\">2788859139344</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(L[<span class=\"number\">4</span>])</span><br><span class=\"line\"><span class=\"number\">2788859139440</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(NEW)</span><br><span class=\"line\"><span class=\"number\">2788859097216</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查L和NEW两个列表中元素的内存地址是否一样，结果为True表示内存地址一样</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L[<span class=\"number\">0</span>] <span class=\"keyword\">is</span> NEW[<span class=\"number\">0</span>] <span class=\"keyword\">and</span> L[<span class=\"number\">1</span>] <span class=\"keyword\">is</span> NEW[<span class=\"number\">1</span>] <span class=\"keyword\">and</span> L[<span class=\"number\">2</span>] <span class=\"keyword\">is</span> NEW[<span class=\"number\">2</span>] <span class=\"keyword\">and</span> L[<span class=\"number\">3</span>] <span class=\"keyword\">is</span> NEW[<span class=\"number\">3</span>] <span class=\"keyword\">and</span> L[<span class=\"number\">4</span>] <span class=\"keyword\">is</span> NEW[<span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>\n\n<p>内存地址和元素的关联关系如下图所示：</p>\n<img src=\"image-20210426151953676.png\" alt=\"image-20210426151953676\" style=\"zoom:67%;\" />\n\n\n\n<p><strong>(2). 通过变量赋值的方式复制列表</strong></p>\n<p>​        本质是创建一个指向被拷贝列表的引用，他们使用的是同一块内存区域，因为无论更改其中任何一个变量,我们被拷贝的变量也会跟着改变。简单的来说,赋值拷贝,无论把列表赋值给多少个变量,这些变量指向的都是同一个列表</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L = [<span class=\"string\">&quot;北京&quot;</span>, <span class=\"string\">&quot;天津&quot;</span>, <span class=\"string\">&quot;上海&quot;</span>, <span class=\"string\">&quot;广州&quot;</span>, <span class=\"string\">&quot;重庆&quot;</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(L)</span><br><span class=\"line\"><span class=\"number\">1993812065152</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>NEW = L     <span class=\"comment\"># 两个列表的内存地址一样，说明是同一个列表，对其中的一个修改会影响另一个的值</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(NEW)</span><br><span class=\"line\"><span class=\"number\">1993812065152</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">del</span> NEW[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(L)</span><br><span class=\"line\">[<span class=\"string\">&#x27;天津&#x27;</span>, <span class=\"string\">&#x27;上海&#x27;</span>, <span class=\"string\">&#x27;广州&#x27;</span>, <span class=\"string\">&#x27;重庆&#x27;</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(NEW)</span><br><span class=\"line\">[<span class=\"string\">&#x27;天津&#x27;</span>, <span class=\"string\">&#x27;上海&#x27;</span>, <span class=\"string\">&#x27;广州&#x27;</span>, <span class=\"string\">&#x27;重庆&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p>内存地址和元素关联关系如下图：</p>\n<img src=\"image-20210426154410461.png\" alt=\"image-20210426154410461\" style=\"zoom:67%;\" />\n\n<p>深浅复制的问题：</p>\n<p>​        在python中，如果列表中不嵌套列表，则对<code>L.copy()</code>方法复制前后的两个列表进行操作将不会影响另一个列表，但是如果存在嵌套列表，则将发生变化</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L = [<span class=\"string\">&quot;boy&quot;</span>, [<span class=\"number\">111</span>, <span class=\"string\">&quot;222&quot;</span>], <span class=\"string\">&quot;girl&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>NEW = L.copy()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(NEW)</span><br><span class=\"line\">[<span class=\"string\">&#x27;boy&#x27;</span>, [<span class=\"number\">111</span>, <span class=\"string\">&#x27;222&#x27;</span>], <span class=\"string\">&#x27;girl&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看列表L和列表NEW中相对应的每个元素的内存地址是否一致，输出结果为True，说明L和NEW列表的内容id一样</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L[<span class=\"number\">0</span>] <span class=\"keyword\">is</span> NEW[<span class=\"number\">0</span>] <span class=\"keyword\">and</span> L[<span class=\"number\">1</span>] <span class=\"keyword\">is</span> NEW[<span class=\"number\">1</span>] <span class=\"keyword\">and</span> L[<span class=\"number\">2</span>] <span class=\"keyword\">is</span> NEW[<span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改列表L的第二个元素(即嵌套列表)中的值</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L[<span class=\"number\">1</span>][<span class=\"number\">0</span>] = <span class=\"string\">&quot;Hello&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 两个列表的值都发生了变化</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(L)</span><br><span class=\"line\">[<span class=\"string\">&#x27;boy&#x27;</span>, [<span class=\"string\">&#x27;Hello&#x27;</span>, <span class=\"string\">&#x27;222&#x27;</span>], <span class=\"string\">&#x27;girl&#x27;</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(NEW)</span><br><span class=\"line\">[<span class=\"string\">&#x27;boy&#x27;</span>, [<span class=\"string\">&#x27;Hello&#x27;</span>, <span class=\"string\">&#x27;222&#x27;</span>], <span class=\"string\">&#x27;girl&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p>​        执行代码<code>NEW = L.copy()</code>时，内存地址指向如下图，也就是说浅复制的时候，只复制了第一层内存地址，对于如嵌套这样的第二层地址并没有被复制，因此当我们修改嵌套列表的值时，复制前后的列表的值都发生了变化。</p>\n<img src=\"image-20210426161707148.png\" alt=\"image-20210426161707148\" style=\"zoom:67%;\" />\n\n<p>​        执行代码<code>L[1][0] = &quot;Hello&quot;</code>时，内存中的整数<code>111</code>的指向丢失，等待被内存回收，重新指向了定义的值<code>&quot;Hello&quot;</code>,内存地址指向如下图：</p>\n<img src=\"image-20210426162220761.png\" alt=\"image-20210426162220761\" style=\"zoom:67%;\" />\n\n<p>​        对于这种嵌套列表的情况，我们应该使用深拷贝。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> copy</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L = [<span class=\"string\">&quot;boy&quot;</span>, [<span class=\"number\">111</span>, <span class=\"string\">&quot;222&quot;</span>], <span class=\"string\">&quot;girl&quot;</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(L)</span><br><span class=\"line\">[<span class=\"string\">&#x27;boy&#x27;</span>, [<span class=\"number\">111</span>, <span class=\"string\">&#x27;222&#x27;</span>], <span class=\"string\">&#x27;girl&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>NEW = copy.deepcopy(L)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(NEW)</span><br><span class=\"line\">[<span class=\"string\">&#x27;boy&#x27;</span>, [<span class=\"number\">111</span>, <span class=\"string\">&#x27;222&#x27;</span>], <span class=\"string\">&#x27;girl&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改列表L的第二个元素(即嵌套列表)中的值</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L[<span class=\"number\">1</span>][<span class=\"number\">0</span>] = <span class=\"string\">&quot;Hello&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列表L的元素被修改了</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(L)</span><br><span class=\"line\">[<span class=\"string\">&#x27;boy&#x27;</span>, [<span class=\"string\">&#x27;Hello&#x27;</span>, <span class=\"string\">&#x27;222&#x27;</span>], <span class=\"string\">&#x27;girl&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 复制过后的列表NEW的元素没有被修改了</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(NEW)</span><br><span class=\"line\">[<span class=\"string\">&#x27;boy&#x27;</span>, [<span class=\"number\">111</span>, <span class=\"string\">&#x27;222&#x27;</span>], <span class=\"string\">&#x27;girl&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p>深拷贝如下图所示：</p>\n<img src=\"image-20210426164206901.png\" alt=\"image-20210426164206901\" style=\"zoom:67%;\" />\n\n\n\n<h4 id=\"3-3-9-在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）\"><a href=\"#3-3-9-在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）\" class=\"headerlink\" title=\"3.3.9 在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）\"></a>3.3.9 在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L1 = [<span class=\"string\">&quot;北京&quot;</span>, <span class=\"string\">&quot;天津&quot;</span>, <span class=\"string\">&quot;上海&quot;</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L2 = [<span class=\"string\">&quot;西安&quot;</span>, <span class=\"string\">&quot;广州&quot;</span>, <span class=\"string\">&quot;重庆&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将列表L2的元素扩展到列表L1中，此时列表L1中将按顺序加入L2的元素，列表L2不变化，L1将发生变化</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L1.extend(L2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(L1)     <span class=\"comment\"># 列表L1发生了变化</span></span><br><span class=\"line\">[<span class=\"string\">&#x27;北京&#x27;</span>, <span class=\"string\">&#x27;天津&#x27;</span>, <span class=\"string\">&#x27;上海&#x27;</span>, <span class=\"string\">&#x27;西安&#x27;</span>, <span class=\"string\">&#x27;广州&#x27;</span>, <span class=\"string\">&#x27;重庆&#x27;</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(L2)    <span class=\"comment\"># 列表L2未发生变化</span></span><br><span class=\"line\">[<span class=\"string\">&#x27;西安&#x27;</span>, <span class=\"string\">&#x27;广州&#x27;</span>, <span class=\"string\">&#x27;重庆&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"4-遍历整个列表\"><a href=\"#4-遍历整个列表\" class=\"headerlink\" title=\"4 遍历整个列表\"></a>4 遍历整个列表</h2><p>​        如何快速的取出列表中的元素？当然如果是取出列表中的一些元素，我们肯定会使用索引。但，如果我们想取出列表中的所有元素，使用索引的方式将浪费大量的时间，这里我们可以使用for循环进行遍历整个列表，然后将列表的元素一一取出。</p>\n<p>​        for循环格式：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> [var] <span class=\"keyword\">in</span> L:   <span class=\"comment\"># 表示当[var]在L中，</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span>          <span class=\"comment\">#  这里是要执行的代码，需要缩进四个空格，这里将从L中取出每个元素，分别执行代码，直到L中没有元素为止</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;for循环结束了&quot;</span>)  <span class=\"comment\"># 这里的print()代码，由于跟for循环是同一个缩进，因此将在所有的for循环执行完成后被执行</span></span><br></pre></td></tr></table></figure>\n\n<p>案例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L = [<span class=\"string\">&quot;北京&quot;</span>, <span class=\"string\">&quot;天津&quot;</span>, <span class=\"string\">&quot;上海&quot;</span>, <span class=\"string\">&quot;广州&quot;</span>, <span class=\"string\">&quot;重庆&quot;</span>, <span class=\"string\">&quot;西安&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> L:</span><br><span class=\"line\">      <span class=\"built_in\">print</span>(i)</span><br><span class=\"line\">        </span><br><span class=\"line\">北京</span><br><span class=\"line\">天津</span><br><span class=\"line\">上海</span><br><span class=\"line\">广州</span><br><span class=\"line\">重庆</span><br><span class=\"line\">西安</span><br></pre></td></tr></table></figure>\n\n<p>​        <code>for i in L</code>这行代码让Python获取列表<code>L</code>中的第一个元素（<code>&quot;北京&quot;</code>），并将其存储到变量<code>i</code>中，然后执行下一行代码<code>print(L)</code>，这样就打印出了<code>&quot;北京&quot;</code>。依次循环往复，分别将列表中的元素赋值给变量<code>i</code>，然后通过<code>print(i)</code>打印出来。</p>\n<h3 id=\"4-1-在for循环中执行更多的操作\"><a href=\"#4-1-在for循环中执行更多的操作\" class=\"headerlink\" title=\"4.1 在for循环中执行更多的操作\"></a>4.1 在for循环中执行更多的操作</h3><p>​        上面的案例中，我们只是取出来了列表L中的所有元素，但是取出元素并不是我们的最终目的，使用这些元素才是我们的目的。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L = [<span class=\"string\">&quot;北京&quot;</span>, <span class=\"string\">&quot;天津&quot;</span>, <span class=\"string\">&quot;上海&quot;</span>, <span class=\"string\">&quot;广州&quot;</span>, <span class=\"string\">&quot;重庆&quot;</span>, <span class=\"string\">&quot;西安&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> L:</span><br><span class=\"line\">      <span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;&#125;是一座美丽的城市&quot;</span>.<span class=\"built_in\">format</span>(i))</span><br><span class=\"line\"></span><br><span class=\"line\">      </span><br><span class=\"line\">北京是一座美丽的城市</span><br><span class=\"line\">天津是一座美丽的城市</span><br><span class=\"line\">上海是一座美丽的城市</span><br><span class=\"line\">广州是一座美丽的城市</span><br><span class=\"line\">重庆是一座美丽的城市</span><br><span class=\"line\">西安是一座美丽的城市</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-2-在-for-循环结束后执行一些操作\"><a href=\"#4-2-在-for-循环结束后执行一些操作\" class=\"headerlink\" title=\"4.2 在 for 循环结束后执行一些操作\"></a>4.2 在 for 循环结束后执行一些操作</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">L = [<span class=\"string\">&quot;北京&quot;</span>, <span class=\"string\">&quot;天津&quot;</span>, <span class=\"string\">&quot;上海&quot;</span>, <span class=\"string\">&quot;广州&quot;</span>, <span class=\"string\">&quot;重庆&quot;</span>, <span class=\"string\">&quot;西安&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> L:</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;&#125;是一座美丽的城市&quot;</span>.<span class=\"built_in\">format</span>(i))   <span class=\"comment\"># 每循环一次，该代码将被执行一次</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下面的print()函数跟for循环同一个缩进层级，因此将在for循环执行完成后被执行</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;我非常喜欢这些城市，并想去每个城市旅游！&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>执行结果如下：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">北京是一座美丽的城市</span><br><span class=\"line\">天津是一座美丽的城市</span><br><span class=\"line\">上海是一座美丽的城市</span><br><span class=\"line\">广州是一座美丽的城市</span><br><span class=\"line\">重庆是一座美丽的城市</span><br><span class=\"line\">西安是一座美丽的城市</span><br><span class=\"line\">我非常喜欢这些城市，并想去每个城市旅游！</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-创建数值列表\"><a href=\"#5-创建数值列表\" class=\"headerlink\" title=\"5 创建数值列表\"></a>5 创建数值列表</h2><p>​        列表非常适合用于存储数字集合，而Python提供了很多工具，可帮助你高效地处理数字列表。</p>\n<h3 id=\"5-1-使用函数-range\"><a href=\"#5-1-使用函数-range\" class=\"headerlink\" title=\"5.1 使用函数 range()\"></a>5.1 使用函数 range()</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"number\">5</span>):</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(i)</span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n\n<p>​        通过range()函数，我们可以求出1-100这100个数相加的和</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">sum</span>(<span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"number\">101</span>))</span><br><span class=\"line\"><span class=\"number\">5050</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-2-使用-range-创建数字列表\"><a href=\"#5-2-使用-range-创建数字列表\" class=\"headerlink\" title=\"5.2 使用 range()创建数字列表\"></a>5.2 使用 range()创建数字列表</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">list</span>(<span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"number\">5</span>))</span><br><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">list</span>(<span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"number\">10</span>,<span class=\"number\">2</span>))</span><br><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-3-对数字列表执行简单的统计计算\"><a href=\"#5-3-对数字列表执行简单的统计计算\" class=\"headerlink\" title=\"5.3 对数字列表执行简单的统计计算\"></a>5.3 对数字列表执行简单的统计计算</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d = <span class=\"built_in\">list</span>(<span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"number\">100</span>,<span class=\"number\">2</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(d)</span><br><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">10</span>, <span class=\"number\">12</span>, <span class=\"number\">14</span>, <span class=\"number\">16</span>, <span class=\"number\">18</span>, <span class=\"number\">20</span>, <span class=\"number\">22</span>, <span class=\"number\">24</span>, <span class=\"number\">26</span>, <span class=\"number\">28</span>, <span class=\"number\">30</span>, <span class=\"number\">32</span>, <span class=\"number\">34</span>, <span class=\"number\">36</span>, <span class=\"number\">38</span>, <span class=\"number\">40</span>, <span class=\"number\">42</span>, <span class=\"number\">44</span>, <span class=\"number\">46</span>, <span class=\"number\">48</span>, <span class=\"number\">50</span>, <span class=\"number\">52</span>, <span class=\"number\">54</span>, <span class=\"number\">56</span>, <span class=\"number\">58</span>, <span class=\"number\">60</span>, <span class=\"number\">62</span>, <span class=\"number\">64</span>, <span class=\"number\">66</span>, <span class=\"number\">68</span>, <span class=\"number\">70</span>, <span class=\"number\">72</span>, <span class=\"number\">74</span>, <span class=\"number\">76</span>, <span class=\"number\">78</span>, <span class=\"number\">80</span>, <span class=\"number\">82</span>, <span class=\"number\">84</span>, <span class=\"number\">86</span>, <span class=\"number\">88</span>, <span class=\"number\">90</span>, <span class=\"number\">92</span>, <span class=\"number\">94</span>, <span class=\"number\">96</span>, <span class=\"number\">98</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">max</span>(d)</span><br><span class=\"line\"><span class=\"number\">98</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">min</span>(d)</span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">sum</span>(d)</span><br><span class=\"line\"><span class=\"number\">2450</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"5-4-列表解析式\"><a href=\"#5-4-列表解析式\" class=\"headerlink\" title=\"5.4 列表解析式\"></a>5.4 列表解析式</h3><p>​        列表解析将for循环和创建新元素的代码合并成一行，并自动附加新元素。</p>\n<p>​        例如，现在我们要得到一<code>个0-10</code>中偶数与自身乘积的列表，按照平常的操作，我们可能会写一个<code>for循环</code>，如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">list</span>(<span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"number\">10</span>,<span class=\"number\">2</span>))</span><br><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>]</span><br><span class=\"line\">l = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">list</span>(<span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"number\">10</span>,<span class=\"number\">2</span>)):</span><br><span class=\"line\">    i = i * i</span><br><span class=\"line\">    l.append(i)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(l)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 结果如下：</span></span><br><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">4</span>, <span class=\"number\">16</span>, <span class=\"number\">36</span>, <span class=\"number\">64</span>]</span><br></pre></td></tr></table></figure>\n\n<p>​        这样的写法，确实能达到达到效果，但是在python中，我们可以使用列表解析式完成。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>var = [i * i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"number\">10</span>, <span class=\"number\">2</span>)]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(var)</span><br><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">4</span>, <span class=\"number\">16</span>, <span class=\"number\">36</span>, <span class=\"number\">64</span>]</span><br></pre></td></tr></table></figure>\n","comments":true,"permalink":"https://qingdalf.github.io/2021-05/pList/","categories":[{"name":"python","slug":"python","permalink":"https://qingdalf.github.io/categories/python/"}],"tags":[]},{"title":"if判断语句","date":"2021-05-02T04:59:25.000Z","path":"2021-05/pIf/","content":"<p>​        编程时经常需要检查一系列条件，并据此决定采取什么措施。在Python中，if语句让你能够检查程序的当前状态，并据此采取相应的措施。</p>\n<h2 id=\"1-格式\"><a href=\"#1-格式\" class=\"headerlink\" title=\"1. 格式\"></a>1. 格式</h2><h3 id=\"1-1-单分支结构\"><a href=\"#1-1-单分支结构\" class=\"headerlink\" title=\"1.1 单分支结构\"></a>1.1 单分支结构</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> 条件为真:</span><br><span class=\"line\">   执行的代码块</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n\n<p>注意：</p>\n<ul>\n<li>每个条件后面要使用冒号 **:**，表示接下来是满足条件后要执行的语句块。</li>\n<li>使用缩进来划分语句块，相同缩进数的语句在一起组成一个语句块。</li>\n</ul>\n<h3 id=\"1-2-双分支结构\"><a href=\"#1-2-双分支结构\" class=\"headerlink\" title=\"1.2 双分支结构\"></a>1.2 双分支结构</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> 条件为真:</span><br><span class=\"line\">   执行的代码块</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"keyword\">if</span>为假时，执行的代码块</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-3-多分支结构\"><a href=\"#1-3-多分支结构\" class=\"headerlink\" title=\"1.3 多分支结构\"></a>1.3 多分支结构</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> 条件为真时:</span><br><span class=\"line\">   执行的代码块</span><br><span class=\"line\"><span class=\"keyword\">elif</span> 上面条件为假，此条件为真时:</span><br><span class=\"line\">    执行的代码块</span><br><span class=\"line\"><span class=\"keyword\">elif</span> 上面条件都为假，此条件为真时:</span><br><span class=\"line\">    执行的代码块</span><br><span class=\"line\"><span class=\"keyword\">elif</span> 上面条件都为假，此条件为真时:</span><br><span class=\"line\">    执行的代码块</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"keyword\">if</span>和<span class=\"keyword\">elif</span>都为假时，执行的代码块</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-案例\"><a href=\"#2-案例\" class=\"headerlink\" title=\"2. 案例\"></a>2. 案例</h2><h3 id=\"2-1-案例1：判断正负数\"><a href=\"#2-1-案例1：判断正负数\" class=\"headerlink\" title=\"2.1 案例1：判断正负数\"></a>2.1 <strong>案例1：判断正负数</strong></h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var = <span class=\"number\">2</span> </span><br><span class=\"line\"><span class=\"keyword\">if</span> var &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;var是一个负数&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;var是一个正数&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-2-案例2：判断用户输入的年龄\"><a href=\"#2-2-案例2：判断用户输入的年龄\" class=\"headerlink\" title=\"2.2 案例2：判断用户输入的年龄\"></a>2.2 <strong>案例2：判断用户输入的年龄</strong></h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Age = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入您的年龄： &quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> Age.isdigit():</span><br><span class=\"line\">    age = <span class=\"built_in\">int</span>(Age)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> age &lt;= <span class=\"number\">20</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;您好，您是一个年轻人&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> age &lt;= <span class=\"number\">45</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;您好，您是一个中年人 &quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> age &gt; <span class=\"number\">45</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;您好，您是一个老年人&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;您好，您是一个长寿的人&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;您的输入不正确，请输入数字！&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>需要注意的几点：</p>\n<ul>\n<li> 同类型做比较才有意义：input()函数的输入结果是一个字符串类型，在本案例中需要将其转换成数字类型，然后做比较</li>\n<li> 不要相信用户的输入，年龄是个数字，但是总会有人不按套路出牌，比如输入字母、汉字、符号等</li>\n<li> 上面的案例中我们使用了嵌套<code>if-else</code></li>\n</ul>\n<h2 id=\"3-else这个脚踏多只船的家伙\"><a href=\"#3-else这个脚踏多只船的家伙\" class=\"headerlink\" title=\"3 else这个脚踏多只船的家伙\"></a>3 else这个脚踏多只船的家伙</h2><p>​        <code>else</code>不仅能跟<code>if</code>搭档，还能跟<code>for</code>和<code>while</code>搭档，只有当for或<code>while</code>循环被break中断后，才会跳过<code>else</code>语句</p>\n<h3 id=\"3-1-for…else\"><a href=\"#3-1-for…else\" class=\"headerlink\" title=\"3.1 for…else\"></a>3.1 for…else</h3><p><strong>案例：获取 100 以内的质数</strong></p>\n<p>​        质数：<em>质数</em>是指在大于1的自然数中，除了1和它本身以外不再有其他因数的自然数，这是百度的定义，说简单点就是只能除1和本身时得到的商是整数，如：2、3、5、7、11、13、17、19</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num = []</span><br><span class=\"line\">i=<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>, <span class=\"number\">100</span>):</span><br><span class=\"line\">   j=<span class=\"number\">2</span></span><br><span class=\"line\">   <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>, i):</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(i % j == <span class=\"number\">0</span>):</span><br><span class=\"line\">         <span class=\"keyword\">break</span></span><br><span class=\"line\">   <span class=\"keyword\">else</span>:</span><br><span class=\"line\">      num.append(i)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(num)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-while…else\"><a href=\"#3-2-while…else\" class=\"headerlink\" title=\"3.2 while…else\"></a>3.2 while…else</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i = <span class=\"number\">0</span></span><br><span class=\"line\">num = []</span><br><span class=\"line\"><span class=\"keyword\">while</span> i &lt; <span class=\"number\">10</span>:</span><br><span class=\"line\">    i += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> i == <span class=\"number\">5</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        num.append(i)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(num)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># 运行结果为：此时没有运行结果，因此没有执行到print()函数，也就不能将print(num)输出的屏幕上</span></span><br><span class=\"line\"></span><br><span class=\"line\">i = <span class=\"number\">0</span></span><br><span class=\"line\">num = []</span><br><span class=\"line\"><span class=\"keyword\">while</span> i &lt; <span class=\"number\">10</span>:</span><br><span class=\"line\">    i += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> i == <span class=\"number\">5</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        num.append(i)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(i)   <span class=\"comment\"># 为了方便查看执行结果，再此处添加一个print()函数，打印i的值</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(num)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># 执行结果为：</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n","comments":true,"permalink":"https://qingdalf.github.io/2021-05/pIf/","categories":[{"name":"python","slug":"python","permalink":"https://qingdalf.github.io/categories/python/"}],"tags":[]},{"title":"安装Jupyter Notebook","date":"2021-05-02T02:31:39.000Z","path":"2021-05/pJupyterNotebook/","content":"<p>​        Jupyter Notebook 是一个基于 Web 的交互式计算笔记本环境，允许用户创建和共享各种内容，包括实时代码、方程式、可视化和叙述文本的文档。它的用途包括：数据清理和转换、数值模拟、统计建模、数据可视化与机器学习等。</p>\n<span id=\"more\"></span>\n<h2 id=\"1-Jupyter-Notebook的主要特点\"><a href=\"#1-Jupyter-Notebook的主要特点\" class=\"headerlink\" title=\"1 Jupyter Notebook的主要特点\"></a>1 Jupyter Notebook的主要特点</h2><ul>\n<li>编程时具有<strong>语法高亮</strong>、<em>缩进</em>、<em>tab补全</em>的功能。</li>\n<li>可直接通过浏览器运行代码，同时在代码块下方展示运行结果。</li>\n<li>以富媒体格式展示计算结果。富媒体格式包括：HTML，LaTeX，PNG，SVG等。</li>\n<li>对代码编写说明文档或语句时，支持Markdown语法。</li>\n<li>支持使用LaTeX编写数学性说明。</li>\n</ul>\n<h2 id=\"2-安装jupyter\"><a href=\"#2-安装jupyter\" class=\"headerlink\" title=\"2 安装jupyter\"></a>2 安装jupyter</h2><h3 id=\"2-1-安装python3\"><a href=\"#2-1-安装python3\" class=\"headerlink\" title=\"2.1 安装python3\"></a>2.1 安装python3</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># yum -y install python3</span></span><br><span class=\"line\"><span class=\"comment\"># python3 -V</span></span><br><span class=\"line\">Python <span class=\"number\">3.6</span><span class=\"number\">.8</span></span><br></pre></td></tr></table></figure>\n\n<p>使用ipython生成密码字符串</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ipython3</span></span><br><span class=\"line\">Python <span class=\"number\">3.6</span><span class=\"number\">.8</span> (default, Nov <span class=\"number\">16</span> <span class=\"number\">2020</span>, <span class=\"number\">16</span>:<span class=\"number\">55</span>:<span class=\"number\">22</span>) </span><br><span class=\"line\"><span class=\"type\">Type</span> <span class=\"string\">&#x27;copyright&#x27;</span>, <span class=\"string\">&#x27;credits&#x27;</span> <span class=\"keyword\">or</span> <span class=\"string\">&#x27;license&#x27;</span> <span class=\"keyword\">for</span> more information</span><br><span class=\"line\">IPython <span class=\"number\">7.16</span><span class=\"number\">.1</span> -- An enhanced Interactive Python. <span class=\"type\">Type</span> <span class=\"string\">&#x27;?&#x27;</span> <span class=\"keyword\">for</span> <span class=\"built_in\">help</span>.</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">1</span>]: <span class=\"keyword\">from</span> notebook.auth <span class=\"keyword\">import</span> passwd</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">2</span>]: passwd()</span><br><span class=\"line\">Enter password:    <span class=\"comment\"># 输入登陆jupyter web界面的密码</span></span><br><span class=\"line\">Verify password: </span><br><span class=\"line\">Out[<span class=\"number\">2</span>]: <span class=\"string\">&#x27;argon2:$argon2id$v=19$m=10240,t=10,p=8$NgmObK0lb6vyt5RkhF5ole892GQ$EJM3XAEPwM+bc2EQtuXx5Q&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-安装并配置jupyter\"><a href=\"#2-2-安装并配置jupyter\" class=\"headerlink\" title=\"2.2 安装并配置jupyter\"></a>2.2 安装并配置jupyter</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> pip install jupyter</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-1-初始化jupyter\"><a href=\"#2-2-1-初始化jupyter\" class=\"headerlink\" title=\"2.2.1 初始化jupyter\"></a>2.2.1 初始化jupyter</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># python3 -m jupyter notebook --generate-config</span></span><br><span class=\"line\">Writing default config to: /root/.jupyter/jupyter_notebook_config.py</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-2-修改配置文件\"><a href=\"#2-2-2-修改配置文件\" class=\"headerlink\" title=\"2.2.2 修改配置文件\"></a>2.2.2 修改配置文件</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># vim .jupyter/jupyter_notebook_config.py</span></span><br><span class=\"line\">c.NotebookApp.browser = <span class=\"string\">&#x27;False&#x27;</span>      <span class=\"comment\"># 启动jupyter时，不打开浏览器</span></span><br><span class=\"line\">c.NotebookApp.ip = <span class=\"string\">&#x27;*&#x27;</span>     <span class=\"comment\"># 默认是本机访问localhost</span></span><br><span class=\"line\">c.NotebookApp.notebook_dir = <span class=\"string\">&#x27;/jupyter/&#x27;</span>   <span class=\"comment\"># jupyter根目录</span></span><br><span class=\"line\">c.NotebookApp.password = <span class=\"string\">&#x27;xx&#x27;</span>    <span class=\"comment\"># 通过ipython加密过后的密码</span></span><br><span class=\"line\">c.NotebookApp.port = <span class=\"number\">18888</span>       <span class=\"comment\"># 访问端口，默认是8888</span></span><br><span class=\"line\">c.NotebookNotary.data_dir = <span class=\"string\">&#x27;/jupyter/data/&#x27;</span>   <span class=\"comment\"># 数据目录</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-3-启动jupyter\"><a href=\"#2-2-3-启动jupyter\" class=\"headerlink\" title=\"2.2.3 启动jupyter\"></a>2.2.3 启动jupyter</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># mkdir /jupyter</span></span><br><span class=\"line\"><span class=\"comment\"># nohup python3 -m  jupyter notebook  --allow-root --ip 0.0.0.0 &gt; /jupyter/jupyter.log 2&gt;&amp;1 &amp;</span></span><br><span class=\"line\">[<span class=\"number\">1</span>] <span class=\"number\">22860</span></span><br><span class=\"line\"><span class=\"comment\"># ps -ef | grep jupyter</span></span><br><span class=\"line\">root     <span class=\"number\">22860</span> <span class=\"number\">21547</span>  <span class=\"number\">7</span> <span class=\"number\">22</span>:<span class=\"number\">42</span> pts/<span class=\"number\">0</span>    <span class=\"number\">00</span>:<span class=\"number\">00</span>:<span class=\"number\">00</span> /usr/<span class=\"built_in\">bin</span>/python3 /usr/local/<span class=\"built_in\">bin</span>/jupyter-notebook --allow-root --ip <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-4-在浏览器中，通过ip-18888进行访问：\"><a href=\"#2-2-4-在浏览器中，通过ip-18888进行访问：\" class=\"headerlink\" title=\"2.2.4 在浏览器中，通过ip:18888进行访问：\"></a>2.2.4 在浏览器中，通过<code>ip:18888</code>进行访问：</h4><p><img src=\"image-20210501224453408.png\" alt=\"image-20210501224453408\"></p>\n<h3 id=\"2-3-notebook的简单使用：\"><a href=\"#2-3-notebook的简单使用：\" class=\"headerlink\" title=\"2.3 notebook的简单使用：\"></a>2.3 notebook的简单使用：</h3><p>通过jupyter可以新建</p>\n<ul>\n<li>text文件</li>\n<li>目录</li>\n<li>jupyter notebook</li>\n<li>在浏览器中打开Terminal终端</li>\n</ul>\n<p><img src=\"image-20210501225448551.png\" alt=\"image-20210501225448551\"></p>\n<p>此时，服务器上的jupyter根目录中的文件如下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls /jupyter/ -l</span> </span><br><span class=\"line\">total 4</span><br><span class=\"line\">drwxrwxr-x 4 root     root  138 May  2 00:05 data</span><br><span class=\"line\">-rw-r--r-- 1 root     root 1625 May  2 00:05 jupyter.log</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls /jupyter/data/ -l</span> </span><br><span class=\"line\">total 16</span><br><span class=\"line\">-rw-r--r-- 1 root     root     4096 May  2 00:05 nbsignatures.db</span><br><span class=\"line\">-rw------- 1 root     root     1386 May  2 00:05 notebook_secret</span><br><span class=\"line\">drwxr-xr-x 3 root     root     73   May  1 23:51 pyhton基础知识</span><br><span class=\"line\">-rw-r--r-- 1 root     root     2186 May  1 22:58 test.ipynb</span><br><span class=\"line\">-rw-r--r-- 1 root     root     38   May  1 22:48 test.txt</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>新建jupyter notebook，并简单使用：</p>\n<p><img src=\"image-20210501230929937.png\" alt=\"image-20210501230929937\"></p>\n","comments":true,"permalink":"https://qingdalf.github.io/2021-05/pJupyterNotebook/","categories":[{"name":"python","slug":"python","permalink":"https://qingdalf.github.io/categories/python/"}],"tags":[]},{"title":"PythonTuple","date":"2021-05-01T06:18:59.000Z","path":"2021-05/pTuple/","content":"<h1 id=\"第四章-元组\"><a href=\"#第四章-元组\" class=\"headerlink\" title=\"第四章 元组\"></a>第四章 元组</h1><h2 id=\"1-认识元组\"><a href=\"#1-认识元组\" class=\"headerlink\" title=\"1 认识元组\"></a>1 认识元组</h2><h3 id=\"1-1-元组是什么\"><a href=\"#1-1-元组是什么\" class=\"headerlink\" title=\"1.1 元组是什么\"></a>1.1 元组是什么</h3><p>​        Python 的元组与列表类似，不同之处在于元组的元素不能修改(元组是可信任的)。元组使用小括号 **( )**，列表使用方括号 **[ ]**。元组创建很简单，只需要在括号中添加元素，并使用逗号隔开即可。</p>\n<span id=\"more\"></span>\n<h3 id=\"1-2-如何定义元组\"><a href=\"#1-2-如何定义元组\" class=\"headerlink\" title=\"1.2 如何定义元组\"></a>1.2 如何定义元组</h3><ul>\n<li>直接通过变量定义</li>\n<li>通过tuple()函数定义</li>\n</ul>\n<p><strong>(1) 直接定义</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.定义一个空元组</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>t = ()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(t)</span><br><span class=\"line\">()           <span class=\"comment\"># 输出了一个空元组</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">type</span>(t)</span><br><span class=\"line\">&lt;<span class=\"class\"><span class=\"keyword\">class</span> &#x27;<span class=\"title\">tuple</span>&#x27;&gt;</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\"># 2.定义一个含有整型、浮点型、字符串、列表类型元素的元组</span></span><br><span class=\"line\">&gt;&gt;&gt; T = (1, &quot;2&quot;, 1.2, [&quot;Hello&quot;])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(T)</span><br><span class=\"line\">(<span class=\"number\">1</span>, <span class=\"string\">&#x27;2&#x27;</span>, <span class=\"number\">1.2</span>, [<span class=\"string\">&#x27;Hello&#x27;</span>])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">type</span>(T)</span><br><span class=\"line\">&lt;<span class=\"class\"><span class=\"keyword\">class</span> &#x27;<span class=\"title\">tuple</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>​        值得注意的是，当元组只有一个元素时，需要在元素后面加一个逗号。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.我们定义一个不加逗号的情况</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>t = (<span class=\"number\">1</span>)           <span class=\"comment\"># 当元组只有一个元素时，此种定义方法是错误的</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(t)</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">type</span>(t)           <span class=\"comment\"># 通过type()函数进行检测，发现是一个整型，并不是一个元组</span></span><br><span class=\"line\">&lt;<span class=\"class\"><span class=\"keyword\">class</span> &#x27;<span class=\"title\">int</span>&#x27;&gt;</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\"># 2.按照元组的定义要求进行定义并查看类型</span></span><br><span class=\"line\"><span class=\"class\">&gt;&gt;&gt; <span class=\"title\">print</span>(<span class=\"params\">t</span>)</span></span><br><span class=\"line\"><span class=\"class\">(<span class=\"params\"><span class=\"number\">1</span>,</span>)</span></span><br><span class=\"line\"><span class=\"class\">&gt;&gt;&gt; <span class=\"title\">type</span>(<span class=\"params\">t</span>)</span></span><br><span class=\"line\"><span class=\"class\">&lt;<span class=\"title\">class</span> &#x27;<span class=\"title\">tuple</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>(2) 通过tuple()函数定义</strong> </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">tuple</span>(<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">tuple</span>(<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">(<span class=\"string\">&#x27;1&#x27;</span>,)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将列表转换成元组</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L = [<span class=\"number\">1</span>, <span class=\"string\">&quot;Hello&quot;</span>, [<span class=\"string\">&quot;张三&quot;</span>, <span class=\"number\">9</span>]]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>t = <span class=\"built_in\">tuple</span>(L)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(t)</span><br><span class=\"line\">(<span class=\"number\">1</span>, <span class=\"string\">&#x27;Hello&#x27;</span>, [<span class=\"string\">&#x27;张三&#x27;</span>, <span class=\"number\">9</span>])</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-元组的常用操作\"><a href=\"#2-元组的常用操作\" class=\"headerlink\" title=\"2 元组的常用操作\"></a>2 元组的常用操作</h2><p>​        元组跟列表类似，列表的常用操作元组也适用，除了修改元组的值(包括修改、增加、删除元组的元素)。</p>\n<h3 id=\"2-1-遍历元组中的所有值\"><a href=\"#2-1-遍历元组中的所有值\" class=\"headerlink\" title=\"2.1 遍历元组中的所有值\"></a>2.1 遍历元组中的所有值</h3><p>​        跟列表一样，元组中的元素也可以通过for循环进行遍历</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L = [<span class=\"number\">1</span>, <span class=\"string\">&quot;Hello&quot;</span>, [<span class=\"string\">&quot;张三&quot;</span>, <span class=\"number\">9</span>]]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>T = <span class=\"built_in\">tuple</span>(L)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> T:</span><br><span class=\"line\">      <span class=\"built_in\">print</span>(t)</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\">Hello</span><br><span class=\"line\">[<span class=\"string\">&#x27;张三&#x27;</span>, <span class=\"number\">9</span>] </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-元组的索引\"><a href=\"#2-2-元组的索引\" class=\"headerlink\" title=\"2.2 元组的索引\"></a>2.2 元组的索引</h3><p>​        元组的索引同字符串、类别一样，当然也可以通过索引对元组进行切片操作。</p>\n<h4 id=\"2-2-1-通过索引获取元组的元素\"><a href=\"#2-2-1-通过索引获取元组的元素\" class=\"headerlink\" title=\"2.2.1 通过索引获取元组的元素\"></a>2.2.1 通过索引获取元组的元素</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>T = (<span class=\"number\">1</span>, <span class=\"string\">&quot;Hello&quot;</span>, [<span class=\"string\">&quot;张三&quot;</span>, <span class=\"number\">9</span>], <span class=\"number\">1.2</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>T[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>T[<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"string\">&#x27;Hello&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>T[-<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"number\">1.2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取元组中嵌套列表的元素</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>T[<span class=\"number\">2</span>]</span><br><span class=\"line\">[<span class=\"string\">&#x27;张三&#x27;</span>, <span class=\"number\">9</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>T[<span class=\"number\">2</span>][<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"string\">&#x27;张三&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>T[<span class=\"number\">2</span>][<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"number\">9</span></span><br></pre></td></tr></table></figure>\n\n<p>​        索引图如下：</p>\n<img src=\"./image-20210427092322338.png\" alt=\"image-20210427092322338\" style=\"zoom:67%;\" />\n\n<h4 id=\"2-2-2-通过索引对元组切片\"><a href=\"#2-2-2-通过索引对元组切片\" class=\"headerlink\" title=\"2.2.2 通过索引对元组切片\"></a>2.2.2 通过索引对元组切片</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 获取前三个元素</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>T[:<span class=\"number\">3</span>]</span><br><span class=\"line\">(<span class=\"number\">1</span>, <span class=\"string\">&#x27;Hello&#x27;</span>, [<span class=\"string\">&#x27;张三&#x27;</span>, <span class=\"number\">9</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取第三个元素和之后的所有元素</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>T[<span class=\"number\">2</span>:]</span><br><span class=\"line\">([<span class=\"string\">&#x27;张三&#x27;</span>, <span class=\"number\">9</span>], <span class=\"number\">1.2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将元组的元素排反序</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>T[::-<span class=\"number\">1</span>]</span><br><span class=\"line\">(<span class=\"number\">1.2</span>, [<span class=\"string\">&#x27;张三&#x27;</span>, <span class=\"number\">9</span>], <span class=\"string\">&#x27;Hello&#x27;</span>, <span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3-元组的拼接\"><a href=\"#2-3-元组的拼接\" class=\"headerlink\" title=\"2.3 元组的拼接\"></a>2.3 元组的拼接</h3><p>​        元组虽然不能进行元素的修改，但是我们可以将两个元组进行拼接形成一个大元组</p>\n<p><strong>(1) 通过加号将多个元组进行拼接</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 定义元组t1并检查内存地址</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>t1 = (<span class=\"number\">1</span>, <span class=\"string\">&quot;Hello&quot;</span>,)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(t1)</span><br><span class=\"line\"><span class=\"number\">2383109449664</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义元组t2并检查内存地址</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>t2 = ([<span class=\"string\">&quot;张三&quot;</span>, <span class=\"number\">9</span>], <span class=\"number\">1.2</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(t2)</span><br><span class=\"line\"><span class=\"number\">2383109981440</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 对t1和t2进行拼接</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>T = t1 + t2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 拼接过后的t1还是t1，t2还是t2，并没有发生变化</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(t1)</span><br><span class=\"line\"><span class=\"number\">2383109449664</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(t2)</span><br><span class=\"line\"><span class=\"number\">2383109981440</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(T)</span><br><span class=\"line\"><span class=\"number\">2383109666352</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>(2) 元组与整型的乘积</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 定义元组t1，并查看内存地址</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>t1 = (<span class=\"number\">1</span>, <span class=\"string\">&quot;Hello&quot;</span>,)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通过乘法扩展元组的元素</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>t1 * <span class=\"number\">2</span></span><br><span class=\"line\">(<span class=\"number\">1</span>, <span class=\"string\">&#x27;Hello&#x27;</span>, <span class=\"number\">1</span>, <span class=\"string\">&#x27;Hello&#x27;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-4-元组的删除\"><a href=\"#2-4-元组的删除\" class=\"headerlink\" title=\"2.4 元组的删除\"></a>2.4 元组的删除</h3><p>​        元组中的元素虽然不能被修改，但是并不妨碍我们删除元组。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(T)</span><br><span class=\"line\">(<span class=\"number\">1</span>, <span class=\"string\">&#x27;Hello&#x27;</span>, [<span class=\"string\">&#x27;张三&#x27;</span>, <span class=\"number\">9</span>], <span class=\"number\">1.2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除元组T后再次打印T，显示T未被定义</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">del</span> T</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(T)</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">&quot;&lt;pyshell#67&gt;&quot;</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(T)</span><br><span class=\"line\">NameError: name <span class=\"string\">&#x27;T&#x27;</span> <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> defined</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-5-元组的其他一些操作\"><a href=\"#2-5-元组的其他一些操作\" class=\"headerlink\" title=\"2.5 元组的其他一些操作\"></a>2.5 元组的其他一些操作</h3><p>​        元组适用序列的一般性操作，如<code>in</code>、<code>not in</code>、最大值、最小值、长度、元素和等</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>T = (<span class=\"number\">1</span>, <span class=\"string\">&#x27;Hello&#x27;</span>, [<span class=\"string\">&#x27;张三&#x27;</span>, <span class=\"number\">9</span>], <span class=\"number\">1.2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看指定元素是否包含于元组中</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">1</span> <span class=\"keyword\">in</span> T</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">1.2</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> T</span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">len</span>(T)</span><br><span class=\"line\"><span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n\n<p>​        获取元素全为数字的元组的最值，只适用于元组的元素全为数值的情况。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>t =  <span class=\"built_in\">tuple</span>(<span class=\"built_in\">range</span>(<span class=\"number\">101</span>))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">max</span>(t)</span><br><span class=\"line\"><span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">min</span>(t)</span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">sum</span>(t)</span><br><span class=\"line\"><span class=\"number\">5050</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">len</span>(t)</span><br><span class=\"line\"><span class=\"number\">101</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-关于-不-可变\"><a href=\"#3-关于-不-可变\" class=\"headerlink\" title=\"3 关于(不)可变\"></a>3 关于(不)可变</h2><p>​        不可变是指内存地址的变化，比如列表，可以修改元素值，修改元素值之后列表的内存地址并没有变化。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L = [<span class=\"number\">1</span>, <span class=\"string\">&#x27;Hello&#x27;</span>, [<span class=\"string\">&#x27;张三&#x27;</span>, <span class=\"number\">9</span>], <span class=\"number\">1.2</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(L)</span><br><span class=\"line\"><span class=\"number\">2383109707456</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(L[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"number\">140736779327136</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改列表第一个元素的值</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L[<span class=\"number\">0</span>] = <span class=\"string\">&quot;China&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(L)</span><br><span class=\"line\"><span class=\"number\">2383109707456</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(L[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"number\">2383109618544</span></span><br></pre></td></tr></table></figure>\n\n<p>​        通过上面的例子，我们可以发现，修改列表元素前后，列表L的内存地址(2383109707456)并没有变化，变化的是修改的元素的内存地址(即列表值的内存地址)，这就是说我们修改了列表的值，列表还是原先的列表(L的内存地址没有变化)，但是列表的元素已经发生了变化。</p>\n<p><img src=\"./image-20210427101204300.png\" alt=\"image-20210427101204300\"></p>\n<p>​        在未对列表元素进行修改时的内存地址和指向</p>\n<img src=\"./image-20210427102341664.png\" alt=\"image-20210427102341664\" style=\"zoom:67%;\" />\n\n<p>执行修改操作<code>L[0] = &quot;China&quot;</code>后，列表内存地址和指向的变化，列表L的内存地址并没有变化(仍然是<code>2383109707456</code>)，但是L内存地址(<code>2383109707456</code>)中的第一个内存地址却发生了变化，即L[0]的内存地址由<code>140736779327136</code>变成了<code>2383109618544</code>，这表示L[0]的指向变化了。</p>\n<p>​        举一个简单的例子来说，公司”销售部一组”(组名，相当于L的内存地址)有5个员工，其中员工编号为”1234”(相当于id(L[0])名字叫”张三”(相当于L[0]的值)的员工离职了，新招聘了一个叫”Tony”的员工，员工编号为”4567”，会影响公司”销售一组”的组名吗？这里的”销售一组”等同于L的内存地址，员工”张三”好比内存地址为”1234”指向的元素值，员工”Tony”好比内存地址为”4567”指向的元素值，”张三”离职和Tony入职，内存地址从”1234”修改成了”4567”，指向也随即发生了变化，但是并不会影响”销售一组”的组名。</p>\n<img src=\"./image-20210427102855904.png\" alt=\"image-20210427102855904\" style=\"zoom:67%;\" />\n\n<p>​        元组的元素不能被修改，修改后(只能通过重新定义)就变成了另一个元组了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>T = (<span class=\"number\">1</span>, <span class=\"string\">&#x27;Hello&#x27;</span>, [<span class=\"string\">&#x27;张三&#x27;</span>, <span class=\"number\">9</span>], <span class=\"number\">1.2</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(T)</span><br><span class=\"line\"><span class=\"number\">2383109991136</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 当我们强行修改元组的元素时，直接报错</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>T[<span class=\"number\">0</span>] = <span class=\"number\">8888</span>   </span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">&quot;&lt;pyshell#143&gt;&quot;</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    T[<span class=\"number\">0</span>] = <span class=\"number\">8888</span></span><br><span class=\"line\">TypeError: <span class=\"string\">&#x27;tuple&#x27;</span> <span class=\"built_in\">object</span> does <span class=\"keyword\">not</span> support item assignment</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># 通过重新定义修改元组元素</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>T = (<span class=\"number\">8888</span>, <span class=\"string\">&#x27;Hello&#x27;</span>, [<span class=\"string\">&#x27;张三&#x27;</span>, <span class=\"number\">9</span>], <span class=\"number\">1.2</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(T)</span><br><span class=\"line\"><span class=\"number\">2383109990976</span></span><br></pre></td></tr></table></figure>\n\n<p>​        元组元素不可变是元组内存地址指向的引用地址不能变化，引用地址不能变化，那么引用地址指向的值也不能变化，要改变应用地址只能重新定义元组。</p>\n<img src=\"./image-20210427111534244.png\" alt=\"image-20210427111534244\" style=\"zoom:67%;\" />\n","comments":true,"permalink":"https://qingdalf.github.io/2021-05/pTuple/","categories":[{"name":"python","slug":"python","permalink":"https://qingdalf.github.io/categories/python/"}],"tags":[]},{"title":"安装python","date":"2021-05-01T06:16:03.000Z","path":"2021-05/pInstall/","content":"<p>​        python的安装可参考python官方给出的文档，官方文档从unix、windows和mac系统都给出了安装python的方法</p>\n<p>官方python安装文档地址：<a href=\"https://docs.python.org/zh-cn/3.9/using/index.html\">https://docs.python.org/zh-cn/3.9/using/index.html</a></p>\n<img src=\"image-20210421100658310.png\" alt=\"image-20210421100658310\" style=\"zoom:50%;\" />\n\n<p>​        当然，除了参考官方文档外，也可以参考本文安装教程，本篇python安装教程是之前在博客园写的笔记，此处直接使用博客园的笔记。</p>\n<span id=\"more\"></span>\n<p>博客园笔记地址：</p>\n<ul>\n<li>windows系统安装python：<a href=\"https://www.cnblogs.com/scaven-01/p/11397965.html\">https://www.cnblogs.com/scaven-01/p/11397965.html</a> </li>\n<li>Linux系统安装python：<a href=\"https://www.cnblogs.com/scaven-01/p/11395816.html\">https://www.cnblogs.com/scaven-01/p/11395816.html</a></li>\n</ul>\n<h2 id=\"1-在win10中安装python3-6-6\"><a href=\"#1-在win10中安装python3-6-6\" class=\"headerlink\" title=\"1.在win10中安装python3.6.6\"></a>1.在win10中安装python3.6.6</h2><h3 id=\"1-1-登录到官网下载指定python版本\"><a href=\"#1-1-登录到官网下载指定python版本\" class=\"headerlink\" title=\"1.1 登录到官网下载指定python版本\"></a>1.1 登录到官网下载指定python版本</h3><p>(1).登录到python官网：<a href=\"https://www.python.org/%EF%BC%8C%E7%82%B9%E5%87%BBDownloads\">https://www.python.org/，点击Downloads</a></p>\n<p> <img src=\"1493126-20190823085201841-539482177.png\" alt=\"img\"></p>\n<p>(2).选择需要下载的版本，点击版本后的Download</p>\n<p> <img src=\"1493126-20190823085214581-1096043229.png\" alt=\"img\"></p>\n<p>(3).选择操作系统为Windows的exe文件进行下载</p>\n<p> <img src=\"1493126-20190823085235124-1088341642.png\" alt=\"img\"></p>\n<p>(4).下载到桌面后，查看文件属性，如下图：</p>\n<p> <img src=\"1493126-20190823085244876-845671619.png\" alt=\"img\"></p>\n<h3 id=\"1-2-在win10中安装python3-6-6\"><a href=\"#1-2-在win10中安装python3-6-6\" class=\"headerlink\" title=\"1.2.在win10中安装python3.6.6\"></a>1.2.在win10中安装python3.6.6</h3><p>(1).双击python-3.6.6-amd64.exe文件，进入安装界面，选择Customize installation进行下一步安装，</p>\n<p> <img src=\"1493126-20190823085255779-1637204751.png\" alt=\"img\"></p>\n<p>(2).选择需要安装的功能，根据业务需求进行选择安装，完成后点击Next</p>\n<p> <img src=\"1493126-20190823085304554-802882196.png\" alt=\"img\"></p>\n<p>(3).选择需要安装的高级功能选项，根据业务需求进行选择安装，并设定安装路径，完成后点击Install进行安装</p>\n<p> <img src=\"1493126-20190823085314581-1496139347.png\" alt=\"img\"></p>\n<p>(4).配置完成进行安装</p>\n<p> <img src=\"1493126-20190823085324093-1341623617.png\" alt=\"img\"></p>\n<p>(5).安装成功：</p>\n<p> <img src=\"1493126-20190823085334605-579079025.png\" alt=\"img\"></p>\n<p>(6).验证安装，在windows系统的cmd命令提示符中输入python -V查看python版本信息，能查看到版本信息，则证明安装没有问题（如下图），若查询不到版本信息，请重新安装：</p>\n<p> <img src=\"1493126-20190823085343346-747313297.png\" alt=\"img\"></p>\n<p>备注：服务能正常跑起来才能证明服务没有问题，并不是安装完成没有任何报错就成功了，严谨的态度是安装完成后应该验证安装的结果。</p>\n<h3 id=\"1-3-windows系统中运行python的几种方法\"><a href=\"#1-3-windows系统中运行python的几种方法\" class=\"headerlink\" title=\"1.3.windows系统中运行python的几种方法\"></a>1.3.windows系统中运行python的几种方法</h3><p>(1).点击电脑桌面上的windows图标，找到刚刚安装的Python3.6文件夹，点击IDLE或者Python3.6</p>\n<p> <img src=\"1493126-20190823085355999-1461123636.png\" alt=\"img\"></p>\n<p>(2).打开windows系统的cmd命令提示符，输入python进入，退出python的方法有两种–ctrl+z或者输入exit()</p>\n<p> <img src=\"1493126-20190823085407627-741364019.png\" alt=\"img\"></p>\n<p>(3).在window10的搜索框里输入IDLE，点击回车进入IDLE，如下图：</p>\n<p><img src=\"1493126-20190823085417093-31418666.png\" alt=\"img\"></p>\n<p>点击回车后，界面如下</p>\n<p> <img src=\"1493126-20190823085427222-1951102661.png\" alt=\"img\"></p>\n<h2 id=\"2-在linux系统中安装python\"><a href=\"#2-在linux系统中安装python\" class=\"headerlink\" title=\"2.在linux系统中安装python\"></a>2.在linux系统中安装python</h2><p>​        下面在Linux系统(此处以CentOS7为例)安装python的方法，使用其中一个就行。</p>\n<h3 id=\"2-1-方法1–通过yum的方式安装\"><a href=\"#2-1-方法1–通过yum的方式安装\" class=\"headerlink\" title=\"2.1 方法1–通过yum的方式安装\"></a>2.1 方法1–通过yum的方式安装</h3><p>​        linux系统中默认安装了python2.7，python2已经不再维护，因此我们需要学习python3，在Linux系统中python2和python3可以共存，因此我们直接通过yum的方式安装python3</p>\n<blockquote>\n<p>Unix 系统中，为了不与同时安装的 Python 2.x 冲突，Python 3.x 解释器默认安装的执行文件名不是 <code>python</code></p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum -y install python3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 安装完成后检查python版本，能检查出python版本说明安装成功</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> python -V     <span class=\"comment\"># 默认的python版本是2.7.5</span></span></span><br><span class=\"line\">Python 2.7.5</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> python3 -V</span></span><br><span class=\"line\">Python 3.6.8</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-方法2–源码安装python\"><a href=\"#2-2-方法2–源码安装python\" class=\"headerlink\" title=\"2.2 方法2–源码安装python\"></a>2.2 方法2–源码安装python</h3><h4 id=\"2-2-1-登录到官网下载指定python版本\"><a href=\"#2-2-1-登录到官网下载指定python版本\" class=\"headerlink\" title=\"2.2.1.登录到官网下载指定python版本\"></a>2.2.1.登录到官网下载指定python版本</h4><p>(1).登录到Python官网：<a href=\"https://www.python.org/\">https://www.python.org/</a></p>\n<p> <img src=\"1493126-20190822174013786-573554072.png\" alt=\"img\"></p>\n<p>(2).选择指定版本的软件包进行下载：</p>\n<p> <img src=\"1493126-20190822174029342-564773510.png\" alt=\"img\"></p>\n<h4 id=\"2-2-2-在CentOS7中源码安装python3-6-6并验证安装结果\"><a href=\"#2-2-2-在CentOS7中源码安装python3-6-6并验证安装结果\" class=\"headerlink\" title=\"2.2.2.在CentOS7中源码安装python3.6.6并验证安装结果\"></a>2.2.2.在CentOS7中源码安装python3.6.6并验证安装结果</h4><p>(1).环境准备–安装依赖包</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">配置yum源，以便安装依赖软件包</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum clean all &amp;&amp; yum repolist</span>   </span><br></pre></td></tr></table></figure>\n\n<p> <img src=\"1493126-20190822174057592-421901418.png\" alt=\"img\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装依赖，其中readline-devel包是防止在新安装的环境中不能使用方向键的问题</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel libffi-devel gcc gcc-c++</span> </span><br></pre></td></tr></table></figure>\n\n<p> <img src=\"1493126-20190822174117652-1163712718.png\" alt=\"img\"></p>\n<p>(2).如果不愿意在Windows系统中下载python并上传到CentOS7系统中，可在CentOS7中使用wget命令直接下载python源码包，并进行源码编译安装python</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#下载指定版本的python源码包</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> wget https://www.python.org/ftp/python/3.6.6/Python-3.6.6.tar.xz</span>  </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> tar xvf Python-3.6.6.tar.xz</span>  </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">cd</span> Python-3.6.6/</span> </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ./configure --prefix=/usr/<span class=\"built_in\">local</span>/python3 <span class=\"comment\"># 安装到指定目录中/usr/local/python3</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> make &amp;&amp; make install</span> </span><br></pre></td></tr></table></figure>\n\n<p> <img src=\"1493126-20190822174139426-547736435.png\" alt=\"img\"></p>\n<p> <img src=\"1493126-20190822174152668-1085946048.png\" alt=\"img\"></p>\n<p>(3).将python3和pip添加到环境变量中</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ln -s /usr/<span class=\"built_in\">local</span>/python3/bin/python3 /usr/<span class=\"built_in\">local</span>/bin/python3</span> </span><br></pre></td></tr></table></figure>\n\n<p> <img src=\"1493126-20190822174206672-79634810.png\" alt=\"img\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 将pip也添加到环境变量</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ln -s /usr/<span class=\"built_in\">local</span>/python3/bin/pip3 /usr/<span class=\"built_in\">local</span>/bin/pip3</span></span><br></pre></td></tr></table></figure>\n\n<p> <img src=\"1493126-20190822174221566-882959078.png\" alt=\"img\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看pip的版本号</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> pip3 -V</span></span><br></pre></td></tr></table></figure>\n\n<p> <img src=\"1493126-20190822174232019-133160215.png\" alt=\"img\"></p>\n<h4 id=\"2-2-3-常见安装问题\"><a href=\"#2-2-3-常见安装问题\" class=\"headerlink\" title=\"2.2.3.常见安装问题\"></a>2.2.3.常见安装问题</h4><p>​        当我们为安装成功Python3而开心兴奋之时，我们发现我们的方向键无法使用了，如下图所示，解决方案是安装readline-devel软件包.</p>\n<p><img src=\"1493126-20190822174243300-872303349.png\" alt=\"img\"> </p>\n<h2 id=\"3-在mac中安装python\"><a href=\"#3-在mac中安装python\" class=\"headerlink\" title=\"3. 在mac中安装python\"></a>3. 在mac中安装python</h2><p>​        在mac笔记本中安装python请参考官网教程，官网地址：<a href=\"https://docs.python.org/zh-cn/3/using/mac.html\">https://docs.python.org/zh-cn/3/using/mac.html</a></p>\n<h2 id=\"4-选择一个好用的编辑器\"><a href=\"#4-选择一个好用的编辑器\" class=\"headerlink\" title=\"4.选择一个好用的编辑器\"></a>4.选择一个好用的编辑器</h2><p>​        工欲善其事，必先利其器。选择一个好用的python编辑器将达到事半功倍的效果，我选择的python编辑器是vscode，免费和扩展插件多是我选择的主要原因，安装教程可自行百度，此处不在赘述。</p>\n<p>​        此处附上vscode官网下载和安装教程，可供参考。</p>\n<p>vscode下载地址：<a href=\"https://code.visualstudio.com/\">https://code.visualstudio.com/</a></p>\n<p>vscode官方安装教程：<a href=\"https://code.visualstudio.com/docs/setup/setup-overview\">https://code.visualstudio.com/docs/setup/setup-overview</a></p>\n","comments":true,"permalink":"https://qingdalf.github.io/2021-05/pInstall/","categories":[{"name":"python","slug":"python","permalink":"https://qingdalf.github.io/categories/python/"}],"tags":[]},{"title":"变量、注释、缩进与python之禅","date":"2021-05-01T03:11:11.000Z","path":"2021-05/pPre/","content":"<p>Q：运行hello_world.py 时发生的情况</p>\n<p>​        现在我们有一个hello_world.py的python文件，文件内容如下，当我们执行这个文件时，发生了什么呢？</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;hello world&quot;</span>)</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p>​        我们在cmd中执行hello_world.py文件</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>phython3 hello_world.py</span><br><span class=\"line\">hello world    <span class=\"comment\"># 输出结果</span></span><br></pre></td></tr></table></figure>\n\n<p>​        运行文件hello_world.py时，末尾的**.py指出这是一个Python程序，因此编辑器将使用Python解释器来运行它<strong>。</strong>Python解释器读取整个程序，确定其中每个单词的含义**。例如，看到单词print时，解释器就会将括号中的内容打印到屏幕，而不会管括号中的内容是什么。</p>\n<h2 id=\"1-变量\"><a href=\"#1-变量\" class=\"headerlink\" title=\"1.变量\"></a>1.变量</h2><h3 id=\"1-1-格式\"><a href=\"#1-1-格式\" class=\"headerlink\" title=\"1.1 格式\"></a>1.1 格式</h3><p><strong><code>变量名=&quot;变量值&quot;</code></strong></p>\n<p>值得注意的几点：</p>\n<ul>\n<li>格式只能是**<code>变量名=&quot;变量值&quot;</code>**，如<code>name=&quot;张三&quot;</code></li>\n<li>格式不能是**<code>变量名=变量值</code><strong>，这种变量赋值的方法初学者很容易犯，在python中，</strong><code>变量名=变量值</code>**这种写法会被python解释等号两边是两个变量，定义变量的时候，等号后面的变量值一定是被引号包围起来的</li>\n<li>等号两边可以有空格，变量值中的引号可以是单引号或多引号，尤其是当变量值中本来就包含引号时，为了避免歧义就会使用多引号或转义符<code>\\</code></li>\n<li>变量一定是先定义，后使用，没有定义的变量，不能被引用，python将抛出错误</li>\n</ul>\n<h3 id=\"1-2-变量的命名和使用\"><a href=\"#1-2-变量的命名和使用\" class=\"headerlink\" title=\"1.2 变量的命名和使用\"></a>1.2 变量的命名和使用</h3><p>​        在Python中使用变量时，需要遵守下面的命名规范。</p>\n<ul>\n<li><p><strong>变量名只能包含字母、数字和下划线，但不能以数字打头</strong>，此处的字母并不局限于 26 个英文字母，可以包含中文字符、日文字符等。例如，可将变量命名为message_1，但不能将其命名为1_message。</p>\n</li>\n<li><p><strong>变量名不能包含空格，但可使用下划线来分隔其中的单词</strong>。例如，变量名greeting_message可行，但变量名greeting message会引发错误。</p>\n</li>\n<li><p><strong>不要将Python关键字和函数名用作变量名</strong>，即不要使用Python保留用于特殊用途的单词，如print（请参见附录A.4）。</p>\n</li>\n<li><p><strong>变量名应既简短又具有描述性</strong>。例如，name比n好，student_name比s_n好，name_length<br>比length_of_persons_name好。</p>\n</li>\n<li><p><strong>慎用容易引起歧义的字母</strong>，如小写字母l和大写字母O，因为它们可能被人错看成数字1和0。</p>\n</li>\n</ul>\n<p>python关键字：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> keyword</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(keyword.kwlist)</span><br><span class=\"line\">[<span class=\"string\">&#x27;False&#x27;</span>, <span class=\"string\">&#x27;None&#x27;</span>, <span class=\"string\">&#x27;True&#x27;</span>, <span class=\"string\">&#x27;and&#x27;</span>, <span class=\"string\">&#x27;as&#x27;</span>, <span class=\"string\">&#x27;assert&#x27;</span>, <span class=\"string\">&#x27;async&#x27;</span>, <span class=\"string\">&#x27;await&#x27;</span>, <span class=\"string\">&#x27;break&#x27;</span>, <span class=\"string\">&#x27;class&#x27;</span>, <span class=\"string\">&#x27;continue&#x27;</span>, <span class=\"string\">&#x27;def&#x27;</span>, <span class=\"string\">&#x27;del&#x27;</span>, <span class=\"string\">&#x27;elif&#x27;</span>, <span class=\"string\">&#x27;else&#x27;</span>, <span class=\"string\">&#x27;except&#x27;</span>, <span class=\"string\">&#x27;finally&#x27;</span>, <span class=\"string\">&#x27;for&#x27;</span>, <span class=\"string\">&#x27;from&#x27;</span>, <span class=\"string\">&#x27;global&#x27;</span>, <span class=\"string\">&#x27;if&#x27;</span>, <span class=\"string\">&#x27;import&#x27;</span>, <span class=\"string\">&#x27;in&#x27;</span>, <span class=\"string\">&#x27;is&#x27;</span>, <span class=\"string\">&#x27;lambda&#x27;</span>, <span class=\"string\">&#x27;nonlocal&#x27;</span>, <span class=\"string\">&#x27;not&#x27;</span>, <span class=\"string\">&#x27;or&#x27;</span>, <span class=\"string\">&#x27;pass&#x27;</span>, <span class=\"string\">&#x27;raise&#x27;</span>, <span class=\"string\">&#x27;return&#x27;</span>, <span class=\"string\">&#x27;try&#x27;</span>, <span class=\"string\">&#x27;while&#x27;</span>, <span class=\"string\">&#x27;with&#x27;</span>, <span class=\"string\">&#x27;yield&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-3-推荐使用的命令方法\"><a href=\"#1-3-推荐使用的命令方法\" class=\"headerlink\" title=\"1.3 推荐使用的命令方法\"></a>1.3 推荐使用的命令方法</h3><ul>\n<li>驼峰命名法：<ul>\n<li>大驼峰命名法：每个单词的首字母都大写，如<code>StudentName</code></li>\n<li>小驼峰命名法：头一个单词首字母小写，其余单词首字母大写，如<code>studentName</code></li>\n</ul>\n</li>\n<li>下划线连接符命名法，如<code>student_name</code></li>\n</ul>\n<h3 id=\"1-4-python赋值的方法\"><a href=\"#1-4-python赋值的方法\" class=\"headerlink\" title=\"1.4 python赋值的方法\"></a>1.4 python赋值的方法</h3><ul>\n<li>常规赋值：<code>a = 100</code></li>\n<li>链式赋值：<code> a = b = 100</code>，表示<code>a=100</code>，<code>b=100</code></li>\n<li>序列解包赋值： <code>a,b = 100,&quot;zhangsan&quot;</code>，等同于<code>a=100</code>，<code>b=&quot;zhangsan&quot;</code>，此种赋值方法中，等号两边的个数必须相等，否则python将抛出错误</li>\n<li>增量赋值： a+=1，等同于<code>a=a+1</code></li>\n</ul>\n<h3 id=\"1-5-变量与内存\"><a href=\"#1-5-变量与内存\" class=\"headerlink\" title=\"1.5 变量与内存\"></a>1.5 变量与内存</h3><h4 id=\"1-5-1-一个变量一个值\"><a href=\"#1-5-1-一个变量一个值\" class=\"headerlink\" title=\"1.5.1 一个变量一个值\"></a>1.5.1 一个变量一个值</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(a)</span><br><span class=\"line\"><span class=\"number\">140732887802624</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>​        当我们定义一个变量<code>a = 100</code>时，首先程序在内存中开辟了一块内存空间，将变量值<code>100</code>存入了这块内存中，并将变量名<code>a</code>指向了变量值<code>100</code>所在的内存地址，我们使用变量名就可以使用到存放于内存中的变量值。</p>\n<p><img src=\"image-20210502004502042.png\" alt=\"image-20210502004502042\"></p>\n<h4 id=\"1-5-2-同一个变量两个值\"><a href=\"#1-5-2-同一个变量两个值\" class=\"headerlink\" title=\"1.5.2 同一个变量两个值\"></a>1.5.2 同一个变量两个值</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(a)</span><br><span class=\"line\"><span class=\"number\">140732887802624</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"string\">&quot;lisi&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(a)</span><br><span class=\"line\"><span class=\"number\">1518145987568</span></span><br></pre></td></tr></table></figure>\n\n<p>​        如上所示，我们首先定义了一个变量<code>a = 100</code>，然后我们又把<code>&quot;lisi&quot;</code>的值赋给了变量<code>a</code>，即<code>a = &quot;lisi&quot;</code>，变量<code>a</code>在内存中的指向发生了怎样的变化呢？<br>​        首先当我们定义<code>a = 100</code>时，程序在内存中开辟了一块内存空间，将变量值<code>100</code>存入了这块内存中，并将变量名<code>a</code>指向了变量值<code>100</code>所在的内存地址；</p>\n<p>​        当我们将<code>&quot;lisi&quot;</code>的值赋给了变量<code>a</code>时，这时变量名<code>a</code>的指向将从<code>100</code>变成<code>&quot;lisi&quot;</code>，并且变量值<code>100</code>由于没有被变量引用(指向)将等待内存回收，如下图：</p>\n<p><img src=\"image-20210502005348961.png\" alt=\"image-20210502005348961\"></p>\n<h4 id=\"1-5-3-两个变量同一个变量值\"><a href=\"#1-5-3-两个变量同一个变量值\" class=\"headerlink\" title=\"1.5.3 两个变量同一个变量值\"></a>1.5.3 两个变量同一个变量值</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\"><span class=\"number\">1518145988016</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(b)</span><br><span class=\"line\"><span class=\"number\">1518145988016</span></span><br></pre></td></tr></table></figure>\n\n<p>​        如上所示，我们首先定义了一个变量<code>a = &quot;hello&quot;</code>，然后再定义了一个<code>b = &quot;hello&quot;</code>，此时，内存中的指向是怎么样的呢？</p>\n<p>我们不妨来大胆猜想，情况分两种：</p>\n<ol>\n<li><p>程序分别在内存中开辟了两块内存空间，将变量值<code>&quot;hello&quot;</code>存入内存中，并分别将变量名<code>a</code>和<code>b</code>指向了这两个内存空间中的<code>&quot;hello&quot;</code>；</p>\n</li>\n<li><p>程序在内存中只开辟了一个内存空间用于存放变量值<code>&quot;hello&quot;</code>，然后将变量<code>a</code>和<code>b</code>都指向了这块内存空间。</p>\n</li>\n</ol>\n<p>上面的两种猜想都是正确的。</p>\n<p>在python中，从节约内存的角度出发，将一些常用的简单字符串和数字([-5,257))做了优化，将这些变量的指向之前定义过的变量值，而不去重新开辟内存空间。</p>\n<p><strong>字符串</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 简单字符串</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>name = <span class=\"string\">&quot;zhangsan&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(name)</span><br><span class=\"line\"><span class=\"number\">1518145802416</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"string\">&quot;zhangsan&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(a)</span><br><span class=\"line\"><span class=\"number\">1518145802416</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 复杂字符串</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>message1 = <span class=\"string\">&quot;This is a message!&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(message1)</span><br><span class=\"line\"><span class=\"number\">1518145996160</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>message2 = <span class=\"string\">&quot;This is a message!&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">id</span>(message2)</span><br><span class=\"line\"><span class=\"number\">1518145996000</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>数字</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num = []</span><br><span class=\"line\">a = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(-<span class=\"number\">10</span>, <span class=\"number\">300</span>)]</span><br><span class=\"line\">b = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(-<span class=\"number\">10</span>, <span class=\"number\">300</span>)]</span><br><span class=\"line\"><span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"number\">309</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> a[n] <span class=\"keyword\">is</span> b[n]:</span><br><span class=\"line\">        num.append(a[n])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(num)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 结果如下：</span></span><br><span class=\"line\">[-<span class=\"number\">5</span>, -<span class=\"number\">4</span>, -<span class=\"number\">3</span>, -<span class=\"number\">2</span>, -<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">13</span>, <span class=\"number\">14</span>, <span class=\"number\">15</span>, <span class=\"number\">16</span>, <span class=\"number\">17</span>, <span class=\"number\">18</span>, <span class=\"number\">19</span>, <span class=\"number\">20</span>, <span class=\"number\">21</span>, <span class=\"number\">22</span>, <span class=\"number\">23</span>, <span class=\"number\">24</span>, <span class=\"number\">25</span>, <span class=\"number\">26</span>, <span class=\"number\">27</span>, <span class=\"number\">28</span>, <span class=\"number\">29</span>, <span class=\"number\">30</span>, <span class=\"number\">31</span>, <span class=\"number\">32</span>, <span class=\"number\">33</span>, <span class=\"number\">34</span>, <span class=\"number\">35</span>, <span class=\"number\">36</span>, <span class=\"number\">37</span>, <span class=\"number\">38</span>, <span class=\"number\">39</span>, <span class=\"number\">40</span>, <span class=\"number\">41</span>, <span class=\"number\">42</span>, <span class=\"number\">43</span>, <span class=\"number\">44</span>, <span class=\"number\">45</span>, <span class=\"number\">46</span>, <span class=\"number\">47</span>, <span class=\"number\">48</span>, <span class=\"number\">49</span>, <span class=\"number\">50</span>, <span class=\"number\">51</span>, <span class=\"number\">52</span>, <span class=\"number\">53</span>, <span class=\"number\">54</span>, <span class=\"number\">55</span>, <span class=\"number\">56</span>, <span class=\"number\">57</span>, <span class=\"number\">58</span>, <span class=\"number\">59</span>, <span class=\"number\">60</span>, <span class=\"number\">61</span>, <span class=\"number\">62</span>, <span class=\"number\">63</span>, <span class=\"number\">64</span>, <span class=\"number\">65</span>, <span class=\"number\">66</span>, <span class=\"number\">67</span>, <span class=\"number\">68</span>, <span class=\"number\">69</span>, <span class=\"number\">70</span>, <span class=\"number\">71</span>, <span class=\"number\">72</span>, <span class=\"number\">73</span>, <span class=\"number\">74</span>, <span class=\"number\">75</span>, <span class=\"number\">76</span>, <span class=\"number\">77</span>, <span class=\"number\">78</span>, <span class=\"number\">79</span>, <span class=\"number\">80</span>, <span class=\"number\">81</span>, <span class=\"number\">82</span>, <span class=\"number\">83</span>, <span class=\"number\">84</span>, <span class=\"number\">85</span>, <span class=\"number\">86</span>, <span class=\"number\">87</span>, <span class=\"number\">88</span>, <span class=\"number\">89</span>, <span class=\"number\">90</span>, <span class=\"number\">91</span>, <span class=\"number\">92</span>, <span class=\"number\">93</span>, <span class=\"number\">94</span>, <span class=\"number\">95</span>, <span class=\"number\">96</span>, <span class=\"number\">97</span>, <span class=\"number\">98</span>, <span class=\"number\">99</span>, <span class=\"number\">100</span>, <span class=\"number\">101</span>, <span class=\"number\">102</span>, <span class=\"number\">103</span>, <span class=\"number\">104</span>, <span class=\"number\">105</span>, <span class=\"number\">106</span>, <span class=\"number\">107</span>, <span class=\"number\">108</span>, <span class=\"number\">109</span>, <span class=\"number\">110</span>, <span class=\"number\">111</span>, <span class=\"number\">112</span>, <span class=\"number\">113</span>, <span class=\"number\">114</span>, <span class=\"number\">115</span>, <span class=\"number\">116</span>, <span class=\"number\">117</span>, <span class=\"number\">118</span>, <span class=\"number\">119</span>, <span class=\"number\">120</span>, <span class=\"number\">121</span>, <span class=\"number\">122</span>, <span class=\"number\">123</span>, <span class=\"number\">124</span>, <span class=\"number\">125</span>, <span class=\"number\">126</span>, <span class=\"number\">127</span>, <span class=\"number\">128</span>, <span class=\"number\">129</span>, <span class=\"number\">130</span>, <span class=\"number\">131</span>, <span class=\"number\">132</span>, <span class=\"number\">133</span>, <span class=\"number\">134</span>, <span class=\"number\">135</span>, <span class=\"number\">136</span>, <span class=\"number\">137</span>, <span class=\"number\">138</span>, <span class=\"number\">139</span>, <span class=\"number\">140</span>, <span class=\"number\">141</span>, <span class=\"number\">142</span>, <span class=\"number\">143</span>, <span class=\"number\">144</span>, <span class=\"number\">145</span>, <span class=\"number\">146</span>, <span class=\"number\">147</span>, <span class=\"number\">148</span>, <span class=\"number\">149</span>, <span class=\"number\">150</span>, <span class=\"number\">151</span>, <span class=\"number\">152</span>, <span class=\"number\">153</span>, <span class=\"number\">154</span>, <span class=\"number\">155</span>, <span class=\"number\">156</span>, <span class=\"number\">157</span>, <span class=\"number\">158</span>, <span class=\"number\">159</span>, <span class=\"number\">160</span>, <span class=\"number\">161</span>, <span class=\"number\">162</span>, <span class=\"number\">163</span>, <span class=\"number\">164</span>, <span class=\"number\">165</span>, <span class=\"number\">166</span>, <span class=\"number\">167</span>, <span class=\"number\">168</span>, <span class=\"number\">169</span>, <span class=\"number\">170</span>, <span class=\"number\">171</span>, <span class=\"number\">172</span>, <span class=\"number\">173</span>, <span class=\"number\">174</span>, <span class=\"number\">175</span>, <span class=\"number\">176</span>, <span class=\"number\">177</span>, <span class=\"number\">178</span>, <span class=\"number\">179</span>, <span class=\"number\">180</span>, <span class=\"number\">181</span>, <span class=\"number\">182</span>, <span class=\"number\">183</span>, <span class=\"number\">184</span>, <span class=\"number\">185</span>, <span class=\"number\">186</span>, <span class=\"number\">187</span>, <span class=\"number\">188</span>, <span class=\"number\">189</span>, <span class=\"number\">190</span>, <span class=\"number\">191</span>, <span class=\"number\">192</span>, <span class=\"number\">193</span>, <span class=\"number\">194</span>, <span class=\"number\">195</span>, <span class=\"number\">196</span>, <span class=\"number\">197</span>, <span class=\"number\">198</span>, <span class=\"number\">199</span>, <span class=\"number\">200</span>, <span class=\"number\">201</span>, <span class=\"number\">202</span>, <span class=\"number\">203</span>, <span class=\"number\">204</span>, <span class=\"number\">205</span>, <span class=\"number\">206</span>, <span class=\"number\">207</span>, <span class=\"number\">208</span>, <span class=\"number\">209</span>, <span class=\"number\">210</span>, <span class=\"number\">211</span>, <span class=\"number\">212</span>, <span class=\"number\">213</span>, <span class=\"number\">214</span>, <span class=\"number\">215</span>, <span class=\"number\">216</span>, <span class=\"number\">217</span>, <span class=\"number\">218</span>, <span class=\"number\">219</span>, <span class=\"number\">220</span>, <span class=\"number\">221</span>, <span class=\"number\">222</span>, <span class=\"number\">223</span>, <span class=\"number\">224</span>, <span class=\"number\">225</span>, <span class=\"number\">226</span>, <span class=\"number\">227</span>, <span class=\"number\">228</span>, <span class=\"number\">229</span>, <span class=\"number\">230</span>, <span class=\"number\">231</span>, <span class=\"number\">232</span>, <span class=\"number\">233</span>, <span class=\"number\">234</span>, <span class=\"number\">235</span>, <span class=\"number\">236</span>, <span class=\"number\">237</span>, <span class=\"number\">238</span>, <span class=\"number\">239</span>, <span class=\"number\">240</span>, <span class=\"number\">241</span>, <span class=\"number\">242</span>, <span class=\"number\">243</span>, <span class=\"number\">244</span>, <span class=\"number\">245</span>, <span class=\"number\">246</span>, <span class=\"number\">247</span>, <span class=\"number\">248</span>, <span class=\"number\">249</span>, <span class=\"number\">250</span>, <span class=\"number\">251</span>, <span class=\"number\">252</span>, <span class=\"number\">253</span>, <span class=\"number\">254</span>, <span class=\"number\">255</span>, <span class=\"number\">256</span>]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-6-is和\"><a href=\"#1-6-is和\" class=\"headerlink\" title=\"1.6 is和==\"></a>1.6 <code>is</code>和<code>==</code></h3><p>​        在python中，<code>is</code>比较的是两个变量的内存值(内存空间)是否一致，<code>==</code>比较的是变量值是否相同。</p>\n<p>​        <code>==</code>比较变量值是否一样，通过肉眼可以查看到。但是通过<code>is</code>比较内存值是否一致时，我们需要考虑两方面的问题：</p>\n<ul>\n<li>简单字符串和[-5,257)之间的数字</li>\n<li>代码块：<ul>\n<li><strong>如果在同一代码块下</strong>，则采用同一代码块下的换缓存机制(即先将值保留在字典中，若后续的变量使用了相同的值，则直接将新变量指向该值，不再创建新的变量值，若不存在才创建新的变量值)。</li>\n<li><strong>如果在不同代码块中</strong>，则采用小数据池的驻留机制。</li>\n<li><strong>适用范围</strong>：仅限字符串、整形、布尔型，其他的数据类型，如列表、字典、元组等不适用该规则</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 简单字符串</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"string\">&quot;zhangsan&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = <span class=\"string\">&quot;zhangsan&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a <span class=\"keyword\">is</span> b</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a == b</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 复杂字符串</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>message1 = <span class=\"string\">&quot;This is a message!&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>message2 = <span class=\"string\">&quot;This is a message!&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>message1 <span class=\"keyword\">is</span> message2</span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>message1 == message2</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>\n\n<p>同一代码块下的结果：</p>\n<p><img src=\"image-20210502014359358.png\" alt=\"image-20210502014359358\"></p>\n<p>不同代码块下的结果：</p>\n<p><img src=\"image-20210502014435283.png\" alt=\"image-20210502014435283\"></p>\n<p><strong>案例：</strong></p>\n<p><strong>1.使用汉字作为变量(不推荐)</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>名字=<span class=\"string\">&quot;zhangsan&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(名字)</span><br><span class=\"line\">zhangsan</span><br></pre></td></tr></table></figure>\n\n<p><strong>2.变量值包含引号</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>message = <span class=\"string\">&quot;This&#x27;s an apple&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(message)</span><br><span class=\"line\">This<span class=\"string\">&#x27;s an apple</span></span><br></pre></td></tr></table></figure>\n\n<p>​        案例中This’s an apple中包含单引号，如果再使用单引号，则将引起歧义，python将抛出错误。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>message = <span class=\"string\">&#x27;This&#x27;</span>s an apple<span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&gt;&gt;&gt; print(message)</span></span><br><span class=\"line\"><span class=\"string\">## 执行后结果如下：</span></span><br><span class=\"line\"><span class=\"string\">  File &quot;test.py&quot;, line 4</span></span><br><span class=\"line\"><span class=\"string\">    message = &#x27;</span>This<span class=\"string\">&#x27;s an apple&#x27;</span>  <span class=\"comment\"># python将&#x27;This&#x27;当成了一个整体，&#x27;This&#x27;后面的字符串就搞蒙了python，因此抛出错误</span></span><br><span class=\"line\">                    ^</span><br><span class=\"line\">SyntaxError: invalid syntax   <span class=\"comment\"># 提示语法错误</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>3.定义变量时，等号后边不含引号</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>n = zhangsan</span><br></pre></td></tr></table></figure>\n\n<p>​        这种情况下，python会认为等号两边都是变量，即将变量<code>zhangsan</code>的值赋给变量<code>n</code>，这种情况需要分两种情况说明：</p>\n<ul>\n<li>如果上文中定义了<code>zhangsan</code>的值，即<code>zhangsan</code>是原本就是一个变量名，那么等式成立</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>zhangsan = <span class=\"number\">28</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>n = zhangsan   <span class=\"comment\"># 等同于n = zhangsan = 28，即先定义变量zhangsan，再将变量zhangsan的值赋给了n</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>如果上文没有定义<code>zhangsan</code>，那么python将抛出错误，即<strong>变量一定是先定义，后使用</strong>，此时我们重新打开cmd</li>\n</ul>\n<p><img src=\"image-20210421111639194.png\" alt=\"image-20210421111639194\"></p>\n<h2 id=\"2-注释\"><a href=\"#2-注释\" class=\"headerlink\" title=\"2 注释\"></a>2 注释</h2><p>​        python中使用井号（”#”）和三引号(单三引号或双三引号)进行注释，被注释的行将不会被执行。</p>\n<ul>\n<li>单行注释：<code>#</code></li>\n<li>多行注释：<code>&quot;&quot;&quot;</code>、<code>&#39;&#39;&#39;</code></li>\n</ul>\n<h3 id=\"2-1-当行注释\"><a href=\"#2-1-当行注释\" class=\"headerlink\" title=\"2.1 当行注释\"></a>2.1 当行注释</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 输入用户名</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;------&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>执行结果为：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">------</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-多行注释\"><a href=\"#2-2-多行注释\" class=\"headerlink\" title=\"2.2 多行注释\"></a>2.2 多行注释</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;------&quot;</span>)</span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">这里是注释信息，这里将不会被执行</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;------&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>执行结果为：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">------</span><br><span class=\"line\">------</span><br></pre></td></tr></table></figure>\n\n<p>关于注释需要注意的几点：</p>\n<ul>\n<li>一定要养成写注释的习惯，认真写注释不仅是对自己也是对阅读代码的人的尊重</li>\n<li>注释一定要简明扼要的阐述代码的目的</li>\n<li>注释一定要规范，此处要求的规范可以是大多数人的习惯，也可以是公司对代码注释的规定</li>\n<li>注释信息可以帮助调试代码</li>\n</ul>\n<h2 id=\"3-缩进\"><a href=\"#3-缩进\" class=\"headerlink\" title=\"3. 缩进\"></a>3. 缩进</h2><p>​        和其它程序设计语言（如 Java、C 语言）采用大括号“{}”分隔代码块不同，Python采用代码缩进和冒号（ : ）来区分代码块之间的层次。</p>\n<p>​        在 Python 中，对于类定义、函数定义、流程控制语句、异常处理语句等，<strong>行尾的冒号和下一行的缩进，表示下一个代码块的开始，而缩进的结束则表示此代码块的结束</strong>。</p>\n<p>​        注意，Python 中实现对代码的缩进，可以使用空格或者 Tab 键实现。但无论是手动敲空格，还是使用 Tab 键，<strong>通常情况下都是采用 4 个空格(约定熟成规范)长度作为一个缩进量</strong>（默认情况下，一个 Tab 键就表示 4 个空格）。</p>\n<p>​        Python 对代码的缩进要求非常严格，<strong>同一个级别代码块的缩进量必须一样</strong>，否则解释器会报<code> IndentationError</code>异常错误。</p>\n<p><img src=\"image-20210502095555498.png\" alt=\"image-20210502095555498\"></p>\n<h2 id=\"4-python之禅\"><a href=\"#4-python之禅\" class=\"headerlink\" title=\"4. python之禅\"></a>4. python之禅</h2><p>​        python之禅阐述了python的编码的原则和设计理念。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> this</span><br><span class=\"line\">The Zen of Python, by Tim Peters</span><br><span class=\"line\"></span><br><span class=\"line\">Beautiful <span class=\"keyword\">is</span> better than ugly.</span><br><span class=\"line\">Explicit <span class=\"keyword\">is</span> better than implicit.</span><br><span class=\"line\">Simple <span class=\"keyword\">is</span> better than <span class=\"built_in\">complex</span>.</span><br><span class=\"line\">Complex <span class=\"keyword\">is</span> better than complicated.</span><br><span class=\"line\">Flat <span class=\"keyword\">is</span> better than nested.</span><br><span class=\"line\">Sparse <span class=\"keyword\">is</span> better than dense.</span><br><span class=\"line\">Readability counts.</span><br><span class=\"line\">Special cases aren<span class=\"string\">&#x27;t special enough to break the rules.</span></span><br><span class=\"line\"><span class=\"string\">Although practicality beats purity.</span></span><br><span class=\"line\"><span class=\"string\">Errors should never pass silently.</span></span><br><span class=\"line\"><span class=\"string\">Unless explicitly silenced.</span></span><br><span class=\"line\"><span class=\"string\">In the face of ambiguity, refuse the temptation to guess.</span></span><br><span class=\"line\"><span class=\"string\">There should be one-- and preferably only one --obvious way to do it.</span></span><br><span class=\"line\"><span class=\"string\">Although that way may not be obvious at first unless you&#x27;</span>re Dutch.</span><br><span class=\"line\">Now <span class=\"keyword\">is</span> better than never.</span><br><span class=\"line\">Although never <span class=\"keyword\">is</span> often better than *right* now.</span><br><span class=\"line\">If the implementation <span class=\"keyword\">is</span> hard to explain, it<span class=\"string\">&#x27;s a bad idea.</span></span><br><span class=\"line\"><span class=\"string\">If the implementation is easy to explain, it may be a good idea.</span></span><br><span class=\"line\"><span class=\"string\">Namespaces are one honking great idea -- let&#x27;</span>s do more of those!</span><br></pre></td></tr></table></figure>\n\n<p>翻译如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Python之禅 by Tim Peters</span><br><span class=\"line\"> </span><br><span class=\"line\">优美胜于丑陋（Python 以编写优美的代码为目标）</span><br><span class=\"line\">明了胜于晦涩（优美的代码应当是明了的，命名规范，风格相似）</span><br><span class=\"line\">简洁胜于复杂（优美的代码应当是简洁的，不要有复杂的内部实现）</span><br><span class=\"line\">复杂胜于凌乱（如果复杂不可避免，那代码间也不能有难懂的关系，要保持接口简洁）</span><br><span class=\"line\">扁平胜于嵌套（优美的代码应当是扁平的，不能有太多的嵌套）</span><br><span class=\"line\">间隔胜于紧凑（优美的代码有适当的间隔，不要奢望一行代码解决问题）</span><br><span class=\"line\">可读性很重要（优美的代码是可读的）</span><br><span class=\"line\">即便假借特例的实用性之名，也不可违背这些规则（这些规则至高无上）</span><br><span class=\"line\">不要包容所有错误，除非你确定需要这样做（精准地捕获异常，不写 <span class=\"keyword\">except</span>:<span class=\"keyword\">pass</span> 风格的代码）</span><br><span class=\"line\">当存在多种可能，不要尝试去猜测</span><br><span class=\"line\">而是尽量找一种，最好是唯一一种明显的解决方案（如果不确定，就用穷举法）</span><br><span class=\"line\">虽然这并不容易，因为你不是 Python 之父（这里的 Dutch 是指 Guido ）</span><br><span class=\"line\">做也许好过不做，但不假思索就动手还不如不做（动手之前要细思量）</span><br><span class=\"line\">如果你无法向人描述你的方案，那肯定不是一个好方案；反之亦然（方案测评标准）</span><br><span class=\"line\">命名空间是一种绝妙的理念，我们应当多加利用（倡导与号召）</span><br></pre></td></tr></table></figure>\n","comments":true,"permalink":"https://qingdalf.github.io/2021-05/pPre/","categories":[{"name":"python","slug":"python","permalink":"https://qingdalf.github.io/categories/python/"}],"tags":[]},{"title":"杂谈","date":"2021-04-18T10:18:18.000Z","path":"2021-04/experience/","content":"","comments":true,"permalink":"https://qingdalf.github.io/2021-04/experience/","categories":[],"tags":[]},{"title":"DevOpsContents","date":"2021-04-18T03:54:03.000Z","path":"2021-04/DevOpsContents/","content":"<ul>\n<li>自动化运维工具ansible：<ol>\n<li>ansible基础：<a href=\"https://qingdalf.github.io/2021-05/ansibleBase/\">https://qingdalf.github.io/2021-05/ansibleBase/</a></li>\n<li>ansible模块：<a href=\"https://qingdalf.github.io/2021-05/ansibleModuls/\">https://qingdalf.github.io/2021-05/ansibleModuls/</a></li>\n<li>ansible进阶：<a href=\"https://qingdalf.github.io/2021-05/ansibleAdvanced/\">https://qingdalf.github.io/2021-05/ansibleAdvanced/</a></li>\n<li>ansible剧本：<a href=\"https://qingdalf.github.io/2021-05/ansiblePlaybook/\">https://qingdalf.github.io/2021-05/ansiblePlaybook/</a></li>\n</ol>\n</li>\n<li>自动化运维工具git和gitlab</li>\n</ul>\n","comments":true,"permalink":"https://qingdalf.github.io/2021-04/DevOpsContents/","categories":[],"tags":[]},{"title":"kContents","date":"2021-04-18T03:49:12.000Z","path":"2021-04/kContents/","content":"<p>docker基础知识：</p>\n<ul>\n<li>docker基础知识–1.docker开篇–容器：<a href=\"https://qingdalf.github.io/2021-05/dockerPre/\">https://qingdalf.github.io/2021-05/dockerPre/</a></li>\n<li>docker基础知识–2.docker介绍：<a href=\"https://qingdalf.github.io/2021-05/dockerIntroduction/\">https://qingdalf.github.io/2021-05/dockerIntroduction/</a></li>\n<li>docker基础知识–3.docker安装和运行容器的方式：<a href=\"https://qingdalf.github.io/2021-05/dockerInstall/\">https://qingdalf.github.io/2021-05/dockerInstall/</a></li>\n<li>docker基础知识–4.docker生命周期：<a href=\"https://qingdalf.github.io/2021-05/dockerLifeCycle/\">https://qingdalf.github.io/2021-05/dockerLifeCycle/</a></li>\n<li>docker基础知识–5.docker镜像：<a href=\"https://qingdalf.github.io/2021-05/dockerImage/\">https://qingdalf.github.io/2021-05/dockerImage/</a></li>\n<li>docker基础知识–6.docker容器四种网络模式：<a href=\"https://qingdalf.github.io/2021-05/dockerNetwork/\">https://qingdalf.github.io/2021-05/dockerNetwork/</a></li>\n<li>docker基础知识–7.docker网络进阶：<a href=\"https://qingdalf.github.io/2021-05/dockerNetAdvance/\">https://qingdalf.github.io/2021-05/dockerNetAdvance/</a></li>\n<li>docker基础知识–8.两个常见的docker网络问题：<a href=\"https://qingdalf.github.io/2021-05/dockerNetQuestion/\">https://qingdalf.github.io/2021-05/dockerNetQuestion/</a></li>\n<li>docker基础知识–9.docker存储：<a href=\"https://qingdalf.github.io/2021-05/dockerVolumes/\">https://qingdalf.github.io/2021-05/dockerVolumes/</a></li>\n<li>docker基础知识–10.基于容器制作docker镜像：<a href=\"https://qingdalf.github.io/2021-05/dockerImageMake/\">https://qingdalf.github.io/2021-05/dockerImageMake/</a></li>\n<li>docker基础知识–11.基于Dockerfile文件制作docker镜像：<a href=\"https://qingdalf.github.io/2021-05/dockerFile/\">https://qingdalf.github.io/2021-05/dockerFile/</a></li>\n<li>docker基础知识–12.docker镜像仓库：<a href=\"https://qingdalf.github.io/2021-05/dockerRegistory/\">https://qingdalf.github.io/2021-05/dockerRegistory/</a></li>\n<li>docker基础知识–13.docker Harbor仓库：<a href=\"https://qingdalf.github.io/2021-05/dockerHarbor/\">https://qingdalf.github.io/2021-05/dockerHarbor/</a></li>\n<li>docker基础知识–14.prometheus+grafana监控docker主机和容器：<a href=\"https://qingdalf.github.io/2021-05/dockerMonitor/\">https://qingdalf.github.io/2021-05/dockerMonitor/</a></li>\n</ul>\n<p>kubernets基础知识：</p>\n<ul>\n<li>kubernets基础知识–1.kubernets简介：<a href=\"https://qingdalf.github.io/2021-05/kuberPre/\">https://qingdalf.github.io/2021-05/kuberPre/</a></li>\n<li>kubernets基础知识–2.kubernets集群搭建：<a href=\"https://qingdalf.github.io/2021-05/kuberInstall/\">https://qingdalf.github.io/2021-05/kuberInstall/</a></li>\n<li>kubernets基础知识–3.kubernets容器引擎切换：<a href=\"https://qingdalf.github.io/2021-05/kuberRuncSwitch/\">https://qingdalf.github.io/2021-05/kuberRuncSwitch/</a></li>\n<li>kubernets基础知识–4.kubernets管理命令：<a href=\"https://qingdalf.github.io/2021-05/kuberMangerment/\">https://qingdalf.github.io/2021-05/kuberMangerment/</a></li>\n<li>kubernets基础知识–5.快熟部署一个网站：<a href=\"https://qingdalf.github.io/2021-05/kuberMakeWeb/\">https://qingdalf.github.io/2021-05/kuberMakeWeb/</a></li>\n<li>kubernets基础知识–6.认识yaml：<a href=\"https://qingdalf.github.io/2021-05/kuberYaml/\">https://qingdalf.github.io/2021-05/kuberYaml/</a></li>\n<li>kubernets基础知识–7.Pod基本管理：<a href=\"https://qingdalf.github.io/2021-05/kuberMangerment/\">https://qingdalf.github.io/2021-05/kuberMangerment/</a></li>\n<li>kubernets基础知识–8.Pod调度：<a href=\"https://qingdalf.github.io/2021-05/kuberScheduler/\">https://qingdalf.github.io/2021-05/kuberScheduler/</a></li>\n<li>kubernets基础知识–9.k8s中项目生命周期：<a href=\"https://qingdalf.github.io/2021-05/kuberLifeCycle/\">https://qingdalf.github.io/2021-05/kuberLifeCycle/</a></li>\n<li>kubernets基础知识–9.Service管理：<a href=\"https://qingdalf.github.io/2021-05/kuberService/\">https://qingdalf.github.io/2021-05/kuberService/</a></li>\n<li>kubernets基础知识–10.Ingress管理：<a href=\"https://qingdalf.github.io/2021-05/kuberIngress/\">https://qingdalf.github.io/2021-05/kuberIngress/</a></li>\n<li>kubernets基础知识–11.pv、pvc和pv的动态供给：<a href=\"https://qingdalf.github.io/2021-05/kuberStorage/\">https://qingdalf.github.io/2021-05/kuberStorage/</a></li>\n<li>kubernets基础知识–12.Kubernets安全框架：<a href=\"https://qingdalf.github.io/2021-05/kuberSecretArch/\">https://qingdalf.github.io/2021-05/kuberSecretArch/</a></li>\n<li>kubernets基础知识–13.Kubernets部署利器helm：<a href=\"https://qingdalf.github.io/2021-05/kuberHelm/\">https://qingdalf.github.io/2021-05/kuberHelm/</a></li>\n<li>kubernets基础知识–14.Kubernets项目案例：<a href=\"https://qingdalf.github.io/2021-05/kuberExample/\">https://qingdalf.github.io/2021-05/kuberExample/</a></li>\n</ul>\n<p>kubernets使用过程中的错误总结：</p>\n<ul>\n<li>使用kubeadm安装k8s时写错控制节点ip地址：<a href=\"https://qingdalf.github.io/2021-05/kuberErr/\">https://qingdalf.github.io/2021-05/kuberErr/</a></li>\n</ul>\n","comments":true,"permalink":"https://qingdalf.github.io/2021-04/kContents/","categories":[],"tags":[]},{"title":"lContents","date":"2021-04-18T02:54:28.000Z","path":"2021-04/lContents/","content":"","comments":true,"permalink":"https://qingdalf.github.io/2021-04/lContents/","categories":[],"tags":[]},{"title":"pContents","date":"2021-04-18T02:23:40.000Z","path":"2021-04/pContents/","content":"<h2 id=\"python入门知识：\"><a href=\"#python入门知识：\" class=\"headerlink\" title=\"python入门知识：\"></a>python入门知识：</h2><ul>\n<li>安装python：<a href=\"https://qingdalf.github.io/2021-05/pInstall/\">https://qingdalf.github.io/2021-05/pInstall/</a></li>\n<li>python基础知识–变量和字符串：<a href=\"https://qingdalf.github.io/2021-05/pVarString/\">https://qingdalf.github.io/2021-05/pVarString/</a></li>\n<li>python基础知识–列表：<a href=\"https://qingdalf.github.io/2021-05/pList/\">https://qingdalf.github.io/2021-05/pList/</a></li>\n<li>python基础知识–元组：<a href=\"https://qingdalf.github.io/2021-05/pTuple/\">https://qingdalf.github.io/2021-05/pTuple/</a></li>\n<li>python基础知识–if语句：<a href=\"https://qingdalf.github.io/2021-05/pIf/\">https://qingdalf.github.io/2021-05/pIf/</a></li>\n</ul>\n","comments":true,"permalink":"https://qingdalf.github.io/2021-04/pContents/","categories":[],"tags":[]},{"title":"aboutme","date":"2021-04-18T00:18:18.000Z","path":"2021-04/aboutme/","content":"<hr>\n<hr>\n\n<center>\n    <p>贺新郎·甚矣吾衰矣</p>\n</center>\n\n<center>\n    <p>【作者】辛弃疾 【朝代】宋</p>\n</center>\n\n<p>邑中园亭，仆皆为赋此词。一日，独坐停云，水声山色，竞来相娱。意溪山欲援例者，遂作数语，庶几仿佛渊明思亲友之意云。</p><br>\n<span id=\"more\"></span>\n<p>甚矣吾衰矣。怅平生、交游零落，只今余几！白发空垂三千丈，一笑人间万事。问何物、能令公喜？我见青山多妩媚，料青山见我应如是。情与貌，略相似。</p><br>\n<p>一尊搔首东窗里。想渊明、停云诗就，此时风味。江左沉酣求名者，岂识浊醪妙理。回首叫、云飞风起。不恨古人吾不见，恨古人、不见吾狂耳。知我者，二三子。</p><br>\n","comments":true,"permalink":"https://qingdalf.github.io/2021-04/aboutme/","categories":[],"tags":[]},{"title":"welcome","date":"2021-04-18T00:08:08.000Z","path":"2021-04/welcome/","content":"<hr>\n<center>welcome to my blog！</center>\n本博客将用来记录一些笔记或人生感悟。\n<hr>\n\n<p>关于阅读：</p>\n<ul>\n<li>可通过网页左边的<code>分类</code>访问具体的分类子目录，为方便阅读，<code>分类</code>链接了各分类下的文章目录，如“python”分类下是关于python的所有文章；“kubernets”分类下是所有关于kubernets和docker的文章，以此类推。</li>\n<li>也可以通过本页下方的<code>分类</code>访问分类子目录 </li>\n</ul>\n<p>分类</p>\n<ul>\n<li>Home：<a href=\"https://scaven.site/2021-04/welcome/\">https://scaven.site/2021-04/welcome/</a></li>\n<li>Linux：<a href=\"https://scaven.site/2021-04/lContents/\">https://scaven.site/2021-04/lContents/</a></li>\n<li>Python：<a href=\"https://scaven.site/2021-04/pContents/\">https://scaven.site/2021-04/pContents/</a></li>\n<li>Kubernets：<a href=\"https://scaven.site/2021-04/kContents/\">https://scaven.site/2021-04/kContents/</a></li>\n<li>DevOps：<a href=\"https://scaven.site/2021-04/DevOpsContents/\">https://scaven.site/2021-04/DevOpsContents/</a></li>\n<li>AboutMe：<a href=\"https://scaven.site/2021-04/aboutme/\">https://scaven.site/2021-04/aboutme/</a></li>\n</ul>\n<p>说明：</p>\n<ul>\n<li>本博客仅作为个人笔记整理，笔记中某些图片或内容可能来自网络摘录(尤其是理论类)，由于个人能力有限，笔记中可能存在错误，若博客有阅读者，请斟酌阅读和酌情使用，若有错误之处也可通过左边邮件指出。</li>\n<li>关于摘录和网络图片的说明：博客中笔记是本人从事IT行业至今的一部分笔记整理，由于时间过长，因此有些内容摘录或网络图片不能指出参考文件，请见谅，若原作者认为侵权或要求删除请通过微博或邮件联系本人，联系方式详见左边微博(不常用)或邮箱(常用)图标。</li>\n</ul>\n","comments":true,"permalink":"https://qingdalf.github.io/2021-04/welcome/","categories":[],"tags":[]}]